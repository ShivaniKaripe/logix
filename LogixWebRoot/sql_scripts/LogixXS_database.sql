-- -----------------------------------------------------------------------------------------------
-- LogixXS script
-- Generated by sqlcat_db.py ( $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $ )
-- Generated 2019-08-19 11:58:46
-- Build Version: 7.3.1.138972
-- -----------------------------------------------------------------------------------------------
print CURRENT_TIMESTAMP;
print 'Beginning LogixXS script on'
print @@VERSION;
print 'Using database ' + DB_NAME() + ' on ' + @@SERVERNAME;
print 'Running as user ' + SYSTEM_USER;

print 'Upgrading database ' + DB_NAME();
IF OBJECT_ID ( N'dbo.DBVersion', N'FN') IS NOT NULL
    print ' from DBVersion ' + [dbo].[DBVersion]();
print ' to 7.3.1.138972 (generated 2019-08-19 11:58:46)'

declare @dbn nvarchar(255)
set @dbn = db_name()

declare @error_msg_format nvarchar(512)
set @error_msg_format = CHAR(13) + CHAR(13) + 'THIS IS THE WRONG DATABASE (%s)' + CHAR(13) + CHAR(13)

IF db_name() = 'master'
BEGIN
    RAISERROR( @error_msg_format, 20, 1, @dbn ) WITH LOG, NOWAIT
END

IF OBJECT_ID ( N'dbo.LogixDBName', N'FN') IS NOT NULL
BEGIN
    IF [dbo].[LogixDBName]() <> 'LogixXS'
    BEGIN
        RAISERROR( @error_msg_format, 20, 1, @dbn ) WITH LOG, NOWAIT
    END
END

IF NOT EXISTS (SELECT * FROM fn_my_permissions (db_name(), 'DATABASE') WHERE permission_name='ALTER')
BEGIN
    declare @error_permission nvarchar(256)
    set @error_permission = CHAR(13) + CHAR(13) + 'This user does not have sufficient permissions to run this script. It must be run by a member of the sysadmin fixed server role or a user with ALTER TRACE and ALTER DATABASE permissions.' + CHAR(13) + CHAR(13)
    RAISERROR( @error_permission, 18, 1 ) WITH NOWAIT
END

SET NOCOUNT ON;

--
-- -- DEFAULT CONSTRAINT renaming code --
-- Creates a stored proc to rename mis-named DEFAULT CONSTRAINTs, calls that stored proc, then DROPs that stored proc when it is no longer needed.
--
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Logix_FixDefaultConstraintNames]') AND type in (N'P', N'PC'))
BEGIN
    DROP PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
END
GO

CREATE PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
AS
BEGIN

    SET NOCOUNT ON
    declare @keepgoing as bit
    set @keepgoing = 1
    while ( @keepgoing = 1 )
    BEGIN
        set @keepgoing = 0

        DECLARE @cmd as nvarchar(512);
		    DECLARE @DFcmd as nvarchar(256);
		    DECLARE @DFObject as nvarchar(256);
        SELECT TOP 1 @DFObject = 'DF_' + OBJECT_NAME(dc.parent_object_id) + '_' + columnList.COLUMN_NAME, @cmd = 'dbo.sp_rename ' + dc.name + ', DF_' + OBJECT_NAME(dc.parent_object_id) + '_' + columnList.COLUMN_NAME + ', OBJECT ;'
                            FROM sys.default_constraints as dc
                            INNER JOIN INFORMATION_SCHEMA.COLUMNS AS columnList ON
                                columnList.TABLE_NAME = OBJECT_NAME(dc.parent_object_id) AND columnList.ORDINAL_POSITION = dc.parent_column_id
                        WHERE dc.is_system_named = 1
                            and SUBSTRING ( dc.name, 1, 4 ) = 'DF__'
                            and object_name(dc.parent_object_id) not like 'sys[^_]%'
                            and object_name(dc.parent_object_id) not like 'MS[a-z]%'
                            and objectproperty(dc.parent_object_id, 'IsUserTable') = 1
                            and objectproperty(dc.parent_object_id, 'IsMSShipped') = 0

        IF @@ROWCOUNT > 0
        BEGIN
            print 'Renaming incorrectly named DEFAULT CONSTRAINT ( ' + @cmd + ' )'
			      IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(@DFObject) AND type = 'D')
			      BEGIN
			        SET @DFcmd = 'ALTER TABLE [dbo].[CPE_Incentives] DROP CONSTRAINT ' +@DFObject;
			        EXEC( @DFcmd );
			      END
            EXEC( @cmd );
            set @keepgoing = 1
        END

    END -- while

END -- Logix_FixDefaultConstraintNames
GO

EXEC [dbo].[Logix_FixDefaultConstraintNames]
GO

DROP PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
GO

-- DEFAULT CONSTRAINT renaming complete


-- END SCRIPT HEADER ------------------------------------------------------


--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/tables/ --
--
print 'processing tables/DBA.PD_ActivityMonitor.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	vii)	DBA.PD_ActivityMonitor

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_ActivityMonitor' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_ActivityMonitor(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_ActivityMonitor_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_ActivityMonitor_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Session_ID 						SMALLINT 			NOT NULL
			, User_Process 						CHAR(1) 			NULL
			, Login_Name						NVARCHAR(128) 		NOT NULL
			, Database_Name						NVARCHAR(128) 		NOT NULL
			, Task_State 						NVARCHAR(60) 		NOT NULL
			, Command 							NVARCHAR(50) 		NOT NULL
			, Application_Name					NVARCHAR(128) 		NOT NULL
			, Wait_Time_in_ms 					BIGINT 				NOT NULL
			, Wait_Type 						NVARCHAR(60) 		NOT NULL
			, Wait_Resource 					NVARCHAR(1024) 		NOT NULL
			, Blocked_By 						VARCHAR(30) 		NOT NULL
			, Head_Blocker 						VARCHAR(1) 			NOT NULL
			, Total_CPU_ms 						INT 				NOT NULL
			, Total_Physical_IO_in_MB			BIGINT 				NULL
			, Memory_USE_KB 					INT 				NULL
			, Open_Transactions 				INT 				NOT NULL
			, Login_Time 						DATETIME 			NOT NULL
			, Last_Request_Start_Time 			DATETIME 			NOT NULL
			, [Host_Name] 						NVARCHAR(128) 		NOT NULL
			, Net_Address						VARCHAR(48) 		NOT NULL
			, Execution_Context_ID 				INT 				NOT NULL
			, Request_ID 						INT 				NOT NULL
		) 
		ON [PRIMARY]
ELSE
	PRINT 'DBA.PD_ActivityMonitor is already added'
GO

--Changing column precision from 16 to 50
IF COLUMNPROPERTY( OBJECT_ID( '[DBA].[PD_ActivityMonitor]' ), 'Command', 'PRECISION' ) < 50 
	ALTER TABLE [DBA].[PD_ActivityMonitor] ALTER COLUMN [Command] [NVARCHAR](50) NOT NULL
GO


PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_FKs_With_NoIndexes.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	v)	DBA.PD_FKs_With_NoIndexes

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_FKs_With_NoIndexes' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_FKs_With_NoIndexes (
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_FKs_With_NoIndexes_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_FKs_With_NoIndexes_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Foreign_Key_Name					VARCHAR(100)
			, Relationship						VARCHAR(250)
			, Parent_Table_Index_State			VARCHAR(100)
			, Referenced_Table_Index_State		VARCHAR(100)
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_FKs_With_NoIndexes is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_IndexPhysicalStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	vi)	DBA.PD_IndexPhysicalStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_IndexPhysicalStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_IndexPhysicalStats (
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_IndexPhysicalStats					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_IndexPhysicalStats_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Schema_Name]						VARCHAR(20)			NOT NULL
			, [Table_Name]						VARCHAR(100)		NOT NULL
			, [Index_Name]						VARCHAR(100)		NOT NULL
			, [Database_ID]						INT					NOT NULL
			, [Object_ID]						INT					NOT NULL
			, [Index_ID]						INT					NOT NULL
			, Partition_Number					INT					NULL
			, Index_Type_Desc					VARCHAR(30)			NULL
			, Alloc_Unit_Type_Desc				VARCHAR(30)			NULL
			, Index_Depth						INT					NULL
			, Index_Level						INT					NULL
			, Avg_fragmentation_in_percent		NUMERIC(10,2)		NULL
			, Fragment_count					INT					NULL
			, Avg_fragment_size_in_pages		NUMERIC(10,2)		NULL
			, Page_count						INT					NULL
			, Avg_page_space_used_in_percent	NUMERIC(10,2)		NULL
			, Created_By						VARCHAR(50)			NOT NULL		CONSTRAINT		DF_PD_IndexPhysicalStats_Created_By			DEFAULT								SYSTEM_USER
		)
		ON  [PRIMARY]
	ELSE
		PRINT 'DBA.PD_IndexPhysicalStats is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_Index_Usage.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	iv)	DBA.PD_Index_Usage

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_Index_Usage' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_Index_Usage(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_Index_Usage_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_Index_Usage_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Category							VARCHAR(20)			NOT NULL
			, Table_Name						VARCHAR(50)			NOT NULL
			, Index_Name						VARCHAR(100)		NULL
			, User_Seeks						BIGINT				NULL
			, User_Scans						BIGINT				NULL
			, User_Lookups						BIGINT				NULL
			, User_Updates						BIGINT				NULL
			, Last_User_Scan					DATETIME			NULL
			, Last_User_Seek					DATETIME			NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_Index_Usage is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_Missing_Indexes.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	iii)	DBA.PD_Missing_Indexes

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_Missing_Indexes' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_Missing_Indexes(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_Missing_Indexes_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_Missing_Indexes_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Category							VARCHAR(25)			NOT NULL
			, Total_Cost						BIGINT				NULL
			, Average_User_Impact				NUMERIC(5,2)		NULL
			, Table_Name						VARCHAR(50)			NULL
			, Equality_Usage					VARCHAR(500)		NULL		
			, InEquality_Usage					VARCHAR(500)		NULL
			, Include_Columns					VARCHAR(500)		NULL
			, Unique_Compiles					BIGINT				NULL
			, User_Scans						BIGINT				NULL
			, User_Seeks						BIGINT				NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_Missing_Indexes is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_ServerHardware.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	xi)		DBA.PD_ServerHardware

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_ServerHardware' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_ServerHardware
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_ServerHardware_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_ServerHardware_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Sql and OS Version]				VARCHAR(200)		NULL
			, [NoF Physical CPUs]				TINYINT				NULL
			, [NoF Logical CPUs]				TINYINT				NULL
			, [Physical Mem in GB]				NUMERIC(5,2)		NULL
			, [Available Physical Mem in GB]	NUMERIC(5,2)		NULL
			, [Total Page File Size in GB]		NUMERIC(5,2)		NULL
			, [System Memory State]				VARCHAR(20)			NULL
			, [Is it a VM]						VARCHAR(10)			NULL
			, [SqlServer Instance Start Time]	DATETIME			NULL
		) ON  [PRIMARY]
	ELSE
		PRINT 'DBA.PD_ServerHardware is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_TableStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	x)		DBA.PD_TableStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_TableStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_TableStats
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_TableStats_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_TableStats_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Table_Name						VARCHAR(100)		NOT NULL
			, Index_Name						VARCHAR(100)			NULL
			, [Index_Type]						VARCHAR(70)			NOT	NULL
			, RowCounts							BIGINT				NOT NULL
			, TotalSpaceKB						INT					NOT	NULL
			, Is_Primary_Key					BIT					NOT NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_TableStats is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_TopQueries.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	ii)	DBA.PD_TopQueries

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects As O WHERE O.name = N'PD_TopQueries' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_TopQueries(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_TopQueries_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_TopQueries_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Top_Category]					VARCHAR(25)			NOT NULL
			, Query								VARCHAR(MAX)		NOT NULL
			, Execution_Count					BIGINT				NULL
			, Average_CPU_Used_in_S				INT					NULL
			, Total_Logical_Reads				BIGINT				NULL
			, Average_logical_reads				BIGINT				NULL
			, Last_Logical_Reads				INT					NULL
			, Total_Logical_Writes				BIGINT				NULL
			, Last_Logical_Writes				INT					NULL
			, Total_Worker_Time					BIGINT				NULL
			, Last_Worker_Time					BIGINT				NULL
			, Total_elapsed_time_in_S			INT					NULL
			, Last_elapsed_time_in_S			INT					NULL
			, Last_Execution_Time				INT					NULL
		) ON  [PRIMARY]
ELSE
        PRINT 'DBA.PD_TopQueries is already added'
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Execution_Count') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Execution_Count] BIGINT NULL
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Total_Logical_Reads') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Total_Logical_Reads] BIGINT NULL
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Total_Logical_Writes') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Total_Logical_Writes] BIGINT NULL
GO

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_UpdateStatistics.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	ix)		DBA.PD_UpdateStatistics

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_UpdateStatistics' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_UpdateStatistics
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_UpdateStatistics_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_UpdateStatistics_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Table_Name						VARCHAR(100)		NOT NULL
			, Statistic							VARCHAR(100)		NOT NULL
			, [Statistic Type]					VARCHAR(100)		NOT	NULL
			, [Stats Last Updated]				DATETIME				NULL
			, ModifiedRows						BIGINT					NULL
			, No_Recompute						BIT					NOT NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_UpdateStatistics is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_WaitStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	i)	DBA.PD_WaitStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_WaitStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_WaitStats(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_WaitStats_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_WaitStats_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, WaitType							NVARCHAR(60)		NOT NULL	
			, Wait_S							DECIMAL(14,2)		NULL
			, Resource_S						DECIMAL(14,2)		NULL
			, Signal_S							DECIMAL(14,2)		NULL
			, WaitCount							BIGINT				NOT NULL
			, Percentage						DECIMAL(4,2)		NULL
			, AvgWait_S							DECIMAL(14,4)		NULL
			, AvgRes_S							DECIMAL(14,4)		NULL
			, AvgSig_S							DECIMAL(14,4)		NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_WaitStats is already added'
	GO
	
	
PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'		


--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/views/ --
--

--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/functions/ --
--

--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/storedprocedures/ --
--
print 'processing storedprocedures/PD_Job.sql'; 
--
GO
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
--
--		Purpose		:	Create AMS_PD job
--		Author		:	Uday K. Sangepu for NCR on December 5, 2012 
--
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

--
--	Start of script:	PD_Job.sql
--

SET NOCOUNT ON

BEGIN TRY

	BEGIN TRANSACTION Add_AMS_PD_Job

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	I)	Create Job: AMS_PD
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		DECLARE @JobID		UNIQUEIDENTIFIER
				, @ERR 		INT
				, @DBNAME	SYSNAME
				, @JOBNAME  SYSNAME

		-- Get the actual database name into a variable of SYSNAME datatype
		SELECT @DBNAME = DB_NAME() 
		SELECT @JOBNAME = N'AMS_PD_' + @DBNAME
		--print 'JOBNAME: ' + @JOBNAME
		
		--Get jobstep name to verify if it is exists for each jobstep
        DECLARE @StepName Varchar(50)
        Select @StepName = step_name from msdb.dbo.sysjobsteps where job_id = @JobID and database_name = @DBNAME  		

		
		--	EXECUTE msdb.dbo.sp_delete_job @job_name = N'AMS_PD'
		If not exists(select * from msdb.dbo.sysjobs WHERE job_id = @jobId and name  = @JOBNAME)	
	Begin
		EXECUTE msdb.dbo.sp_add_job 
				  @job_name					=	@JOBNAME
				, @enabled					=	1
				, @description				=	N'Monitor and Gather performance diagnostic metrics for the database server'
				, @owner_login_name			=	N'sa'
				, @notify_level_eventlog	=	2
				, @job_id					=	@JobID OUTPUT

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_job failed for AMS_PD'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END

		SELECT @JobID [AMS_PD JobID]
	End	

		
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	II)	Create Job steps
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

		--
		--	Step 1: Start AMS_PD Job
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)	
	 Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	1
				, @step_name				=	N'Start AMS_PD Job' 
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Start AMS_PD Job
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													DECLARE   @JobStartTime	DATETIME = GETDATE()
													PRINT ''Performance Diagnostics Job Start: '' + CONVERT(VARCHAR, @JobStartTime, 109)		--	With Milli Seconds
													PRINT ''------------------------------------------------------------------------------------------------------''
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 1: Start AMS_PD Job'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
    End
		--
		--	Step 2: WaitStats
		--
       If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	2
				, @step_name				=	N'WaitStats'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather Wait Stats 
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													;WITH	Waits 
													AS
													(
														SELECT wait_type										AS [Wait_Type]
															, wait_time_ms / 1000.0 							AS WaitS
															, (wait_time_ms - signal_wait_time_ms) / 1000.0 	AS ResourceS
															, signal_wait_time_ms / 1000.0 						AS SignalS
															, waiting_tasks_count 								AS WaitCount
															, 100.0 * wait_time_ms / SUM(wait_time_ms) OVER () 	AS Percentage
															, ROW_NUMBER() OVER ( ORDER BY wait_time_ms DESC) 	AS [RowNum]
														FROM   sys.dm_os_wait_stats
														WHERE  wait_type NOT IN (	''CLR_SEMAPHORE'',				''LAZYWRITER_SLEEP'',				''RESOURCE_QUEUE'',						''SLEEP_TASK'',				''SLEEP_SYSTEMTASK''
																					, ''SQLTRACE_BUFFER_FLUSH'',		''WAITFOR'',						''LOGMGR_QUEUE'',							''CHECKPOINT_QUEUE'',			''REQUEST_FOR_DEADLOCK_SEARCH''
																					, ''XE_TIMER_EVENT'',				''BROKER_TO_FLUSH'',				''BROKER_TASK_STOP'',						''CLR_MANUAL_EVENT'',			''CLR_AUTO_EVENT''
																					, ''DISPATCHER_QUEUE_SEMAPHORE'', ''FT_IFTS_SCHEDULER_IDLE_WAIT'',	''XE_DISPATCHER_WAIT'',					''XE_DISPATCHER_JOIN'',		''BROKER_EVENTHANDLER''
																					, ''TRACEWRITE'',					''FT_IFTSHC_MUTEX'',				''SQLTRACE_INCREMENTAL_FLUSH_SLEEP'',		''BROKER_RECEIVE_WAITFOR'',	''ONDEMAND_TASK_QUEUE''
																					, ''DBMIRROR_EVENTS_QUEUE'',		''DBMIRRORING_CMD'',				''BROKER_TRANSMITTER'',					''SQLTRACE_WAIT_ENTRIES'',	''SLEEP_BPOOL_FLUSH''
																					, ''SQLTRACE_LOCK''
																				)	--	These are filtered out as these are usually benign
													)
													INSERT INTO DBA.PD_WaitStats(WaitType, Wait_S, Resource_S, Signal_S, WaitCount, Percentage, AvgWait_S, AvgRes_S, AvgSig_S)
													SELECT    TOP 10
															  W1.wait_type 												AS WaitType
															, CAST (W1.WaitS AS DECIMAL (14, 2)) 						AS Wait_S
															, CAST (W1.ResourceS AS DECIMAL (14, 2)) 					AS Resource_S
															, CAST (W1.SignalS AS DECIMAL (14, 2)) 						AS Signal_S
															, W1.WaitCount 												AS WaitCount
															, CAST (W1.Percentage AS DECIMAL (4, 2)) 					AS Percentage
															, CAST ((W1.WaitS / W1.WaitCount) AS DECIMAL (14, 4)) 		AS AvgWait_S
															, CAST ((W1.ResourceS / W1.WaitCount) AS DECIMAL (14, 4)) 	AS AvgRes_S
															, CAST ((W1.SignalS / W1.WaitCount) AS DECIMAL (14, 4)) 	AS AvgSig_S
													FROM Waits AS W1
													INNER JOIN Waits AS W2
														ON W2.RowNum <= W1.RowNum
													GROUP BY  W1.RowNum
															, W1.wait_type
															, W1.WaitS
															, W1.ResourceS
															, W1.SignalS
															, W1.WaitCount
															, W1.Percentage
													HAVING   SUM(W2.Percentage) - W1.Percentage < 95; -- percentage threshold
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 2: WaitStats'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End										

		--
		--	Step 3: Top_N_Queries
		--
        If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	3
				, @step_name				=	N'Top_N_Queries'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather queries that take the most resources
													--				i)		Total CPU usage
													--				ii)		Average CPU usage
													--				iii)	Total Logial IO
													--				iv)		Average Logical IO
													--
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													--
													--	i)	Total CPU usage	
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT    TOP 10 
															  ''Top Total CPU Time''																	AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													--		, qp.query_plan																			AS	[Query_Plan]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY qs.total_worker_time DESC; 


													--
													--	ii)	Top Average CPU Time
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT    TOP 10 
															  ''Top Average CPU Time''																AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													--		, qp.query_plan																			AS	[Query_Plan]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Average_CPU_Used_in_S] DESC; -- CPU time

													--
													--	iii)	Total Logical IO
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT	TOP 10 
															''Top Total Logical IO''																	AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Total_Logical_Reads] DESC; 


													--
													--	iv)	Average Logical IO
													--
													INSERT INTO DBA.PD_TopQueries 	(Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT	TOP 10 
															''Top Average Logical IO''																AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Average_logical_reads] DESC; 
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 3: Top_N_Queries'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
     End
												
		--
		--	Step 4: Index Stats
		--
        If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	4
				, @step_name				=	N'Index_Stats'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather necessary stats on indexes 
													--					i)		Missing Indexes
													--					ii)		Index UsageUsage
													--					iii)	Do All FK have indexes on them (from Dave Levy) 
													--					iv)		Index Stats (internal & external fragmentation, allocation_unit_type, etc)

													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


													--
													--	i)	Missing Indexes
													--
														INSERT INTO DBA.PD_Missing_Indexes(Category, Total_Cost, Average_User_Impact, Table_Name, Equality_Usage, InEquality_Usage, Include_Columns, Unique_Compiles, User_Scans, User_Seeks)
														SELECT  TOP 25
																  ''Missing Indexes''		AS [Category]
																, ROUND(avg_total_user_cost * avg_user_impact * (user_seeks + user_scans),0) AS [Total Cost]
																, avg_user_impact		AS [Average_User_Impact]
																, statement				AS [Table_Name]
																, equality_columns		AS [Equality_Usage]
																, inequality_columns	AS [Inequality_Usage]
																, included_columns		AS [Include_Cloumns]
																, s.unique_compiles		AS [Unique_Compiles]
																, s.user_scans			AS [User_Scans]
																, s.user_seeks			AS [User_Seeks]
														FROM sys.dm_db_missing_index_groups g 
														INNER JOIN sys.dm_db_missing_index_group_stats s 
															ON s.group_handle = g.index_group_handle 
														INNER JOIN sys.dm_db_missing_index_details d 
															ON d.index_handle = g.index_handle
														ORDER BY [Total Cost] DESC;

													--
													--	ii)	Index Usage
													--

														INSERT INTO DBA.PD_Index_Usage(Category, Table_Name, Index_Name, User_Seeks, User_Scans, User_Lookups, User_Updates, Last_User_Scan, Last_User_Seek)
														SELECT     ''Index Usage''
																, OBJECT_NAME(S.[OBJECT_ID])
																, I.[NAME]
																, USER_SEEKS
																, USER_SCANS
																, USER_LOOKUPS
																, USER_UPDATES
																, last_user_scan
																, last_system_seek
														FROM SYS.DM_DB_INDEX_USAGE_STATS AS S
														INNER JOIN SYS.INDEXES AS I
															ON I.[OBJECT_ID] = S.[OBJECT_ID]
															AND I.INDEX_ID = S.INDEX_ID
														WHERE   OBJECTPROPERTY(S.[OBJECT_ID],''IsUserTable'') = 1 
														AND S.database_id = DB_ID()
														And OBJECT_NAME(S.[OBJECT_ID]) not like ''%PD_%''


													--
													--	iii)	Do All FK have indexes on them (from Dave Levy) 
													--	

														INSERT INTO DBA.PD_FKs_With_NoIndexes (Foreign_Key_Name, Relationship, Parent_Table_Index_State, Referenced_Table_Index_State)
														SELECT		OBJECT_NAME(fk.object_id) AS [foreign_key_name],
																	QUOTENAME(SCHEMA_NAME(pt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.parent_object_id)) + '' -> '' + QUOTENAME(SCHEMA_NAME(rt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.referenced_object_id)) AS [relationship],
																	CASE 
																			WHEN COUNT(pic.column_id) < COUNT(DISTINCT fkc.constraint_column_id) 
																				THEN ''No Covering Index on '' + QUOTENAME(SCHEMA_NAME(pt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.parent_object_id)) 
																			ELSE ''Covered'' 
																	END AS parent_table_index_state,
																	CASE	
																			WHEN COUNT(ric.column_id) < COUNT(DISTINCT fkc.constraint_column_id) 
																				THEN ''No Covering Index on '' + QUOTENAME(SCHEMA_NAME(rt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.referenced_object_id)) 
																			ELSE ''Covered'' 
																	END AS referenced_table_index_state
														FROM		sys.foreign_keys fk
														INNER JOIN sys.foreign_key_columns fkc
															ON fk.object_id = fkc.constraint_object_id
														INNER JOIN sys.tables pt
															ON fkc.parent_object_id = pt.object_id
														INNER JOIN sys.tables rt
															ON fkc.referenced_object_id = rt.object_id
														LEFT OUTER JOIN sys.indexes pix
															ON fkc.parent_object_id = pix.object_id
															AND pix.is_disabled = 0
															AND pix.is_hypothetical = 0
														LEFT OUTER JOIN sys.index_columns pic
															ON fkc.parent_column_id = pic.column_id
															AND pix.object_id = pic.object_id
															AND pix.index_id = pic.index_id
															AND pic.index_column_id = fkc.constraint_column_id
														LEFT OUTER JOIN sys.indexes rix
															ON fkc.referenced_object_id = rix.object_id
															AND rix.is_disabled = 0
															AND rix.is_hypothetical = 0
														LEFT OUTER JOIN sys.index_columns ric
															ON fkc.referenced_column_id = ric.column_id
															AND rix.object_id = ric.object_id
															AND rix.index_id = ric.index_id
															AND ric.index_column_id = fkc.constraint_column_id
														GROUP BY	fk.object_id,
																	fk.parent_object_id,
																	pt.schema_id,
																	fk.referenced_object_id,
																	rt.schema_id


													--
													--	iv)		Index Stats (internal & external fragmentation, allocation_unit_type, etc)
													--

														--
														--	Metrics to Measure the progress
														--
														--	Variables
														DECLARE   @IndexStats_Sql 	NVARCHAR(MAX) =	''''
																, @SqlLength		INT

														--	Generate SQL statement to run sys.dm_db_index_physical_stats query on all the indexes			
														SELECT @IndexStats_Sql  = @IndexStats_Sql + ''SELECT '''''' + schema_name(O.schema_id) + '''''' AS [Schema_Name], '''''' + OBJECT_NAME(O.object_id) + '''''' AS [Table_Name], '''''' + I.name + '''''' AS [Index_Name], database_id, object_id, index_id, partition_number, index_type_desc, alloc_unit_type_desc, index_depth, index_level, CONVERT(NUMERIC(10,2), avg_fragmentation_in_percent), fragment_count, CONVERT(NUMERIC(10,2), avg_fragment_size_in_pages), page_count, CONVERT(NUMERIC(10,2), avg_page_space_used_in_percent) FROM sys.dm_db_index_physical_stats('' + CONVERT(VARCHAR, DB_ID()) + '', '' + CONVERT(VARCHAR, O.object_id) + '','' + CONVERT(VARCHAR, I.index_id) + '', NULL, DEFAULT) UNION ALL ''
														FROM sys.indexes AS I
														INNER JOIN sys.objects AS O 
															ON O.object_id = I.object_id
														WHERE I.index_id > 0
														ORDER BY OBJECT_NAME(O.object_id)

														--	Remove ''UNION ALL'' at the end
														SELECT @SqlLength = LEN(@IndexStats_Sql)
														SELECT @IndexStats_Sql = SUBSTRING(@IndexStats_Sql, 1, @SqlLength-9)
														
														--	INSERT  result set into DBADB table
														INSERT INTO DBA.PD_IndexPhysicalStats ([Schema_Name], [Table_Name], [Index_Name], [Database_ID], [Object_ID], [Index_ID], Partition_Number, Index_Type_Desc, Alloc_Unit_Type_Desc, Index_Depth, Index_Level, Avg_fragmentation_in_percent, Fragment_count, Avg_fragment_size_in_pages, Page_count, Avg_page_space_used_in_percent) 
														EXEC sp_ExecuteSql @stmt = @IndexStats_Sql 
												'


		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 4: Index Stats'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End											
		--
		--	Step 5: Activity Monitor
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	5
				, @step_name				=	N'Activity_Monitor'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'

													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Take a snapshot of Activity Monitor 
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_ActivityMonitor
													(		 
														  Session_ID 				
														, User_Process 				
														, Login_Name				
														, Database_Name				
														, Task_State 				
														, Command 					
														, Application_Name				
														, Wait_Time_in_ms 			
														, Wait_Type 				
														, Wait_Resource 			
														, Blocked_By 				
														, Head_Blocker 				
														, Total_CPU_ms 				
														, Total_Physical_IO_in_MB	
														, Memory_USE_KB 			
														, Open_Transactions 		
														, Login_Time 				
														, Last_Request_Start_Time 	
														, Host_Name 				
														, Net_Address					
														, Execution_Context_ID 			
														, Request_ID 					
													)
													SELECT 
														  Session_ID 				=	s.session_id
														, User_Process 				=	CONVERT(CHAR(1), s.is_user_process)
														, Login_Name				=	s.login_name
														, Database_Name				=	ISNULL(DB_NAME(p.dbid), N'''')
														, Task_State 				=	ISNULL(t.task_state, N'''')
														, Command 					=	ISNULL(r.command, N'''')
														, Application_Name 			=	ISNULL(s.program_name, N'''')
														, Wait_Time_in_ms 			=	ISNULL(w.wait_duration_ms, 0)
														, Wait_Type 				=	ISNULL(w.wait_type, N'''')
														, Wait_Resource 			=	ISNULL(w.resource_description, N'''')
														, Blocked_By 				=	ISNULL(CONVERT (VARCHAR, w.blocking_session_id), '''')
														, Head_Blocker 				=	CASE
																							-- session has an active request, is blocked, but is blocking others or session is idle but has an open tran and is blocking others
																							WHEN r2.session_id IS NOT NULL AND (r.blocking_session_id = 0 OR r.session_id IS NULL) THEN ''1''
																							-- session is either not blocking someone, or is blocking someone but is blocked by another party
																							ELSE ''''
																						END
														, Total_CPU_ms 				= s.cpu_time
														, Total_Physical_IO_in_MB	= (s.reads + s.writes) * 8 / 1024
														, Memory_USE_KB 			= s.memory_usage * 8192 / 1024
														, Open_Transactions 		= ISNULL(r.open_transaction_count,0)
														, Login_Time 				= s.login_time
														, Last_Request_Start_Time 	= s.last_request_start_time
														, Host_Name 				= ISNULL(s.host_name, N'''')
														, Net_Address				= ISNULL(c.client_net_address, N'''')
														, Execution_Context_ID 		= ISNULL(t.exec_context_id, 0)
														, Request_ID 				= ISNULL(r.request_id, 0)
													--   [Workload Group] 			= ISNULL(g.name, N'''')
													FROM sys.dm_exec_sessions s 
													LEFT OUTER JOIN sys.dm_exec_connections c 
														ON (s.session_id = c.session_id)
													LEFT OUTER JOIN sys.dm_exec_requests r 
														ON (s.session_id = r.session_id)
													LEFT OUTER JOIN sys.dm_os_tasks t 
														ON (r.session_id = t.session_id AND r.request_id = t.request_id)
													LEFT OUTER JOIN (
																		-- In some cases (e.g. parallel queries, also waiting for a worker), one thread can be flagged as
																		-- waiting for several different threads.  This will cause that thread to show up in multiple rows
																		-- in our grid, which we don''t want.  Use ROW_NUMBER to select the longest wait for each thread,
																		-- and use it as representative of the other wait relationships this thread is involved in.
																		SELECT *, ROW_NUMBER() OVER (PARTITION BY waiting_task_address ORDER BY wait_duration_ms DESC) AS row_num
																		FROM sys.dm_os_waiting_tasks
																	) AS w 
														ON (t.task_address = w.waiting_task_address) 
														AND w.row_num = 1
													LEFT OUTER JOIN sys.dm_exec_requests r2 
														ON (s.session_id = r2.blocking_session_id)
													--LEFT OUTER JOIN sys.dm_resource_governor_workload_groups g ON (g.group_id = s.group_id)	--TAKE THIS dmv OUT TO WORK IN 2005
													LEFT OUTER JOIN sys.sysprocesses p 
														ON (s.session_id = p.spid)
													ORDER BY s.session_id;
				
				'			
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 6: Activity Monitor'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End

		--
		--	Step 6: Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin	
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	6
				, @step_name				=	N'Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	List Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages
													--	Author	:	Faizan Khundmiri for AMS (NCR) on March 5, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_TableStats(Table_Name, Index_Name, Index_Type, RowCounts, TotalSpaceKB, Is_Primary_Key)
													SELECT    so.name																			AS [Table_Name]
															, si.name																			AS [Index_Name]
															, CASE	WHEN si.is_primary_key = 0 and si.type = 0 THEN ''HEAP''
																	WHEN si.is_primary_key = 1 and si.type = 2 THEN ''PrimaryKey_NonClustered''
																	WHEN si.is_primary_key = 0 and si.type = 2 THEN ''Non-Clustered''
																	ELSE ''Clustered''	
															  END																				AS	[Index_Type]
															, p.Rows																			AS	[RowCounts]
															, SUM(a.total_pages) * 8															AS	[TotalSpaceKB]
															, si.is_primary_key																	AS	[Is_Primary_Key]
													FROM sys.indexes si  
													INNER JOIN sys.objects so 
														ON	si.[object_id] = so.[object_id] 
													INNER JOIN sys.partitions AS p 
														ON	si.Object_id = p.object_id AND si.Index_id = p.index_id
													INNER JOIN sys.Allocation_units AS a
														ON   p.partition_id = a.container_id
													WHERE so.type = ''U''    --Only get indexes for User Created Tables 
													GROUP BY so.name , si.name , si.type_desc , p.Rows , si.is_primary_key , si.type
													ORDER BY so.name
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 6: Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 7: Check Last Update Statistics
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
      Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	7
				, @step_name				=	N'Check Last Update Statistics'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	List Last Update Statistics
													--	Author	:	Faizan Khundmiri for AMS (NCR) on March 5, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_UpdateStatistics(Table_Name, Statistic, [Statistic Type], [Stats Last Updated], ModifiedRows,No_Recompute)
													SELECT    sch.name + ''.'' + so.name													AS [Table_Name]
															, ss.name																		AS [Statistic]
															, CASE
																WHEN ss.auto_Created = 0 AND ss.user_created = 0 THEN ''Index Statistic'' 
																WHEN ss.auto_created = 0 AND ss.user_created = 1 THEN ''User Created'' 
																WHEN ss.auto_created = 1 AND ss.user_created = 0 THEN ''Auto Created'' 
																END																			AS [Statistic Type] 
															, STATS_DATE(i.[id], i.indid) 													AS [Stats Last Updated]
															, i.rowmodctr																	AS [ModifiedRows]
															, ss.No_Recompute																AS [No_Recompute]
													FROM sys.stats ss 
													JOIN sys.objects so 
														ON	ss.object_id = so.object_id
													JOIN sysindexes i
													     ON so.object_id = i.id
													JOIN sys.schemas sch
															ON   so.schema_id = sch.schema_id
													--OUTER APPLY sys.dm_db_stats_properties(so.object_id, ss.stats_id) AS sp										   
													WHERE so.TYPE = ''U''          
													ORDER BY STATS_DATE(i.[id], i.indid) DESC;
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 7: Check Last Update Statistics'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 8: Check Sql Hardware Information
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	8
				, @step_name				=	N'Check Sql Hardware Information'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather Hardware information of the Sql Server machine
													--	Author	:	Uday K. Sangepu on March 6, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													WITH ServerHardware ([Sql and OS Version], [NoF Physical CPUs], [NoF Logical CPUs], [Physical Mem in GB], [Available Physical Mem in GB], [Total Page File Size in GB], [System Memory State], [Is it a VM], [SqlServer Instance Start Time]) AS 
													(
														--	Memory
														SELECT	  
																  NULL																	AS [Sql and OS Version]
																, NULL																	AS [NoF Physical CPUs]
																, NULL																	AS [NoF Logical CPUs]
																, CONVERT(NUMERIC(5,2), total_physical_memory_kb/(1024*1024.0))			AS [Physical Mem in GB]
																, CONVERT(NUMERIC(5,2), available_physical_memory_kb/(1024*1024.0))		AS [Available Physical Mem in GB]
																, CONVERT(NUMERIC(5,2), total_page_file_kb/(1024*1024.0))				AS [Total Page File Size in GB]
																, CONVERT(VARCHAR(20), system_memory_state_desc)						AS [System Memory State]
																, NULL																	AS [Is it a VM]
																, NULL																	AS [SqlServer Instance Start Time]
														FROM sys.dm_os_sys_memory
														UNION 
														--	CPU
														SELECT	  
																  CONVERT(VARCHAR(200), @@VERSION)										AS [Sql and OS Version]
																, cpu_count/hyperthread_ratio											AS [NoF Physical CPUs]
																, cpu_count																AS [NoF Logical CPUs]
																, NULL																	AS [Physical Mem in GB]
																, NULL																	AS [Available Physical Mem in GB]
																, NULL																	AS [Total Page File Size in GB]
																, NULL																	AS [System Memory State]
																, CONVERT(VARCHAR(10), virtual_machine_type_desc)						AS [Is it a VM]
																, sqlserver_start_time													AS [SqlServer Instance Start Time]
														FROM sys.dm_os_sys_info
													)
													--	SELECT * FROM ServerHardware
													INSERT INTO DBA.PD_ServerHardware (	[Sql and OS Version]
																					, [NoF Physical CPUs]
																					, [NoF Logical CPUs]
																					, [Physical Mem in GB]
																					, [Available Physical Mem in GB]
																					, [Total Page File Size in GB]
																					, [System Memory State]
																					, [Is it a VM]
																					, [SqlServer Instance Start Time]
																					)
													SELECT    MAX([Sql and OS Version])					AS [Sql and OS Version]
															, MAX([NoF Physical CPUs])					AS [NoF Physical CPUs]
															, MAX([NoF Logical CPUs])					AS [NoF Logical CPUs]
															, MAX([Physical Mem in GB])					AS [Physical Mem in GB]
															, MAX([Available Physical Mem in GB])		AS [Available Physical Mem in GB]
															, MAX([Total Page File Size in GB])			AS [Total Page File Size in GB]
															, MAX([System Memory State])				AS [System Memory State]
															, MAX([Is it a VM])							AS [Is it a VM]
															, MAX([SqlServer Instance Start Time])		AS [SqlServer Instance Start Time]
													FROM ServerHardware
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 9: Check Sql Hardware Information'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 9: Purge
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	9
				, @step_name				=	N'Purge'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	1
				, @on_success_step_id		=	0
				, @on_fail_action			=	2
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Purge data collected above periodically			Retention										
													--			i)		DBA.PD_WaitStats							6 months
													--			ii)		DBA.PD_TopQueries							6 months
													--			iii)	DBA.PD_Missing_Indexes						6 months
													--			iv)		DBA.PD_Index_Usage							6 months
													--			v)		DBA.PD_FKs_With_NoIndexes					6 months
													--			vi)		DBA.PD_IndexPhysicalStats					6 months
													--			vii)	DBA.PD_ActivityMonitor						6 months
													--			viii)	DBA.PD_Duplicate_Indexes					6 months
													--          ix)     DBA.PD_TableStats 						    6 months
													--			x)      DBA.PD_UpdateStatistics 					6 months
													--			xi)     DBA.PD_ServerHardware						6 months
													--			xii)	DBA.PD_PerfCounters							6 months        
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--				On March 5th, 2013 Faizan Added DBA.PD_TableStats, DBA.PD_UpdateStatistics, DBA.PD_PerfCounters
													--				On March 6th 2013 Uday K. Sangepu added DBA.PD_ServerHardware
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													--
													--	Purge data older than retention period (6 months)
													--
									
														
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On < DATEADD(MM, -7, GETDATE())


														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On < DATEADD(MM, -7, GETDATE())
														
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On < DATEADD(MM, -7, GETDATE())
														
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														'			
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 11: Purge'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	III)	Create Schedule
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		DECLARE @ScheduleID	INT

		EXECUTE msdb.dbo.sp_add_schedule
				  @schedule_name			=	'Daily_At_10PM'
				, @enabled					=	1
				, @freq_type				=	4
				, @freq_interval			=	1
				, @freq_subday_type			=	0
				, @freq_subday_interval		=	0
				, @active_start_date		=	20130101
				, @active_end_date			=	99991231
				, @active_start_time		=	220000
				, @active_end_time			=	235959
				, @schedule_id				=	@ScheduleID OUTPUT

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_schedule failed for Daily_At_10PM'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
			
		SELECT @ScheduleID AS [Job Schedule]		
		
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	IV)	Create Schedule
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		EXECUTE msdb.dbo.sp_attach_schedule
				  @job_id					=	@JobID
				, @schedule_id				=	@ScheduleID

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_attach_schedule failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END


		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	V)	Modify Job
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		EXECUTE msdb.dbo.sp_update_job 
				  @job_id					=	@JobID
				, @start_step_id			=	1
		
		SELECT @ERR = @@ERROR

		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_update_job failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	VI)	Add Job To Server
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
				
		EXECUTE msdb.dbo.sp_add_jobserver
				  @job_id					=	@JobID
				, @server_name				=	N'(LOCAL)'


		SELECT @ERR = @@ERROR

		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobserver failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
				
		COMMIT TRANSACTION Add_AMS_PD_Job	
END TRY

BEGIN CATCH
    DECLARE @ErrMsg NVARCHAR(max)
    DECLARE @ErrProc NVARCHAR(max)
    DECLARE @ErrLine INTEGER
	SELECT 
	        @ErrProc = ERROR_PROCEDURE(),
	        @ErrLine = ERROR_LINE(),
			@ErrMsg = ERROR_MESSAGE();

	--RAISERROR (N'%s(%d) %s', 18, 1, @ErrProc, @ErrLine, @ErrMsg)
	
	ROLLBACK TRANSACTION Add_AMS_PD_Job

END CATCH

GO

--
--	End of script:	PD_Job.sql
--



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixXS/tables/ --
--
print 'processing tables/1.Copient_Logix.User.sql'; 
--
GO
-- $Id: 1.Copient_Logix.User.sql 71778 2013-11-07 22:34:36Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  User [Copient_Logix]    Script Date: 12/27/2010 16:15:03 ******/
IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = N'Copient_Logix')
CREATE USER [Copient_Logix] FOR LOGIN [Copient_Logix] WITH DEFAULT_SCHEMA=[dbo]
GO


print 'processing tables/1.Copient_Logix_uspRole.sql'; 
--
GO
-- $Id: 1.Copient_Logix_uspRole.sql 71778 2013-11-07 22:34:36Z jg185197 $
-- Build Version: 7.3.1.138972

/****** Object:  Schema [Copient_Logix_uspRole]    Script Date: 12/27/2010 15:04:02 ******/
-- This was accidentally made to create a schema instead of a role, so drop the schema if it exists and make the role
IF EXISTS (SELECT 1 FROM sys.schemas WHERE name = N'Copient_Logix_uspRole')
    DROP SCHEMA [Copient_Logix_uspRole] 
GO

IF NOT EXISTS ( SELECT 1 FROM [sys].[database_principals] where name = 'Copient_Logix_uspRole' and type = 'R'  )
  CREATE ROLE [Copient_Logix_uspRole] AUTHORIZATION [dbo]
GO

IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N'Copient_Logix')
    exec sp_addrolemember 'Copient_Logix_uspRole', 'Copient_Logix'
GO





print 'processing tables/1.dbo.CardTypes.Table.sql'; 
--
GO
-- $Id: 1.dbo.CardTypes.Table.sql 114804 2017-07-24 10:20:58Z gs250217 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CardTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CardTypes](
  [CardTypeID]        [int]           NOT NULL,
  [Description]       [nvarchar](100) NULL,
  [CustTypeID]        [int]           NULL,
  [PhraseID]          [int]           NULL,
  [ExtCardTypeID]     [nvarchar](26)  NULL,
  [OnePerCustomer]    [bit]           NOT NULL,
  [LastUpdate]        [datetime]      NULL,
  [PhraseTerm]        [varchar](40)   NULL,
  [PINSettingID]      [int]           NOT NULL CONSTRAINT [DF_CardTypes_PINSettingID] DEFAULT (2),
    -- Indicates the type of PIN/Password that should be used for the identifier
  [PaddingLength]     [int]           NULL,
    -- The number of spaces to which the identifier should be left zero padded.  A value of zero indicates no 
  [MaxIDLength]       [int]           NULL, 
    -- The maximum allowed length of the identifier
  [CreateCardsInUI]   [bit]           NOT NULL CONSTRAINT [DF_CardTypes_CreateCardsInUI]  DEFAULT (1),
    -- Indicates that new identifers of this type can be created in customer inquiry
  [DeleteCardsInUI]   [bit]           NOT NULL CONSTRAINT [DF_CardTypes_DeleteCardsInUI]  DEFAULT (1),
    -- Indicates that identifiers of this type can be deleted in customer inquiry
  [UpdateCardsInUI]   [bit]           NOT NULL CONSTRAINT [DF_CardTypes_UpdateCardsInUI]  DEFAULT (1),
    -- Indicates that the value of the identifier can be updated in customer 
  [UpdateCardStatusInUI] [bit]        NOT NULL CONSTRAINT [DF_CardTypes_UpdateCardStatusInUI]  DEFAULT (1),
    -- Indicates that the identifiers status can be updated in customer inquiry
  [CanNotRemoveLastID] [bit]          NOT NULL CONSTRAINT [DF_CardTypes_CanNotRemoveLastID]  DEFAULT (1),
    -- Indicates that once a customer has an identifier if this type, they must always have at least one 
  [NumericOnly]       [bit]           NOT NULL CONSTRAINT [DF_CardTypes_NumericOnly]  DEFAULT (1),
    -- Indicates that the ExtCardID should be numeric only
  [PINNumericOnly]    [bit]           NOT NULL CONSTRAINT [DF_CardTypes_PINNumericOnly]  DEFAULT (0), 
    -- Indicates that the PIN should be numeric only
  [CustomerCanUpdatePIN] [bit]        NOT NULL CONSTRAINT [DF_CardTypes_CustomerCanUpdatePIN]  DEFAULT (1), 
    -- Indicates that the customer can update their PIN
  [MinPinLength]      [int]           NOT NULL CONSTRAINT [DF_CardTypes_MinPinLength]  DEFAULT (4), 
    -- The minimum length allowed for a customer�s PIN
  [MaxPinLength]      [int]           NOT NULL CONSTRAINT [DF_CardTypes_MaxPinLength]  DEFAULT (10)
    -- The maximum length allowed for a customer�s PIN
) ON [PRIMARY]
END
GO

-- Drop the non-clustered index on primary key if exists --
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CardTypes]') AND name = N'PK_CardTypes' AND type = 2)
  ALTER TABLE [dbo].[CardTypes] DROP CONSTRAINT [PK_CardTypes]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CardTypes_OnePerCustomer]') AND parent_object_id = OBJECT_ID(N'[dbo].[CardTypes]'))
  Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CardTypes_OnePerCustomer]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CardTypes] ADD CONSTRAINT [DF_CardTypes_OnePerCustomer]  DEFAULT ((0)) FOR [OnePerCustomer]
  END
End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CardTypes_LastUpdate]') AND parent_object_id = OBJECT_ID(N'[dbo].[CardTypes]'))
  Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CardTypes_LastUpdate]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CardTypes] ADD CONSTRAINT [DF_CardTypes_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
  END
End
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CardTypes]') AND name = N'PK_CardTypes')
  ALTER TABLE [dbo].[CardTypes] ADD CONSTRAINT [PK_CardTypes] PRIMARY KEY CLUSTERED ([CardTypeID] ASC) 
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='PhraseTerm')
  ALTER TABLE [dbo].[CardTypes] ADD PhraseTerm varchar(40) NULL;
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='PINSettingID')
  ALTER TABLE [dbo].[CardTypes] ADD PINSettingID int NOT NULL CONSTRAINT [DF_CardTypes_PINSettingID] DEFAULT (2)with values;
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='PaddingLength')
  ALTER TABLE [dbo].[CardTypes] ADD PaddingLength [int] NULL;
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='MaxIDLength')
  ALTER TABLE [dbo].[CardTypes] ADD MaxIDLength [int] NULL;
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='PhraseTerm')
  ALTER TABLE [dbo].[CardTypes] ADD PhraseTerm varchar(40) NULL;
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='CreateCardsInUI')
  ALTER TABLE [dbo].[CardTypes] ADD CreateCardsInUI bit NOT NULL CONSTRAINT [DF_CardTypes_CreateCardsInUI]  DEFAULT (1);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='DeleteCardsInUI')
  ALTER TABLE [dbo].[CardTypes] ADD DeleteCardsInUI bit NOT NULL CONSTRAINT [DF_CardTypes_DeleteCardsInUI]  DEFAULT (1);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='UpdateCardsInUI')
  ALTER TABLE [dbo].[CardTypes] ADD UpdateCardsInUI bit NOT NULL CONSTRAINT [DF_CardTypes_UpdateCardsInUI]  DEFAULT (1);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='UpdateCardStatusInUI')
  ALTER TABLE [dbo].[CardTypes] ADD UpdateCardStatusInUI bit NOT NULL CONSTRAINT [DF_CardTypes_UpdateCardStatusInUI]  DEFAULT (1);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='CanNotRemoveLastID')
  ALTER TABLE [dbo].[CardTypes] ADD CanNotRemoveLastID bit NOT NULL CONSTRAINT [DF_CardTypes_CanNotRemoveLastID]  DEFAULT (1);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='NumericOnly')
  ALTER TABLE [dbo].[CardTypes] ADD NumericOnly bit NOT NULL CONSTRAINT [DF_CardTypes_NumericOnly]  DEFAULT (1);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='PINNumericOnly')
  ALTER TABLE [dbo].[CardTypes] ADD PINNumericOnly bit NOT NULL CONSTRAINT [DF_CardTypes_PINNumericOnly]  DEFAULT (0);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='CustomerCanUpdatePIN')
  ALTER TABLE [dbo].[CardTypes] ADD CustomerCanUpdatePIN bit NOT NULL CONSTRAINT [DF_CardTypes_CustomerCanUpdatePIN]  DEFAULT (1);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='MinPINLength')
  ALTER TABLE [dbo].[CardTypes] ADD MinPinLength int NOT NULL CONSTRAINT [DF_CardTypes_MinPinLength]  DEFAULT (4);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='MaxPINLength')
  ALTER TABLE [dbo].[CardTypes] ADD MaxPinLength int NOT NULL CONSTRAINT [DF_CardTypes_MaxPinLength]  DEFAULT (10);
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardTypes]') and name='AutoEnroll')
  ALTER TABLE [dbo].[CardTypes] ADD AutoEnroll bit NOT NULL CONSTRAINT [DEF_AUTO_ENROLL DEFAULT]  DEFAULT (0);
GO


--Change the default constraint to 1 for CreateCardsInUI, DeleteCardsInUI, and UpdateCardsInUI
If EXISTS (select * from sys.default_constraints WHERE object_id= OBJECT_ID(N'[dbo].[DF_CardTypes_CreateCardsInUI]') AND parent_object_id = OBJECT_ID(N'[dbo].[CardTypes]'))
  Begin
  ALTER TABLE CardTypes DROP CONSTRAINT [DF_CardTypes_CreateCardsInUI];
  End
ALTER TABLE CardTypes ADD CONSTRAINT [DF_CardTypes_CreateCardsInUI]  DEFAULT (1) FOR CreateCardsInUI;
GO
If EXISTS (select * from sys.default_constraints WHERE object_id= OBJECT_ID(N'[dbo].[DF_CardTypes_DeleteCardsInUI]') AND parent_object_id = OBJECT_ID(N'[dbo].[CardTypes]'))
  Begin
  ALTER TABLE CardTypes DROP CONSTRAINT [DF_CardTypes_DeleteCardsInUI];
  End
ALTER TABLE CardTypes ADD CONSTRAINT [DF_CardTypes_DeleteCardsInUI]  DEFAULT (1) FOR DeleteCardsInUI;
GO
If EXISTS (select * from sys.default_constraints WHERE object_id= OBJECT_ID(N'[dbo].[DF_CardTypes_UpdateCardsInUI]') AND parent_object_id = OBJECT_ID(N'[dbo].[CardTypes]'))
  Begin
  ALTER TABLE CardTypes DROP CONSTRAINT [DF_CardTypes_UpdateCardsInUI];
  End
ALTER TABLE CardTypes ADD CONSTRAINT [DF_CardTypes_UpdateCardsInUI]  DEFAULT (1) FOR UpdateCardsInUI;
GO

--Populate the table
if not exists (select * from CardTypes where CardTypeID=0) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (0, N'Customer card', 0, 4446, N'0', 0, GETDATE(), 'term.customercard', 19, 19, 1, 1, 1, 0, 1, 1);
GO
if not exists (select * from CardTypes where CardTypeID=1) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (1, N'Household card', 1, 4447, N'1', 0, GETDATE(), 'term.householdcard', 19, 19, 1, 1, 1, 0, 1, 1);
GO
if not exists (select * from CardTypes where CardTypeID=2) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (2, N'CAM card', 2, 4448, N'2', 0, GETDATE(), 'term.camcard', 19, 19, 1, 1, 1, 0, 1, 1);
GO
if not exists (select * from CardTypes where CardTypeID=3) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (3, N'Alternate ID', 0, 2847, N'3', 0, GETDATE(), 'term.alternateid', 19, 19, 1, 1, 1, 0, 1, 1);
GO
if not exists (select * from CardTypes where CardTypeID=4) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (4, 'Username', 0, 70, '4', 1, GETDATE(), 'term.username', 0, 19, 1, 1, 1, 0, 1, 0);
GO
if not exists (select * from CardTypes where CardTypeID=5) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (5, N'Associate ID', 0, 5401, '5', 0, GETDATE(), 'term.associateid', 0, 19, 1, 1, 1, 0, 1, 1);
GO
if not exists (select * from CardTypes where CardTypeID=6) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (6, N'Email Address', 0, 6352, '6', 0, GETDATE(), 'term.emailaddress', 0, 50, 1, 1, 1, 0, 1, 0);
GO
if not exists (select * from CardTypes where CardTypeID=7) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (7, N'Secondary Member Card', 0, 6590, '7', 0, GETDATE(), 'term.secondarymembercard', 19, 19, 1, 1, 1, 0, 1, 1);
GO
if not exists (select * from CardTypes where CardTypeID=8) 
  INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (8, N'Consumer Account Number', 0, 8833, '8', 0, GETDATE(), 'term.CAN', 16, 16, 1, 1, 1, 0, 1, 0);
GO
-- reserve client specific card type = 9 and 10


--if not exists (select * from CardTypes where CardTypeID=9) 
  --INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (9, N'Account Number', 0, 6815, '9', 0, GETDATE(), 'term.accountnumber', 0, 19, 1, 1, 1, 0, 1, 0);
--GO
--if not exists (select * from CardTypes where CardTypeID=10) 
 -- INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (10, N'Barcode', 0, 6816, '10', 0, GETDATE(), 'term.cardtypebarcode', 0, 19, 1, 1, 1, 0, 1, 0);
--GO
-- reserve client specific card type = 8
--INSERT INTO [dbo].[CardTypes] ([CardTypeID], [Description], [CustTypeID], [PhraseID], [ExtCardTypeID], [OnePerCustomer], [LastUpdate], [PhraseTerm], [PaddingLength], [MaxIDLength], [CreateCardsInUI], [DeleteCardsInUI], [UpdateCardsInUI], [CanNotRemoveLastID], [UpdateCardStatusInUI], [NumericOnly]) VALUES (8, N'Primary ID', 0, 835, N'8', 1, getdate(), 'term.primaryid', 0, 19, 1, 1, 1, 0, 1, 0);
GO


print 'processing tables/1.dbo.CouponType.Type.Table.sql'; 
--
GO
-- $Id: 1.Copient_Logix.User.sql 61596 2015-06-03 17:23:40Z nv250056 $
-- Build Version: 7.3.1.138972

/****** Object:  User [Copient_Logix]    Script Date: 03/06/2015 15:04:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (select * from sys.table_types where name='CouponType') 
BEGIN
  CREATE TYPE [dbo].[CouponType] AS TABLE(
	[Couponcode] [nvarchar](150) NULL,
	[InitialUses] [tinyint] NULL
	
)
END
GRANT EXECUTE ON TYPE::[dbo].[CouponType] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing tables/1.dbo.IncentivePromoVarTableType.Table.sql'; 
--
GO
-- $Id: 1.dbo.IncentivePromoVarTableType.Table.sql 91458 2016-11-14 14:26:11Z DB123627 $
-- Build Version: 7.3.1.138972

IF NOT EXISTS (SELECT * FROM sys.table_types WHERE name='IncentivePromoVarTableType') 
BEGIN
	CREATE TYPE IncentivePromoVarTableType AS TABLE(                     
		  IncentiveID   BIGINT NULL
		, PromoVarID  BIGINT NULL
  )
END
GO

GRANT EXECUTE ON TYPE::[dbo].IncentivePromoVarTableType TO [Copient_Logix_uspRole] AS [dbo]
GO
 

print 'processing tables/1.dbo.PointsProgramPendingFlagTableType.Table.sql'; 
--
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (select * from sys.table_types where name='PointsProgramPendingFlagTableType') BEGIN
  CREATE TYPE PointsProgramPendingFlagTableType AS TABLE     (                     
    ProgramID bigint NOT NULL PRIMARY KEY CLUSTERED,
    ApplyEarnedPendingPoints bit NULL
  )
END
GO

GRANT EXECUTE ON TYPE::[dbo].PointsProgramPendingFlagTableType TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing tables/1.dbo.ProgramPromoVarTableType.Table.sql'; 
--
GO
-- $Id: 1.dbo.ProgramPromoVarTableType.Table.sql 91458 2016-11-14 14:26:11Z DB123627 $
-- Build Version: 7.3.1.138972

IF NOT EXISTS (SELECT * FROM sys.table_types WHERE name='ProgramPromoVarTableType') 
BEGIN
	CREATE TYPE ProgramPromoVarTableType AS TABLE(                     
		  ProgramID   BIGINT NULL
		, PromoVarID  BIGINT NULL
  )
END
GO

GRANT EXECUTE ON TYPE::[dbo].ProgramPromoVarTableType TO [Copient_Logix_uspRole] AS [dbo]
GO
 

print 'processing tables/1.dbo.TrackableCouponProgramTableType.Table.sql'; 
--
GO
-- $Id: 1.dbo.TrackableCouponProgramTableType.Table.sql 71778 2013-11-07 22:34:36Z jg185197 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.table_types WHERE name='TrackableCouponProgramTableType') 
BEGIN
  CREATE TYPE TrackableCouponProgramTableType AS TABLE     
  (                     
    ProgramID INT NOT NULL
  )
END
GO

GRANT EXECUTE ON TYPE::[dbo].[TrackableCouponProgramTableType] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing tables/dbo.AR_Account.Table.sql'; 
--
GO
-- $Id: dbo.AR_Account.Table.sql 25512 2011-2-2 15:48:18Z nate$
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AR_Account]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[AR_Account](
    [CustomerPK] [bigint] NOT NULL,
    [CompoundCharge] [bit] NOT NULL,
    [FinanceCharge] [bit] NOT NULL,
    [CreditLimit] [numeric](16,2) NULL,
    [APR] [numeric](5,2) NULL,
 CONSTRAINT [PK_AR_Account] PRIMARY KEY CLUSTERED ([CustomerPK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_AR_Account_CompundCharge]') AND type = 'D') -- Remove earlier misspelling.
    ALTER TABLE [dbo].[AR_Account] DROP CONSTRAINT [DF_AR_Account_CompoundCharge]  

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'AR_Account' AND column_name = 'CompundCharge') -- Fix earlier misspelling.
    EXEC sp_rename @objname = '[AR_Account].[CompundCharge]', @newname = 'CompoundCharge', @objtype = 'COLUMN'


IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_AR_Account_CompoundCharge]') AND parent_object_id = OBJECT_ID(N'[dbo].[AR_Account]'))
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_AR_Account_CompoundCharge]') AND type = 'D')
        ALTER TABLE [dbo].[AR_Account] ADD CONSTRAINT [DF_AR_Account_CompoundCharge]  DEFAULT ((0)) FOR [CompoundCharge]
            
IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_AR_Account_FinanceCharge]') AND parent_object_id = OBJECT_ID(N'[dbo].[AR_Account]'))
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_AR_Account_FinanceCharge]') AND type = 'D')
        ALTER TABLE [dbo].[AR_Account] ADD CONSTRAINT [DF_AR_Account_FinanceCharge]  DEFAULT ((0)) FOR [FinanceCharge]

print 'processing tables/dbo.AccumAdjustIDSequence.Table.sql'; 
--
GO
-- $Id: dbo.AccumAdjustIDSequence.Table.sql 48051 2012-04-26 15:50:21Z josh $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[AccumAdjustIDSequence]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AccumAdjustIDSequence]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[AccumAdjustIDSequence](
	[LocalID] [bigint] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'AccumAdjustIDSequence' AND column_name = 'PKID')
ALTER TABLE [dbo].[AccumAdjustIDSequence] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AccumAdjustIDSequence]') AND name = N'PK_AccumAdjustIDSequence')
ALTER TABLE [dbo].[AccumAdjustIDSequence] ADD CONSTRAINT [PK_AccumAdjustIDSequence] PRIMARY KEY CLUSTERED ([PKID] ASC)
GO

DECLARE @RECORD_COUNT INT
set @RECORD_COUNT = 0
SELECT @RECORD_COUNT = COUNT(*) FROM [dbo].[AccumAdjustIDSequence]

IF @RECORD_COUNT = 0
BEGIN
    INSERT [dbo].[AccumAdjustIDSequence] ([LocalID]) VALUES (1)
END
ELSE IF @RECORD_COUNT > 1
BEGIN
    DELETE TOP ( @RECORD_COUNT - 1 ) FROM [dbo].[AccumAdjustIDSequence]
END

GO


print 'processing tables/dbo.AccumulationVariables.Table.sql'; 
--
GO
-- $Id: dbo.AccumulationVariables.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[AccumulationVariables]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AccumulationVariables]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[AccumulationVariables](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[PromoVarID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[Amount] [decimal](12, 3) NULL,
 CONSTRAINT [PK_AccumulationVariables] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AccumulationVariables]') AND name = N'IX_Unique_AccumulationVariables')
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_AccumulationVariables] ON [dbo].[AccumulationVariables] 
(
	[PromoVarID] ASC,
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.AdjustmentReasons.Table.sql'; 
--
GO
-- $Id: dbo.AdjustmentReasons.Table.sql 77434 2014-04-18 16:49:46Z gc185065 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[AdjustmentReasons]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AdjustmentReasons]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[AdjustmentReasons](
	[ReasonID] [int] NOT NULL,
	[Description] [nvarchar](100) NULL,
	[Enabled] [bit] NULL,
  [UserDefined] [bit] NULL,
  [Program] [nvarchar](12) NULL,
  [LastUpdate] [smalldatetime] NULL,
 CONSTRAINT [PK_AdjustmentReasons] PRIMARY KEY CLUSTERED 
(
	[ReasonID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 1 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (1, N'Partnership Points', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 2 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (2, N'Fraud', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 3 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (3, N'Expired Points', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 4 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (4, N'Bad Debt', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 5 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (5, N'Drive Offs', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 6 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (6, N'Coupon Adjustment', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 7 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (7, N'Sweepstakes Winner', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 8 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (8, N'Transfer Points', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 9 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (9, N'Promotional Campaign Points', 1)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM AdjustmentReasons WHERE  [ReasonID] = 10 )
    INSERT [dbo].[AdjustmentReasons] ([ReasonID], [Description], [Enabled]) VALUES (10, N'Customer Service Claims', 1)
GO

 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='AdjustmentReasons' AND COLUMN_NAME = 'UserDefined')
BEGIN
	ALTER TABLE [dbo].[AdjustmentReasons] ADD [UserDefined] [bit] NULL
END
GO
 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='AdjustmentReasons' AND COLUMN_NAME = 'Program')
BEGIN
  ALTER TABLE [dbo].[AdjustmentReasons] ADD [Program] [nvarchar](12) NULL
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='AdjustmentReasons' AND COLUMN_NAME = 'LastUpdate' and DATA_TYPE='datetime2')
 BEGIN
  SELECT * INTO tempAR FROM AdjustmentReasons;
  ALTER TABLE AdjustmentReasons DROP COLUMN LastUpdate;
  ALTER TABLE AdjustmentReasons ADD [LastUpdate] smalldatetime NULL;
  MERGE AdjustmentReasons WITH (RowLock) AS Target
	USING (select ReasonID, LastUpdate FROM TempAR) AS Source 
	ON (Target.ReasonID = Source.ReasonID)
	WHEN Matched THEN
		UPDATE SET target.LastUpdate=Source.LastUpdate;
  DROP TABLE tempAR;
 END
Else IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='AdjustmentReasons' AND COLUMN_NAME = 'LastUpdate')
  BEGIN
   ALTER TABLE [dbo].[AdjustmentReasons] ADD [LastUpdate] [smalldatetime] NULL
  END
GO


print 'processing tables/dbo.AdjustmentSources.Table.sql'; 
--
GO
-- $Id: dbo.[AdjustmentSources].Table.sql 76389 2014-03-21 14:31:16Z gc185065 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[[AdjustmentSources]]    Script Date: 12/27/2010 15:04:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AdjustmentSources]') AND TYPE IN (N'U'))
BEGIN
CREATE TABLE [dbo].[AdjustmentSources](
	[AdjustmentSourceID] [int], 
  [Name] [nvarchar](25),
  PRIMARY KEY([AdjustmentSourceID])
) ON [PRIMARY]
END
GO

SET ANSI_PADDING OFF
GO

print 'processing tables/dbo.AdjustmentTypes.Table.sql'; 
--
GO
-- $Id: dbo.[AdjustmentTypes].Table.sql 76389 2014-03-21 14:31:16Z gc185065 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[[AdjustmentTypes]]    Script Date: 12/27/2010 15:04:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AdjustmentTypes]') AND TYPE IN (N'U'))
BEGIN
CREATE TABLE [dbo].[AdjustmentTypes](
	[AdjustmentTypeID] [smallint], 
  [Name] [nvarchar](25),
  PRIMARY KEY([AdjustmentTypeID])
) ON [PRIMARY]
END
GO

SET ANSI_PADDING OFF
GO

print 'processing tables/dbo.BarcodeBatchRequestQueue.Table.sql'; 
--
GO
-- $Id: dbo.BarcodeBatchRequestQueue.Table.sql 69436 2013-09-04 14:26:11Z ns185105 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[BarcodeBatchRequestQueue]    Script Date: 05/17/2011 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BarcodeBatchRequestQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BarcodeBatchRequestQueue](

    [RequestPK]                 [bigint] IDENTITY(1,1) NOT NULL,
    [CustomerGroupID]           [bigint] NOT NULL,
    [SVProgramID]               [bigint] NOT NULL,
    [UPC]                       [nvarchar](12) NOT NULL,
    [RequestedOn]               [datetime] NOT NULL,
    [RequestCompletedOn]        [datetime] NULL,
    [ValidLocation]             [bigint] NULL,
    [RedemptionRestrictionID]   [int] NULL
    
    CONSTRAINT [PK_BarcodeBatchRequestQueue] PRIMARY KEY CLUSTERED
(
    [RequestPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeBatchRequestQueue' AND column_name = 'NumberOfBarcodes')
    ALTER TABLE [dbo].[BarcodeBatchRequestQueue] ADD  [NumberOfBarcodes] [int]  NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeBatchRequestQueue' AND column_name = 'ROID')
    ALTER TABLE [dbo].[BarcodeBatchRequestQueue] ADD  [ROID] [bigint]  NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeBatchRequestQueue' AND column_name = 'BarcodeGenerationStart')
    ALTER TABLE [dbo].[BarcodeBatchRequestQueue] ADD  [BarcodeGenerationStart] [datetime]  NULL
GO

print 'processing tables/dbo.BarcodeDetails.Table.sql'; 
--
GO
-- $Id: dbo.BarcodeDetails.Table.sql 81754 2014-08-06 14:15:48Z sr185204 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[BarcodeDetails]    Script Date: 05/17/2011 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BarcodeDetails]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BarcodeDetails](

    [Barcode] [nvarchar](14) NOT NULL,
    [ValidLocation] [bigint] NULL,
    [CustomerPK] [bigint] NOT NULL,
    [SVProgramID] [bigint] NOT NULL,
    [Channel] [nvarchar](20) NULL,
    [GeneratedOn] [datetime] NOT NULL,
    [ExpirationDate] [datetime] NULL,
    [RedeemedLocationID] [nvarchar](20) NULL,
    [RedeemedDate] [datetime] NULL,
    [RedeemedCSR] [bigint] NULL,
    [Voided] [bit] NULL,
    [RedeemingTransactionID] [bigint] NULL,
    [RedeemingMemberID] [bigint] NULL,
    [IssuingTransactionID] [bigint] NULL,
    [IssuingCSR] [bigint] NULL,
    [IssuingCostCenter] [nvarchar](20) NULL,
    [IssueDate] [datetime]  NULL,
    [EffectiveDate] [datetime]  NULL,
    [RejectionCode] [nvarchar](50) NULL,
    [RejectedDate] [datetime] NULL,
    [RedemptionRestrictionID] [int] NULL

    CONSTRAINT [PK_BarcodeDetails] PRIMARY KEY CLUSTERED
(
    [Barcode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeDetails' AND column_name = 'EffectiveDate')
    ALTER TABLE [dbo].[BarcodeDetails] ADD  [EffectiveDate] [datetime]  NULL
GO  


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeDetails' AND column_name = 'Expires')
  BEGIN
    EXEC sp_rename 'BarCodeDetails.Expires', 'ExpirationDate', 'COLUMN'
  END   
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeDetails' AND column_name = 'IssuingMemberID')
  BEGIN
    EXEC sp_rename 'BarCodeDetails.IssuingMemberID', 'IssuingCSR', 'COLUMN'
  END   
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeDetails' AND column_name = 'RedemptionRestrictionID')
    ALTER TABLE [dbo].[BarcodeDetails] ADD  [RedemptionRestrictionID] [int] NULL
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeDetails' AND column_name = 'IssuingCostCenter' AND data_type='bigint')
  BEGIN
    ALTER TABLE [dbo].[BarcodeDetails]
    ALTER COLUMN [IssuingCostCenter] NVARCHAR(20)
  END   
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeDetails' AND column_name = 'RedeemedLocationID' AND data_type='bigint')
  BEGIN
    ALTER TABLE [dbo].[BarcodeDetails]
    ALTER COLUMN [RedeemedLocationID] NVARCHAR(20)
  END   
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'BarcodeDetails' AND column_name = 'RewardOptionID')
    ALTER TABLE [dbo].[BarcodeDetails] ADD  [RewardOptionID] [bigint] NULL
GO


IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[BarcodeDetails]') and name='RedeemingTransactionID')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='BarcodeDetails' and COLUMN_NAME='RedeemingTransactionID' and 
DATA_TYPE='bigint')) BEGIN
  alter table BarcodeDetails alter column [RedeemingTransactionID] [nvarchar](128);
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BarcodeDetails]') AND name = N'IX_BarcodeDetails_IssuingTransactionID_IssueDate')
  CREATE NONCLUSTERED INDEX [IX_BarcodeDetails_IssuingTransactionID_IssueDate] ON [dbo].[BarcodeDetails]([IssuingTransactionID] ASC, [IssueDate] ASC) INCLUDE ( [CustomerPK], [IssuingCostCenter]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 75) ON [PRIMARY]
GO
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[BarcodeDetails]') and name='IssuingTransactionID')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='BarcodeDetails' and COLUMN_NAME='IssuingTransactionID' and 
DATA_TYPE='bigint')) BEGIN
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BarcodeDetails]') AND name = N'IX_BarcodeDetails_IssuingTransactionID_IssueDate')
BEGIN
 DROP INDEX IX_BarcodeDetails_IssuingTransactionID_IssueDate on BarcodeDetails
  alter table BarcodeDetails alter column [IssuingTransactionID] [nvarchar](128);
  END
END
GO

--Adding a NonClustered Index to improve the performance----
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BarcodeDetails]') AND name = N'IX_BarcodeDetails_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_BarcodeDetails_CustomerPK] ON [dbo].[BarcodeDetails] 
(
	[CustomerPK] ASC
)
INCLUDE ( [Barcode]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
GO


print 'processing tables/dbo.CM_AdvancedLimitVariables.Table.sql'; 
--
GO
-- $Id: dbo.CM_AdvancedLimitVariables.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CM_AdvancedLimitVariables]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CM_AdvancedLimitVariables]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CM_AdvancedLimitVariables](
	[PKID] [bigint] IDENTITY(6,1) NOT NULL,
	[PromoVarID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[Amount] [decimal](15, 3) NULL,
	[LimitID] [bigint] NULL,
 CONSTRAINT [PK_CM_AdvancedLimitVariables] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_AdvancedLimitVariables]') AND name = N'IX_CM_AdvancedLimitVariables_CustomerPK_LimitID')
CREATE NONCLUSTERED INDEX [IX_CM_AdvancedLimitVariables_CustomerPK_LimitID] ON [dbo].[CM_AdvancedLimitVariables] 
(
	[CustomerPK] ASC,
	[LimitID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_AdvancedLimitVariables]') AND name = N'IX_CM_AdvancedLimitVariables_LimitID')
CREATE NONCLUSTERED INDEX [IX_CM_AdvancedLimitVariables_LimitID] ON [dbo].[CM_AdvancedLimitVariables] 
(
	[LimitID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_AdvancedLimitVariables]') AND name = N'IX_Unique_CM_AdvancedLimitVariables')
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_CM_AdvancedLimitVariables] ON [dbo].[CM_AdvancedLimitVariables] 
(
	[PromoVarID] ASC,
	[CustomerPK] ASC,
	[LimitID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CM_FuelPartner_SV_Xref.Table.sql'; 
--
GO
-- $Id: dbo.CM_FuelPartner_SV_Xref.Table.sql 36221 2013-07-08 15:07:11Z jj250009 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CM_FuelPartner_SV_Xref]    Script Date: 07/08/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CM_FuelPartner_SV_Xref]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CM_FuelPartner_SV_Xref](
	[SV_XrefID] [bigint] IDENTITY(1,1) NOT NULL,
	[StoredValueID] [bigint] NOT NULL,
	[XrefID] [bigint] NOT NULL,
	[LocalID] [bigint] NULL,
	[ServerSerial] [int] NULL,
	[SVProgramID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[LastUpdate] [datetime] NULL,
	[ExpireDate] [datetime] NULL,
 CONSTRAINT [PK_CM_FuelPartner_SV_Xref] PRIMARY KEY CLUSTERED 
(
	[SV_XrefID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_FuelPartner_SV_Xref]') AND name = N'IX_CM_FuelPartner_SV_Xref_StoredValueID')
CREATE UNIQUE NONCLUSTERED INDEX [IX_CM_FuelPartner_SV_Xref_StoredValueID] ON [dbo].[CM_FuelPartner_SV_Xref] 
(
	[StoredValueID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_FuelPartner_SV_Xref]') AND name = N'IX_CM_FuelPartner_SV_Xref_XrefID')
CREATE UNIQUE NONCLUSTERED INDEX [IX_CM_FuelPartner_SV_Xref_XrefID] ON [dbo].[CM_FuelPartner_SV_Xref] 
(
	[XrefID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CM_FuelPartner_SV_Xref]') and name='ExpireDate')
  ALTER TABLE CM_FuelPartner_SV_Xref ADD ExpireDate datetime NULL;
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_FuelPartner_SV_Xref]') AND name = N'IX_CM_FuelPartner_SV_Xref_ExpireDate')
CREATE NONCLUSTERED INDEX [IX_CM_FuelPartner_SV_Xref_ExpireDate] ON [dbo].[CM_FuelPartner_SV_Xref] 
(
	[ExpireDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CM_Points_Lifetime.Table.sql'; 
--
GO
-- $Id: dbo..CM_Points_Lifetime.Table.sql 25512 2011-02-08 17:00:00Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CM_Points_Lifetime]    Script Date: 02/08/2011 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CM_Points_Lifetime]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CM_Points_Lifetime](
	[PKID] [bigint] IDENTITY(6,1) NOT NULL,
	[PromoVarID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[Amount] [decimal](15, 3) NULL CONSTRAINT [DF_CM_Points_Lifetime_Amount]  DEFAULT ((0)),
 CONSTRAINT [PK_CM_Points_Lifetime] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_Points_Lifetime]') AND name = N'IX_Unique_CM_Points_Lifetime')
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_CM_Points_Lifetime] ON [dbo].[CM_Points_Lifetime] 
(
	[PromoVarID] ASC,
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CM_RestrictedUseCouponBuffer.Table.sql'; 
--
GO
-- $Id: dbo.CM_RestrictedUseCouponBuffer.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CM_RestrictedUseCouponBuffer]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CM_RestrictedUseCouponBuffer]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CM_RestrictedUseCouponBuffer](
	[SVProgramID] [bigint] NOT NULL,
	[ExternalID] [nvarchar](400) NOT NULL,
	[LocalID] [bigint] NOT NULL,
	[ExpireDate] [datetime] NOT NULL,
	[Status] [int] NOT NULL,
	[StatusDate] [datetime] NOT NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CM_RestrictedUseCouponBuffer]') AND name = N'IX_CM_RestrictedUseCouponBuffer_ExternalID')
CREATE CLUSTERED INDEX [IX_CM_RestrictedUseCouponBuffer_ExternalID] ON [dbo].[CM_RestrictedUseCouponBuffer] 
(
	[ExternalID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CM_RestrictedUseCouponBuffer' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CM_RestrictedUseCouponBuffer] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.CPE_CR_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_CR_Output.Table.sql 47947 2012-04-24 20:51:25Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_CR_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CR_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_CR_Output](
	[LocalID] [int] NULL,
	[ServerSerial] [int] NULL,
	[CustomerPK] [bigint] NULL,
	[IncentiveID] [bigint] NULL,
	[OnScreenAdID] [int] NULL,
	[RewardOptionID] [bigint] NULL,
	[Response] [varchar](255) NULL,
	[Deleted] [bit] NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_CR_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_CR_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CR_Output]') AND name = N'PK_CPE_CR_Output')
ALTER TABLE [dbo].[CPE_CR_Output] ADD CONSTRAINT [PK_CPE_CR_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CR_Output]') AND name = N'IX_CPE_UR_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_UR_Output_TargetLocationID] ON [dbo].[CPE_CR_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CR_Output]') AND name = N'IX_CPE_UR_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UR_Output_WaitingACK] ON [dbo].[CPE_CR_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_CardIDs_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_CardIDs_Output.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_CardIDs_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CardIDs_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_CardIDs_Output](
	[CardPK] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[ExtCardID] [nvarchar](400) NULL,
	[CardStatusID] [int] NULL,
	[CardTypeID] [int] NULL,
	[Deleted] [bit] NULL,
	[BatchID] [decimal](20, 0) NULL,
	[TargetLocationID] [bigint] NULL,
	[WaitingACK] [bigint] NULL
) ON [PRIMARY]
END
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_CardIDs_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_CardIDs_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CardIDs_Output]') AND name = N'PK_CPE_CardIDs_Output')
ALTER TABLE [dbo].[CPE_CardIDs_Output] ADD CONSTRAINT [PK_CPE_CardIDs_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CardIDs_Output]') AND name = N'IX_CPE_CardIDs_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_CardIDs_Output_TargetLocationID] ON [dbo].[CPE_CardIDs_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CardIDs_Output]') AND name = N'IX_CPE_CardIDs_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_CardIDs_Output_WaitingACK] ON [dbo].[CPE_CardIDs_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_CardIDs_Output]') and name='ExtCardID')
Begin
  alter table CPE_CardIDs_Output alter column ExtCardID nvarchar(400)
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_CardIDs_Output' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_CardIDs_Output] ADD KeyRotationFlag bit NULL
END
GO



print 'processing tables/dbo.CPE_CustomerAttributes_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_CustomerAttributes_Output.Table.sql 47947 2012-04-24 20:51:25Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_CustomerAttributes_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerAttributes_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_CustomerAttributes_Output](
	[CustomerPK] [bigint] NULL,
	[AttributeTypeID] [int] NULL,
	[AttributeValueID] [int] NULL,
	[Deleted] [tinyint] NULL,
	[BatchID] [decimal](20, 0) NULL,
	[TargetLocationID] [bigint] NULL,
	[WaitingACK] [bigint] NULL,
	[AlternateValue] [nvarchar](100) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_CustomerAttributes_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_CustomerAttributes_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerAttributes_Output]') AND name = N'PK_CPE_CustomerAttributes_Output')
ALTER TABLE [dbo].[CPE_CustomerAttributes_Output] ADD CONSTRAINT [PK_CPE_CustomerAttributes_Output] PRIMARY KEY CLUSTERED ([PKID] ASC)  
GO


print 'processing tables/dbo.CPE_CustomerLocks.Table.sql'; 
--
GO
-- $Id: dbo.CPE_CustomerLocks.Table.sql 80781 2014-07-10 06:11:18Z sr185204 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_CustomerLocks]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerLocks]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_CustomerLocks](
  [LockID] [bigint] IDENTITY(1,1) NOT NULL,           -- Primary key for this table
	[CustomerPK] [bigint] NOT NULL,
	[LockingGroupID] [bigint] NOT NULL,
	[LocationID] [bigint] NULL,
	[TerminalNumber] [int] NULL,
	[TransactionNumber] [int] NULL,
  [LockedDate] [datetime] NULL, 
  [UE_LockExpireDate] [datetime] NULL 
  CONSTRAINT [PK_CPE_CustomerLocks] PRIMARY KEY CLUSTERED ([LockID] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_CustomerLocks' AND column_name = 'LockID')
    ALTER TABLE [dbo].[CPE_CustomerLocks] ADD [LockID] [bigint] IDENTITY(1,1) NOT NULL;
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_CustomerLocks' AND column_name = 'UE_LockExpireDate')
    ALTER TABLE [dbo].[CPE_CustomerLocks] ADD [UE_LockExpireDate] [datetime] NULL;
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerLocks]') AND name = N'IX_CPE_CustomerLocks_Unique')
  CREATE UNIQUE NONCLUSTERED INDEX [IX_CPE_CustomerLocks_Unique] ON [dbo].[CPE_CustomerLocks] ([CustomerPK] ASC, [LockingGroupID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_CustomerLocks_LockingGroupID]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_CustomerLocks]')) Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_CustomerLocks_LockingGroupID]') AND type = 'D') BEGIN
ALTER TABLE [dbo].[CPE_CustomerLocks] ADD  CONSTRAINT [DF_CPE_CustomerLocks_LockingGroupID]  DEFAULT ((0)) FOR [LockingGroupID]
END
End
GO
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_CustomerLocks]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='CPE_CustomerLocks' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table CPE_CustomerLocks alter column [TransactionNumber] [nvarchar](128);
END

GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[PK_CPE_CustomerLocks]') AND type = 'K') BEGIN
  ALTER TABLE [dbo].[CPE_CustomerLocks] ADD  CONSTRAINT [PK_CPE_CustomerLocks] PRIMARY KEY CLUSTERED ([LockID] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
END
GO


print 'processing tables/dbo.CPE_CustomerRemoval_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_CustomerRemoval_Output.Table.sql 47947 2012-04-24 20:51:25Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_CustomerRemoval_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerRemoval_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_CustomerRemoval_Output](
	[CustomerPK] [bigint] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_CustomerRemoval_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_CustomerRemoval_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerRemoval_Output]') AND name = N'PK_CPE_CustomerRemoval_Output')
ALTER TABLE [dbo].[CPE_CustomerRemoval_Output] ADD CONSTRAINT [PK_CPE_CustomerRemoval_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerRemoval_Output]') AND name = N'IX_CPE_CustomerRemoval_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_CustomerRemoval_Output_TargetLocationID] ON [dbo].[CPE_CustomerRemoval_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_CustomerRemoval_Output]') AND name = N'IX_CPE_CustomerRemoval_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_CustomerRemoval_Output_WaitingACK] ON [dbo].[CPE_CustomerRemoval_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_Customers_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_Customers_Output.Table.sql 116346 2017-09-21 07:39:18Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_Customers_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_Customers_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_Customers_Output](
	[CustomerPK] [bigint] NULL,
	[InitialCardID] [varchar](400) NULL,
	[HHPK] [bigint] NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL,
	[CustomerTypeID] [int] NULL,
	[CustomerStatusID] [int] NULL,
	[AlternateID] [nvarchar](50) NULL,
	[Verifier] [nvarchar](50) NULL,
	[Employee] [bit] NULL,
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[AltIDOptOut] [int] NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[EmployeeID] [nvarchar](26) NULL,
	[AirmileMemberID] [nvarchar](50) NULL,
	[Prefix] [nvarchar](50) NULL,
	[Suffix] [nvarchar](50) NULL,
 CONSTRAINT [PK_CPE_Customers_Output] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_Customers_Output]') AND name = N'IX_CPE_Customers_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_Customers_Output_TargetLocationID] ON [dbo].[CPE_Customers_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_Customers_Output]') AND name = N'IX_CPE_Customers_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_Customers_Output_WaitingACK] ON [dbo].[CPE_Customers_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_Customers_Output]') and name='InitialCardID')
BEGIN
  alter table CPE_Customers_Output alter column InitialCardID nvarchar(400)
END

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_Customers_Output]') and name='KeyRotationFlag')
BEGIN
  ALTER TABLE [dbo].[CPE_Customers_Output] ADD KeyRotationFlag bit NULL
END

GO



print 'processing tables/dbo.CPE_GM_Output.Table.sql'; 
--
GO

-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_GM_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_GM_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_GM_Output](
	[CustomerPK] [bigint] NULL,
	[CustomerGroupID] [int] NULL,
	[Manual] [bit] NOT NULL,
	[Deleted] [bit] NOT NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF Not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CPE_GM_Output' AND  COLUMN_NAME = 'POSTimeStamp')
Begin
    ALTER TABLE [dbo].[CPE_GM_Output] ADD [POSTimeStamp] [datetime] NULL;
End

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_GM_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_GM_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_GM_Output]') AND name = N'PK_CPE_GM_Output')
ALTER TABLE [dbo].[CPE_GM_Output] ADD CONSTRAINT [PK_CPE_GM_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_GM_Output]') AND name = N'IX_CPE_GM_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_GM_Output_TargetLocationID] ON [dbo].[CPE_GM_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_GM_Output]') AND name = N'IX_CPE_GM_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_GM_Output_WaitingACK] ON [dbo].[CPE_GM_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_GM_Output]') AND name = N'IX_Unique_CPE_GM_Output')
--CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_CPE_GM_Output] ON [dbo].[CPE_GM_Output] 
--(
	--[CustomerPK] ASC,
	--[CustomerGroupID] ASC,
	--[Deleted] ASC,
	--[TargetLocationID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

--Dropping Unique index to Imrpove performance - 05292013

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_GM_Output]') AND name = N'IX_Unique_CPE_GM_Output')
	DROP INDEX [IX_Unique_CPE_GM_Output] ON [dbo].[CPE_GM_Output] 
GO





print 'processing tables/dbo.CPE_PointHistoryMovementTemp.table.sql'; 
--
GO
-- $Id: dbo.CPE_PointHistoryMovementTemp.table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_PointHistoryMovementTemp]    Script Date: 02/29/2012 16:15:00 ******/
/* this table was used by cross_shop and point history movement agent
	The former move data from cpe_uploadtemp_pa into it, the latter consume it.
 */
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

/*
-- For debug use only. Do not enable below 2 lines
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointHistoryMovementTemp]') AND type in (N'U'))
	DROP TABLE [CPE_PointHistoryMovementTemp]
*/	

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointHistoryMovementTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_PointHistoryMovementTemp](
	PKID [bigint] IDENTITY(1,1),
	ProgramID [varchar](255) NULL,
	CustomerPK [varchar](255) NULL,
	Amount [varchar](255) NULL,
	EarnedUnderROID [varchar](255) NULL,
	CustomerTypeID [varchar](255) NULL,
	LogixTransNum [varchar](255) NULL,
	SourceTypeID [varchar](255) NULL,
	EarnedLocationID [varchar](255) NULL,
	ServerSerial [int] NULL,
	PresentedCustomerID [varchar](400) NULL,
	PresentedCardTypeID [varchar](255) NULL,
	ResolvedCustomerID [varchar](400) NULL,
	HHID [varchar](400) NULL, 
	Replayed [bit] NULL,
    ReplayedDate [datetime] NULL,
    POSTimeStamp [datetime] NULL,
    AdjustmentSourceID [int] NULL,
    AdjustmentTypeID [smallint] NULL,
    AdjustmentReasonID [int] NULL,
    AdjustmentReasonText [nvarchar](50) NULL,
) ON [PRIMARY]

ALTER TABLE [dbo].[CPE_PointHistoryMovementTemp] ADD Constraint PK_CPE_PointHistoryMovementTemp PRIMARY KEY CLUSTERED (PKID ASC)

END
GO
SET ANSI_PADDING OFF
GO

-- Add columns to PointHistoryMovementTemp table
 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_PointHistoryMovementTemp' AND COLUMN_NAME = 'AdjustmentSourceID')
BEGIN
	ALTER TABLE [dbo].[CPE_PointHistoryMovementTemp] ADD [AdjustmentSourceID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_PointHistoryMovementTemp' AND COLUMN_NAME = 'AdjustmentTypeID')
BEGIN
	ALTER TABLE [dbo].[CPE_PointHistoryMovementTemp] ADD [AdjustmentTypeID] [smallint] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_PointHistoryMovementTemp' AND COLUMN_NAME = 'AdjustmentReasonID')
BEGIN
	ALTER TABLE [dbo].[CPE_PointHistoryMovementTemp] ADD [AdjustmentReasonID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_PointHistoryMovementTemp' AND COLUMN_NAME = 'AdjustmentReasonText')
BEGIN
	ALTER TABLE [dbo].[CPE_PointHistoryMovementTemp] ADD [AdjustmentReasonText] [nvarchar](50) NULL
END
ELSE
BEGIN
	ALTER TABLE [dbo].[CPE_PointHistoryMovementTemp] ALTER COLUMN AdjustmentReasonText nvarchar(50)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_PointHistoryMovementTemp]') and name='PresentedCustomerID')
BEGIN
  alter table CPE_PointHistoryMovementTemp alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_PointHistoryMovementTemp]') and name='ResolvedCustomerID')
BEGIN
  alter table CPE_PointHistoryMovementTemp alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_PointHistoryMovementTemp]') and name='HHID')
BEGIN
  alter table CPE_PointHistoryMovementTemp alter column HHID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_PointHistoryMovementTemp' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_PointHistoryMovementTemp] ADD KeyRotationFlag bit NULL
END
GO

print 'processing tables/dbo.CPE_PointsAdj_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_PointsAdj_Output.Table.sql 65727 2013-05-15 18:14:10Z jf185081 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_PointsAdj_Output]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsAdj_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_PointsAdj_Output](
	[ProgramID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[AdjAmount] [int] NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

--
-- Add columns
--

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_PointsAdj_Output' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_PointsAdj_Output] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_PointsAdj_Output' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_PointsAdj_Output] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_PointsAdj_Output' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_PointsAdj_Output] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_PointsAdj_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_PointsAdj_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_PointsAdj_Output' AND column_name = 'Version' )
  -- At which Points record version was this data applied? Used to filter out duplicates.
  ALTER TABLE [dbo].[CPE_PointsAdj_Output] ADD [Version] [bigint]
GO


--
-- Constraints and indexes
--


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsAdj_Output]') AND name = N'PK_CPE_PointsAdj_Output')
ALTER TABLE [dbo].[CPE_PointsAdj_Output] ADD CONSTRAINT [PK_CPE_PointsAdj_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsAdj_Output]') AND name = N'IX_CPE_PointsAdj_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_PointsAdj_Output_TargetLocationID] ON [dbo].[CPE_PointsAdj_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsAdj_Output]') AND name = N'IX_CPE_PointsAdj_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_PointsAdj_Output_WaitingACK] ON [dbo].[CPE_PointsAdj_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CPE_PointsPending_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_PointsPending_Output.Table.sql 65727 2015-11-09 18:14:10Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_PointsPending_Output]    Script Date: 11/09/2015 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsPending_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_PointsPending_Output](
	[ProgramID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[EarnedAdjAmount] [int] NULL,
	[RedeemedAdjAmount] [int] NULL,
   [CartID] [nvarchar](36) NULL,
   [Deleted] [bit] not NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL,
   [PKID] [bigint] IDENTITY(1,1) not NULL
) ON [PRIMARY]
END
GO

--
-- Constraints and indexes
--

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsPending_Output]') AND name = N'PK_CPE_PointsPending_Output')
ALTER TABLE [dbo].[CPE_PointsPending_Output] ADD CONSTRAINT [PK_CPE_PointsPending_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsPending_Output]') AND name = N'IX_CPE_PointsPending_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_PointsPending_Output_TargetLocationID] ON [dbo].[CPE_PointsPending_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PointsPending_Output]') AND name = N'IX_CPE_PointsPending_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_PointsPending_Output_WaitingACK] ON [dbo].[CPE_PointsPending_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_PrefValueRemovalMV_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_PrefValueRemovalMV_Output.Table.sql 40687 2011-11-30 16:11:37Z mark $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefValueRemovalMV_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_PrefValueRemovalMV_Output](
  PreferenceID     bigint NULL,
  Value            nvarchar (250) NULL,
  WaitingACK       bigint NULL,
  TargetLocationID bigint NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefValueRemovalMV_Output]') AND name = N'IX_CPE_PrefValueRemovalMV_Output_TargetLocationID')
  CREATE NONCLUSTERED INDEX [IX_CPE_PrefValueRemovalMV_Output_TargetLocationID] ON [dbo].[CPE_PrefValueRemovalMV_Output] ([TargetLocationID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefValueRemovalMV_Output]') AND name = N'IX_CPE_PrefValueRemovalMV_Output_WaitingACK')
  CREATE NONCLUSTERED INDEX [IX_CPE_PrefValueRemovalMV_Output_WaitingACK] ON [dbo].[CPE_PrefValueRemovalMV_Output] ([WaitingACK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CPE_PrefValueRemoval_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_PrefValueRemoval_Output.Table.sql 40687 2011-11-30 16:11:37Z mark $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefValueRemoval_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_PrefValueRemoval_Output](
  PreferenceID     bigint NULL,
  Value            nvarchar (250) NULL,
  WaitingACK       bigint NULL,
  TargetLocationID bigint NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefValueRemoval_Output]') AND name = N'IX_CPE_PrefValueRemoval_Output_TargetLocationID')
  CREATE NONCLUSTERED INDEX [IX_CPE_PrefValueRemoval_Output_TargetLocationID] ON [dbo].[CPE_PrefValueRemoval_Output] ([TargetLocationID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefValueRemoval_Output]') AND name = N'IX_CPE_PrefValueRemoval_Output_WaitingACK')
  CREATE NONCLUSTERED INDEX [IX_CPE_PrefValueRemoval_Output_WaitingACK] ON [dbo].[CPE_PrefValueRemoval_Output] ([WaitingACK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CPE_PrefsMV_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_PrefsMV_Output.Table.sql 78602 2014-05-19 10:34:16Z nk250133 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefsMV_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_PrefsMV_Output](
  PrefValPKID      bigint IDENTITY(1,1) NOT NULL,
  PreferenceID     bigint NULL,
  CustomerPK       bigint NULL,
  Value            nvarchar (250) NULL,
  Deleted          bit NOT NULL,
  WaitingACK       bigint NULL,
  TargetLocationID bigint NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefsMV_Output]') AND name = N'IX_CPE_PrefsMV_Output_TargetLocationID')
  CREATE NONCLUSTERED INDEX [IX_CPE_PrefsMV_Output_TargetLocationID] ON [dbo].[CPE_PrefsMV_Output] ([TargetLocationID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefsMV_Output]') AND name = N'IX_CPE_PrefsMV_Output_WaitingACK')
  CREATE NONCLUSTERED INDEX [IX_CPE_PrefsMV_Output_WaitingACK] ON [dbo].[CPE_PrefsMV_Output] ([WaitingACK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_PrefsMV_Output]') AND name = N'IX_CPE_PrefsMV_Output_Deleted')
  CREATE NONCLUSTERED INDEX [IX_CPE_PrefsMV_Output_Deleted] ON [dbo].[CPE_PrefsMV_Output] ([Deleted] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
-- To drop the ID column on table test to recreate it as identity column
IF EXISTS (SELECT 1 FROM SYS.COLUMNS WHERE object_name(object_id) = 'CPE_PrefsMV_Output' AND name = 'PrefValPKID' AND is_identity = 0)
BEGIN
		ALTER TABLE CPE_PrefsMV_Output DROP COLUMN PrefValPKID
		ALTER TABLE CPE_PrefsMV_Output ADD PrefValPKID BIGINT IDENTITY(1,1) 
END	
GO



print 'processing tables/dbo.CPE_Prefs_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_Prefs_Output.Table.sql 78602 2014-05-19 10:34:16Z nk250133 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_Prefs_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_Prefs_Output](
  PrefValPKID      bigint IDENTITY(1,1) NOT NULL,
  PreferenceID     bigint NULL,
  CustomerPK       bigint NULL,
  Value            nvarchar (250) NULL,
  BatchID          decimal (20,0) NULL,
  WaitingACK       bigint NULL,
  TargetLocationID bigint NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_Prefs_Output]') AND name = N'IX_CPE_Prefs_Output_TargetLocationID')
  CREATE NONCLUSTERED INDEX [IX_CPE_Prefs_Output_TargetLocationID] ON [dbo].[CPE_Prefs_Output] ([TargetLocationID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_Prefs_Output]') AND name = N'IX_CPE_Prefs_Output_WaitingACK')
  CREATE NONCLUSTERED INDEX [IX_CPE_Prefs_Output_WaitingACK] ON [dbo].[CPE_Prefs_Output] ([WaitingACK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
-- To drop the ID column on table test to recreate it as identity column
IF EXISTS (SELECT 1 FROM SYS.COLUMNS WHERE object_name(object_id) = 'CPE_Prefs_Output' AND name = 'PrefValPKID' AND is_identity = 0)
BEGIN
		ALTER TABLE CPE_Prefs_Output DROP COLUMN PrefValPKID
		ALTER TABLE CPE_Prefs_Output ADD PrefValPKID BIGINT IDENTITY(1,1) 
END	
GO



print 'processing tables/dbo.CPE_RA_Archive.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RA_Archive.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_RA_Archive]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RA_Archive](
	[RewardAccumulationID] [bigint] NULL,
	[LocalID] [int] NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [bigint] NULL,
	[RewardOptionID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[PurchCustomerPK] [bigint] NULL,
	[QtyPurchased] [decimal](13, 3) NULL,
	[TotalPrice] [decimal](13, 3) NULL,
	[AccumulationDate] [datetime] NULL,
	[Deleted] [bit] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [int] NULL,
	[LastServerID] [int] NULL,
	[LogixTransNumEarned] [char](30) NULL,
	[LogixTransNumConsumed] [char](30) NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[ResolvedCustomerID] [nvarchar](400) NULL,
	[HHID] [nvarchar](400) NULL,
	[OriginalAccumulationDate] [datetime] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Archive' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_RA_Archive] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Archive' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_RA_Archive] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Archive' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_RA_Archive] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Archive' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_RA_Archive] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]') AND name = N'PK_CPE_RA_Archive')
ALTER TABLE [dbo].[CPE_RA_Archive] ADD CONSTRAINT [PK_CPE_RA_Archive] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]') AND name = N'IX_CPE_RA_Archive_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_CPE_RA_Archive_CustomerPK] ON [dbo].[CPE_RA_Archive] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]') AND name = N'IX_CPE_RA_Archive_LocalID_ServerSerial')
CREATE NONCLUSTERED INDEX [IX_CPE_RA_Archive_LocalID_ServerSerial] ON [dbo].[CPE_RA_Archive] 
(
	[LocalID] ASC,
	[ServerSerial] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]') AND name = N'IX_CPE_RA_Archive_LocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_RA_Archive_LocationID] ON [dbo].[CPE_RA_Archive] 
(
	[LocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]') AND name = N'IX_CPE_RA_Archive_RewardOptionID')
CREATE NONCLUSTERED INDEX [IX_CPE_RA_Archive_RewardOptionID] ON [dbo].[CPE_RA_Archive] 
(
	[RewardOptionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]') AND name = N'IX_CPE_RA_Archive_ServerSerial')
CREATE NONCLUSTERED INDEX [IX_CPE_RA_Archive_ServerSerial] ON [dbo].[CPE_RA_Archive] 
(
	[ServerSerial] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RA_Archive_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RA_Archive_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_RA_Archive] ADD  CONSTRAINT [DF_CPE_RA_Archive_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RA_Archive_LogixTransNumEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RA_Archive_LogixTransNumEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_RA_Archive] ADD  CONSTRAINT [DF_CPE_RA_Archive_LogixTransNumEarned]  DEFAULT ((0)) FOR [LogixTransNumEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RA_Archive_LogixTransNumConsumed]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RA_Archive]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RA_Archive_LogixTransNumConsumed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_RA_Archive] ADD  CONSTRAINT [DF_CPE_RA_Archive_LogixTransNumConsumed]  DEFAULT ((0)) FOR [LogixTransNumConsumed]
END


End
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RA_Archive]') and name='PresentedCustomerID')
BEGIN
  alter table CPE_RA_Archive alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RA_Archive]') and name='ResolvedCustomerID')
BEGIN
  alter table CPE_RA_Archive alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RA_Archive]') and name='HHID')
BEGIN
  alter table CPE_RA_Archive alter column HHID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_RA_Archive' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_RA_Archive] ADD KeyRotationFlag bit NULL
END
GO




print 'processing tables/dbo.CPE_RA_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RA_Output.Table.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_RA_Output]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RA_Output](
	[LocalID] [int] NULL,
	[ServerSerial] [int] NULL,
	[RewardOptionID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[QtyPurchased] [decimal](13, 3) NULL,
	[TotalPrice] [decimal](13, 3) NULL,
	[AccumulationDate] [datetime] NULL,
	[Deleted] [bit] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL,
	[LogixTransNumEarned] [char](30) NULL,
	[OverThreshold] [bit] NULL,
	[OriginalAccumulationDate] [datetime] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Output' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_RA_Output] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Output' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_RA_Output] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Output' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_RA_Output] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RA_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_RA_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Output]') AND name = N'PK_CPE_RA_Output')
ALTER TABLE [dbo].[CPE_RA_Output] ADD CONSTRAINT [PK_CPE_RA_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Output]') AND name = N'IX_CPE_RA_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_RA_Output_TargetLocationID] ON [dbo].[CPE_RA_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RA_Output]') AND name = N'IX_CPE_RA_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_RA_Output_WaitingACK] ON [dbo].[CPE_RA_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CPE_RD_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RD_Output.Table.sql 47947 2012-04-24 20:51:25Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_RD_Output]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RD_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RD_Output](
	[LocalID] [int] NULL,
	[ServerSerial] [int] NULL,
	[IncentiveID] [bigint] NULL,
	[RewardOptionID] [bigint] NULL,
	[Phase] [int] NULL,
	[CustomerPK] [bigint] NULL,
	[DistributionDate] [datetime] NULL,
	[Deleted] [bit] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RD_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_RD_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RD_Output]') AND name = N'PK_CPE_RD_Output')
ALTER TABLE [dbo].[CPE_RD_Output] ADD CONSTRAINT [PK_CPE_RD_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RD_Output]') AND name = N'IX_CPE_RD_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_RD_Output_TargetLocationID] ON [dbo].[CPE_RD_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RD_Output]') AND name = N'IX_CPE_RD_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_RD_Output_WaitingACK] ON [dbo].[CPE_RD_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RD_Output' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_RD_Output] ADD [POSTimeStamp] [datetime] NULL 
GO


print 'processing tables/dbo.CPE_RewardAccumulation.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RewardAccumulation.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_RewardAccumulation]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RewardAccumulation](
	[RewardAccumulationID] [bigint] IDENTITY(1,1) NOT NULL,
	[LocalID] [int] NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [bigint] NULL,
	[RewardOptionID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[PurchCustomerPK] [bigint] NULL,
	[QtyPurchased] [decimal](13, 3) NULL,
	[TotalPrice] [decimal](13, 3) NULL,
	[AccumulationDate] [datetime] NULL,
	[Deleted] [bit] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [int] NULL,
	[LastServerID] [int] NULL,
	[LogixTransNumEarned] [char](30) NULL,
	[LogixTransNumConsumed] [char](30) NULL,
	[OverThreshold] [bit] NOT NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[ResolvedCustomerID] [nvarchar](400) NULL,
	[HHID] [nvarchar](400) NULL,
	[OriginalAccumulationDate] [datetime] NULL,
 CONSTRAINT [PK_CPE_RewardAccumulation] PRIMARY KEY CLUSTERED 
(
	[RewardAccumulationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

-- Drop indexes.
-- jfuhs: Retire mostly-duplicate index (Duplicate of IX_CPE_RewardAccumulation_unique)
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_LocalID_ServerSerial')
	DROP INDEX [IX_CPE_RewardAccumulation_LocalID_ServerSerial] ON [dbo].[CPE_RewardAccumulation]
GO

-- Add indexes.

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_CustomerPK] ON [dbo].[CPE_RewardAccumulation] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_Deleted')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_Deleted] ON [dbo].[CPE_RewardAccumulation] 
(
	[Deleted] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_LocalID_ServerSerial')
--CREATE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_LocalID_ServerSerial] ON [dbo].[CPE_RewardAccumulation] 
--(
--	[LocalID] ASC,
--	[ServerSerial] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_LocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_LocationID] ON [dbo].[CPE_RewardAccumulation] 
(
	[LocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_RewardOptionID')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_RewardOptionID] ON [dbo].[CPE_RewardAccumulation] 
(
	[RewardOptionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_ServerSerial')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_ServerSerial] ON [dbo].[CPE_RewardAccumulation] 
(
	[ServerSerial] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_Unique')
CREATE UNIQUE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_Unique] ON [dbo].[CPE_RewardAccumulation] 
(
	[LocalID] ASC,
	[ServerSerial] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') AND name = N'IX_CPE_RewardAccumulation_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardAccumulation_WaitingACK] ON [dbo].[CPE_RewardAccumulation] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RewardAccumulation_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RewardAccumulation_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD  CONSTRAINT [DF_CPE_RewardAccumulation_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RewardAccumulation_LogixTransNumEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RewardAccumulation_LogixTransNumEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD  CONSTRAINT [DF_CPE_RewardAccumulation_LogixTransNumEarned]  DEFAULT ((0)) FOR [LogixTransNumEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RewardAccumulation_LogixTransConsumed]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RewardAccumulation_LogixTransConsumed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD  CONSTRAINT [DF_CPE_RewardAccumulation_LogixTransConsumed]  DEFAULT ((0)) FOR [LogixTransNumConsumed]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RewardAccumulation_OverThreshold]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RewardAccumulation_OverThreshold]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD  CONSTRAINT [DF_CPE_RewardAccumulation_OverThreshold]  DEFAULT ((0)) FOR [OverThreshold]
END


End
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RewardAccumulation' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RewardAccumulation' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RewardAccumulation' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD [POSTimeStamp] [datetime] NULL 
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') and name='ResolvedCustomerID')
BEGIN
  alter table CPE_RewardAccumulation alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') and name='PresentedCustomerID')
BEGIN
  alter table CPE_RewardAccumulation alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardAccumulation]') and name='HHID')
BEGIN
  alter table CPE_RewardAccumulation alter column HHID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_RewardAccumulation' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_RewardAccumulation] ADD KeyRotationFlag bit NULL
END
GO

print 'processing tables/dbo.CPE_RewardDistribution.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RewardDistribution.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RewardDistribution](
  [DistributionID] [bigint] IDENTITY(1,1) NOT NULL,
  [LocalID] [int] NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [IncentiveID] [bigint] NULL,
  [RewardOptionID] [bigint] NULL,
  [Phase] [int] NULL,
  [CustomerPK] [bigint] NULL,
  [DistributionDate] [datetime] NULL,
  [Deleted] [bit] NOT NULL,
  [LastUpdate] [datetime] NULL,
  [WaitingACK] [int] NULL,
  [LastServerID] [int] NULL,
  [LogixTransNum] [char](36) NULL,
  [PresentedCustomerID] [nvarchar](400) NULL,
  [PresentedCardTypeID] [int] NULL,
  [ResolvedCustomerID] [nvarchar](400) NULL,
  [HHID] [nvarchar](400) NULL,
  [POSTimeStamp] [datetime] NULL, 
 CONSTRAINT [PK_CPE_IncentiveDistribution] PRIMARY KEY CLUSTERED ([DistributionID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_RewardDistribution' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_RewardDistribution] ADD [POSTimeStamp] [datetime] NULL 
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_CustomerPK')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistribution_CustomerPK] ON [dbo].[CPE_RewardDistribution] ([CustomerPK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_DistributionDate')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistribution_DistributionDate] ON [dbo].[CPE_RewardDistribution] ([DistributionDate] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_IncentiveID')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistribution_IncentiveID] ON [dbo].[CPE_RewardDistribution] ([IncentiveID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_Phase')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistribution_Phase] ON [dbo].[CPE_RewardDistribution] ([Phase] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_RewardOptionID')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistribution_RewardOptionID] ON [dbo].[CPE_RewardDistribution] ([RewardOptionID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_ServerSerial')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistribution_ServerSerial] ON [dbo].[CPE_RewardDistribution] ([ServerSerial] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_WaitingACK')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistribution_WaitingACK] ON [dbo].[CPE_RewardDistribution] ([WaitingACK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- 20120416.MM: dropping unnecessary index on LastUpdate (BZ 2768)
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_LastUpdate')
  drop index CPE_RewardDistribution.IX_CPE_RewardDistribution_LastUpdate;
GO

-- 20120416.MM: dropping unnecessary index on LocalID (BZ 2768)
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_LocalID')
  drop index CPE_RewardDistribution.IX_CPE_RewardDistribution_LocalID;
GO

-- 20120416.MM: dropping unnecessary index on LocationID (BZ 2768)
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') AND name = N'IX_CPE_RewardDistribution_LocationID')
  drop index CPE_RewardDistribution.IX_CPE_RewardDistribution_LocationID;
GO



IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RewardDistribution_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RewardDistribution_Deleted]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CPE_RewardDistribution] ADD  CONSTRAINT [DF_CPE_RewardDistribution_Deleted]  DEFAULT ((0)) FOR [Deleted]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_RewardDistribution_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_RewardDistribution_LogixTransNum]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CPE_RewardDistribution] ADD  CONSTRAINT [DF_RewardDistribution_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
  END
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') and name='ResolvedCustomerID')
BEGIN
  alter table CPE_RewardDistribution alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') and name='PresentedCustomerID')
BEGIN
  alter table CPE_RewardDistribution alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardDistribution]') and name='HHID')
BEGIN
  alter table CPE_RewardDistribution alter column HHID nvarchar(400)
END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CPE_RewardDistribution' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[CPE_RewardDistribution] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_RewardDistribution' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_RewardDistribution] ADD KeyRotationFlag bit NULL
END
GO



print 'processing tables/dbo.CPE_RewardDistributionPending.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RewardDistributionPending.Table.sql 1 2014-11-24 13:52:11Z db123627 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RewardDistributionPending](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [CustomerPK] [bigint] NULL,
  [IncentiveID] [bigint] NULL,
  [RewardOptionID] [bigint] NULL,
  [CartID] [nvarchar](36) NULL,
  [ExtLocationCode] [nvarchar](20) NULL,
  [Deleted] [bit] NOT NULL,
  [LastUpdate] [datetime] NULL,
  [LogixTransNum] [char](36) NULL,
  [POSTimeStamp] [datetime] NULL, 
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  CONSTRAINT [PK_CPE_RewardDistributionPending] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending]') AND name = N'IX_CPE_RewardDistributionPending_CustomerPK')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistributionPending_CustomerPK] ON [dbo].[CPE_RewardDistributionPending] ([CustomerPK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending]') AND name = N'IX_CPE_RewardDistributionPending_IncentiveID')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistributionPending_IncentiveID] ON [dbo].[CPE_RewardDistributionPending] ([IncentiveID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending]') AND name = N'IX_CPE_RewardDistributionPending_RewardOptionID')
  CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistributionPending_RewardOptionID] ON [dbo].[CPE_RewardDistributionPending] ([RewardOptionID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_RewardDistributionPending_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RewardDistributionPending_Deleted]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CPE_RewardDistributionPending] ADD  CONSTRAINT [DF_CPE_RewardDistributionPending_Deleted]  DEFAULT ((0)) FOR [Deleted]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_RewardDistributionPending_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_RewardDistributionPending_LogixTransNum]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CPE_RewardDistributionPending] ADD  CONSTRAINT [DF_RewardDistributionPending_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
  END
End
GO



print 'processing tables/dbo.CPE_RewardDistributionPending_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RewardDistributionPending_Output.Table.sql 65727 2015-11-09 18:14:10Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_RewardDistributionPending_Output]    Script Date: 11/09/2015 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RewardDistributionPending_Output](
   [IncentiveID] [bigint] NULL,
   [RewardOptionID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
   [CartID] [nvarchar](36) NULL,
   [Deleted] [bit] not NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL,
   [PKID] [bigint] IDENTITY(1,1) not NULL
) ON [PRIMARY]
END
GO

--
-- Constraints and indexes
--

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending_Output]') AND name = N'PK_CPE_RewardDistributionPending_Output')
ALTER TABLE [dbo].[CPE_RewardDistributionPending_Output] ADD CONSTRAINT [PK_CPE_RewardDistributionPending_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending_Output]') AND name = N'IX_CPE_RewardDistributionPending_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistributionPending_Output_TargetLocationID] ON [dbo].[CPE_RewardDistributionPending_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistributionPending_Output]') AND name = N'IX_CPE_RewardDistributionPending_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardDistributionPending_Output_WaitingACK] ON [dbo].[CPE_RewardDistributionPending_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_RewardDistribution_Locked.Table.sql'; 
--
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO


/****** Object  Table [dbo].[CPE_RewardDistribution_Locked]    Script Date 10/28/2015 091952 ******/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'PK_CPE_IncentiveDistribution_Locked') AND type = 'K')
BEGIN
ALTER TABLE dbo.CPE_RewardDistribution_Locked DROP CONSTRAINT PK_CPE_IncentiveDistribution_Locked
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_RewardDistribution_Locked' AND COLUMN_NAME = 'DistributionID')
BEGIN
	ALTER TABLE dbo.CPE_RewardDistribution_Locked DROP COLUMN DistributionID
END
GO


IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardDistribution_Locked]') AND type in (N'U'))
CREATE TABLE [dbo].[CPE_RewardDistribution_Locked](
    [LocalID] [int] NULL,
    [ServerSerial] [int] NULL,
    [LocationID] [bigint] NULL,
    [IncentiveID] [bigint] NULL,
    [RewardOptionID] [bigint] NULL,
    [Phase] [int] NULL,
    [CustomerPK] [bigint] NULL,
    [DistributionDate] [datetime] NULL,
    [Deleted] [bit] NOT NULL,
    [LastUpdate] [datetime] NULL,
    [WaitingACK] [int] NULL,
    [LastServerID] [int] NULL,
    [LogixTransNum] [char](36) NULL,
    [PresentedCustomerID] [nvarchar](400) NULL,
    [PresentedCardTypeID] [int] NULL,
    [ResolvedCustomerID] [nvarchar](400) NULL,
    [HHID] [nvarchar](400) NULL,
    [POSTimeStamp] [datetime] NULL,

) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_RewardDistribution_Locked_Deleted]') AND type = 'D')
ALTER TABLE [dbo].[CPE_RewardDistribution_Locked] ADD  CONSTRAINT [DF_CPE_RewardDistribution_Locked_Deleted]  DEFAULT ((0)) FOR [Deleted]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_RewardDistribution_Locked_LogixTransNum]') AND type = 'D')
ALTER TABLE [dbo].[CPE_RewardDistribution_Locked] ADD  CONSTRAINT [DF_RewardDistribution_Locked_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'dbo.CPE_RewardDistribution_Locked') AND name = N'IX_CPE_RewardDistribution_Locked_CustomerPK')
  CREATE NONCLUSTERED INDEX IX_CPE_RewardDistribution_Locked_CustomerPK ON dbo.CPE_RewardDistribution_Locked(CustomerPK) 
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardDistribution_Locked]') and name='PresentedCustomerID')
BEGIN
  alter table CPE_RewardDistribution_Locked alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardDistribution_Locked]') and name='ResolvedCustomerID')
BEGIN
  alter table CPE_RewardDistribution_Locked alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_RewardDistribution_Locked]') and name='HHID')
BEGIN
  alter table CPE_RewardDistribution_Locked alter column HHID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_RewardDistribution_Locked' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_RewardDistribution_Locked] ADD KeyRotationFlag bit NULL
END
GO

print 'processing tables/dbo.CPE_RewardLimitPending_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_RewardLimitPending_Output.Table.sql 65727 2015-11-09 18:14:10Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_RewardLimitPending_Output]    Script Date: 11/09/2015 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardLimitPending_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_RewardLimitPending_Output](
	[PromoVarID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[AdjAmount] [int] NULL,
   [CartID] [nvarchar](36) NULL,
   [Deleted] [bit] not NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL,
   [PKID] [bigint] IDENTITY(1,1) not NULL
) ON [PRIMARY]
END
GO

--
-- Constraints and indexes
--

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardLimitPending_Output]') AND name = N'PK_CPE_RewardLimitPending_Output')
ALTER TABLE [dbo].[CPE_RewardLimitPending_Output] ADD CONSTRAINT [PK_CPE_RewardLimitPending_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardLimitPending_Output]') AND name = N'IX_CPE_RewardLimitPending_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardLimitPending_Output_TargetLocationID] ON [dbo].[CPE_RewardLimitPending_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_RewardLimitPending_Output]') AND name = N'IX_CPE_RewardLimitPending_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_RewardLimitPending_Output_WaitingACK] ON [dbo].[CPE_RewardLimitPending_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_SF_Output.sql'; 
--
GO
-- $Id: dbo.CPE_SF_Output.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_SF_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SF_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_SF_Output](
	[customerpk] [bigint] NULL,
	[rewardid] [bigint] NULL,
	[franking_text] [nvarchar](128) NULL,
	[create_date] [datetime] NULL,
	[origin_store] [bigint] NULL,
	[status] [smallint] NULL,
	[issuing_store] [bigint] NULL,
	[issue_date] [datetime] NULL,
	[priority] [int] NULL,
	[deliverabletype] [int] NULL,
	[WaitingAck] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SF_Output' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_SF_Output] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SF_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_SF_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SF_Output]') AND name = N'PK_CPE_SF_Output')
ALTER TABLE [dbo].[CPE_SF_Output] ADD CONSTRAINT [PK_CPE_SF_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO



print 'processing tables/dbo.CPE_STD_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_STD_Output.Table.sql 47947 2012-04-24 20:51:25Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_STD_Output]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_STD_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_STD_Output](
	[CustomerPK] [int] NULL,
	[AdjAmount] [decimal](12, 3) NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [int] NULL,
	[TargetLocationID] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_STD_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_STD_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_STD_Output]') AND name = N'PK_CPE_STD_Output')
ALTER TABLE [dbo].[CPE_STD_Output] ADD CONSTRAINT [PK_CPE_STD_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_STD_Output]') AND name = N'IX_CPE_STD_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_STD_Output_TargetLocationID] ON [dbo].[CPE_STD_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = OFF) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_STD_Output]') AND name = N'IX_CPE_STD_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_STD_Output_WaitingACK] ON [dbo].[CPE_STD_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = OFF) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_SVTransferred_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_SVTransferred_Output.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_SVTransferred_Output]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SVTransferred_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_SVTransferred_Output](
	[LocalID] [bigint] NULL,
	[ServerSerial] [int] NULL,
	[OldCustomerPK] [int] NULL,
	[NewCustomerPK] [int] NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SVTransferred_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_SVTransferred_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SVTransferred_Output]') AND name = N'PK_CPE_SVTransferred_Output')
ALTER TABLE [dbo].[CPE_SVTransferred_Output] ADD CONSTRAINT [PK_CPE_SVTransferred_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_SVTransferred_Output' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_SVTransferred_Output] ADD KeyRotationFlag bit NULL
END
GO

print 'processing tables/dbo.CPE_SVUpdated_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_SVUpdated_Output.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_SVUpdated_Output]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SVUpdated_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_SVUpdated_Output](
	[LocalID] [bigint] NULL,
	[ServerSerial] [int] NULL,
	[NewExternalID] [nvarchar](400) NULL,
	[QtyUsed] [int] NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SVUpdated_Output' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_SVUpdated_Output] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SVUpdated_Output' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_SVUpdated_Output] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SVUpdated_Output' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_SVUpdated_Output] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SVUpdated_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_SVUpdated_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SVUpdated_Output]') AND name = N'PK_CPE_SVUpdated_Output')
ALTER TABLE [dbo].[CPE_SVUpdated_Output] ADD CONSTRAINT [PK_CPE_SVUpdated_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SVUpdated_Output]') AND name = N'IX_CPE_SVUpdated_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_SVUpdated_Output_TargetLocationID] ON [dbo].[CPE_SVUpdated_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SVUpdated_Output]') AND name = N'IX_CPE_SVUpdated_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_SVUpdated_Output_WaitingACK] ON [dbo].[CPE_SVUpdated_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_SVUpdated_Output]') and name='NewExternalID')
Begin
  alter table CPE_SVUpdated_Output alter column NewExternalID nvarchar(400)
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_SVUpdated_Output' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_SVUpdated_Output] ADD KeyRotationFlag bit NULL
END
GO



print 'processing tables/dbo.CPE_SV_Output.Table.sql'; 
--
GO
-- $Id: dbo.CPE_SV_Output.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_SV_Output]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SV_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_SV_Output](
	[LocalID] [bigint] NULL,
	[ServerSerial] [int] NULL,
	[SVProgramID] [bigint] NULL,
	[OfferID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[QtyEarned] [int] NULL,
	[QtyUsed] [int] NULL,
	[Value] [decimal](12, 3) NULL,
	[EarnedDate] [datetime] NULL,
	[EarnedLocationID] [bigint] NULL,
	[ExpireDate] [datetime] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[WaitingACK] [bigint] NULL,
	[TargetLocationID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SV_Output' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_SV_Output] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SV_Output' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_SV_Output] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SV_Output' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_SV_Output] ADD [POSTimeStamp] [datetime] NULL 
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_SV_Output' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_SV_Output] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SV_Output]') AND name = N'PK_CPE_SV_Output')
ALTER TABLE [dbo].[CPE_SV_Output] ADD CONSTRAINT [PK_CPE_SV_Output] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SV_Output]') AND name = N'IX_CPE_SV_Output_TargetLocationID')
CREATE NONCLUSTERED INDEX [IX_CPE_SV_Output_TargetLocationID] ON [dbo].[CPE_SV_Output] 
(
	[TargetLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_SV_Output]') AND name = N'IX_CPE_SV_Output_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_SV_Output_WaitingACK] ON [dbo].[CPE_SV_Output] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_SV_Output]') and name='ExternalID')
Begin
  alter table CPE_SV_Output alter column ExternalID nvarchar(400)
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_SV_Output' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_SV_Output] ADD KeyRotationFlag bit NULL
END
GO

print 'processing tables/dbo.CPE_UploadTemp_GM.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_GM.Table.sql 64189 2013-04-05 18:56:54Z mm180021 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_GM](
  [TableNum] [varchar](4) NULL,
  [Operation] [varchar](2) NULL,
  [Col1] [varchar](255) NULL,
  [Col2] [varchar](255) NULL,
  [Col3] [varchar](255) NULL,
  [Col4] [varchar](255) NULL,
  [Col5] [varchar](255) NULL,
  [Col6] [varchar](255) NULL,
  [Col7] [varchar](255) NULL,
  [Col8] [varchar](255) NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_GM_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_GM add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_GM_IPLSEQNUM default (1) with values;
GO

-- Index Removal

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_LocationID')
DROP INDEX [IX_CPE_UploadTemp_GM_LocationID] ON [dbo].[CPE_UploadTemp_GM] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_Operation')
DROP INDEX [IX_CPE_UploadTemp_GM_Operation] ON [dbo].[CPE_UploadTemp_GM] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_ServerSerial')
DROP INDEX [IX_CPE_UploadTemp_GM_ServerSerial] ON [dbo].[CPE_UploadTemp_GM] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_TableNum')
DROP INDEX [IX_CPE_UploadTemp_GM_TableNum] ON [dbo].[CPE_UploadTemp_GM] 
GO

-- Column Creation

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_GM' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_UploadTemp_GM] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_GM' AND column_name = 'POSTimeStamp')
Begin
    ALTER TABLE [dbo].[CPE_UploadTemp_GM] ADD [POSTimeStamp] [datetime] NULL
End
GO

-- Index Creation

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'PK_CPE_UploadTemp_GM')
ALTER TABLE [dbo].[CPE_UploadTemp_GM] ADD CONSTRAINT [PK_CPE_UploadTemp_GM] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_LocationID')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_GM_LocationID] ON [dbo].[CPE_UploadTemp_GM] 
--(
--	[LocationID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_Operation')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_GM_Operation] ON [dbo].[CPE_UploadTemp_GM] 
--(
--	[Operation] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_ServerSerial')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_GM_ServerSerial] ON [dbo].[CPE_UploadTemp_GM] 
--(
--	[ServerSerial] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_TableNum')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_GM_TableNum] ON [dbo].[CPE_UploadTemp_GM] 
--(
--	[TableNum] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_GM]') AND name = N'IX_CPE_UploadTemp_GM_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_GM_WaitingACK] ON [dbo].[CPE_UploadTemp_GM] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CPE_UploadTemp_PA.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_PA.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_PA](
  [TableNum] [varchar](4) NULL,
  [Operation] [varchar](2) NULL,
  [Col1] [varchar](255) NULL,
  [Col2] [varchar](255) NULL,
  [Col3] [varchar](255) NULL,
  [Col4] [varchar](255) NULL,
  [Col5] [varchar](255) NULL,
  [Col6] [varchar](255) NULL,
  [Col7] [varchar](255) NULL,
  [Col8] [varchar](255) NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  [Col9] [varchar](400) NULL,
  [Col10] [varchar](255) NULL,
  [Col11] [varchar](400) NULL,
  [Col12] [varchar](400) NULL,
  [AdjustmentSourceID] [smallint],
	[AdjustmentTypeID] [smallint],
	[AdjustmentReasonID] [smallint],
	[AdjustmentReasonDescription] [nvarchar](50),
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_PA_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_PA add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_PA_IPLSEQNUM default (1) with values;
GO


-- 20120228 jfuhs: Retired
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_LocationID')
--    CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_PA_LocationID] ON [dbo].[CPE_UploadTemp_PA] 
--    (
--	    [LocationID] ASC
--    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
IF EXISTS ( SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_LocationID' )
    DROP INDEX [IX_CPE_UploadTemp_PA_LocationID] ON [dbo].[CPE_UploadTemp_PA]
GO


-- 20120228 jfuhs: Retired
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_Operation')
--    CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_PA_Operation] ON [dbo].[CPE_UploadTemp_PA] 
--    (
--	    [Operation] ASC
--    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_Operation')
    DROP INDEX [IX_CPE_UploadTemp_PA_Operation] ON [dbo].[CPE_UploadTemp_PA]
GO

-- 20120228 jfuhs: Retired
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_ServerSerial')
--    CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_PA_ServerSerial] ON [dbo].[CPE_UploadTemp_PA] 
--    (
--	    [ServerSerial] ASC
--    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_ServerSerial')
    DROP INDEX [IX_CPE_UploadTemp_PA_ServerSerial] ON [dbo].[CPE_UploadTemp_PA]
GO

-- 20120228 jfuhs: Retired
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_TableNum')
--    CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_PA_TableNum] ON [dbo].[CPE_UploadTemp_PA] 
--    (
--	    [TableNum] ASC
--    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_TableNum')
    DROP INDEX [IX_CPE_UploadTemp_PA_TableNum] ON [dbo].[CPE_UploadTemp_PA]
GO

-- 20120311 bin: decided to drop this index,and create an identity column with clustered index
-- IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_WaitingACK')
-- CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_PA_WaitingACK] ON [dbo].[CPE_UploadTemp_PA] 
--    (
--	    [WaitingACK] ASC
--    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
-- GO
IF EXISTS ( SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_WaitingACK' )
    DROP INDEX IX_CPE_UploadTemp_PA_WaitingACK ON [dbo].[CPE_UploadTemp_PA]
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_PA' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [Replayed] [bit] NULL 

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_PA' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [ReplayedDate] [datetime] NULL 

GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_PA' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [POSTimeStamp] [datetime] NULL 

GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_PA' AND column_name = 'PKID')
    ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [PKID] [bigint] IDENTITY(1,1) 

GO
-- Drop previous primary key 
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'IX_CPE_UploadTemp_PA_PKID')
	ALTER TABLE [dbo].[CPE_UploadTemp_PA] DROP CONSTRAINT [IX_CPE_UploadTemp_PA_PKID]

GO
-- add new primary key
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') AND name = N'PK_CPE_UploadTemp_PA')
	ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD CONSTRAINT [PK_CPE_UploadTemp_PA] PRIMARY KEY CLUSTERED ([PKID] ASC) ON [PRIMARY]

GO

-- Add columns to CPE_UploadTemp_PA table
 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_PA' AND COLUMN_NAME = 'AdjustmentSourceID')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [AdjustmentSourceID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_PA' AND COLUMN_NAME = 'AdjustmentTypeID')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [AdjustmentTypeID] [smallint] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_PA' AND COLUMN_NAME = 'AdjustmentReasonID')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [AdjustmentReasonID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_PA' AND COLUMN_NAME = 'AdjustmentReasonText')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD [AdjustmentReasonText] [nvarchar](50) NULL
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') and name='Col9')
Begin
  alter table CPE_UploadTemp_PA alter column Col9 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') and name='Col11')
Begin
  alter table CPE_UploadTemp_PA alter column Col11 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA]') and name='Col12')
Begin
  alter table CPE_UploadTemp_PA alter column Col12 nvarchar(400)
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_PA' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_UploadTemp_PA] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.CPE_UploadTemp_PA_Vars.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_PA_Vars.Table.sql 27369 2011-02-23 15:31:57Z mark $
-- Build Version: 7.3.1.138972

/****** Object:  Table [dbo].[CPE_UploadTemp_PA_Vars]    Script Date: 12/27/2010 15:03:46 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PA_Vars]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_PA_Vars](
	[LocalServerID] [bigint] NOT NULL,
	[LastPALowPKID]  [bigint],
	[LastPAHighPKID]  [bigint],
	CONSTRAINT [PK_CPE_UploadTemp_PA_Vars] PRIMARY KEY CLUSTERED ([LocalServerID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

print 'processing tables/dbo.CPE_UploadTemp_PREF.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_PREF.Table.sql 90470 2014-24-04 18:56:54Z vb185060 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PREF]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_PREF](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [TableNum] [int] NULL,
  [Operation] [int] NULL,
  Col1 [bigint] NULL,	--[customerpk]
  Col2 [bigint] NULL,	--[preferenceID]
  Col3 [nvarchar](250) NULL, --[value]
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL, 
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_PREF_IPLSEQNUM default (1), -- The sequence number from the last time an IPL was performed from the location sending the data
  CONSTRAINT [PK_CPE_UploadTemp_PREF] PRIMARY KEY CLUSTERED ([PKID] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_PREF' AND column_name = 'Col3' AND DATA_TYPE ='varchar')
ALTER TABLE CPE_UploadTemp_PREF ALTER COLUMN Col3 nvarchar(250)
GO
SET ANSI_PADDING OFF
GO



print 'processing tables/dbo.CPE_UploadTemp_PREF_MV.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_PREF.Table.sql 90470 2014-24-04 18:56:54Z vb185060 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PREF_MV]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_PREF_MV](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [TableNum] [int] NULL,
  [Operation] [int] NULL,
  Col1 [bigint] NULL,	--[customerpk]
  Col2 [bigint] NULL,	--[preferenceID]
  Col3 [nvarchar](250) NULL, --[value]
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL, 
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_PREF_MV_IPLSEQNUM default (1), -- The sequence number from the last time an IPL was performed from the location sending the data
  CONSTRAINT [PK_CPE_UploadTemp_PREF_MV] PRIMARY KEY CLUSTERED ([PKID] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_PREF_MV' AND column_name = 'Col3' AND DATA_TYPE ='varchar')
ALTER TABLE CPE_UploadTemp_PREF_MV ALTER COLUMN Col3 nvarchar(250)
GO
SET ANSI_PADDING OFF
GO



print 'processing tables/dbo.CPE_UploadTemp_PointsPending.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_PointsPending.Table.sql 77197 2016-11-14 02:12:00Z db123627 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PointsPending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_PointsPending](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [CustomerPK] [bigint] NULL,
  [ProgramID] [bigint] NULL,
  [EarnedAmount] [decimal](15,3) NULL,
  [RedeemedAmount] [decimal](15,3) NULL,
  [CartID] [nvarchar](36) NULL,
  [ExtLocationCode] [nvarchar](20) NULL,
  [LogixTransNum] [char](36) NULL,
  [POSTimeStamp] [datetime] NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

-- add primary key
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_PointsPending]') AND name = N'PK_CPE_UploadTemp_PointsPending')
	ALTER TABLE [dbo].[CPE_UploadTemp_PointsPending] ADD CONSTRAINT [PK_CPE_UploadTemp_PointsPending] PRIMARY KEY CLUSTERED ([PKID] ASC) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_UploadTemp_RA_N.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_RA_N.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_UploadTemp_RA_N]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_N]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_RA_N](
	[TableNum] [int] NULL,
	[Operation] [int] NULL,
	[Col1] [varchar](255) NULL,
	[Col2] [varchar](255) NULL,
	[Col3] [varchar](255) NULL,
	[Col4] [varchar](255) NULL,
	[Col5] [varchar](255) NULL,
	[Col6] [varchar](255) NULL,
	[Col7] [varchar](255) NULL,
	[Col8] [varchar](255) NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [bigint] NULL,
	[WaitingACK] [int] NULL,
	[Col9] [varchar](255) NULL,
	[Col10] [varchar](255) NULL,
	[Col11] [varchar](255) NULL,
	[Col12] [varchar](400) NULL,
	[Col13] [varchar](255) NULL,
	[Col14] [varchar](400) NULL,
	[Col15] [varchar](400) NULL,
        [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_RA_N_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_N' AND column_name = 'Replayed')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_N] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_N' AND column_name = 'ReplayedDate')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_N] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_N' AND column_name = 'POSTimeStamp')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_N] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_N' AND column_name = 'PKID')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_N] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_N]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_RA_N add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_RA_N_IPLSEQNUM default (1) with values;
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_N]') AND name = N'PK_CPE_UploadTemp_RA_N')
ALTER TABLE [dbo].[CPE_UploadTemp_RA_N] ADD CONSTRAINT [PK_CPE_UploadTemp_RA_N] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_N]') AND name = N'IX_CPE_UploadTemp_RA_N_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RA_N_WaitingACK] ON [dbo].[CPE_UploadTemp_RA_N] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_N]') and name='Col12')
BEGIN
  alter table CPE_UploadTemp_RA_N alter column Col12 nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_N]') and name='Col14')
BEGIN
  alter table CPE_UploadTemp_RA_N alter column Col14 nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_N]') and name='Col15')
BEGIN
  alter table CPE_UploadTemp_RA_N alter column Col15 nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_RA_N' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_UploadTemp_RA_N] ADD KeyRotationFlag bit NULL
END
GO




print 'processing tables/dbo.CPE_UploadTemp_RA_ND.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_RA_ND.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_UploadTemp_RA_ND]    Script Date: 12/27/2010 16:15:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_ND]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_RA_ND](
	[TableNum] [int] NULL,
	[Operation] [int] NULL,
	[Col1] [varchar](255) NULL,
	[Col2] [varchar](255) NULL,
	[Col3] [varchar](255) NULL,
	[Col4] [varchar](255) NULL,
	[Col5] [varchar](255) NULL,
	[Col6] [varchar](255) NULL,
	[Col7] [varchar](255) NULL,
	[Col8] [varchar](255) NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [bigint] NULL,
	[WaitingACK] [int] NULL,
	[Col9] [varchar](255) NULL,
	[Col10] [varchar](255) NULL,
	[Col11] [varchar](400) NULL,
	[Col12] [varchar](255) NULL,
	[Col13] [varchar](400) NULL,
	[Col14] [varchar](400) NULL,
        [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_RA_ND_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_ND' AND column_name = 'Replayed')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_ND] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_ND' AND column_name = 'ReplayedDate')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_ND] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_ND' AND column_name = 'POSTimeStamp')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_ND] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_ND' AND column_name = 'PKID')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_ND] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_ND]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_RA_ND add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_RA_ND_IPLSEQNUM default (1) with values;
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_ND]') AND name = N'PK_CPE_UploadTemp_RA_ND')
ALTER TABLE [dbo].[CPE_UploadTemp_RA_ND] ADD CONSTRAINT [PK_CPE_UploadTemp_RA_ND] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_ND]') AND name = N'IX_CPE_UploadTemp_RA_ND_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RA_ND_WaitingACK] ON [dbo].[CPE_UploadTemp_RA_ND] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_ND]') and name='Col11')
BEGIN
  alter table CPE_UploadTemp_RA_ND alter column Col11 nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_ND]') and name='Col13')
BEGIN
  alter table CPE_UploadTemp_RA_ND alter column Col13 nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_ND]') and name='Col14')
BEGIN
  alter table CPE_UploadTemp_RA_ND alter column Col14 nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_RA_ND' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_UploadTemp_RA_ND] ADD KeyRotationFlag bit NULL
END
GO





print 'processing tables/dbo.CPE_UploadTemp_RA_OD.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_RA_OD.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_UploadTemp_RA_OD]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_OD]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_RA_OD](
	[TableNum] [int] NULL,
	[Operation] [int] NULL,
	[Col1] [varchar](255) NULL,
	[Col2] [varchar](255) NULL,
	[Col3] [varchar](255) NULL,
	[Col4] [varchar](255) NULL,
	[Col5] [varchar](255) NULL,
	[Col6] [varchar](255) NULL,
	[Col7] [varchar](255) NULL,
	[Col8] [varchar](255) NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [bigint] NULL,
	[WaitingACK] [int] NULL,
	[Col9] [varchar](255) NULL,
	[Col10] [varchar](255) NULL,
	[Col11] [varchar](255) NULL,
	[Col12] [varchar](400) NULL,
	[Col13] [varchar](255) NULL,
	[Col14] [varchar](400) NULL,
	[Col15] [varchar](400) NULL,
	[OriginalAccumulationDate] [datetime] NULL,
        [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_RA_OD_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_OD' AND column_name = 'Replayed')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_OD] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_OD' AND column_name = 'ReplayedDate')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_OD] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_OD' AND column_name = 'POSTimeStamp')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_OD] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RA_OD' AND column_name = 'PKID')
  ALTER TABLE [dbo].[CPE_UploadTemp_RA_OD] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_OD]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_RA_OD add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_RA_OD_IPLSEQNUM default (1) with values;
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_OD]') AND name = N'PK_CPE_UploadTemp_RA_OD')
ALTER TABLE [dbo].[CPE_UploadTemp_RA_OD] ADD CONSTRAINT [PK_CPE_UploadTemp_RA_OD] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_OD]') AND name = N'IX_CPE_UploadTemp_RA_OD_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RA_OD_WaitingACK] ON [dbo].[CPE_UploadTemp_RA_OD] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_OD]') and name='Col12')
BEGIN
  alter table CPE_UploadTemp_RA_OD alter column Col12 nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_OD]') and name='Col14')
BEGIN
  alter table CPE_UploadTemp_RA_OD alter column Col14 nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RA_OD]') and name='Col15')
BEGIN
  alter table CPE_UploadTemp_RA_OD alter column Col15 nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_RA_OD' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_UploadTemp_RA_OD] ADD KeyRotationFlag bit NULL
END
GO




print 'processing tables/dbo.CPE_UploadTemp_RD.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_RD.Table.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_UploadTemp_RD]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_RD](
	[TableNum] [varchar](4) NULL,
	[Operation] [varchar](2) NULL,
	[Col1] [varchar](255) NULL,
	[Col2] [varchar](255) NULL,
	[Col3] [varchar](255) NULL,
	[Col4] [varchar](255) NULL,
	[Col5] [varchar](255) NULL,
	[Col6] [varchar](255) NULL,
	[Col7] [varchar](255) NULL,
	[Col8] [varchar](255) NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [bigint] NULL,
	[WaitingACK] [int] NULL,
	[Col9] [varchar](255) NULL,
	[Col10] [varchar](400) NULL,
	[Col11] [varchar](255) NULL,
	[Col12] [varchar](400) NULL,
	[Col13] [varchar](400) NULL,
        [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_RD_IPLSEQNUM default (1)  -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_RD add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_RD_IPLSEQNUM default (1) with values;
GO

-- Index Removal

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_LocationID')
DROP INDEX [IX_CPE_UploadTemp_RD_LocationID] ON [dbo].[CPE_UploadTemp_RD] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_Operation')
DROP INDEX [IX_CPE_UploadTemp_RD_Operation] ON [dbo].[CPE_UploadTemp_RD] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_ServerSerial')
DROP INDEX [IX_CPE_UploadTemp_RD_ServerSerial] ON [dbo].[CPE_UploadTemp_RD] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_TableNum')
DROP INDEX [IX_CPE_UploadTemp_RD_TableNum] ON [dbo].[CPE_UploadTemp_RD] 
GO


-- Column Creation

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RD' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_UploadTemp_RD] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_RD' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_UploadTemp_RD] ADD [POSTimeStamp] [datetime] NULL 
GO


-- Index Creation

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'PK_CPE_UploadTemp_RD')
ALTER TABLE [dbo].[CPE_UploadTemp_RD] ADD CONSTRAINT [PK_CPE_UploadTemp_RD] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_LocationID')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RD_LocationID] ON [dbo].[CPE_UploadTemp_RD] 
--(
--	[LocationID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_Operation')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RD_Operation] ON [dbo].[CPE_UploadTemp_RD] 
--(
--	[Operation] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_ServerSerial')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RD_ServerSerial] ON [dbo].[CPE_UploadTemp_RD] 
--(
--	[ServerSerial] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_TableNum')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RD_TableNum] ON [dbo].[CPE_UploadTemp_RD] 
--(
--	[TableNum] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') AND name = N'IX_CPE_UploadTemp_RD_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RD_WaitingACK] ON [dbo].[CPE_UploadTemp_RD] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') and name='Col10')
Begin
  alter table CPE_UploadTemp_RD alter column Col10 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') and name='Col12')
Begin
  alter table CPE_UploadTemp_RD alter column Col12 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_RD]') and name='Col13')
Begin
  alter table CPE_UploadTemp_RD alter column Col13 nvarchar(400)
End
GO






print 'processing tables/dbo.CPE_UploadTemp_RewardDistributionPending.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_RewardDistributionPending.Table.sql 64189 2016-11-14 18:56:54Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_UploadTemp_RewardDistributionPending]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RewardDistributionPending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_RewardDistributionPending](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [CustomerPK] [bigint] NULL,
  [IncentiveID] [bigint] NULL,
  [RewardOptionID] [bigint] NULL,
  [CartID] [nvarchar](36) NULL,
  [ExtLocationCode] [nvarchar](20) NULL,
  [LogixTransNum] [char](36) NULL,
  [POSTimeStamp] [datetime] NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

-- Index Creation

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RewardDistributionPending]') AND name = N'PK_CPE_UploadTemp_RewardDistributionPending')
ALTER TABLE [dbo].[CPE_UploadTemp_RewardDistributionPending] ADD CONSTRAINT [PK_CPE_UploadTemp_RewardDistributionPending] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RewardDistributionPending]') AND name = N'IX_CPE_UploadTemp_RewardDistributionPending_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_RewardDistributionPending_WaitingACK] ON [dbo].[CPE_UploadTemp_RewardDistributionPending] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_UploadTemp_RewardLimit.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_RL.Table.sql 77197 2015-10-09 02:12:00Z db123627 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RewardLimit]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_RewardLimit](
  [TableNum] [varchar](4) NULL,
  [Operation] [varchar](2) NULL,
  [CustomerPK] [bigint] NULL,
  [PromoVarID] [bigint] NULL,
  [AdjustmentAmount] [decimal](12, 3) NULL,
  [RewardOptionID] [bigint] NULL,
  [IncentiveID] [bigint] NULL,
  [LogixTransNum] [char](36) NULL,
  [PresentedID] [nvarchar](256) NULL,
  [PresentedIDType] [int] NULL,
  [ResolvedID] [nvarchar](256) NULL,
  [HouseholdID] [nvarchar](256) NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  [POSTimeStamp] [datetime] NULL,
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_RL_IPLSEQNUM default (1), -- The sequence number from the last time an IPL was performed from the location sending the data
  [PKID] [bigint] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

-- add primary key
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RewardLimit]') AND name = N'PK_CPE_UploadTemp_RL')
	ALTER TABLE [dbo].[CPE_UploadTemp_RewardLimit] ADD CONSTRAINT [PK_CPE_UploadTemp_RL] PRIMARY KEY CLUSTERED ([PKID] ASC) ON [PRIMARY]
GO



print 'processing tables/dbo.CPE_UploadTemp_RewardLimitPending.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_RewardLimitPendingPending.Table.sql 77197 2016-11-14 02:12:00Z db123627 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RewardLimitPending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_RewardLimitPending](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [CustomerPK] [bigint] NULL,
  [IncentiveID] [bigint] NULL,
  [RewardOptionID] [bigint] NULL,
  [PromoVarID] [bigint] NULL,
  [Amount] [decimal](12, 3) NULL,
  [CartID] [nvarchar](36) NULL,
  [ExtLocationCode] [nvarchar](20) NULL,
  [LogixTransNum] [char](36) NULL,
  [POSTimeStamp] [datetime] NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

-- add primary key
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_RewardLimitPending]') AND name = N'PK_CPE_UploadTemp_RewardLimitPending')
	ALTER TABLE [dbo].[CPE_UploadTemp_RewardLimitPending] ADD CONSTRAINT [PK_CPE_UploadTemp_RewardLimitPending] PRIMARY KEY CLUSTERED ([PKID] ASC) ON [PRIMARY]
GO



print 'processing tables/dbo.CPE_UploadTemp_SF.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_SF.Table.sql 64189 2013-04-05 18:56:54Z mm180021 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SF]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_SF](
  [TableNum] [int] NULL,
  [Operation] [int] NULL,
  [customerpk] [bigint] NULL,
  [rewardid] [bigint] NULL,
  [franking_text] [varchar](128) NULL,
  [create_date] [datetime] NULL,
  [origin_store] [bigint] NULL,
  [status] [smallint] NULL,
  [issuing_store] [bigint] NULL,
  [issue_date] [datetime] NULL,
  [priority] [int] NULL,
  [deliverabletype] [int] NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL, 
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_SF_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_SF' AND column_name = 'POSTimeStamp')
  ALTER TABLE [dbo].[CPE_UploadTemp_SF] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_SF' AND column_name = 'PKID')
  ALTER TABLE [dbo].[CPE_UploadTemp_SF] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SF]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_SF add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_SF_IPLSEQNUM default (1) with values;
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SF]') AND name = N'PK_CPE_UploadTemp_SF')
ALTER TABLE [dbo].[CPE_UploadTemp_SF] ADD CONSTRAINT [PK_CPE_UploadTemp_SF] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

--Adding NonClustered index

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SF]') AND name = N'IX_CPE_UploadTemp_SF_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_SF_WaitingACK] ON [dbo].[CPE_UploadTemp_SF] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO



print 'processing tables/dbo.CPE_UploadTemp_SV.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_SV.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_SV](
  [TableNum] [varchar](4) NULL,
  [Operation] [varchar](2) NULL,
  [Col1] [varchar](255) NULL,
  [Col2] [varchar](255) NULL,
  [Col3] [varchar](255) NULL,
  [Col4] [varchar](400) NULL,
  [Col5] [varchar](255) NULL,
  [Col6] [varchar](255) NULL,
  [Col7] [varchar](400) NULL,
  [Col8] [varchar](255) NULL,
  [Col9] [varchar](255) NULL,
  [Col10] [varchar](255) NULL,
  [Col11] [varchar](400) NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [AdminUserID] [int] NULL,
  [Col12] [varchar](255) NULL,
  [Col13] [varchar](255) NULL,
  [Col14] [varchar](255) NULL,
  [Col15] [varchar](255) NULL,
  [Col16] [varchar](400) NULL,
  [Col17] [varchar](255) NULL,
  [Col18] [varchar](400) NULL,
  [Col19] [varchar](400) NULL,
  [Col20] [varchar](255) NULL,
  [AdjustmentSourceID] [int] NULL,
  [AdjustmentTypeID] [smallint] NULL,
  [AdjustmentReasonID] [int] NULL,
  [AdjustmentReasonText] [nvarchar](20) NULL,
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_SV_IPLSEQNUM default (1), -- The sequence number from the last time an IPL was performed from the location sending the data
  CONSTRAINT [PK_CPE_UploadTemp_SV] PRIMARY KEY CLUSTERED ([PKID] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_SV add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_SV_IPLSEQNUM default (1) with values;
GO

-- Index Removal

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_LocationID')
DROP INDEX [IX_CPE_UploadTemp_SV_LocationID] ON [dbo].[CPE_UploadTemp_SV] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_Operation')
DROP INDEX [IX_CPE_UploadTemp_SV_Operation] ON [dbo].[CPE_UploadTemp_SV] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_ServerSerial')
DROP INDEX [IX_CPE_UploadTemp_SV_ServerSerial] ON [dbo].[CPE_UploadTemp_SV] 
GO 

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_TableNum')
DROP INDEX [IX_CPE_UploadTemp_SV_TableNum] ON [dbo].[CPE_UploadTemp_SV] 
GO


-- Column Creation

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_SV' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_SV' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_SV' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD [POSTimeStamp] [datetime] NULL 
GO



-- Index Creation

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_SV_WaitingACK] ON [dbo].[CPE_UploadTemp_SV] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_LocationID')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_SV_LocationID] ON [dbo].[CPE_UploadTemp_SV] 
--(
--	[LocationID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_Operation')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_SV_Operation] ON [dbo].[CPE_UploadTemp_SV] 
--(
--	[Operation] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_ServerSerial')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_SV_ServerSerial] ON [dbo].[CPE_UploadTemp_SV] 
--(
--	[ServerSerial] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') AND name = N'IX_CPE_UploadTemp_SV_TableNum')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_SV_TableNum] ON [dbo].[CPE_UploadTemp_SV] 
--(
--	[TableNum] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

-- Add columns to CPE_UploadTemp_SV table
 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_SV' AND COLUMN_NAME = 'AdjustmentSourceID')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD [AdjustmentSourceID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_SV' AND COLUMN_NAME = 'AdjustmentTypeID')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD [AdjustmentTypeID] [smallint] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_SV' AND COLUMN_NAME = 'AdjustmentReasonID')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD [AdjustmentReasonID] [int] NULL
END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_SV' AND COLUMN_NAME = 'AdjustmentReasonText')
BEGIN
	ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD [AdjustmentReasonText] [nvarchar](50) NULL
END
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_SV' AND column_name = 'AdjustmentReasonText' AND data_type='nvarchar')
  BEGIN
    ALTER TABLE [dbo].[CPE_UploadTemp_SV]
    ALTER COLUMN [AdjustmentReasonText] NVARCHAR(50)
  END   
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') and name='Col4')
Begin
  alter table CPE_UploadTemp_SV alter column Col4 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') and name='Col7')
Begin
  alter table CPE_UploadTemp_SV alter column Col7 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') and name='Col11')
Begin
  alter table CPE_UploadTemp_SV alter column Col11 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') and name='Col16')
Begin
  alter table CPE_UploadTemp_SV alter column Col16 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') and name='Col18')
Begin
  alter table CPE_UploadTemp_SV alter column Col18 nvarchar(400)
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_SV]') and name='Col19')
Begin
  alter table CPE_UploadTemp_SV alter column Col19 nvarchar(400)
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CPE_UploadTemp_SV' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CPE_UploadTemp_SV] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.CPE_UploadTemp_UL.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_UL.Table.sql 64189 2013-04-05 18:56:54Z mm180021 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UL]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_UL](
  [TableNum] [varchar](4) NULL,
  [Operation] [varchar](2) NULL,
  [Col1] [varchar](255) NULL,
  [Col2] [varchar](255) NULL,
  [Col3] [varchar](255) NULL,
  [Col4] [varchar](255) NULL,
  [Col5] [varchar](255) NULL,
  [Col6] [varchar](255) NULL,
  [Col7] [varchar](255) NULL,
  [Col8] [varchar](255) NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_UL_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_UL' AND column_name = 'PKID')
  ALTER TABLE [dbo].[CPE_UploadTemp_UL] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_UL]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_UL add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_UL_IPLSEQNUM default (1) with values;
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UL]') AND name = N'PK_CPE_UploadTemp_UL')
  ALTER TABLE [dbo].[CPE_UploadTemp_UL] ADD CONSTRAINT [PK_CPE_UploadTemp_UL] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UL]') AND name = N'IX_CPE_UploadTemp_UL_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_UL_WaitingACK] ON [dbo].[CPE_UploadTemp_UL] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.CPE_UploadTemp_UR.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_UR.Table.sql 64189 2013-04-05 18:56:54Z mm180021 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_UR](
  [TableNum] [varchar](4) NULL,
  [Operation] [varchar](2) NULL,
  [Col1] [varchar](255) NULL,
  [Col2] [varchar](255) NULL,
  [Col3] [varchar](255) NULL,
  [Col4] [varchar](255) NULL,
  [Col5] [varchar](255) NULL,
  [Col6] [varchar](255) NULL,
  [Col7] [varchar](255) NULL,
  [Col8] [varchar](255) NULL,
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  [Col9] [varchar](255) NULL,
  [IPLSeqNum] [int] NOT NULL CONSTRAINT DF_CPE_UploadTemp_UR_IPLSEQNUM default (1) -- The sequence number from the last time an IPL was performed from the location sending the data
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') and name='IPLSeqNum')
  Alter table CPE_UploadTemp_UR add [IPLSeqNum] int NOT NULL CONSTRAINT DF_CPE_UploadTemp_UR_IPLSEQNUM default (1) with values;
GO

-- Index Removal

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_LocationID')
DROP INDEX [IX_CPE_UploadTemp_UR_LocationID] ON [dbo].[CPE_UploadTemp_UR] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_Operation')
DROP INDEX [IX_CPE_UploadTemp_UR_Operation] ON [dbo].[CPE_UploadTemp_UR] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_ServerSerial')
DROP INDEX [IX_CPE_UploadTemp_UR_ServerSerial] ON [dbo].[CPE_UploadTemp_UR] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_TableNum')
DROP INDEX [IX_CPE_UploadTemp_UR_TableNum] ON [dbo].[CPE_UploadTemp_UR] 
GO


-- Column Creation

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_UR' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_UploadTemp_UR] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO


-- Index Creation

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'PK_CPE_UploadTemp_UR')
ALTER TABLE [dbo].[CPE_UploadTemp_UR] ADD CONSTRAINT [PK_CPE_UploadTemp_UR] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_LocationID')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_UR_LocationID] ON [dbo].[CPE_UploadTemp_UR] 
--(
--	[LocationID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_Operation')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_UR_Operation] ON [dbo].[CPE_UploadTemp_UR] 
--(
--	[Operation] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_ServerSerial')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_UR_ServerSerial] ON [dbo].[CPE_UploadTemp_UR] 
--(
--	[ServerSerial] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_TableNum')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_UR_TableNum] ON [dbo].[CPE_UploadTemp_UR] 
--(
--	[TableNum] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_UR]') AND name = N'IX_CPE_UploadTemp_UR_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_UR_WaitingACK] ON [dbo].[CPE_UploadTemp_UR] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CPE_UploadTemp_YB.Table.sql'; 
--
GO
-- $Id: dbo.CPE_UploadTemp_YB.Table.sql 51298 2012-06-29 20:31:56Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_UploadTemp_YB]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_UploadTemp_YB](
	[TableNum] [varchar](4) NULL,
	[Operation] [varchar](2) NULL,
	[Col1] [varchar](255) NULL,
	[Col2] [varchar](255) NULL,
	[Col3] [varchar](255) NULL,
	[Col4] [varchar](255) NULL,
	[Col5] [varchar](255) NULL,
	[Col6] [varchar](255) NULL,
	[Col7] [varchar](255) NULL,
	[Col8] [varchar](255) NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [bigint] NULL,
	[WaitingACK] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO


-- Index Removal

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_LocationID')
DROP INDEX [IX_CPE_UploadTemp_YB_LocationID] ON [dbo].[CPE_UploadTemp_YB] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_Operation')
DROP INDEX [IX_CPE_UploadTemp_YB_Operation] ON [dbo].[CPE_UploadTemp_YB] 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_ServerSerial')
DROP INDEX [IX_CPE_UploadTemp_YB_ServerSerial] ON [dbo].[CPE_UploadTemp_YB] 
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_TableNum')
DROP INDEX [IX_CPE_UploadTemp_YB_TableNum] ON [dbo].[CPE_UploadTemp_YB] 
GO


-- Column Creation

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CPE_UploadTemp_YB' AND column_name = 'PKID')
ALTER TABLE [dbo].[CPE_UploadTemp_YB] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO


-- Index Creation

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'PK_CPE_UploadTemp_YB')
ALTER TABLE [dbo].[CPE_UploadTemp_YB] ADD CONSTRAINT [PK_CPE_UploadTemp_YB] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_LocationID')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_YB_LocationID] ON [dbo].[CPE_UploadTemp_YB] 
--(
--	[LocationID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_Operation')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_YB_Operation] ON [dbo].[CPE_UploadTemp_YB] 
--(
--	[Operation] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_ServerSerial')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_YB_ServerSerial] ON [dbo].[CPE_UploadTemp_YB] 
--(
--	[ServerSerial] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_TableNum')
--CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_YB_TableNum] ON [dbo].[CPE_UploadTemp_YB] 
--(
--	[TableNum] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CPE_UploadTemp_YB]') AND name = N'IX_CPE_UploadTemp_YB_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CPE_UploadTemp_YB_WaitingACK] ON [dbo].[CPE_UploadTemp_YB] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CPE_YellowBoxes.Table.sql'; 
--
GO
-- $Id: dbo.CPE_YellowBoxes.Table.sql 35494 2011-08-11 16:19:07Z anthony $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CPE_YellowBoxes]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CPE_YellowBoxes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CPE_YellowBoxes](
	[PKID] [int] IDENTITY(1,1) NOT NULL,
	[LocationID] [int] NULL,
	[BoxID] [int] NULL,
	[InStoreLocationID] [int] NULL,
	[PrinterTypeID] [int] NULL,
	[OpDisplayTypeID] [int] NULL,
 CONSTRAINT [YBPK_PKID] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CPE_YELLOWBOXES_OPDISPLAYTYPEID]') AND parent_object_id = OBJECT_ID(N'[dbo].[CPE_YellowBoxes]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'CPE_YellowBoxes'
        AND parent_column_id = 6
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'CPE_YellowBoxes';
      SET @StandardConstraintName = 'DF_CPE_YELLOWBOXES_OPDISPLAYTYPEID';
      SET @ColumnOrdinalNumber = 6;
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CPE_YELLOWBOXES_OPDISPLAYTYPEID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CPE_YellowBoxes] ADD CONSTRAINT [DF_CPE_YELLOWBOXES_OPDISPLAYTYPEID] DEFAULT ((0)) FOR [OpDisplayTypeID]
END


End
GO


print 'processing tables/dbo.CardIDs.Table.sql'; 
--
GO
-- $Id: dbo.CardIDs.Table.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CardIDs]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CardIDs](
  [CardPK] [bigint] IDENTITY(1,1) NOT NULL,
  [CustomerPK] [bigint] NOT NULL,
  [ExtCardID] [nvarchar](400) NOT NULL,
  [CardStatusID] [int] NOT NULL,
  [CardTypeID] [int] NOT NULL,
  [PIN] [nvarchar] (50) NULL
 CONSTRAINT [PK_CardIDs] PRIMARY KEY CLUSTERED ([CardPK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardIDs]') and name='ExtCardID')
Begin
  alter table CardIDs alter column ExtCardID nvarchar(400)
End
GO

-- 20110104.AM: Create a column to store a PIN value (if necessary) for each identifier
-- 20110519.MM: Modified the PIN column to be 50 characters long
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardIDs]') and name='PIN')
  Alter table CardIDs add PIN nvarchar(50) NULL;
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CardIDs]') AND name = N'IX_CardIDs_CardStatusID')
  CREATE NONCLUSTERED INDEX [IX_CardIDs_CardStatusID] ON [dbo].[CardIDs] ([CardStatusID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CardIDs]') AND name = N'IX_CardIDs_CustomerPK')
  CREATE NONCLUSTERED INDEX [IX_CardIDs_CustomerPK] ON [dbo].[CardIDs] ([CustomerPK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CardIDs]') AND name = N'IX_Unique_ExtCardID')
  CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_ExtCardID] ON [dbo].[CardIDs] ([ExtCardID] ASC, [CardTypeID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CardIDs_CardStatusID]') AND parent_object_id = OBJECT_ID(N'[dbo].[CardIDs]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CardIDs_CardStatusID]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CardIDs] ADD  CONSTRAINT [DF_CardIDs_CardStatusID]  DEFAULT ((1)) FOR [CardStatusID]
  END
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CardIDs' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CardIDs] ADD KeyRotationFlag bit NULL
END

GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CardIDs' AND COLUMN_NAME = 'ExtCardIDOriginal')
BEGIN
ALTER TABLE [dbo].[CardIDs] ADD ExtCardIDOriginal[nvarchar](400)  NULL
END
GO
--Case Insensitive search will break if column will have null data
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CardIDs' AND COLUMN_NAME = 'ExtCardIDOriginal')
BEGIN
UPDATE CardIDs SET ExtCardIDOriginal=ExtCardID WHERE ExtCardIDOriginal IS NULL
END
GO

print 'processing tables/dbo.CardRange.sql'; 
--
GO
-- $Id: dbo.CardRange.Table.sql 65503 2016-12-21 19:33:17Z ss251194 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CardRange]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CardRange](
	[CardRangeID] [bigint] IDENTITY(1,1) NOT NULL,
	[CardTypeID] [int] NOT NULL,
	[StartRange] [decimal](38,0) NOT NULL,
	[EndRange] [decimal](38,0) NOT NULL,
	[CreatedDate] [datetime] DEFAULT(GETDATE()),
 CONSTRAINT [PK_CardRange] PRIMARY KEY CLUSTERED 
(
	[CardRangeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF Not EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FK_CardRange_CardTypes]') AND parent_object_id = OBJECT_ID(N'[dbo].[CardRange]'))
Begin
  ALTER TABLE [dbo].[CardRange]  WITH CHECK ADD  CONSTRAINT [FK_CardRange_CardTypes] FOREIGN KEY([CardTypeID]) REFERENCES [dbo].[CardTypes] ([CardTypeID])
End
GO

print 'processing tables/dbo.CardStatus.Table.sql'; 
--
GO
-- $Id: dbo.CardStatus.Table.sql 47201 2012-04-10 14:53:19Z mark $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CardStatus]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CardStatus](
	[CardStatusID] [int] NOT NULL,
	[Description] [nvarchar](50) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_CardStatus] PRIMARY KEY CLUSTERED ([CardStatusID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

-- 20101102.MM: Adding PhraseTerm column to the CardStatus table
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CardStatus]') and name='PhraseTerm')
  Alter table CardStatus add PhraseTerm varchar(40) NULL;
GO

DELETE from CardStatus;
GO
insert into [dbo].[CardStatus] (CardStatusID, Description, PhraseID, PhraseTerm) values (1, 'ACTIVE', 146, 'term.active');
insert into [dbo].[CardStatus] (CardStatusID, Description, PhraseID, PhraseTerm) values (2, 'INACTIVE', 423, 'term.inactive');
insert into [dbo].[CardStatus] (CardStatusID, Description, PhraseID, PhraseTerm) values (3, 'CANCELED', 2836, 'term.canceled');
insert into [dbo].[CardStatus] (CardStatusID, Description, PhraseID, PhraseTerm) values (4, 'EXPIRED', 147, 'term.expired');
insert into [dbo].[CardStatus] (CardStatusID, Description, PhraseID, PhraseTerm) values (5, 'LOST_STOLEN', 2837, 'term.loststolen');
insert into [dbo].[CardStatus] (CardStatusID, Description, PhraseID, PhraseTerm) values (6, 'DEFAULT_CARD', 2838, 'term.defaultcard');
GO

print 'processing tables/dbo.ChannelCustIDTypes.Table.sql'; 
--
GO
-- $Id: dbo.CustWebIdentifierTypes.Table.sql 28301 2011-03-17 18:02:57Z mark $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- 20130320.MM: Create a table to store the identifier tables that are used via channel connectors (website, kiosk, etc.)
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ChannelCustIDTypes]') AND type in (N'U'))
  CREATE TABLE [dbo].[ChannelCustIDTypes](
    [CardTypeID] [int] NOT NULL,
    [ChannelID] [int] NOT NULL,
    [DisplayOrder] [int] NULL,
    [LogonEnabled] [bit] NOT NULL,
    [RegisterEnabled] [bit] NOT NULL,
 CONSTRAINT [PK_ChannelCustIDTypes] PRIMARY KEY CLUSTERED ([CardTypeID] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO



IF NOT EXISTS(select 1 from [dbo].[ChannelCustIDTypes] where CardTypeID=0 and ChannelID=2)
  Insert into ChannelCustIDTypes(CardTypeID, ChannelID, DisplayOrder, LogonEnabled, RegisterEnabled) values (0, 2, 1, 0, 1);  -- loyalty card for the website channel
GO
IF NOT EXISTS(select 1 from [dbo].[ChannelCustIDTypes] where CardTypeID=3 and ChannelID=2)
  Insert into ChannelCustIDTypes(CardTypeID, ChannelID, DisplayOrder, LogonEnabled, RegisterEnabled) values (3, 2, 2, 0, 1);  -- alternateID for the website channel
GO
IF NOT EXISTS(select 1 from [dbo].[ChannelCustIDTypes] where CardTypeID=4 and ChannelID=2)
  Insert into ChannelCustIDTypes(CardTypeID, ChannelID, DisplayOrder, LogonEnabled, RegisterEnabled) values (4, 2, 3, 1, 0);  -- username for the website channel
GO




print 'processing tables/dbo.Copient_TC_Customers.Table.sql'; 
--
GO
-- $Id: dbo.Copient_TC_Customers.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[Copient_TC_Customers]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Copient_TC_Customers]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[Copient_TC_Customers](
	[OfferID] [int] NULL,
	[ConditionNumber] [int] NULL,
	[CustomerID] [nvarchar](400) NULL,
	[Excluded] [bit] NULL,
	[Action] [char](1) NULL,
	[TransID] [decimal](13, 0) NULL,
	[TCRMAgentStatusFlag] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Copient_TC_Customers' AND column_name = 'PKID')
ALTER TABLE [dbo].[Copient_TC_Customers] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Copient_TC_Customers]') AND name = N'PK_Copient_TC_Customers')
ALTER TABLE [dbo].[Copient_TC_Customers] ADD CONSTRAINT [PK_Copient_TC_Customers] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Copient_TC_Customers]') AND name = N'IX_Copient_TC_Customers_TCRMAgentStatusFlag')
CREATE NONCLUSTERED INDEX [IX_Copient_TC_Customers_TCRMAgentStatusFlag] ON [dbo].[Copient_TC_Customers] 
(
	[TCRMAgentStatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Copient_TC_Customers]') AND name = N'IX_TC_Customers_OfferID')
CREATE NONCLUSTERED INDEX [IX_TC_Customers_OfferID] ON [dbo].[Copient_TC_Customers] 
(
	[OfferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Copient_TC_Customers]') AND name = N'IX_TC_Customers_TransID')
CREATE NONCLUSTERED INDEX [IX_TC_Customers_TransID] ON [dbo].[Copient_TC_Customers] 
(
	[TransID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Copient_TC_Customers_TCRMAgentStatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[Copient_TC_Customers]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Copient_TC_Customers_TCRMAgentStatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[Copient_TC_Customers] ADD  CONSTRAINT [DF_Copient_TC_Customers_TCRMAgentStatusFlag]  DEFAULT ((0)) FOR [TCRMAgentStatusFlag]
END


End
GO

--AMS-9555 PII Compliance | increase column to fit encrypted data 
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[Copient_TC_Customers]') and name='CustomerID')
  alter table Copient_TC_Customers Alter column CustomerID nvarchar(400);
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Copient_TC_Customers' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[Copient_TC_Customers] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.CouponConfigurations.Table.sql'; 
--
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* Create Table to define Coupon Configurations */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CouponConfigurations]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[CouponConfigurations] (
        ConfigurationID INT NOT NULL IDENTITY (1, 1),
        MaxNumberOfCouponsPerRequest INT, --Maximum coupons allowed in the request.
        DefaultNumberOfCouponsPerRequest INT,  -- Default coupons given when requested.
        Threshold INT, -- Threshold value.
    )

END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CouponConfigurations WHERE  [ConfigurationID] = 1  )
    INSERT [dbo].[CouponConfigurations] (MaxNumberOfCouponsPerRequest, DefaultNumberOfCouponsPerRequest, Threshold) VALUES (5000, 20, 90)
GO

print 'processing tables/dbo.CouponPattern.Table.sql'; 
--
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

/* Create Table to Store CouponPattern */
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CouponPattern]') AND TYPE IN (N'U')) 
BEGIN
	CREATE TABLE CouponPattern
(PatternId		  INT NOT NULL IDENTITY(1,1),
		  CouponLength		  INT,
		  PatternOrder		  VARCHAR(1), -- R-Random/S-Sequntial
		  PatternDataType	  VARCHAR(1), -- A-AlphaNumric/N-Numeric
		  Prefix			  NVARCHAR(150),
		  Suffix			  NVARCHAR(150),
		  StartRange		  VARCHAR(150),
		  EndRange		  VARCHAR(150),
		  UsedCouponCount	  BIGINT DEFAULT 0,
		  IsMailSent		  BIT DEFAULT 0,
		  CreatedDate		  DATETIME)

END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CouponPattern' AND column_name = 'MaxCouponCode')
BEGIN
  ALTER TABLE CouponPattern ADD MaxCouponCode NVARCHAR(150)  NULL
END
GO
IF NOT EXISTS (SELECT 1 FROM CouponPattern where [PatternId]=1) 
INSERT INTO CouponPattern (CouponLength, PatternOrder, PatternDataType, Prefix, Suffix, StartRange, EndRange, CreatedDate)
								VALUES (18, 's', 'n', NULL, NULL, '000000000000000000', '999999999999999999', GETDATE())
GO

print 'processing tables/dbo.CouponStock.sql'; 
--
GO
-- $Id: dbo.TrackableCouponsInsertQueue.Table.sql 71721 2013-11-06 21:24:05Z jg185197 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- Table usage:  CouponStock is used as Buffer table for CouponCodes, 
--where CouponCodes are generated and inserted in CouponStock and will be available for Transaction instantly.
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CouponStock]') AND TYPE IN (N'U')) 
BEGIN
CREATE TABLE CouponStock
(CouponID INT NOT NULL IDENTITY(1,1) PRIMARY KEY ,
 CouponCode VARCHAR(150) NOT NULL
 )

END
GO



print 'processing tables/dbo.CouponStockBuffer.sql'; 
--
GO
-- $Id: dbo.TrackableCouponsInsertQueue.Table.sql 71721 2013-11-06 21:24:05Z jg185197 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- Table usage:  CouponStockBuffer is used as Buffer table for CouponCodes, 
--where CouponCodes are generated and inserted in CouponStockBuffer and will be available for Transaction instantly.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CouponStockBuffer]') AND TYPE IN (N'U')) 
BEGIN
CREATE TABLE CouponStockBuffer
(CouponID INT NOT NULL IDENTITY(1,1) PRIMARY KEY ,
 CouponCode VARCHAR(150) NOT NULL)

END
GO
IF NOT EXISTS (SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CouponStockBuffer]') AND name = N'IX_CouponStockBuffer_UniqueCouponCode')
    CREATE UNIQUE NONCLUSTERED INDEX IX_CouponStockBuffer_UniqueCouponCode ON [dbo].[CouponStockBuffer] 
    (
	    [CouponCode] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR  = 80) ON [PRIMARY]
GO



print 'processing tables/dbo.CustomerAttributes.Table.sql'; 
--
GO
-- $Id: dbo.CustomerAttributes.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerAttributes]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerAttributes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerAttributes](
	[CustomerPK] [bigint] NOT NULL,
	[AttributeTypeID] [int] NOT NULL,
	[AttributeValueID] [int] NOT NULL,
	[CPEStoreSendFlag] [int] NULL,
	[Deleted] [bit] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[AlternateValue] [nvarchar](100) NULL,
 CONSTRAINT [PK_CustomerAttributes] PRIMARY KEY CLUSTERED 
(
	[CustomerPK] ASC,
	[AttributeTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerAttributes_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerAttributes]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerAttributes_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerAttributes] ADD  CONSTRAINT [DF_CustomerAttributes_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerAttributes_LastUpdate]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerAttributes]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerAttributes_LastUpdate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerAttributes] ADD  CONSTRAINT [DF_CustomerAttributes_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
END


End
GO


print 'processing tables/dbo.CustomerAuthTokens.Table.sql'; 
--
GO
-- $Id:  $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerAuthTokens]') AND TYPE in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerAuthTokens](
  [PKID] bigint Identity(1,1) NOT NULL,               -- Primary key for this table
  [CustomerPK] bigint NOT NULL,         -- FK links to Customers.CustomerPK
  [AuthToken] varchar(36) NOT NULL,     -- the customer's auth token value (GUID)
  [TokenCreateTime] datetime NOT NULL,  -- the date/time the auth token was created
  [GUID] varchar(36) NULL,              -- the auth GUID (connector access) to which the AuthToken relates
 CONSTRAINT [PK_CustomerAuthToken] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[customerAuthTokens]') and name='GUID')
  ALTER TABLE CustomerAuthTokens ADD GUID [varchar](36) NULL; 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerAuthTokens]') AND name = N'PK_CustomerAuthToken') 
begin
 -- drop the primary key constratint on the CustomerPK column 
 alter table CustomerAuthTokens drop constraint PK_CustomerAuthToken;
end
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[CustomerAuthTokens]') and name='PKID')
begin
  -- add a new primary key column
  ALTER TABLE CustomerAuthTokens ADD PKID bigint Identity (1,1) NOT NULL; 
end
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerAuthTokens]') AND name = N'PK_CustomerAuthToken') 
begin
 -- add the primary key constratint on the PKID column 
 ALTER TABLE CustomerAuthTokens ADD CONSTRAINT [PK_CustomerAuthToken] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
end
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerAuthTokens]') AND name = N'IX_CustomerAuthTokens_Unique')
begin
  -- add a unique index on CustomerPK & GUID
  CREATE UNIQUE NONCLUSTERED INDEX [IX_CustomerAuthTokens_Unique] ON [dbo].[CustomerAuthTokens] ([CustomerPK] ASC, [GUID] ASC)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
end
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerAuthTokens]') AND name = N'IX_CustomerAuthTokens_AuthToken')
  CREATE UNIQUE NONCLUSTERED INDEX [IX_CustomerAuthTokens_AuthToken] ON [dbo].[CustomerAuthTokens] ([AuthToken] ASC)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerAuthTokens]') AND name = N'IX_CustomerAuthTokens_CustomerPK')
  CREATE NONCLUSTERED INDEX [IX_CustomerAuthTokens_CustomerPK] ON [dbo].[CustomerAuthTokens] ([CustomerPK] ASC)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
GO



print 'processing tables/dbo.CustomerEdits.Table.sql'; 
--
GO
-- $Id: dbo.CustomerEdits.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerEdits]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerEdits]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerEdits](
	[EditPK] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomerPK] [bigint] NOT NULL,
	[AdminUserID] [int] NOT NULL,
	[LastUpdate] [datetime] NOT NULL,
	[BatchGUID] [nvarchar](36) NULL,
 CONSTRAINT [PK_CustomerEdits] PRIMARY KEY CLUSTERED 
(
	[EditPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerEdits]') AND name = N'IX_CustomerEdits_BatchGUID')
CREATE NONCLUSTERED INDEX [IX_CustomerEdits_BatchGUID] ON [dbo].[CustomerEdits] 
(
	[BatchGUID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerEdits_LastUpdate]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerEdits]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerEdits_LastUpdate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerEdits] ADD  CONSTRAINT [DF_CustomerEdits_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
END


End
GO


print 'processing tables/dbo.CustomerExt.Table.sql'; 
--
GO
-- $Id: dbo.CustomerExt.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerExt]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerExt](
    [CustomerPK]      [bigint] NOT NULL,
    [Address]         [nvarchar](1000) NULL,
    [City]            [nvarchar](1000) NULL,
    [State]           [nvarchar](1000) NULL,
    [Zip]             [nvarchar](1000) NULL, 
    [PhoneAsEntered]  [nvarchar](50) NULL,   -- the customer's phone number as it was provided at an entry point (such as CustomerInquiry)
    [PhoneDigitsOnly] [nvarchar](50) NULL,   -- the customer's phone number containing only the numeric digits - used for searching in customer inquiry
    [email]           [nvarchar](1000) NULL,
    [Country]         [nvarchar](50) NULL,
    [DOB]             [nvarchar](8) NULL,
    [DateOfBirth]     [datetime] NULL,       -- the customer's date of birth.  This column is intended to replace the old DOB string type column
    [MobilePhoneAsEntered]  [nvarchar](50) NULL,  -- the customer's mobile phone number as it was provided at an entry point (such as CustomerInquiry)
    [MobilePhoneDigitsOnly] [nvarchar](50) NULL,  -- the customer's mobile phone number containing only the numeric digits - used for searching in customer inquiry
    [AirmileMemberID] [nvarchar](50) NULL,
    [DigitalReceipt] [smallint] NULL,
    [PaperReceipt] [bit] NULL, 
    [LinkedCard]      [bigint] NULL,
    CONSTRAINT [PK_CustomerExt] PRIMARY KEY CLUSTERED
(
    [CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='PhoneAsEntered') begin
  alter table CustomerExt add PhoneAsEntered nvarchar(50) NULL;
end
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='MobilePhoneAsEntered') begin
  alter table CustomerExt add MobilePhoneAsEntered nvarchar(50) NULL;
end
GO

-- rename the Phone column (if it exists) to PhoneDigitsOnly
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='Phone') BEGIN
  exec('Update CustomerExt set PhoneAsEntered=Phone')               -- copy the data from the Phone Column to the PhoneAsEntered column
  exec sp_RENAME 'CustomerExt.Phone', 'PhoneDigitsOnly', 'COLUMN'
END
GO
-- rename the IX_CustomerExt_Phone index (if it exists) to IX_CustomerExt_PhoneDigitsOnly
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerExt]') AND name = N'IX_CustomerExt_Phone')
  exec sp_RENAME 'CustomerExt.IX_CustomerExt_Phone', 'IX_CustomerExt_PhoneDigitsOnly', 'INDEX'
GO

-- rename the MobilePhone column (if it exists) to MobilePhoneDigitsOnly
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='MobilePhone') BEGIN
  exec('Update CustomerExt set MobilePhoneAsEntered=MobilePhone')   -- copy the data from the MobilePhone Column to the MobilePhoneAsEntered column
  exec sp_RENAME 'CustomerExt.MobilePhone', 'MobilePhoneDigitsOnly', 'COLUMN'
END
GO
-- rename the IX_CustomerExt_MobilePhone index (if it exists) to IX_CustomerExt_MobilePhoneDigitsOnly
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerExt]') AND name = N'IX_CustomerExt_MobilePhone')
  exec sp_RENAME 'CustomerExt.IX_CustomerExt_MobilePhone', 'IX_CustomerExt_MobilePhoneDigitsOnly', 'INDEX'
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerExt]') AND name = N'IX_CustomerExt_MobilePhoneDigitsOnly')
  CREATE INDEX [IX_CustomerExt_MobilePhoneDigitsOnly] ON [dbo].[CustomerExt]([MobilePhoneDigitsOnly] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerExt]') AND name = N'IX_CustomerExt_PhoneDigitsOnly')
CREATE NONCLUSTERED INDEX [IX_CustomerExt_Phone] ON [dbo].[CustomerExt]
(
    [PhoneDigitsOnly] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerExt]') AND name = N'IX_CustomerExt_Email')
CREATE INDEX [IX_CustomerExt_Email] ON [dbo].[CustomerExt]
(
    [email] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

--20101105.MM: Added a *proper* DateOfBirth column to CustomerExt
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='DateOfBirth')
  Alter table [dbo].[CustomerExt] add DateOfBirth [datetime] NULL;
GO




IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerExt]') AND name = N'IX_CustomerExt_AirmileMemberID')
CREATE INDEX [IX_CustomerExt_AirmileMemberID] ON [dbo].[CustomerExt]
(
    [AirmileMemberID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerExt' AND column_name = 'Comments')
        ALTER TABLE [dbo].[CustomerExt]
            ADD [Comments] [nvarchar](80) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerExt' AND column_name = 'DriverLicenseID')
        ALTER TABLE [dbo].[CustomerExt]
            ADD [DriverLicenseID] [nvarchar](20) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerExt' AND column_name = 'TaxExemptID')
        ALTER TABLE [dbo].[CustomerExt]
            ADD [TaxExemptID] [nvarchar](20) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerExt' AND column_name = 'DateOpened')
        ALTER TABLE [dbo].[CustomerExt]
            ADD [DateOpened] [nvarchar](8) NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerExt' AND column_name = 'DateLastVisit')
        ALTER TABLE [dbo].[CustomerExt]
            ADD [DateLastVisit] [datetime] NULL
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerExt' AND column_name = 'ARCustomer')
        ALTER TABLE [dbo].[CustomerExt]
            ADD [ARCustomer] [bit]
GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerExt_ARCustomer]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerExt]'))
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerExt_ARCustomer]') AND type = 'D')
        ALTER TABLE [dbo].[CustomerExt]
            ADD CONSTRAINT [DF_CustomerExt_ARCustomer]  DEFAULT ((0)) FOR [ARCustomer]

GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='DigitalReceipt') begin
  alter table [dbo].[CustomerExt] add [DigitalReceipt] smallint NULL;
end
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='PaperReceipt') begin
  alter table [dbo].[CustomerExt] add [PaperReceipt] bit NULL;
end
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CustomerExt' AND COLUMN_NAME = 'LinkedCard')
BEGIN
	ALTER TABLE [dbo].[CustomerExt] ADD [LinkedCard] [bigint] NULL
END
GO

--AMS-8572 PII Compliance | Encrypt PII data of customer profile in DB for Logix Trunk

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='PhoneAsEntered') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN PhoneAsEntered nvarchar(100)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='PhoneDigitsOnly') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN PhoneDigitsOnly nvarchar(100)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='MobilePhoneAsEntered') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN MobilePhoneAsEntered nvarchar(100)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='MobilePhoneDigitsOnly') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN MobilePhoneDigitsOnly nvarchar(100)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='DOB') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN DOB nvarchar(25)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='email') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN email nvarchar(1000)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='DriverLicenseID') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN DriverLicenseID nvarchar(50)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='TaxExemptID') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN TaxExemptID nvarchar(50)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerExt]') and name='DateOfBirth') BEGIN
  ALTER TABLE [dbo].[CustomerExt] ALTER COLUMN DateOfBirth nvarchar(50)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CustomerExt' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CustomerExt] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.CustomerImportTemp.Table.sql'; 
--
GO
-- $Id: dbo.CustomerImportTemp.Table.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerImportTemp]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerImportTemp](
	[InitialCardID] [nvarchar](400) NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Employee] [bit] NULL,
	[CardStatusID] [int] NULL,
	[HHID] [nvarchar](400) NULL,
	[AltID] [nvarchar](50) NULL,
	[HHPK] [bigint] NOT NULL,
	[StatusFlag] [int] NOT NULL,
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomerPK] [bigint] NULL,
	[ProcessFlag] [int] NOT NULL,
	[AltIDDup] [bit] NOT NULL,
	[CardType] [int] NULL
 CONSTRAINT [PK_ID] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = ON, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerImportTemp]') and name='HHID')
BEGIN
  alter table CustomerImportTemp alter column HHID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerImportTemp]') and name='initialcardid')
BEGIN
  alter table CustomerImportTemp alter column initialcardid nvarchar(400)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]') AND name = N'IX_CustomerImportTemp_ProcessFlag')
CREATE NONCLUSTERED INDEX [IX_CustomerImportTemp_ProcessFlag] ON [dbo].[CustomerImportTemp] 
(
	[ProcessFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_FirstName]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_FirstName]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_FirstName]  DEFAULT ('') FOR [FirstName]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_LastName]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_LastName]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_LastName]  DEFAULT ('') FOR [LastName]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_Employee]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_Employee]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_Employee]  DEFAULT ((0)) FOR [Employee]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_CardStatusID]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_CardStatusID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_CardStatusID]  DEFAULT ((1)) FOR [CardStatusID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_HHPK]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_HHPK]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_HHPK]  DEFAULT ((0)) FOR [HHPK]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_StatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_StatusFlag]  DEFAULT ((0)) FOR [StatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_ProcessFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_ProcessFlag]  DEFAULT ((0)) FOR [ProcessFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerImportTemp_AltIDDup]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerImportTemp_AltIDDup]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD  CONSTRAINT [DF_CustomerImportTemp_AltIDDup]  DEFAULT ((0)) FOR [AltIDDup]
END

END
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerImportTemp]') and name='CardType')
  ALTER TABLE [dbo].[CustomerImportTemp] ADD CardType [int] NULL;
GO

IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '[dbo].[CustomerImportTemp]' AND  COLUMN_NAME = 'AltID')
BEGIN

ALTER TABLE [dbo].[CustomerImportTemp] ALTER COLUMN [AltID] nvarchar(50) NULL;

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CustomerImportTemp' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CustomerImportTemp] ADD KeyRotationFlag bit NULL
END
GO

IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CustomerImportTemp' AND  COLUMN_NAME = 'InitialCardIDOriginal')
BEGIN

ALTER TABLE [dbo].[CustomerImportTemp] ADD  [InitialCardIDOriginal] nvarchar(400) NULL;

END
GO
IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CustomerImportTemp' AND  COLUMN_NAME = 'HHIDOriginal')
BEGIN

ALTER TABLE [dbo].[CustomerImportTemp] ADD  [HHIDOriginal] nvarchar(400) NULL;

END
GO
IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CustomerImportTemp' AND  COLUMN_NAME = 'AltIDOriginal')
BEGIN

ALTER TABLE [dbo].[CustomerImportTemp] ADD  [AltIDOriginal] nvarchar(50) NULL;

END
GO

print 'processing tables/dbo.CustomerInfoChanges.Table.sql'; 
--
GO
-- $Id: dbo.CustomerInfoChanges.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerInfoChanges]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerInfoChanges]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerInfoChanges](
	[PKID] [int] IDENTITY(1,1) NOT NULL,
	[CustomerPK] [bigint] NOT NULL,
	[AdminUserID] [int] NULL,
	[ChangeDate] [datetime] NOT NULL,
	[ReportStatus] [smallint] NOT NULL,
	[BatchGUID] [nvarchar](36) NULL,
	[BatchDate] [datetime] NULL,
 CONSTRAINT [PK_CustomerInfoChanges] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerInfoChanges]') AND name = N'IX_CustomerInfoChanges_ReportStatus')
CREATE NONCLUSTERED INDEX [IX_CustomerInfoChanges_ReportStatus] ON [dbo].[CustomerInfoChanges] 
(
	[ReportStatus] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerInfoChanges_ChangeDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerInfoChanges]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerInfoChanges_ChangeDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerInfoChanges] ADD  CONSTRAINT [DF_CustomerInfoChanges_ChangeDate]  DEFAULT (getdate()) FOR [ChangeDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerInfoChanges_Reported]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerInfoChanges]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerInfoChanges_Reported]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerInfoChanges] ADD  CONSTRAINT [DF_CustomerInfoChanges_Reported]  DEFAULT ((1)) FOR [ReportStatus]
END


End
GO


print 'processing tables/dbo.CustomerLocations.Table.sql'; 
--
GO
-- $Id: dbo.CustomerLocations.Table.sql 49617 2012-05-24 14:55:29Z am185230 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerLocations]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLocations]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerLocations](
	[CustomerPK] [bigint] NOT NULL,
	[LocationID] [bigint] NOT NULL,
	[LastVisit] [datetime] NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [int] NULL,
 CONSTRAINT [PK_CustomerLocations] PRIMARY KEY CLUSTERED ([CustomerPK] ASC,[LocationID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = ON, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLocations]') AND name = N'IX_CustomerLocations_Deleted_WaitingACK')
	DROP INDEX [IX_CustomerLocations_Deleted_WaitingACK] ON [dbo].[CustomerLocations] 
GO


-- 20120417.MM BZ 2767 Removing the old PK_CustomerLocations constraint so we can re-create it without the Deleted column.  If the PK_CustomerLocations constraint includes the Deleted column then drop the constraint
if exists(select * from information_schema.CONSTRAINT_COLUMN_USAGE where CONSTRAINT_NAME='PK_CustomerLocations' and Column_Name='Deleted')
  alter table CustomerLocations drop constraint [PK_CustomerLocations]
GO


-- 20120417.MM BZ 2767 Adding the primary key constraint on the CustomerPK, LocationID
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[PK_CustomerLocations]') AND type = 'K')
  alter table CustomerLocations add Constraint [PK_CustomerLocations] PRIMARY KEY CLUSTERED ([CustomerPK] ASC,[LocationID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = ON, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


-- 20120417.MM BZ 2767 Dropping the unnecessary Deleted column
IF EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerLocations_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerLocations]'))
  ALTER TABLE [dbo].[CustomerLocations] drop CONSTRAINT [DF_CustomerLocations_Deleted]
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerLocations]') and name='Deleted')
  alter table CustomerLocations drop column Deleted;
GO



-- Below 2 indexes (lastvisit and locationd) are used by dbpurge.
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLocations]') AND name = N'IX_CustomerLocations_LastVisit')
CREATE NONCLUSTERED INDEX [IX_CustomerLocations_LastVisit] ON [dbo].[CustomerLocations] 
(
	[LastVisit] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLocations]') AND name = N'IX_CustomerLocations_LocationID')
CREATE NONCLUSTERED INDEX [IX_CustomerLocations_LocationID] ON [dbo].[CustomerLocations] 
(
	[LocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- Dropping index on waitingack, no operation on column waitingack found, that column may need to drop too?
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLocations]') AND name = N'IX_CustomerLocations_WaitingACK')
	DROP INDEX [IX_CustomerLocations_WaitingACK] ON [dbo].[CustomerLocations] 
GO


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerLocations_WaitingACK]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerLocations]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerLocations_WaitingACK]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CustomerLocations] ADD  CONSTRAINT [DF_CustomerLocations_WaitingACK]  DEFAULT ((0)) FOR [WaitingACK]
  END
End
GO


print 'processing tables/dbo.CustomerLock.sql'; 
--
GO
-- $Id: dbo.CustomerLock.Table.sql 80781 2014-07-10 06:11:18Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerLock]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLock]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerLock](
	[LockID] [bigint] IDENTITY(1,1) NOT NULL,           -- Primary key for this table
	[CustomerPK] [bigint] NOT NULL,
	[LockedBy] [bigint] NULL,
	[LockingGroupID] [bigint] DEFAULT (0) NOT NULL,
	[LocationID] [bigint] NULL,
	[TerminalNumber] [int] NULL,
	[TransactionNumber] [nvarchar](128) NULL,
	[LockedDate] [datetime] NULL,
	[UE_LockExpireDate] [datetime] NULL, 
	[Prepay] [bit] DEFAULT ((0)) NOT NULL,
	[LockedByIdentifier] NVARCHAR(400) NULL,
	[CardTypeID] INT NULL,
  CONSTRAINT [PK_CustomerLock] PRIMARY KEY CLUSTERED ([LockID] DESC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
 
END
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE name IN (N'LockedByIdentifier', N'CardTypeID')  AND object_id = OBJECT_ID(N'[dbo].[CustomerLock]'))
BEGIN
ALTER TABLE [dbo].[CustomerLock]
	ADD [LockedByIdentifier] NVARCHAR(400) NULL,
		[CardTypeID] INT NULL;
		
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLock]') AND name = N'IX_CustomerLock_Unique')
  CREATE UNIQUE NONCLUSTERED INDEX [IX_CustomerLock_Unique] ON [dbo].[CustomerLock] ([CustomerPK] ASC, [LockingGroupID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

print 'processing tables/dbo.CustomerLocks.Table.sql'; 
--
GO
-- $Id: dbo.CustomerLocks.Table.sql 80781 2014-07-10 06:11:18Z sr185204 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerLocks]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerLocks]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerLocks](
	[CustomerPK] [bigint] NOT NULL,
	[LocationID] [bigint] NOT NULL,
	[TerminalNumber] [int] NOT NULL,	
	[TransactionNumber] [int] NOT NULL,
	[Prepay] [bit] NOT NULL,
	[LockedDate] [datetime] NULL,
 CONSTRAINT [PK_CustomerLocks] PRIMARY KEY CLUSTERED 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerLocks]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='CustomerLocks' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table CustomerLocks alter column [TransactionNumber] [nvarchar](128);
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerLocks_Prepay]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerLocks]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerLocks_Prepay]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerLocks] ADD  CONSTRAINT [DF_CustomerLocks_Prepay]  DEFAULT ((0)) FOR [Prepay]
END
End
GO


print 'processing tables/dbo.CustomerNoteTypes.Table.sql'; 
--
GO
-- $Id: dbo.CustomerNoteTypes.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerNoteTypes]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerNoteTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerNoteTypes](
	[NoteTypeID] [smallint] NOT NULL,
	[Description] [nvarchar](50) NULL,
 CONSTRAINT [PK_CustomerNoteTypes] PRIMARY KEY CLUSTERED 
(
	[NoteTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerNoteTypes WHERE  [NoteTypeID] = 1  )
    INSERT [dbo].[CustomerNoteTypes] ([NoteTypeID], [Description]) VALUES (1, N'Logix UI')
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerNoteTypes WHERE  [NoteTypeID] = 2  )
    INSERT [dbo].[CustomerNoteTypes] ([NoteTypeID], [Description]) VALUES (2, N'Customer Inquiry web service (Points)')
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerNoteTypes WHERE  [NoteTypeID] = 3  )
    INSERT [dbo].[CustomerNoteTypes] ([NoteTypeID], [Description]) VALUES (3, N'Customer Inquiry web service (Stored Value)')
GO


print 'processing tables/dbo.CustomerNotes.Table.sql'; 
--
GO
-- $Id: dbo.CustomerNotes.Table.sql 72238 2013-11-19 20:33:50Z lf250051 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerNotes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerNotes](
	[NoteID] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomerPK] [bigint] NOT NULL,
	[AdminUserID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[Note] [nvarchar](1000) NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Private] [bit] NOT NULL,
	[Important] [bit] NOT NULL,
	[Deleted] [bit] NOT NULL,
	[NoteTypeID] [smallint] NOT NULL,
    LanguageID [int] NOT NULL CONSTRAINT [DF_CustomerNotes_LanguageID] DEFAULT (0), -- FK links to Languages.LanguageID � indicates the language in which the note was created
 CONSTRAINT [PK_CustomerNotes] PRIMARY KEY CLUSTERED 
(
	[NoteID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


-- 20120206.MM: Added new LanguageID column 
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerNotes]') and name='LanguageID')
  Alter table CustomerNotes add LanguageID [int] NOT NULL CONSTRAINT [DF_CustomerNotes_LanguageID] DEFAULT (0) with values; -- FK links to Languages.LanguageID � indicates the language in which the note was created
GO



IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerNotes]') AND name = N'IX_CustomerNotes_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_CustomerNotes_CustomerPK] ON [dbo].[CustomerNotes] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CUSTOMERNOTES_PRIVATE]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerNotes]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'CustomerNotes'
        AND parent_column_id = 8
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'CustomerNotes';
      SET @ColumnOrdinalNumber = 8;
      SET @StandardConstraintName = 'DF_CUSTOMERNOTES_PRIVATE';
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CUSTOMERNOTES_PRIVATE]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerNotes] ADD CONSTRAINT [DF_CUSTOMERNOTES_PRIVATE] DEFAULT ((0)) FOR [Private]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CUSTOMERNOTES_IMPORTANT]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerNotes]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'CustomerNotes'
        AND parent_column_id = 9
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'CustomerNotes';
      SET @ColumnOrdinalNumber = 9;
      SET @StandardConstraintName = 'DF_CUSTOMERNOTES_IMPORTANT';
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CUSTOMERNOTES_IMPORTANT]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerNotes] ADD CONSTRAINT [DF_CUSTOMERNOTES_IMPORTANT] DEFAULT ((0)) FOR [Important]
END


End
GO
--Rename to more standard name, from DF_CUSTOMERNOTES_DELTED to DF_CustomerNotes_Deleted.  Came up when RiteAid 5.15.4 database contained DF_CustomerNotes_Deleted name.
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CUSTOMERNOTES_DELTED]') AND type = 'D')
BEGIN
	exec sp_rename 'DF_CUSTOMERNOTES_DELTED', 'DF_CustomerNotes_Deleted', 'OBJECT'
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerNotes_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerNotes]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'CustomerNotes'
        AND parent_column_id = 10
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'CustomerNotes';
      SET @ColumnOrdinalNumber = 10;
      SET @StandardConstraintName = 'DF_CustomerNotes_Deleted';
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;
   
   IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerNotes_Deleted]') AND type = 'D')
	BEGIN
		ALTER TABLE [dbo].[CustomerNotes] ADD CONSTRAINT [DF_CustomerNotes_Deleted] DEFAULT ((0)) FOR [Deleted]
	END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CUSTOMERNOTES_NOTETYPEID]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerNotes]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'CustomerNotes'
        AND parent_column_id = 11
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'CustomerNotes';
      SET @ColumnOrdinalNumber = 11;
      SET @StandardConstraintName = 'DF_CUSTOMERNOTES_NOTETYPEID';
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CUSTOMERNOTES_NOTETYPEID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerNotes] ADD CONSTRAINT [DF_CUSTOMERNOTES_NOTETYPEID] DEFAULT ((1)) FOR [NoteTypeID]
END


End
GO


print 'processing tables/dbo.CustomerPreferences.Table.sql'; 
--
GO
-- $Id: dbo.CustomerPreferences.Table.sql 50104 2012-06-05 21:02:47Z mark $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- 20101019.AM: Create table to store all the customer preference values.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferences]') AND type in (N'U')) BEGIN
  CREATE TABLE [dbo].[CustomerPreferences](
    [PKID] [bigint] IDENTITY(1,1) NOT NULL,
    [CustomerPK] [bigint] NOT NULL,
    [PreferenceID] [bigint] NOT NULL,
    [Value] [nvarchar](250) NULL,
    [LastUpdate] [datetime] NOT NULL  CONSTRAINT [DF_CustomerPreferences_LastUpdate]  DEFAULT (getdate()),
    [UpdateLevel] [int] NOT NULL CONSTRAINT [DF_CustomerPreferences_UpdateLevel] DEFAULT(1), -- indicates records that were created/edited - increments by 1 for each change to the record
    [LastDeployLevel] [int] NOT NULL CONSTRAINT [DF_CustomerPreferences_LastDeployLevel] DEFAULT(0), -- stores the update level the last time the record was deployed to CPE/UE (via TransDownload)
    [LastChannelID] [int] NOT NULL CONSTRAINT [DF_CustomerPreferences_LastChannelID] DEFAULT(0), -- FK links to PrefManRT.Channels.ChannelID - indicates the ID of the last channel to update/create the record
  CONSTRAINT [PK_CustomerPreferences] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
  ) ON [PRIMARY]
END
GO

-- 20110502.MM: Added SendToStore flag to indicate records that were created/edited 
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerPreferences]') and name='UpdateLevel')
  alter table CustomerPreferences add [UpdateLevel] [int] NOT NULL CONSTRAINT [DF_CustomerPreferences_UpdateLevel] DEFAULT(1) with values;
GO

-- 20110502.MM: Added SendToStore flag to indicate records that were created/edited 
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerPreferences]') and name='LastDeployLevel')
  alter table CustomerPreferences add [LastDeployLevel] [int] NOT NULL CONSTRAINT [DF_CustomerPreferences_LastDeployLevel] DEFAULT(0) with values;
GO

-- 20120410.MM: FK links to PrefManRT.Channels.ChannelID - indicates the ID of the last channel to update/create the record
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerPreferences]') and name='LastChannelID')
  alter table CustomerPreferences add [LastChannelID] [int] NOT NULL CONSTRAINT [DF_CustomerPreferences_LastChannelID] DEFAULT(0) with values;
GO


-- 20111102.MM: changed the datatype for LastUpdate from datetime to datetimeoffset
-- 20120113.AM: determine if the database server is 2008 or greater as the datetimeoffset column needed for EPM is not available prior to SQL Server 2008
-- 20120203.JF: This cannot cause upgrade-path issues because:
--   1) This table is only used when Preference Manager is installed (all code in Logix that uses this table switches on 
--      Common.IsIntegrationInstalled(Copient.CommonInc.Integrations.PREFERENCE_MANAGER))
--   2) The Preference Manager installer also upgrades LogixXS
--   Note that if either of the two above conditions are not true AND SQL 2008 is not _required_ for Logix installation, this can cause problems.
declare @is2008OrGreater bit
select @is2008OrGreater = case when CONVERT(int, SUBSTRING(CONVERT(varchar(15), SERVERPROPERTY('productversion')), 0, CHARINDEX('.', CONVERT(varchar(15), SERVERPROPERTY('productversion'))))) >= 10 then 1 else 0 end

IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerPreferences]') and name='LastUpdate')) 
and (exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='CustomerPreferences' and COLUMN_NAME='LastUpdate' and DATA_TYPE='datetime')) 
and (@is2008OrGreater = 1)
BEGIN
  alter table CustomerPreferences drop constraint [DF_CustomerPreferences_LastUpdate]
  exec('alter table CustomerPreferences alter column [LastUpdate] [datetimeoffset]');
  alter table CustomerPreferences add CONSTRAINT [DF_CustomerPreferences_LastUpdate]  DEFAULT (getdate()) for [LastUpdate];
END
GO


-- 20120503.MM: Dropping unnecessary index
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferences]') AND name = N'IX_CustomerPreferences_CustomerPK') 
  drop index CustomerPreferences.IX_CustomerPreferences_CustomerPK
GO

-- 20101019.AM: Create index to more quickly serach the Customer Preference table by CustomerPK and PreferenceID.
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferences]') AND name = N'IX_CustomerPreferences_CustPKPrefID') BEGIN
  CREATE UNIQUE NONCLUSTERED INDEX [IX_CustomerPreferences_CustPKPrefID] ON [dbo].[CustomerPreferences] ([CustomerPK] ASC, [PreferenceID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
END
GO

-- 20110218.AM: Create index to speed up page load for preference custom edit page.
-- 20120501.AM: Remove index as the new index will include value
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferences]') AND name = N'IX_CustomerPreferences_PrefID')
  DROP INDEX [IX_CustomerPreferences_PrefID] ON [dbo].[CustomerPreferences];
GO

-- 20120501.AM: Create index on PreferenceID to include value for quicker lookup for preference reporting agent.
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferences]') AND name = N'IX_CustomerPreferences_PrefIDValue') BEGIN
  CREATE NONCLUSTERED INDEX [IX_CustomerPreferences_PrefIDValue] ON [dbo].[CustomerPreferences] ([PreferenceID] ASC) INCLUDE ([Value]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
END
GO



print 'processing tables/dbo.CustomerPreferencesMV.Table.sql'; 
--
GO
-- $Id: dbo.CustomerPreferencesMV.Table.sql 50104 2012-06-05 21:02:47Z mark $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
-- 20110513.MM: Create table to store all the customer preference values for multi-value type preferences
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferencesMV]') AND type in (N'U')) BEGIN
  CREATE TABLE [dbo].[CustomerPreferencesMV](
    [PKID] [bigint] IDENTITY(1,1) NOT NULL,
    [CustomerPK] [bigint] NOT NULL,
    [PreferenceID] [bigint] NOT NULL,
    [Value] [nvarchar](250) NULL,
    [Deleted] [bit] NOT NULL CONSTRAINT [DF_CustomerPreferencesMV_Deleted] Default(0),
    [LastUpdate] [datetime] NOT NULL  CONSTRAINT [DF_CustomerPreferencesMV_LastUpdateMV]  DEFAULT (getdate()),
    [UpdateLevel] [int] NOT NULL CONSTRAINT [DF_CustomerPreferencesMV_UpdateLevel] DEFAULT(1),
    [LastDeployLevel] [int] NOT NULL CONSTRAINT [DF_CustomerPreferencesMV_LastDeployLevel] DEFAULT(0),
    [LastChannelID] [int] NOT NULL CONSTRAINT [DF_CustomerPreferencesMV_LastChannelID] DEFAULT(0), -- FK links to PrefManRT.Channels.ChannelID - indicates the ID of the last channel to update/create the record
  CONSTRAINT [PK_CustomerPreferencesMV] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
  ) ON [PRIMARY]
END
GO

-- 20120410.MM: FK links to PrefManRT.Channels.ChannelID - indicates the ID of the last channel to update/create the record
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerPreferencesMV]') and name='LastChannelID')
  alter table CustomerPreferencesMV add [LastChannelID] [int] NOT NULL CONSTRAINT [DF_CustomerPreferencesMV_LastChannelID] DEFAULT(0) with values;
GO

-- 20111102.MM: changed the datatype for LastUpdate from datetime to datetimeoffset
-- 20120113.AM: determine if the database server is 2008 or greater as the datetimeoffset column needed for EPM is not available prior to SQL Server 2008
-- 20120203.JF: This cannot cause upgrade-path issues because:
--   1) This table is only used when Preference Manager is installed (all code in Logix that uses this table switches on 
--      Common.IsIntegrationInstalled(Copient.CommonInc.Integrations.PREFERENCE_MANAGER))
--   2) The Preference Manager installer also upgrades LogixXS 
--   Note that if either of the two above conditions are not true AND SQL 2008 is not _required_ for Logix installation, this can cause problems.
declare @is2008OrGreater bit
select @is2008OrGreater = case when CONVERT(int, SUBSTRING(CONVERT(varchar(15), SERVERPROPERTY('productversion')), 0, CHARINDEX('.', CONVERT(varchar(15), SERVERPROPERTY('productversion'))))) >= 10 then 1 else 0 end

IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerPreferencesMV]') and name='LastUpdate'))
and (exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='CustomerPreferencesMV' and COLUMN_NAME='LastUpdate' and DATA_TYPE='datetime'))
and (@is2008OrGreater = 1)
BEGIN
  alter table CustomerPreferencesMV drop constraint [DF_CustomerPreferencesMV_LastUpdateMV]
  exec('alter table CustomerPreferencesMV alter column [LastUpdate] [datetimeoffset]');
  alter table CustomerPreferencesMV add CONSTRAINT [DF_CustomerPreferencesMV_LastUpdateMV]  DEFAULT (getdate()) for [LastUpdate];
END
GO


-- 20120503.MM: Dropping unnecessary index
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferencesMV]') AND name = N'IX_CustomerPreferencesMV_CustomerPK') 
  drop index CustomerPreferencesMV.IX_CustomerPreferencesMV_CustomerPK
GO

-- 20120503.MM: Create index to more quickly search the CustomerPreferencesMV table by CustomerPK and PreferenceID.
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferencesMV]') AND name = N'IX_CustomerPreferencesMV_CustPKPrefID') BEGIN
  CREATE NONCLUSTERED INDEX [IX_CustomerPreferencesMV_CustPKPrefID] ON [dbo].[CustomerPreferencesMV] ([CustomerPK] ASC, [PreferenceID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
END
GO

-- 20110513.MM: Create index to speed up page load for preference custom edit page.
-- 20120501.AM: Remove index as the new index will include value
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferencesMV]') AND name = N'IX_CustomerPreferencesMV_PrefID')
  DROP INDEX [IX_CustomerPreferencesMV_PrefID] ON [dbo].[CustomerPreferencesMV];
GO

-- 20120501.AM: Create index on PreferenceID to include value for quicker lookup for preference reporting agent.
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerPreferencesMV]') AND name = N'IX_CustomerPreferencesMV_PrefIDValue') BEGIN
  CREATE NONCLUSTERED INDEX [IX_CustomerPreferencesMV_PrefIDValue] ON [dbo].[CustomerPreferencesMV] ([PreferenceID] ASC) INCLUDE ([Value]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
END
GO


print 'processing tables/dbo.CustomerRemovalQueue.Table.sql'; 
--
GO
-- $Id: dbo.CustomerRemovalQueue.Table.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerRemovalQueue]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerRemovalQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerRemovalQueue](
	[CustomerPK] [bigint] NOT NULL,
	[RemovalDate] [datetime] NOT NULL,
	[StatusFlag] [int] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerRemovalQueue' AND column_name = 'PKID')
ALTER TABLE [dbo].[CustomerRemovalQueue] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerRemovalQueue]') AND name = N'PK_CustomerRemovalQueue')
ALTER TABLE [dbo].[CustomerRemovalQueue] ADD CONSTRAINT [PK_CustomerRemovalQueue] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerRemovalQueue_RemovalDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerRemovalQueue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerRemovalQueue_RemovalDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerRemovalQueue] ADD  CONSTRAINT [DF_CustomerRemovalQueue_RemovalDate]  DEFAULT (getdate()) FOR [RemovalDate]
END


End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerRemovalQueue_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerRemovalQueue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerRemovalQueue_StatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerRemovalQueue] ADD  CONSTRAINT [DF_CustomerRemovalQueue_StatusFlag]  DEFAULT ((0)) FOR [StatusFlag]
END


End
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerRemovalQueue]') AND name = N'IX_CustomerRemovalQueue_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_CustomerRemovalQueue_StatusFlag] ON [dbo].[CustomerRemovalQueue] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO




print 'processing tables/dbo.CustomerResponses.Table.sql'; 
--
GO
-- $Id: dbo.CustomerResponses.Table.sql 79260 2014-05-31 09:41:10Z mv250132 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerResponses]    Script Date: 12/27/2010 16:15:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerResponses](
	[CustomerResponseID] [bigint] IDENTITY(1,1) NOT NULL,
	[LocalID] [int] NULL,
	[ServerSerial] [int] NULL,
	[LocationID] [int] NULL,
	[CustomerPK] [bigint] NULL,
	[IncentiveID] [bigint] NULL,
	[RewardOptionID] [bigint] NULL,
	[OnScreenAdID] [int] NULL,
	[Response] [nvarchar](255) NULL,
	[Deleted] [bit] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingACK] [int] NULL,
	[LastServerID] [int] NULL,
	[LogixTransNum] [char](36) NULL,
 CONSTRAINT [PK_CustomerResponses] PRIMARY KEY CLUSTERED 
(
	[CustomerResponseID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND name = N'IX_CustomerResponses_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_CustomerResponses_CustomerPK] ON [dbo].[CustomerResponses] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND name = N'IX_CustomerResponses_IncentiveID')
CREATE NONCLUSTERED INDEX [IX_CustomerResponses_IncentiveID] ON [dbo].[CustomerResponses] 
(
	[IncentiveID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND name = N'IX_CustomerResponses_LastUpdate')
CREATE NONCLUSTERED INDEX [IX_CustomerResponses_LastUpdate] ON [dbo].[CustomerResponses] 
(
	[LastUpdate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND name = N'IX_CustomerResponses_LocalID')
CREATE NONCLUSTERED INDEX [IX_CustomerResponses_LocalID] ON [dbo].[CustomerResponses] 
(
	[LocalID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND name = N'IX_CustomerResponses_OnScreenAdID')
CREATE NONCLUSTERED INDEX [IX_CustomerResponses_OnScreenAdID] ON [dbo].[CustomerResponses] 
(
	[OnScreenAdID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND name = N'IX_CustomerResponses_RewardOptionID')
CREATE NONCLUSTERED INDEX [IX_CustomerResponses_RewardOptionID] ON [dbo].[CustomerResponses] 
(
	[RewardOptionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerResponses]') AND name = N'IX_CustomerResponses_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_CustomerResponses_WaitingACK] ON [dbo].[CustomerResponses] 
(
	[WaitingACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerResponses_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerResponses]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerResponses_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerResponses] ADD  CONSTRAINT [DF_CustomerResponses_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerResponses_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerResponses]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerResponses_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CustomerResponses] ADD  CONSTRAINT [DF_CustomerResponses_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END


End
GO


-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CustomerResponses' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[CustomerResponses] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO


print 'processing tables/dbo.CustomerSearchTypes.Table.sql'; 
--
GO
-- $Id: dbo.CustomerSearchTypes.Table.sql 112606 2017-05-17 12:07:25Z ds250532 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerSearchTypes]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerSearchTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerSearchTypes](
	[SearchTypeID] [int] NOT NULL,
	[Name] [nvarchar](50) NULL,
	[PhraseID] [int] NULL,
	[Enabled] [bit] NULL,
	[IsEncrypted] [bit]  NOT NULL CONSTRAINT [CustomerSearchTypes_IsEncrypted]  DEFAULT (0)
 CONSTRAINT [PK_CustomerSearchTypes] PRIMARY KEY CLUSTERED 
(
	[SearchTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

---AMS-8572 PII Compliance | Encrypt PII data of customer profile in DB for Logix Trunk
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerSearchTypes]') and name='IsEncrypted')
  ALTER TABLE [dbo].[CustomerSearchTypes] ADD IsEncrypted bit NOT NULL CONSTRAINT [CustomerSearchTypes_IsEncrypted]  DEFAULT (0);
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 1  )
    INSERT [dbo].[CustomerSearchTypes] ([SearchTypeID], [Name], [PhraseID], [Enabled]) VALUES (1, N'Card number', 1904, 1)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 2  )
    INSERT [dbo].[CustomerSearchTypes] ([SearchTypeID], [Name], [PhraseID], [Enabled]) VALUES (2, N'Household ID', 584, 1)
GO

IF EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 3  )
    UPDATE [dbo].[CustomerSearchTypes] SET [Enabled] = 0 WHERE [SearchTypeID] = 3
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 4  )
    INSERT [dbo].[CustomerSearchTypes] ([SearchTypeID], [Name], [PhraseID], [Enabled]) VALUES (4, N'Last name', 691, 1)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 5  )
    INSERT [dbo].[CustomerSearchTypes] ([SearchTypeID], [Name], [PhraseID], [Enabled]) VALUES (5, N'Phone', 677, 1)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 6  )
    INSERT [dbo].[CustomerSearchTypes] ([SearchTypeID], [Name], [PhraseID], [Enabled]) VALUES (6, N'Coupon', 1042, 1)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 7  )
    INSERT [dbo].[CustomerSearchTypes] ([SearchTypeID], [Name], [PhraseID], [Enabled]) VALUES (7, N'CAM Cardholder ID', 3875, 1)
GO

--20110531.RW: RT4864 Adding new search type for partial last name.
IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerSearchTypes WHERE  [SearchTypeID] = 8  )
    INSERT [dbo].[CustomerSearchTypes] ([SearchTypeID], [Name], [PhraseID], [Enabled]) VALUES (8, N'Last name(partial)', 5310, 0)
GO

---AMS-8572 PII Compliance | Encrypt PII data of customer profile in DB for Logix Trunk
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerSearchTypes]') and name='isEncrypted') 
 update  CustomerSearchTypes set isEncrypted = 1 where SearchTypeID = 5
GO




print 'processing tables/dbo.CustomerStatus.Table.sql'; 
--
GO
-- $Id: dbo.CustomerStatus.Table.sql 56205 2012-09-21 22:41:17Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerStatus]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerStatus]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerStatus](
	[CustomerStatusID] [int] NOT NULL,
	[Description] [nvarchar](50) NULL,
	[PhraseID] [int] NULL,
    [PhraseTerm] [varchar](40) NULL,
  CONSTRAINT [PK_CustomerStatus] PRIMARY KEY CLUSTERED ([CustomerStatusID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

-- 20101102.MM: Adding PhraseTerm column to the CustomerStatus table
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CustomerStatus]') and name='PhraseTerm')
  Alter table CustomerStatus add PhraseTerm varchar(40) NULL;
GO

DELETE from CustomerStatus;
GO

INSERT INTO [dbo].[CustomerStatus] (CustomerStatusID, Description, PhraseID, PhraseTerm) VALUES (1, 'Active', 146, 'term.active');
INSERT INTO [dbo].[CustomerStatus] (CustomerStatusID, Description, PhraseID, PhraseTerm) VALUES (2, 'InActive', 423, 'term.inactive');
-- reserve 'On Hold' for client specific
-- INSERT INTO [dbo].[CustomerStatus] (CustomerStatusID, Description, PhraseID, PhraseTerm) VALUES (3, 'OnHold', 6685, 'term.onhold');
GO



print 'processing tables/dbo.CustomerSupplemental.Table.sql'; 
--
GO
-- $Id: dbo.CustomerSupplemental.Table.sql 28991 2011-04-04 12:38:10Z huw $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerSupplemental]    Script Date: 03/30/2011 11:00:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerSupplemental]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerSupplemental](
	[CustomerPK] [bigint] NOT NULL,
	[FieldID] [int] NOT NULL,
	[Value] [nvarchar](1000) NULL,
	[LastUpdate] [datetime] NULL,
	[Deleted] [bit] NOT NULL,
 CONSTRAINT [PK_CustomerSupplemental] PRIMARY KEY CLUSTERED ([CustomerPK] ASC, [FieldID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerSupplemental_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerSupplemental]'))
BEGIN
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerSupplemental_Deleted]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CustomerSupplemental] ADD  CONSTRAINT [DF_CustomerSupplemental_Deleted]  DEFAULT ((0)) FOR [Deleted]
  END
END
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerSupplemental_LastUpdate]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerSupplemental]'))
BEGIN
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerSupplemental_LastUpdate]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CustomerSupplemental] ADD  CONSTRAINT [DF_CustomerSupplemental_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
  END
END
GO

print 'processing tables/dbo.CustomerSupplementalFieldTypes.Table.sql'; 
--
GO
-- $Id: dbo.CustomerSupplementalFieldTypes.Table.sql 79509 2014-06-04 13:50:49Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerSupplementalFieldTypes]    Script Date: 03/30/2011 11:00:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerSupplementalFieldTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerSupplementalFieldTypes](
    [FieldTypeID] [int] NOT NULL,
    [Name] [nvarchar](100) NULL,
 CONSTRAINT [PK_CustomerSupplementalFieldTypes] PRIMARY KEY CLUSTERED ([FieldTypeID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CustomerSupplementalFieldTypes' AND COLUMN_NAME = 'PhraseID')
BEGIN
	ALTER TABLE [dbo].[CustomerSupplementalFieldTypes] ADD [PhraseID] [int] NULL
END
GO


IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where FieldTypeID=1)
  INSERT [dbo].[CustomerSupplementalFieldTypes] ([FieldTypeID], [Name]) VALUES (1, N'Bit');
GO
IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where FieldTypeID=2)
  INSERT [dbo].[CustomerSupplementalFieldTypes] ([FieldTypeID], [Name]) VALUES (2, N'Integer');
GO
IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where FieldTypeID=3)
  INSERT [dbo].[CustomerSupplementalFieldTypes] ([FieldTypeID], [Name]) VALUES (3, N'Decimal');
GO
IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where FieldTypeID=4)
  INSERT [dbo].[CustomerSupplementalFieldTypes] ([FieldTypeID], [Name]) VALUES (4, N'Date');
GO
IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where FieldTypeID=5)
  INSERT [dbo].[CustomerSupplementalFieldTypes] ([FieldTypeID], [Name]) VALUES (5, N'Text');
GO

IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where  PhraseID=7668)
  UPDATE CustomerSupplementalFieldTypes set [PhraseID]=7668 where FieldTypeID=1
GO

IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where  PhraseID=7669)
  UPDATE CustomerSupplementalFieldTypes set [PhraseID]=7669 where FieldTypeID=2
GO

IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where  PhraseID=7670)
  UPDATE CustomerSupplementalFieldTypes set [PhraseID]=7670 where FieldTypeID=3
GO

IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where  PhraseID=0134)
  UPDATE CustomerSupplementalFieldTypes set [PhraseID]=0134 where FieldTypeID=4
GO

IF NOT EXISTS (select * from [dbo].[CustomerSupplementalFieldTypes] where  PhraseID=0357)
  UPDATE CustomerSupplementalFieldTypes set [PhraseID]=0357 where FieldTypeID=5
GO



print 'processing tables/dbo.CustomerSupplementalFields.Table.sql'; 
--
GO
-- $Id: dbo.CustomerSupplementalFields.Table.sql 31892 2011-06-01 21:21:22Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerSupplementalFields]    Script Date: 03/30/2011 11:00:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerSupplementalFields]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerSupplementalFields](
    [FieldID] [int] IDENTITY(1,1) NOT NULL,
    [ExtFieldID] [nvarchar](50) NULL,
    [Name] [nvarchar](100) NULL,
    [FieldTypeID] [int] NULL,
    [Length] [int] NULL,
    [Visible] [bit] NOT NULL,
    [Editable] [bit] NOT NULL,
    [Deleted] [bit] NOT NULL,
    [LastUpdate] [datetime] NULL,
 CONSTRAINT [PK_CustomerSupplementalFields] PRIMARY KEY CLUSTERED ([FieldID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerSupplementalFields_Visible]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerSupplementalFields]'))
BEGIN
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerSupplementalFields_Visible]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CustomerSupplementalFields] ADD CONSTRAINT [DF_CustomerSupplementalFields_Visible] DEFAULT ((0)) FOR [Visible]
  END
END
GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerSupplementalFields_Editable]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerSupplementalFields]'))
BEGIN
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerSupplementalFields_Editable]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CustomerSupplementalFields] ADD CONSTRAINT [DF_CustomerSupplementalFields_Editable] DEFAULT ((0)) FOR [Editable]
  END
END
GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerSupplementalFields_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[CustomerSupplementalFields]'))
BEGIN
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CustomerSupplementalFields_Deleted]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[CustomerSupplementalFields] ADD CONSTRAINT [DF_CustomerSupplementalFields_Deleted] DEFAULT ((0)) FOR [Deleted]
  END
END
GO


IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CustomerSupplementalFields' AND column_name = 'ExtFieldID')
BEGIN
    ALTER TABLE [dbo].[CustomerSupplementalFields] ADD [ExtFieldID] [nvarchar](50) NULL
END

print 'processing tables/dbo.CustomerTypes.Table.sql'; 
--
GO
-- $Id: dbo.CustomerTypes.Table.sql 48336 2012-05-02 14:27:32Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerTypes]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerTypes](
	[TypeID] [int] NOT NULL,
	[Description] [nvarchar](100) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_CustomerTypes] PRIMARY KEY NONCLUSTERED 
(
	[TypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

-- Drop the Non-clustered index on primary key if exists --

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerTypes]') AND name = N'PK_CustomerTypes' AND type = 2)
ALTER TABLE [dbo].[CustomerTypes] DROP CONSTRAINT [PK_CustomerTypes]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CustomerTypes]') AND name = N'PK_CustomerTypes')
ALTER TABLE [dbo].[CustomerTypes] ADD CONSTRAINT [PK_CustomerTypes] PRIMARY KEY CLUSTERED ([TypeID] ASC) 
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerTypes WHERE  [TypeID] = 0  )
    INSERT [dbo].[CustomerTypes] ([TypeID], [Description], [PhraseID]) VALUES (0, N'Customer', 212)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerTypes WHERE  [TypeID] = 1  )
    INSERT [dbo].[CustomerTypes] ([TypeID], [Description], [PhraseID]) VALUES (1, N'Household', 284)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerTypes WHERE  [TypeID] = 2  )
    INSERT [dbo].[CustomerTypes] ([TypeID], [Description], [PhraseID]) VALUES (2, N'CAM', 3874)
GO


print 'processing tables/dbo.CustomerUniqueConstraintFields.Table.sql'; 
--
GO
-- $Id: dbo.CustomerUniqueConstraintFields.Table.sql 28991 2011-05-20 12:38:10Z Lakshmi Y $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CustomerUniqueConstraintFields]    Script Date: 05/20/2011 11:00:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CustomerUniqueConstraintFields]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CustomerUniqueConstraintFields](
    [FieldID]    [int] NOT NULL,
    [Name]       [nvarchar](100) NOT NULL,
    [UniqueFlag] [bit] NOT NULL
 CONSTRAINT [PK_CustomerUniqueConstraintFields] PRIMARY KEY CLUSTERED ([FieldID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO



IF Not EXISTS ( SELECT TOP 1 1 FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CustomerUniqueConstraintFields_UniqueFlag]') ) 
Begin
    DECLARE @CurrentConstraintName sysname
    SELECT top 1 @CurrentConstraintName = name FROM sys.default_constraints WHERE OBJECT_NAME(parent_object_id) = 'CustomerUniqueConstraintFields' AND name LIKE 'DF__CustomerU__Uniqu__%' AND is_system_named = 1
    IF @@rowcount = 1
    BEGIN
        --  Rename system named constraint to standard naming convention
        exec sp_rename @CurrentConstraintName, 'DF_CustomerUniqueConstraintFields_UniqueFlag', 'OBJECT'
    END
    ELSE
    BEGIN
        ALTER TABLE [dbo].[CustomerUniqueConstraintFields] ADD CONSTRAINT [DF_CustomerUniqueConstraintFields_UniqueFlag] DEFAULT (0) FOR [UniqueFlag]
    END

End
GO



IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerUniqueConstraintFields WHERE  [FieldID] = 1  )
    INSERT [dbo].[CustomerUniqueConstraintFields] ([FieldID], [Name], [UniqueFlag]) VALUES (1, 'Email', 0)
GO


IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerUniqueConstraintFields WHERE  [FieldID] = 2  )
    INSERT [dbo].[CustomerUniqueConstraintFields] ([FieldID], [Name], [UniqueFlag]) VALUES (2, 'Phone', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerUniqueConstraintFields WHERE  [FieldID] = 3  )
    INSERT [dbo].[CustomerUniqueConstraintFields] ([FieldID], [Name], [UniqueFlag]) VALUES (3, 'MobilePhone', 0)
GO


IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerUniqueConstraintFields WHERE  [FieldID] = 4  )
    INSERT [dbo].[CustomerUniqueConstraintFields] ([FieldID], [Name], [UniqueFlag]) VALUES (4, 'AirmileMemberID', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerUniqueConstraintFields WHERE  [FieldID] = 5  )
    INSERT [dbo].[CustomerUniqueConstraintFields] ([FieldID], [Name], [UniqueFlag]) VALUES (5, 'DriverLicenseID', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerUniqueConstraintFields WHERE  [FieldID] = 6  )
    INSERT [dbo].[CustomerUniqueConstraintFields] ([FieldID], [Name], [UniqueFlag]) VALUES (6, 'TaxExemptID', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM CustomerUniqueConstraintFields WHERE  [FieldID] = 7  )
    INSERT [dbo].[CustomerUniqueConstraintFields] ([FieldID], [Name], [UniqueFlag]) VALUES (7, 'EmployeeID', 0)
GO

print 'processing tables/dbo.Customers.Table.sql'; 
--
GO
-- $Id: dbo.Customers.Table.sql 121539 2018-03-12 13:24:34Z vd185037 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[Customers]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[Customers](
	[CustomerPK] [bigint] IDENTITY(1,1) NOT NULL,
	[InitialCardID] [nvarchar](400) NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[CreatedDate] [datetime] NULL,
	[Employee] [bit] NULL,
	[UpdateCount] [bigint] NULL,
	[CurrYearSTD] [decimal](12, 3) NULL,
	[LastYearSTD] [decimal](12, 3) NULL,
	[Password] [nvarchar](400) NULL,
	[InitialCardTypeID] [int] NOT NULL,
	[CPEStoreSendFlag] [int] NOT NULL,
	[HHPK] [bigint] NOT NULL,
	[LastComm] [datetime] NULL,
	[CommFrequency] [int] NULL,
	[CommEmail] [bit] NULL,
	[CommPrint] [bit] NULL,
	[BannerID] [int] NULL,
	[AltID] [nvarchar](20) NULL,
	[CreatedLocationID] [bigint] NULL,
	[Verifier] [nvarchar](20) NULL,
	[AltIDOptOut] [int] NULL,
	[TestCard] [bit] NULL,
	[MiddleName] [nvarchar](50) NULL,
	[EmployeeID] [nvarchar](400) NULL,
	[CustomerStatusID] [int] NOT NULL,
	[CustomerTypeID] [int] NOT NULL,
	[Prefix] [nvarchar](20) NULL,
	[Suffix] [nvarchar](20) NULL,
	[PreviousHHPK] [bigint] NOT NULL,
	[EnrollmentDate] [nvarchar](8) NULL,
	[SourceType] [tinyint] NOT NULL	DEFAULT 1,
	[LastUpdated] ROWVERSION,
	[AuthInProgressFlag] [bit] NOT NULL DEFAULT 0,	
 CONSTRAINT [PK_Customers] PRIMARY KEY CLUSTERED 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

-- 20110512.RW: Add RestricedRedemption to the CPE_Incentives table. RT 4487
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'RestrictedRedemption')
BEGIN
	ALTER TABLE [dbo].[Customers] ADD [RestrictedRedemption] [bit] NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'LastUpdated')
BEGIN
	ALTER TABLE [dbo].[Customers] ADD [LastUpdated] ROWVERSION
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'SourceType')
BEGIN
	ALTER TABLE [dbo].[Customers] ADD [SourceType] [tinyint] NOT NULL DEFAULT 1
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[Customers]') and name='InitialCardID')
Begin
  alter table Customers alter column InitialCardID nvarchar(400)
End
GO

-- NewCustomer field, per BZ4009
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'NewCustomer')
BEGIN
	ALTER TABLE [dbo].[Customers] ADD [NewCustomer] [bit] NULL
END
GO

-- AMSPS-2531
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'LinkedCard')
BEGIN
    ALTER TABLE [dbo].[Customers] ADD [LinkedCard] [bigint] NULL
END
GO

-- Increase the password length to at least 256 nvarchars
-- Increase the password length to at least 400 nvarchars to fit encrypted string
DECLARE @passwordLen int
SELECT @passwordLen = CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'Password'
IF ( @passwordLen < 400 )
BEGIN
    ALTER TABLE [dbo].[Customers] ALTER COLUMN [Password] [nvarchar](400) NULL
END
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Unique_Customers')
  CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_Customers] ON [dbo].[Customers] ([InitialCardID] ASC, [InitialCardTypeID] ASC)WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY]
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Customers_BannerID')
  CREATE NONCLUSTERED INDEX [IX_Customers_BannerID] ON [dbo].[Customers] ([BannerID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Customers_CPEStoreSendFlag')
  CREATE NONCLUSTERED INDEX [IX_Customers_CPEStoreSendFlag] ON [dbo].[Customers] ([CPEStoreSendFlag] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Customers_CustomerTypeID')
  CREATE NONCLUSTERED INDEX [IX_Customers_CustomerTypeID] ON [dbo].[Customers] ([CustomerTypeID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Customers_HHPK')
  CREATE NONCLUSTERED INDEX [IX_Customers_HHPK] ON [dbo].[Customers] ([HHPK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Customers_LastName')
  CREATE NONCLUSTERED INDEX [IX_Customers_LastName] ON [dbo].[Customers] ([LastName] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Customers_Password')
  CREATE NONCLUSTERED INDEX [IX_Customers_Password] ON [dbo].[Customers] ([Password] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Customers_EmployeeID')
  CREATE NONCLUSTERED INDEX [IX_Customers_EmployeeID] ON [dbo].[Customers] ([EmployeeID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- 20120416:MM Drop the IX_Unique_CustomerTypes index (if it exists) (BZ 2769)
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Customers]') AND name = N'IX_Unique_CustomerTypes')
  drop index Customers.IX_Unique_CustomerTypes;
GO



IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_FirstName]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_FirstName]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_FirstName]  DEFAULT ('') FOR [FirstName]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_LastName]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_LastName]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_LastName]  DEFAULT ('') FOR [LastName]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_Employee]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_Employee]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_Employee]  DEFAULT ((0)) FOR [Employee]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_UpdateCount]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_UpdateCount]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_UpdateCount]  DEFAULT ((1)) FOR [UpdateCount]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_CurrYearSTD]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_CurrYearSTD]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_CurrYearSTD]  DEFAULT ((0)) FOR [CurrYearSTD]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_LastYearSTD]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_LastYearSTD]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_LastYearSTD]  DEFAULT ((0)) FOR [LastYearSTD]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_CPEStoreSendFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_CPEStoreSendFlag]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_CPEStoreSendFlag]  DEFAULT ((0)) FOR [CPEStoreSendFlag]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_HHPK]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_HHPK]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_HHPK]  DEFAULT ((0)) FOR [HHPK]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_AltIDOptOut]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_AltIDOptOut]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_AltIDOptOut]  DEFAULT ((0)) FOR [AltIDOptOut]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_CustomerStatusID]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_CustomerStatusID]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_CustomerStatusID]  DEFAULT ((1)) FOR [CustomerStatusID]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_CustomerTypeID]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_CustomerTypeID]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_CustomerTypeID]  DEFAULT ((0)) FOR [CustomerTypeID]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_PreviousHHPK]') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_PreviousHHPK]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_PreviousHHPK]  DEFAULT ((0)) FOR [PreviousHHPK]
  END
End
GO

-- 20110512.RW: Add RestricedRedemption to the CPE_Incentives table. RT 4487
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_RestrictedRedemption') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_RestrictedRedemption]') AND type = 'D')
	BEGIN
		ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_RestrictedRedemption]  DEFAULT ((0)) FOR [RestrictedRedemption]
	END
End
GO

-- Constraint for NewCustomer, per BZ4009
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Customers_NewCustomer') AND parent_object_id = OBJECT_ID(N'[dbo].[Customers]'))
Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Customers_NewCustomer]') AND type = 'D')
	BEGIN
		ALTER TABLE [dbo].[Customers] ADD  CONSTRAINT [DF_Customers_NewCustomer]  DEFAULT ((1)) FOR [NewCustomer]
	END
End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[Customers]') and name='EmployeeID')
Begin
  alter table Customers alter column EmployeeID nvarchar(400)
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[Customers] ADD KeyRotationFlag bit NULL
END

GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'InitialCardIDOriginal')
BEGIN
ALTER TABLE [dbo].[Customers] ADD InitialCardIDOriginal[nvarchar](400)  NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'AuthInProgressFlag')
BEGIN
	ALTER TABLE [dbo].[Customers] ADD [AuthInProgressFlag] [bit] NOT NULL DEFAULT 0
END
GO

--Case Insensitive search will break if column will have null data
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Customers' AND COLUMN_NAME = 'InitialCardIDOriginal')
BEGIN
UPDATE Customers SET InitialCardIDOriginal=InitialCardID WHERE InitialCardIDOriginal IS NULL
END
GO
/****** Object:  Trigger [Customers_Insert_Trig]    Script Date: 12/27/2010 16:15:03 ******/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[Customers_Insert_Trig]'))
BEGIN
	DROP TRIGGER Customers_Insert_Trig
END
	EXEC dbo.sp_executesql @statement = N'
	CREATE TRIGGER [dbo].[Customers_Insert_Trig] on [dbo].[Customers]
	FOR INSERT AS
	BEGIN
	  
	  INSERT INTO CardIds (CustomerPK, ExtCardID, CardTypeID,ExtCardIDOriginal)
	  SELECT ii.CustomerPK, ii.InitialCardID, ii.InitialCardTypeID,ii.InitialCardIDOriginal FROM inserted ii
	END
	'
GO

print 'processing tables/dbo.DistributionVariables.Table.sql'; 
--
GO
-- $Id: dbo.DistributionVariables.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[DistributionVariables]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DistributionVariables]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[DistributionVariables](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[PromoVarID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[Amount] [decimal](12, 3) NULL,
 CONSTRAINT [PK_DistributionVariables] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[DistributionVariables]') AND name = N'IX_Unique_DistributionVariables')
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_DistributionVariables] ON [dbo].[DistributionVariables] 
(
	[PromoVarID] ASC,
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.DistributionVariablesPending.Table.sql'; 
--
GO
-- $Id: dbo.DistributionVariablesPending.Table.sql 1 2014-11-24 17:56:18Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[DistributionVariablesPending]    Script Date: 11/24/2014 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DistributionVariablesPending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[DistributionVariablesPending](
   [PKID] [bigint] IDENTITY(1,1) NOT NULL,
   [CustomerPK] [bigint] NULL,
   [PromoVarID] [bigint] NULL,
   [Amount] [decimal](12, 3) NULL,
   [CartID] [nvarchar](36) NULL,
   [ExtLocationCode] [nvarchar](20) NULL,
   [Deleted] [bit] NOT NULL,
   [LastUpdate] [datetime] NULL,
   [LogixTransNum] [char](36) NULL,
   [POSTimeStamp] [datetime] NULL, 
   [ServerSerial] [int] NULL,
   [LocationID] [bigint] NULL,
   [WaitingACK] [int] NULL,
   CONSTRAINT [PK_DistributionVariablesPending] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


print 'processing tables/dbo.ExtCardIDSequence.Table.sql'; 
--
GO
-- $Id: dbo.ExtCardIDSequence.Table.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[ExtCardIDSequence]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ExtCardIDSequence]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[ExtCardIDSequence](
	[SequenceID] [int] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ExtCardIDSequence' AND column_name = 'PKID')
ALTER TABLE [dbo].[ExtCardIDSequence] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ExtCardIDSequence]') AND name = N'PK_ExtCardIDSequence')
ALTER TABLE [dbo].[ExtCardIDSequence] ADD CONSTRAINT [PK_ExtCardIDSequence] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PrimaryExtIDSequence_SequenceID]') AND parent_object_id = OBJECT_ID(N'[dbo].[ExtCardIDSequence]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PrimaryExtIDSequence_SequenceID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ExtCardIDSequence] ADD  CONSTRAINT [DF_PrimaryExtIDSequence_SequenceID]  DEFAULT ((0)) FOR [SequenceID]
END


End
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM ExtCardIDSequence WHERE  [SequenceID] = 0  )
    INSERT [dbo].[ExtCardIDSequence] ([SequenceID]) VALUES (0)
GO


print 'processing tables/dbo.GMInsertQueue.Table.sql'; 
--
GO
-- $Id: dbo.GMInsertQueue.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[GMInsertQueue]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GMInsertQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[GMInsertQueue](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[FileName] [nvarchar](255) NULL,
	[UploadTime] [datetime] NULL,
	[CustomerGroupID] [bigint] NULL,
	[StatusFlag] [int] NULL,
	[CardTypeID] [int] NULL,
	[OperationType] [int] NOT NULL,
	[ExtInterfaceID] [int] NULL,
 CONSTRAINT [PK_GMInsertQueue] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_GMInsertQueue_OperationType]') AND parent_object_id = OBJECT_ID(N'[dbo].[GMInsertQueue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_GMInsertQueue_OperationType]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[GMInsertQueue] ADD  CONSTRAINT [DF_GMInsertQueue_OperationType]  DEFAULT ((0)) FOR [OperationType]
END


End
GO


print 'processing tables/dbo.GMInsertTemp.Table.sql'; 
--
GO
-- $Id: dbo.GMInsertTemp.Table.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[GMInsertTemp]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GMInsertTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[GMInsertTemp](
	[CustomerPK] [bigint] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[ProcessFlag] [int] NULL,
	[ExtCardTypeID] [nvarchar](26) NULL,
	[CardTypeID] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'GMInsertTemp' AND column_name = 'PKID')
ALTER TABLE [dbo].[GMInsertTemp] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

---Found during upgrade in RiteAid 5.14.4.  This old legacy index name 'clust_ix1' renamed to the new standard name, PK_GMInsertTemp.
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GMInsertTemp]') AND name = N'clust_ix1')
BEGIN
	exec sp_rename N'dbo.GMInsertTemp.clust_ix1', N'PK_GMInsertTemp', N'INDEX'
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GMInsertTemp]') AND name = N'PK_GMInsertTemp')
ALTER TABLE [dbo].[GMInsertTemp] ADD CONSTRAINT [PK_GMInsertTemp] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_GMInsertTemp_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[GMInsertTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_GMInsertTemp_ProcessFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[GMInsertTemp] ADD  CONSTRAINT [DF_GMInsertTemp_ProcessFlag]  DEFAULT ((0)) FOR [ProcessFlag]
END


End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[GMInsertTemp]') and name='ExternalID')
BEGIN
  alter table GMInsertTemp alter column ExternalID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GMInsertTemp]') AND name = N'IX_GMInsertTemp_ProcessFlag')
CREATE NONCLUSTERED INDEX [IX_GMInsertTemp_ProcessFlag] ON [dbo].[GMInsertTemp] 
(
	[ProcessFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='GMInsertTemp' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[GMInsertTemp] ADD KeyRotationFlag bit NULL
END
GO
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='GMInsertTemp' AND COLUMN_NAME = 'ExternalIDOriginal')
BEGIN
ALTER TABLE [dbo].[GMInsertTemp] ADD ExternalIDOriginal[nvarchar](400)  NULL
END
GO

print 'processing tables/dbo.GroupMembership.Table.sql'; 
--
GO
-- $Id: dbo.GroupMembership.Table.sql 79260 2014-05-31 09:41:10Z mv250132 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[GroupMembership]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[GroupMembership](
	[MembershipID] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomerGroupID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[Manual] [bit] NULL,
	[LastUpdate] [datetime] NULL,
	[Deleted] [bit] NULL,
	[CMOAStatusFlag] [int] NOT NULL,
	[TCRMAStatusFlag] [int] NOT NULL,
	[CPEStatusFlag] [int] NOT NULL,
	[LogixTransNum] [char](36) NULL,
	[ExtInterfaceID] [int] NULL,
 CONSTRAINT [PK_GroupMembership] PRIMARY KEY CLUSTERED 
(
	[MembershipID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END

IF Not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GroupMembership' AND  COLUMN_NAME = 'UploadTime')
Begin
    ALTER TABLE [dbo].[GroupMembership] ADD [UploadTime] [datetime] NULL;
End

GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND name = N'IX_GroupMembership_CMOAStatusFlag')
CREATE NONCLUSTERED INDEX [IX_GroupMembership_CMOAStatusFlag] ON [dbo].[GroupMembership] 
(
	[CMOAStatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND name = N'IX_GroupMembership_CPEStatusFlag')
CREATE NONCLUSTERED INDEX [IX_GroupMembership_CPEStatusFlag] ON [dbo].[GroupMembership] 
(
	[CPEStatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND name = N'IX_GroupMembership_CustomerGroupID')
DROP INDEX [IX_GroupMembership_CustomerGroupID] ON [dbo].[GroupMembership]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND name = N'IX_GroupMembership_CustomerGroupID_Deleted')
CREATE NONCLUSTERED INDEX [IX_GroupMembership_CustomerGroupID_Deleted] ON [dbo].[GroupMembership] 
(
	[CustomerGroupID] ASC,
	[Deleted] ASC
)
Include ([CustomerPK])
WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND name = N'IX_GroupMembership_TCRMAStatusFlag')
CREATE NONCLUSTERED INDEX [IX_GroupMembership_TCRMAStatusFlag] ON [dbo].[GroupMembership] 
(
	[TCRMAStatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND name = N'IX_Unique_GM')
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_GM] ON [dbo].[GroupMembership] 
(
	[CustomerPK] ASC,
	[CustomerGroupID] ASC,
	[Deleted] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_GroupMembership_CMOAStatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[GroupMembership]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_GroupMembership_CMOAStatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[GroupMembership] ADD  CONSTRAINT [DF_GroupMembership_CMOAStatusFlag]  DEFAULT ((0)) FOR [CMOAStatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_GroupMembership_TCRMAStatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[GroupMembership]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_GroupMembership_TCRMAStatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[GroupMembership] ADD  CONSTRAINT [DF_GroupMembership_TCRMAStatusFlag]  DEFAULT ((0)) FOR [TCRMAStatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_GroupMembership_CPEStatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[GroupMembership]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_GroupMembership_CPEStatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[GroupMembership] ADD  CONSTRAINT [DF_GroupMembership_CPEStatusFlag]  DEFAULT ((0)) FOR [CPEStatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_GroupMembership_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[GroupMembership]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_GroupMembership_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[GroupMembership] ADD  CONSTRAINT [DF_GroupMembership_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END


End
GO
IF Not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GroupMembership' AND  COLUMN_NAME = 'POSTimeStamp')
Begin
    ALTER TABLE [dbo].[GroupMembership] ADD [POSTimeStamp] [datetime] NULL;
End

GO



-- 20110307.AM: Added UEStatusFlag column
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[GroupMembership]') and name='UEStatusFlag')
  Alter table GroupMembership add UEStatusFlag  [int] NULL CONSTRAINT [DF_GroupMembership_UEStatusFlag]  DEFAULT (0) with values; 
GO
-- 20110307.AM: Added index on UEStatusFlag
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[GroupMembership]') AND name = N'IX_GroupMembership_UEStatusFlag')
  CREATE NONCLUSTERED INDEX [IX_GroupMembership_UEStatusFlag] ON [dbo].[GroupMembership] ([UEStatusFlag] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GroupMembership' AND  COLUMN_NAME = 'ClipFileName')
Begin
    ALTER TABLE [dbo].[GroupMembership] ADD [ClipFileName] [nvarchar](50) NULL;
End
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GroupMembership' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[GroupMembership] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO


print 'processing tables/dbo.GroupmembershipMoveAgent_Vars.Table.sql'; 
--
GO
-- $Id: dbo.GroupmembershipMoveAgent_Vars.Table.sql 56157 2012-09-21 16:31:53Z hn250024 $
-- Build Version: 7.3.1.138972

--==============
/****** Object:  Table [dbo].[GroupmembershipMoveAgent_Vars]    Script Date: 12/27/2010 15:03:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GroupmembershipMoveAgent_Vars]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[GroupmembershipMoveAgent_Vars]
(
	[LastPKID] [bigint],
	[LastUpdate] [datetime],
	[LastPurgeDate]	[datetime],
) ON [Primary]
END
IF NOT EXISTS (SELECT * FROM GroupmembershipMoveAgent_Vars)
	INSERT INTO [GroupmembershipMoveAgent_Vars] Values (0,NULL,NULL)
GO


print 'processing tables/dbo.Groupmembership_Pending.Table.sql'; 
--
GO
-- $Id: dbo.Groupmembership_Pending.Table.sql 56157 2012-09-21 16:31:53Z hn250024 $
-- Build Version: 7.3.1.138972

/****** Object:  Table [dbo].[Groupmembership_Pending]    Script Date: 12/27/2010 15:03:50 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Groupmembership_Pending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[Groupmembership_Pending]
(
	[PKID] [bigint] Identity(1,1),
	[CustomerGroupID] [bigint] NOT NULL,
	[CustomerPK] [bigint] NOT NULL,
	[Manual] [bit] NOT NULL,
	[Deleted] [bit] NOT NULL,
	[CPEStatusFlag] [int] NOT NULL,
	[ExtInterfaceID] [int] NOT NULL,
	[UploadTime] [datetime],
	[LastUpdate] [datetime],
	[ClipFileName] [nvarchar](50) NOT NULL,
	[ProcessorID] [nvarchar](50) NOT NULL,
	
	CONSTRAINT [PK_Groupmembership_Pending] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [Primary]
END
GO

IF(NOT EXISTS (select * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = 'Groupmembership_Pending' and COLUMN_NAME = 'LastUpdate' and DATA_TYPE ='DateTime'))
BEGIN
	ALTER TABLE [Groupmembership_Pending] ADD CONSTRAINT DF_Groupmembership_Pending_LastUpdate Default GETDATE() For [LastUpdate]
END
GO


--This table may be partitioned by LastUpdate for faster purging.


print 'processing tables/dbo.HouseholdActionTypes.Table.sql'; 
--
GO
-- $Id: dbo.HouseholdActionTypes.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HouseholdActionTypes]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HouseholdActionTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HouseholdActionTypes](
	[ActionTypeID] [int] NOT NULL,
	[Description] [nvarchar](50) NULL,
 CONSTRAINT [PK_HouseholdActionTypes] PRIMARY KEY CLUSTERED 
(
	[ActionTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HouseholdActionTypes WHERE  [ActionTypeID] = 1  )
    INSERT [dbo].[HouseholdActionTypes] ([ActionTypeID], [Description]) VALUES (1, N'Add')
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HouseholdActionTypes WHERE  [ActionTypeID] = 2  )
    INSERT [dbo].[HouseholdActionTypes] ([ActionTypeID], [Description]) VALUES (2, N'Remove')
GO


print 'processing tables/dbo.HouseholdQueue.Table.sql'; 
--
GO
-- $Id: dbo.HouseholdQueue.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HouseholdQueue]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HouseholdQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HouseholdQueue](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[CustomerPK] [bigint] NOT NULL,
	[HHPK] [bigint] NOT NULL,
	[ActionTypeID] [int] NOT NULL,
	[SourceTypeID] [int] NULL,
	[LastUpdate] [datetime] NULL,
	[StatusCode] [int] NULL,
	[Option5Value] [nvarchar](20) NULL,
	[Option6Value] [nvarchar](20) NULL,
	[Option6Percent] [nvarchar](5) NULL,
	[Option7Value] [nvarchar](20) NULL,
	[Option8Value] [nvarchar](20) NULL,
	[Option9Value] [nvarchar](20) NULL,
	[AdminUserID] [int] NULL,
 CONSTRAINT [PK_HouseholdQueue] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[HouseholdQueue]') AND name = N'IX_HouseholdQueue_CustPK_HHPK')
CREATE NONCLUSTERED INDEX [IX_HouseholdQueue_CustPK_HHPK] ON [dbo].[HouseholdQueue] 
(
	[CustomerPK] ASC,
	[HHPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[HouseholdQueue]') AND name = N'IX_HousehouldQueue_StatusCode')
CREATE NONCLUSTERED INDEX [IX_HousehouldQueue_StatusCode] ON [dbo].[HouseholdQueue] 
(
	[StatusCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.HouseholdSourceTypes.Table.sql'; 
--
GO
-- $Id: dbo.HouseholdSourceTypes.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HouseholdSourceTypes]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HouseholdSourceTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HouseholdSourceTypes](
	[SourceTypeID] [int] NOT NULL,
	[Description] [nvarchar](50) NULL,
 CONSTRAINT [PK_HouseholdSourceTypes] PRIMARY KEY CLUSTERED 
(
	[SourceTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HouseholdSourceTypes WHERE  [SourceTypeID] = 1  )
    INSERT [dbo].[HouseholdSourceTypes] ([SourceTypeID], [Description]) VALUES (1, N'Customer Update Agent')
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HouseholdSourceTypes WHERE  [SourceTypeID] = 2  )
    INSERT [dbo].[HouseholdSourceTypes] ([SourceTypeID], [Description]) VALUES (2, N'Logix')
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HouseholdSourceTypes WHERE  [SourceTypeID] = 3  )
    INSERT [dbo].[HouseholdSourceTypes] ([SourceTypeID], [Description]) VALUES (3, N'Customer Update Web Service')
GO


print 'processing tables/dbo.InActivePoints.Table.sql'; 
--
GO
-- $Id: dbo.InActivePoints.Table.sql 25512 2011-03-10 15:48:18Z Lakshmi $
-- Build Version: 7.3.1.138972

/****** Object:  Table [dbo].[InActivePoints]    Script Date: 3/10/2011 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[InActivePoints]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[InActivePoints](
	[PKID] [bigint] IDENTITY(6,1) NOT NULL,
	[PromoVarID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[Amount] [decimal](15, 3) NULL,
	[ProgramID] [bigint] NULL,
 CONSTRAINT [PK_InActivePoints] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePoints]') AND name = N'IX_InActivePoints_CustomerPK_ProgramID')
CREATE NONCLUSTERED INDEX [IX_InActivePoints_CustomerPK_ProgramID] ON [dbo].[InActivePoints] 
(
	[CustomerPK] ASC,
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePoints]') AND name = N'IX_InActivePoints_ProgramID')
CREATE NONCLUSTERED INDEX [IX_InActivePoints_ProgramID] ON [dbo].[InActivePoints] 
(
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePoints]') AND name = N'IX_Unique_InActivePoints')
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_InActivePoints] ON [dbo].[InActivePoints] 
(
	[PromoVarID] ASC,
	[CustomerPK] ASC,
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_InActivePoints_Amount]') AND parent_object_id = OBJECT_ID(N'[dbo].[InActivePoints]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_InActivePoints_Amount]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[InActivePoints] ADD  CONSTRAINT [DF_InActivePoints_Amount]  DEFAULT ((0)) FOR [Amount]
END


End
GO


print 'processing tables/dbo.InActivePointsHistory.Table.sql'; 
--
GO
-- $Id: dbo.InactivePointsHistory.Table.sql  2011-03-10 15:48:18Z Lakshmi $
-- Build Version: 7.3.1.138972

/****** Object:  Table [dbo].[InactivePointsHistory]    Script Date: 3/10/2011 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[InactivePointsHistory]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[InActivePointsHistory](
	[ProgramID] [int] NULL,
	[CustomerPK] [int] NULL,
	[AdjAmount] [bigint] NULL,
	[EarnedUnderROID] [int] NULL,
	[EarnedUnderCMOfferID] [bigint] NULL,
	[LastUpdate] [datetime] NULL,
	[LastServerID] [int] NULL,
	[LocationID] [bigint] NULL,
	[LogixTransNum] [char](36) NULL,
	[SourceTypeID] [int] NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[ResolvedCustomerID] [nvarchar](400) NULL,
	[HHID] [nvarchar](400) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'InActivePointsHistory' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[InActivePointsHistory] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'InActivePointsHistory' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[InActivePointsHistory] ADD [ReplayedDate] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'InActivePointsHistory' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[InActivePointsHistory] ADD [POSTimeStamp] [datetime] NULL 
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'InActivePointsHistory' AND column_name = 'PKID')
ALTER TABLE [dbo].[InActivePointsHistory] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistory]') AND name = N'PK_InActivePointsHistory')
ALTER TABLE [dbo].[InActivePointsHistory] ADD CONSTRAINT [PK_InActivePointsHistory] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistory]') AND name = N'IX_InActivePointsHistory_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_InActivePointsHistory_CustomerPK] ON [dbo].[InActivePointsHistory] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistory]') AND name = N'IX_InActivePointsHistory_EarnedUnderCMOfferID')
CREATE NONCLUSTERED INDEX [IX_InActivePointsHistory_EarnedUnderCMOfferID] ON [dbo].[InActivePointsHistory] 
(
	[EarnedUnderCMOfferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistory]') AND name = N'IX_InActivePointsHistory_EarnedUnderROID')
CREATE NONCLUSTERED INDEX [IX_InActivePointsHistory_EarnedUnderROID] ON [dbo].[InActivePointsHistory] 
(
	[EarnedUnderROID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistory]') AND name = N'IX_InActivePointsHistory_LastServerID')
CREATE NONCLUSTERED INDEX [IX_InActivePointsHistory_LastServerID] ON [dbo].[InActivePointsHistory] 
(
	[LastServerID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistory]') AND name = N'IX_InActivePointsHistory_LastUpdate')
CREATE NONCLUSTERED INDEX [IX_InActivePointsHistory_LastUpdate] ON [dbo].[InActivePointsHistory] 
(
	[LastUpdate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistory]') AND name = N'IX_InActivePointsHistory_ProgramID')
CREATE NONCLUSTERED INDEX [IX_InActivePointsHistory_ProgramID] ON [dbo].[InActivePointsHistory] 
(
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[InActivePointsHistory]') and name='ResolvedCustomerID')
BEGIN
  alter table InActivePointsHistory alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[InActivePointsHistory]') and name='PresentedCustomerID')
BEGIN
  alter table InActivePointsHistory alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[InActivePointsHistory]') and name='HHID')
BEGIN
  alter table InActivePointsHistory alter column HHID nvarchar(400)
END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'InActivePointsHistory' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[InActivePointsHistory] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='InActivePointsHistory' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[InActivePointsHistory] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.LMGImportTempForPoints.Table.sql'; 
--
GO
-- $Id: dbo.LMGImportTempForPoints.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LMGImportTempForPoints]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTempForPoints]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LMGImportTempForPoints](
	[InsertedDate] [datetime] NOT NULL,
	[ClientLocationCode] [nvarchar](20) NOT NULL,
	[BoxID] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[PrimaryExtID] [nvarchar](400) NULL,
	[OfferID] [bigint] NULL,
	[ROID] [bigint] NULL,
	[IssuanceDate] [datetime] NOT NULL,
	[DeliverableType] [int] NOT NULL,
	[Void] [int] NOT NULL,
	[RewardQty] [int] NULL,
	[ProgramID] [bigint] NULL,
	[ChargebackVendorID] [int] NULL,
	[CashierNum] [varchar](30) NULL,
	[ChargebackDept] [nvarchar](20) NULL,
	[ExtCRMInterface] [nvarchar](100) NULL,
	[SourceTypeID] [int] NULL,
	[PromoEngine] [nvarchar](255) NULL,
	[LocationID] [int] NULL,
	[ClientOfferID] [nvarchar](40) NULL,
	[RewardValue] [decimal](12, 3) NULL,
	[UniqueID] [varchar](15) NULL,
	[Expiration] [datetime] NULL,
	[Gross] [decimal](12, 3) NULL,
	[Net] [decimal](12, 3) NULL,
	[ExceedManualThreshold] [bit] NULL,
	[LogixTransNum] [char](36) NULL,
	[VendorCouponCode] [nvarchar](20) NULL,
	[ManufacturerCoupon] [int] NULL,
	[ProcessFlag] [tinyint] NOT NULL,
	[CustomerPK] [bigint] NULL,
	[ActionTypeID] [tinyint] NULL,
	[AirmileMemberID] [nvarchar](50) NULL,
    [CardTypeID] [nvarchar](50) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTempForPoints]') AND name = N'IX_LMGImportTempForPoints_InsertedDate')
CREATE CLUSTERED INDEX [IX_LMGImportTempForPoints_InsertedDate] ON [dbo].[LMGImportTempForPoints] 
(
	[InsertedDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LMGImportTempForPoints_InsertedDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[LMGImportTempForPoints]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LMGImportTempForPoints_InsertedDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[LMGImportTempForPoints] ADD  CONSTRAINT [DF_LMGImportTempForPoints_InsertedDate]  DEFAULT (getdate()) FOR [InsertedDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LMGImportTempForPoints_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[LMGImportTempForPoints]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LMGImportTempForPoints_ProcessFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[LMGImportTempForPoints] ADD  CONSTRAINT [DF_LMGImportTempForPoints_ProcessFlag]  DEFAULT ((0)) FOR [ProcessFlag]
END


End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTempForPoints' AND column_name = 'AirmileMemberID')
Begin
  ALTER TABLE [dbo].[LMGImportTempForPoints] ADD [AirmileMemberID] NVARCHAR(50)  NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTempForPoints' AND column_name = 'CardTypeID')
Begin
  ALTER TABLE [dbo].[LMGImportTempForPoints] ADD [CardTypeID] NVARCHAR(50)  NULL
End
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LMGImportTempForPoints' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[LMGImportTempForPoints] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTempForPoints]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='LMGImportTempForPoints' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table LMGImportTempForPoints alter column [TransactionNumber] [nvarchar](128);
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTempForPoints]') and name='PrimaryExtID')
BEGIN
  alter table LMGImportTempForPoints alter column PrimaryExtID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='LMGImportTempForPoints' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[LMGImportTempForPoints] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.LMGImportTempForPoints_Failed.Table.sql'; 
--
GO
-- $Id: dbo.LMGImportTempForPoints_Failed.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LMGImportTempForPoints_Failed]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTempForPoints_Failed]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LMGImportTempForPoints_Failed](
	[ClientLocationCode] [nvarchar](20) NOT NULL,
	[BoxID] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[PrimaryExtID] [nvarchar](400) NULL,
	[OfferID] [bigint] NULL,
	[ROID] [bigint] NULL,
	[IssuanceDate] [datetime] NOT NULL,
	[DeliverableType] [int] NOT NULL,
	[Void] [int] NOT NULL,
	[RewardQty] [int] NULL,
	[ProgramID] [bigint] NULL,
	[ChargebackVendorID] [int] NULL,
	[CashierNum] [varchar](30) NULL,
	[ChargebackDept] [nvarchar](20) NULL,
	[ExtCRMInterface] [nvarchar](100) NULL,
	[SourceTypeID] [int] NULL,
	[PromoEngine] [nvarchar](255) NULL,
	[ErrorTypeID] [tinyint] NULL,
	[AirmileMemberID] [nvarchar](50) NULL, 
    [CardTypeID] [nvarchar](50) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTempForPoints_Failed' AND column_name = 'PKID')
ALTER TABLE [dbo].[LMGImportTempForPoints_Failed] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTempForPoints_Failed]') AND name = N'PK_LMGImportTempForPoints_Failed')
ALTER TABLE [dbo].[LMGImportTempForPoints_Failed] ADD CONSTRAINT [PK_LMGImportTempForPoints_Failed] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTempForPoints' AND column_name = 'AirmileMemberID')
Begin
  ALTER TABLE [dbo].[LMGImportTempForPoints_Failed] ADD [AirmileMemberID] NVARCHAR(50)  NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTempForPoints' AND column_name = 'CardTypeID')
Begin
  ALTER TABLE [dbo].[LMGImportTempForPoints_Failed] ADD [CardTypeID] NVARCHAR(50)  NULL
End
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTempForPoints_Failed]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='LMGImportTempForPoints_Failed' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table LMGImportTempForPoints_Failed alter column [TransactionNumber] [nvarchar](128);
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTempForPoints_Failed]') and name='PrimaryExtID')
BEGIN
  alter table LMGImportTempForPoints_Failed alter column PrimaryExtID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='LMGImportTempForPoints_Failed' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[LMGImportTempForPoints_Failed] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.LimitIDType.Table.sql'; 
--
GO
-- $Id: 1.dbo.LimitIDType.Table.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (select * from sys.table_types where name='LimitIDType') 
BEGIN
	CREATE TYPE dbo.LimitIDType AS TABLE
	(
		[LimitID] [bigint]
	)
END

GO

GRANT EXECUTE ON TYPE::[dbo].[LimitIDType] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing tables/dbo.LocationSeqNum.Table.sql'; 
--
GO
-- $Id: dbo.LocationSeqNum.Table.sql 64236 2013-04-09 11:48:32Z jf185081 $
-- Build Version: 7.3.1.138972

/****** Object:  Table [dbo].[InActivePoints]    Script Date: 3/10/2011 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Table usage: Contains counters used to synchronize communication with local servesr/stores.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LocationSeqNum]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LocationSeqNum](
  [LocationID] [bigint] NOT NULL,                                                                          -- Primary key and cross-database foreign key to LogixRT.Location.LocationID.
  [IPLSequenceNum] [bigint] NOT NULL CONSTRAINT [DF_LocationSeqNum_IPLSequenceNum] DEFAULT (1),            -- IPL sequence number incremented once for each IPL of a store.
  [InternalSequenceNum] [bigint] NOT NULL CONSTRAINT [DF_LocationSeqNum_InternalSequenceNum] DEFAULT (1),  -- Sequence number used to synchronize TransDownload with IPL.
  CONSTRAINT [PK_LocationSeqNum] PRIMARY KEY CLUSTERED 
  (
    [LocationID] ASC
  ) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO



print 'processing tables/dbo.OCAMT_GM_Output.Table.sql'; 
--
GO
-- $Id: dbo.OCAMT_GM_Output.Table.sql 70174 2013-09-24 15:51:19Z fk250042 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[OCAMT_GM_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--DROP TABLE OCAMT_GM_Output
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[OCAMT_GM_Output](
	[SequenceID] [bigint] Identity(1,1),
	[CustomerPK] [bigint] NULL,
	[CustomerGroupID] [int] NULL,
	[TargetLocationID] [bigint] NULL,
	[CPEStatusFlag] [int] NOT NULL,
	[UploadTime] datetime NOT NULL,
	[InsertTime] datetime NOT NULL,
	[ACKTime] datetime,
	[Deleted] [bit] NOT NULL	
	
) ON [PRIMARY]
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Output]') AND name = N'IX_OCAMT_GM_Output_CPEStatusFlag')
	DROP INDEX [IX_OCAMT_GM_Output_CPEStatusFlag] ON [dbo].[OCAMT_GM_Output]
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Output]') AND name = N'IX_OCAMT_GM_OUTPUT_INSERTTIME_CLUSTERED')	
	DROP INDEX [IX_OCAMT_GM_OUTPUT_INSERTTIME_CLUSTERED] ON [dbo].[OCAMT_GM_Output]
GO

IF NOT EXISTS ( SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[OCAMT_GM_Output]') AND name=N'PK_OCAMT_GM_OUTPUT' )	
	ALTER TABLE [dbo].[OCAMT_GM_Output] ADD CONSTRAINT PK_OCAMT_GM_OUTPUT PRIMARY KEY CLUSTERED (InsertTime,SequenceID);
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Output' AND column_name = 'CustomerPK')
	ALTER TABLE [dbo].[OCAMT_GM_Output] ALTER COLUMN [CustomerPK] bigint NOT NULL
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Output' AND column_name = 'CustomerGroupID')	
	ALTER TABLE [dbo].[OCAMT_GM_Output] ALTER COLUMN [CustomerGroupID] bigint NOT NULL
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Output' AND column_name = 'TargetLocationID')	
	ALTER TABLE [dbo].[OCAMT_GM_Output] ALTER COLUMN [TargetLocationID] bigint NOT NULL
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Output]') AND name = N'IX_OCAMT_GM_Output_Unique')
	DROP INDEX [IX_OCAMT_GM_Output_Unique] ON [dbo].[OCAMT_GM_Output];	
--CREATE UNIQUE NONCLUSTERED INDEX IX_OCAMT_GM_Output_Unique ON [dbo].[OCAMT_GM_Output] ([CustomerPK],[CustomerGroupID],[TargetLocationID],[Deleted]) WITH (IGNORE_DUP_KEY = ON);
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Output' AND column_name = 'ACKTime')
	ALTER TABLE [dbo].[OCAMT_GM_Output] DROP COLUMN [ACKTime]
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Output' AND column_name = 'CPEStatusFlag')
	ALTER TABLE [dbo].[OCAMT_GM_Output] DROP COLUMN [CPEStatusFlag]
GO

--20130430 - Removing "NOT" from "NOT NULL" clause
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Output' AND column_name = 'ClipFileName')
	ALTER TABLE [dbo].[OCAMT_GM_Output] ADD [ClipFileName] [nvarchar](50) NULL
GO

print 'processing tables/dbo.OCAMT_GM_Sent.Table.sql'; 
--
GO
-- $Id: dbo.OCAMT_GM_Sent.Table.sql 63304 2013-03-14 15:23:10Z fk250042 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[OCAMT_GM_Sent]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--DROP TABLE OCAMT_GM_Sent
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Sent]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[OCAMT_GM_Sent](
	[CustomerPK] [bigint] NULL,
	[CustomerGroupID] [int] NULL,
	[TargetLocationID] [bigint] NULL,
	[InsertTime] datetime NOT NULL,
	[Deleted] [bit] NOT NULL,
	[SequenceID] [bigint] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
END

-- Retired unique index. Uniqueness and partitioning don't get along well.
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Sent]') AND name=N'IX_OCAMT_GM_Sent_Unique')
    DROP INDEX [IX_OCAMT_GM_Sent_Unique] ON [dbo].[OCAMT_GM_Sent]

IF EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Sent]') AND name=N'IX_OCAMT_GM_SENT_INSERTTIME_CLUSTERED' )
	DROP INDEX [IX_OCAMT_GM_SENT_INSERTTIME_CLUSTERED] ON [dbo].[OCAMT_GM_Sent]
GO


IF NOT EXISTS ( SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Sent]') AND name=N'SequenceID' )
	ALTER TABLE [dbo].[OCAMT_GM_Sent] ADD [SequenceID] [bigint] IDENTITY(1,1) NOT NULL
GO


IF NOT EXISTS ( SELECT * FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[OCAMT_GM_Sent]') AND name=N'PK_OCAMT_GM_Sent' )
	ALTER TABLE [dbo].[OCAMT_GM_Sent] ADD CONSTRAINT [PK_OCAMT_GM_Sent] PRIMARY KEY CLUSTERED (InsertTime ASC, SequenceID ASC);


IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Sent]') AND name=N'IX_OCAMT_GM_Sent_CustomerPK_CustomerGroupID_TargetLocationID_Deleted')
    DROP INDEX [IX_OCAMT_GM_Sent_CustomerPK_CustomerGroupID_TargetLocationID_Deleted] ON [dbo].[OCAMT_GM_Sent]

GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OCAMT_GM_Sent_InsertTime]') AND parent_object_id = OBJECT_ID(N'[dbo].[OCAMT_GM_Sent]'))
	ALTER TABLE [dbo].[OCAMT_GM_Sent] ADD CONSTRAINT [DF_OCAMT_GM_Sent_InsertTime] DEFAULT (GETDATE()) FOR [InsertTime]

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Sent' AND column_name = 'ClipFileName')
	ALTER TABLE [dbo].[OCAMT_GM_Sent] ADD [ClipFileName] [nvarchar](50) NOT NULL
GO

--Alter column to make it NULL
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OCAMT_GM_Sent' AND column_name = 'ClipFileName')
	ALTER TABLE [dbo].[OCAMT_GM_Sent] ALTER COLUMN [ClipFileName][nvarchar](50) NULL
GO

print 'processing tables/dbo.OCFA_Variables.Table.sql'; 
--
GO
-- $Id: dbo.OCFA_Variables.Table.sql 49963 2012-05-31 20:56:37Z josh $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[OCAMT_GM_Output]    Script Date: 12/27/2010 16:14:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--DROP TABLE OCAMT_GM_Output
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OCFA_Variables]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[OCFA_Variables](
    PKID [INT] IDENTITY(1, 1) NOT NULL,
    last_InsertTime [DATETIME] NOT NULL DEFAULT ('1900-01-01'),
    last_SequenceID [BIGINT] NOT NULL DEFAULT (0)
    CONSTRAINT [PK_OCFA_Variables] PRIMARY KEY CLUSTERED (PKID)
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT 1 FROM [dbo].[OCFA_Variables])
BEGIN
    -- Initialize the variables
    INSERT INTO [dbo].[OCFA_Variables] DEFAULT VALUES
END

IF EXISTS ( SELECT 1 FROM [dbo].[OCFA_Variables] a LEFT OUTER JOIN (SELECT TOP (1) PKID FROM [dbo].[OCFA_Variables]) b ON a.PKID=b.PKID WHERE a.PKID IS NULL)
BEGIN
    -- There should be only 1 row.
    RAISERROR('There should be no more than one row in the OCFA_Variables table', 18, 1)
END


print 'processing tables/dbo.OfferCustomerInsertQueue.Table.sql'; 
--
GO
-- $Id: dbo.OfferCustomerInsertQueue.Table.sql 63307 2013-03-14 16:13:48Z fk250042 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[OfferCustomerInsertQueue]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OfferCustomerInsertQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[OfferCustomerInsertQueue](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[FileName] [nvarchar](255) NULL,
	[UploadTime] [datetime] NULL,
	[StatusFlag] [int] NULL,
	[ExtInterfaceID] [int] NULL,
	[EngineID] [int] NULL,
	[OperationType] [int] NOT NULL,
	[FormatFileName] [nvarchar](50) NULL,
    [TreatAsClipData] bit NOT NULL default 0,
 CONSTRAINT [PK_OfferCustomerInsertQueue] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferCustomerInsertQueue_OperationType]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferCustomerInsertQueue]'))
Begin

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferCustomerInsertQueue_OperationType]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[OfferCustomerInsertQueue] ADD  CONSTRAINT [DF_OfferCustomerInsertQueue_OperationType]  DEFAULT ((0)) FOR [OperationType]
END

End

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OfferCustomerInsertQueue' AND column_name = 'ProcessorID')
    ALTER TABLE [dbo].[OfferCustomerInsertQueue] ADD [ProcessorID] [nvarchar](50) NULL

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OfferCustomerInsertQueue' AND column_name = 'LastUpdate')
    ALTER TABLE [dbo].[OfferCustomerInsertQueue] ADD [LastUpdate] [DateTime] NULL
    
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OfferCustomerInsertQueue' AND column_name = 'TreatAsClipData')
    ALTER TABLE [dbo].[OfferCustomerInsertQueue] ADD [TreatAsClipData] [bit] NOT NULL DEFAULT 0

GO


print 'processing tables/dbo.OfferCustomerInsertTemp.Table.sql'; 
--
GO
-- $Id: dbo.OfferCustomerInsertTemp.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[OfferCustomerInsertTemp]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OfferCustomerInsertTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[OfferCustomerInsertTemp](
	[ClientOfferID] [nvarchar](20) NULL,
	[OfferID] [bigint] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[ExtCardTypeID] [nvarchar](26) NULL,
	[CardTypeID] [int] NULL,
	[CustomerPK] [bigint] NULL,
	[CustomerGroupID] [bigint] NULL,
	[ProcessFlag] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OfferCustomerInsertTemp' AND column_name = 'PKID')
ALTER TABLE [dbo].[OfferCustomerInsertTemp] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OfferCustomerInsertTemp]') AND name = N'PK_OfferCustomerInsertTemp')
ALTER TABLE [dbo].[OfferCustomerInsertTemp] ADD CONSTRAINT [PK_OfferCustomerInsertTemp] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferCustomerInsertTemp_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferCustomerInsertTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferCustomerInsertTemp_ProcessFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[OfferCustomerInsertTemp] ADD  CONSTRAINT [DF_OfferCustomerInsertTemp_ProcessFlag]  DEFAULT ((0)) FOR [ProcessFlag]
END


End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[OfferCustomerInsertTemp]') and name='ExternalID')
BEGIN
  alter table OfferCustomerInsertTemp alter column ExternalID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='OfferCustomerInsertTemp' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[OfferCustomerInsertTemp] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.PartitionFilegroups.Table.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF NOT EXISTS ( SELECT 1 FROM sys.objects WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') )
BEGIN
	CREATE TABLE PartitionFilegroups (
		[TableID] int NOT NULL,
		[DataSpaceID] bigint NOT NULL
	);
END
GO

-- Index removal

-- Column changes

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='TableID' AND [is_nullable]=0 )
BEGIN
	ALTER TABLE [dbo].[PartitionFilegroups] ALTER COLUMN [TableID] [int] NOT NULL
END
GO

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='DataSpaceID' AND [is_nullable]=0 )
BEGIN
	IF EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='IX_PartitionFilegroups_TableID_DataSpaceID' )
	BEGIN
		DROP INDEX [IX_PartitionFilegroups_TableID_DataSpaceID] ON [dbo].[PartitionFilegroups];
	END
	ALTER TABLE [dbo].[PartitionFilegroups] ALTER COLUMN [DataSpaceID] [bigint] NOT NULL;
END
GO

-- Indexes

IF NOT EXISTS ( SELECT 1 FROM sys.key_constraints WHERE parent_object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='PK_PartitionFilegroups' )
BEGIN
	ALTER TABLE [dbo].[PartitionFilegroups] ADD CONSTRAINT [PK_PartitionFilegroups] PRIMARY KEY CLUSTERED (TableID ASC, DataSpaceID ASC)
END
GO

IF NOT EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='IX_PartitionFilegroups_TableID_DataSpaceID' )
BEGIN
    CREATE UNIQUE NONCLUSTERED INDEX [IX_PartitionFilegroups_TableID_DataSpaceID] ON [dbo].[PartitionFilegroups] (DataSpaceID)
END
GO

print 'processing tables/dbo.PartitionedTables.Table.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF NOT EXISTS ( SELECT 1 FROM sys.objects WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') )
BEGIN
	CREATE TABLE PartitionedTables (
		[ID] int IDENTITY(1, 1) NOT NULL,
		[TableName] nvarchar(255) NOT NULL,
		[PartitionWidth] int NOT NULL,
		[HeadRoom] int NOT NULL
	);
END

-- Column changes

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='TableName' AND [is_nullable]=0 )
BEGIN
	IF EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='IX_PartitionedTables_TableName')
	BEGIN
		DROP INDEX [IX_PartitionedTables_TableName] ON [dbo].[PartitionedTables]
	END
	ALTER TABLE [dbo].[PartitionedTables] ALTER COLUMN [TableName] [nvarchar](255) NOT NULL
END

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='PartitionWidth' AND [is_nullable]=0 )
BEGIN
	ALTER TABLE [dbo].[PartitionedTables] ALTER COLUMN [PartitionWidth] [int] NOT NULL
END

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='HeadRoom' AND [is_nullable]=0 )
BEGIN
	ALTER TABLE [dbo].[PartitionedTables] ALTER COLUMN [HeadRoom] [int] NOT NULL
END


-- Indexes

IF NOT EXISTS ( SELECT 1 FROM sys.key_constraints WHERE parent_object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='PK_PartitionedTables' )
BEGIN
	ALTER TABLE [dbo].[PartitionedTables] ADD CONSTRAINT [PK_PartitionedTables] PRIMARY KEY CLUSTERED (ID)
END

IF NOT EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='IX_PartitionedTables_TableName')
BEGIN
	-- Enforce uniqueness
	CREATE UNIQUE INDEX [IX_PartitionedTables_TableName] ON [dbo].[PartitionedTables] (TableName)
END


print 'processing tables/dbo.Points.Table.sql'; 
--
GO
-- $Id: dbo.Points.Table.sql 102406 2016-07-20 11:40:51Z ra185147 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[Points]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Points]') AND type in (N'U'))
BEGIN
    CREATE TABLE [dbo].[Points](
	    [PKID] [bigint] IDENTITY(6,1) NOT NULL,
	    [PromoVarID] [bigint] NULL,
	    [CustomerPK] [bigint] NULL,
	    [Amount] [decimal](15, 3) NULL,
	    [ProgramID] [bigint] NULL,
     CONSTRAINT [PK_Points] PRIMARY KEY CLUSTERED 
    (
	    [PKID] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
    ) ON [PRIMARY]
END
GO

--
-- Add columns
--

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'Points' AND column_name = 'Version' )
BEGIN
  -- Keep track of the version of the data to synchronize with TransDownload.
  ALTER TABLE [dbo].[Points] ADD [Version] [bigint]
END
GO

--
-- Add indexes
--


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Points]') AND name = N'IX_Points_CustomerPK_ProgramID')
    CREATE NONCLUSTERED INDEX [IX_Points_CustomerPK_ProgramID] ON [dbo].[Points] 
    (
	    [CustomerPK] ASC,
	    [ProgramID] ASC
    ) INCLUDE ( [Amount]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
    ELSE  IF NOT EXISTS ( SELECT 1 FROM sys.indexes I 
							 INNER JOIN sys.index_columns IC 
							  ON  I.object_id = IC.object_id AND I.index_id = IC.index_id AND I.name = N'IX_Points_CustomerPK_ProgramID'
							 INNER JOIN sys.columns C 
							  ON IC.object_id = C.object_id and IC.column_id = C.column_id 
							  WHERE C.Name='Amount')
    BEGIN 
    
    DROP INDEX [IX_Points_CustomerPK_ProgramID] ON [dbo].[Points] 
    
    CREATE NONCLUSTERED INDEX [IX_Points_CustomerPK_ProgramID] ON [dbo].[Points] 
    (
	    [CustomerPK] ASC,
	    [ProgramID] ASC
    ) INCLUDE ( [Amount]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
    
    END
  GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Points]') AND name = N'IX_Points_ProgramID')
    CREATE NONCLUSTERED INDEX [IX_Points_ProgramID] ON [dbo].[Points] 
    (
	    [ProgramID] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Points]') AND name = N'IX_Unique_Points')
    CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_Points] ON [dbo].[Points] 
    (
	    [PromoVarID] ASC,
	    [CustomerPK] ASC,
	    [ProgramID] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Points_Amount]') AND parent_object_id = OBJECT_ID(N'[dbo].[Points]'))
Begin
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Points_Amount]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[Points] ADD  CONSTRAINT [DF_Points_Amount]  DEFAULT ((0)) FOR [Amount]
    END
End
GO



print 'processing tables/dbo.PointsAdj.Table.sql'; 
--
GO
-- $Id: dbo.PointsAdj.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PointsAdj]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsAdj]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PointsAdj](
	[PKID] [int] IDENTITY(1,1) NOT NULL,
	[ProgramID] [int] NULL,
	[CustomerPK] [int] NULL,
	[AdjAmount] [bigint] NULL,
	[EarnedUnderROID] [int] NULL,
	[EarnedUnderCMOfferID] [bigint] NULL,
	[LastUpdate] [datetime] NULL,
	[WaitingAck] [int] NULL,
	[LastServerID] [int] NULL,
 CONSTRAINT [PK_CPE_PointsAdj] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsAdj]') AND name = N'IX_PointsAdj_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_PointsAdj_CustomerPK] ON [dbo].[PointsAdj] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsAdj]') AND name = N'IX_PointsAdj_LastServerID')
CREATE NONCLUSTERED INDEX [IX_PointsAdj_LastServerID] ON [dbo].[PointsAdj] 
(
	[LastServerID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsAdj]') AND name = N'IX_PointsAdj_ProgramID')
CREATE NONCLUSTERED INDEX [IX_PointsAdj_ProgramID] ON [dbo].[PointsAdj] 
(
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsAdj]') AND name = N'IX_PointsAdj_WaitingACK')
CREATE NONCLUSTERED INDEX [IX_PointsAdj_WaitingACK] ON [dbo].[PointsAdj] 
(
	[WaitingAck] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.PointsAdj_Pending.Table.sql'; 
--
GO
-- $Id: dbo.PointsAdj_Pending.Table.sql 80741 2014-07-09 07:17:39Z sr185204 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PointsAdj_Pending]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsAdj_Pending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PointsAdj_Pending](
	[PKID] [int] IDENTITY(1,1) NOT NULL,
	[LogixTransNum] [char](36) NULL,
	[TransNum] [nvarchar](12) NULL,
	[TransDate] [datetime] NULL,
	[ExtLocationCode] [nvarchar](20) NULL,
	[TerminalNum] [nvarchar](4) NULL,
	[CustomerPK] [bigint] NULL,
	[ProgramID] [bigint] NULL,
	[OfferID] [bigint] NULL,
	[AdjAmount] [bigint] NULL,
	[CreateDate] [datetime] NULL,
	[CreatedBy] [int] NULL,
	[ApprovedBy] [int] NULL,
	[Note] [nvarchar](200) NULL,
	[ViewInManualEntry] [bit] NOT NULL,
 CONSTRAINT [PK_PointsAdj_Pending] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PointsAdj_Pending_ViewInManualEntry]') AND parent_object_id = OBJECT_ID(N'[dbo].[PointsAdj_Pending]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PointsAdj_Pending_ViewInManualEntry]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[PointsAdj_Pending] ADD  CONSTRAINT [DF_PointsAdj_Pending_ViewInManualEntry]  DEFAULT ((0)) FOR [ViewInManualEntry]
END

End
GO
--RT 5038: increase transaction length to 12 characters
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PointsAdj_Pending]') and name='TransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='PointsAdj_Pending' and COLUMN_NAME='TransNum' and 
DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH<128)) BEGIN
  alter table PointsAdj_Pending alter column [TransNum] [nvarchar](128);
END

GO
--Column alteration
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PointsAdj_Pending' AND column_name = 'TerminalNum' AND IS_NULLABLE='YES')
BEGIN

	ALTER TABLE [dbo].[PointsAdj_Pending] 
		ALTER COLUMN [TerminalNum] [nvarchar](12) NULL 
END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PointsAdj_Pending' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[PointsAdj_Pending] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO



print 'processing tables/dbo.PointsHistory.Table.sql'; 
--
GO
-- $Id: dbo.PointsHistory.Table.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PointsHistory]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PointsHistory](
	[ProgramID]             [int] NULL,
	[CustomerPK]            [int] NULL,
	[AdjAmount]             [bigint] NULL,
	[EarnedUnderROID]       [int] NULL,
	[EarnedUnderCMOfferID]  [bigint] NULL,
	[LastUpdate]            [datetime] NOT NULL,
	[LastServerID]          [int] NULL,
	[LocationID]            [bigint] NULL,
	[LogixTransNum]         [char](36) NULL,
	[SourceTypeID]          [int] NULL,
	[PresentedCustomerID]   [nvarchar](400) NULL,
	[PresentedCustomerIDOriginal]   [nvarchar](400) NULL,
	[PresentedCardTypeID]   [int] NULL,
	[ResolvedCustomerID]    [nvarchar](400) NULL,
	[HHID]                  [nvarchar](400) NULL,
	[AdjustmentSourceID]    [int],
	[AdjustmentTypeID]      [smallint],
	[AdjustmentReasonID]    [int],
	[AdjustmentReasonText] [nvarchar](50)
) ON [PRIMARY]
END
GO

SET ANSI_PADDING OFF
GO

-- Index removal
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_LastUpdate')
DROP INDEX [IX_PointsHistory_LastUpdate] ON [dbo].[PointsHistory]
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_EarnedUnderCMOfferID')
DROP INDEX [IX_PointsHistory_EarnedUnderCMOfferID] ON [dbo].[PointsHistory]
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_EarnedUnderROID')
DROP INDEX [IX_PointsHistory_EarnedUnderROID] ON [dbo].[PointsHistory]
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_LastServerID')
DROP INDEX [IX_PointsHistory_LastServerID] ON [dbo].[PointsHistory] 
GO

 

-- Column changes

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PointsHistory' AND column_name = 'LastUpdate' and IS_NULLABLE='NO')
	ALTER TABLE [dbo].[PointsHistory] ALTER COLUMN [LastUpdate] [datetime] NOT NULL
GO

-- Column creation

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PointsHistory' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[PointsHistory] ADD [Replayed] [bit] NULL 

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PointsHistory' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[PointsHistory] ADD [ReplayedDate] [datetime] NULL 

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PointsHistory' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[PointsHistory] ADD [POSTimeStamp] [datetime] NULL 

GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PointsHistory' AND column_name = 'ID')
	ALTER TABLE [dbo].[PointsHistory] ADD [ID] [bigint] IDENTITY(1, 1) NOT NULL

GO


-- Index creation

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name=N'PK_PointsHistory')
	ALTER TABLE [dbo].[PointsHistory] ADD CONSTRAINT [PK_PointsHistory] PRIMARY KEY CLUSTERED (LastUpdate ASC, ID ASC)
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_CustomerPK] ON [dbo].[PointsHistory] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

  

--Index creation IX_PointsHistory_EarnedUnderCMOfferID commented out 2011-10-05 as part of RT4987 by th
--This will help prevent creation of a performance degrading index that is not used by CPE clients

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_EarnedUnderCMOfferID')
--CREATE NONCLUSTERED INDEX [IX_PointsHistory_EarnedUnderCMOfferID] ON [dbo].[PointsHistory] 
--(
--	[EarnedUnderCMOfferID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
--GO



--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_EarnedUnderROID')
--CREATE NONCLUSTERED INDEX [IX_PointsHistory_EarnedUnderROID] ON [dbo].[PointsHistory] 
--(
--	[EarnedUnderROID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
--GO


--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_LastServerID')
--CREATE NONCLUSTERED INDEX [IX_PointsHistory_LastServerID] ON [dbo].[PointsHistory] 
--(
--	[LastServerID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
--GO


-- jfuhs 20120127: Index is now defunct, use PK_PointsHistory
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_LastUpdate')
--CREATE NONCLUSTERED INDEX [IX_PointsHistory_LastUpdate] ON [dbo].[PointsHistory] 
--(
--	[LastUpdate] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
--GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory]') AND name = N'IX_PointsHistory_ProgramID')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_ProgramID] ON [dbo].[PointsHistory] 
(
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PointsHistory]') and name='PresentedCustomerID')
BEGIN
  alter table PointsHistory alter column PresentedCustomerID nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PointsHistory]') and name='ResolvedCustomerID')
BEGIN
  alter table PointsHistory alter column ResolvedCustomerID nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PointsHistory]') and name='HHID')
BEGIN
  alter table PointsHistory alter column HHID nvarchar(400)
END
GO

 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsHistory' AND COLUMN_NAME = 'AdjustmentSourceID')
	ALTER TABLE [dbo].[PointsHistory] ADD [AdjustmentSourceID] [int] NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsHistory' AND COLUMN_NAME = 'AdjustmentTypeID')
	ALTER TABLE [dbo].[PointsHistory] ADD [AdjustmentTypeID] [smallint] NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsHistory' AND COLUMN_NAME = 'AdjustmentReasonID')
	ALTER TABLE [dbo].[PointsHistory] ADD [AdjustmentReasonID] [int] NULL
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsHistory' AND COLUMN_NAME = 'AdjustmentReasonText')
	ALTER TABLE [dbo].[PointsHistory] ADD [AdjustmentReasonText] [nvarchar](50) NULL 
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PointsHistory' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[PointsHistory] ALTER COLUMN [LogixTransNum] char(36) NULL

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsHistory' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[PointsHistory] ADD KeyRotationFlag bit NULL
END
GO

IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PointsHistory' AND  COLUMN_NAME = 'PresentedCustomerIDOriginal')
BEGIN
ALTER TABLE [dbo].[PointsHistory] ADD [PresentedCustomerIDOriginal] nvarchar(400) NULL
END
GO


print 'processing tables/dbo.PointsHistory_Old.Table.sql'; 
--
GO
-- $Id: dbo.PointsHistory_Old.Table.sql 79260 2014-05-31 09:41:10Z mv250132 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PointsHistory_Old]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory_Old]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PointsHistory_Old](
	[ProgramID] [int] NULL,
	[CustomerPK] [int] NULL,
	[AdjAmount] [int] NULL,
	[EarnedUnderROID] [int] NULL,
	[EarnedUnderCMOfferID] [bigint] NULL,
	[LastUpdate] [datetime] NULL,
	[LastServerID] [int] NULL,
	[LocationID] [bigint] NULL,
	[LogixTransNum] [char](36) NULL,
	[SourceTypeID] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory_Old]') AND name = N'IX_PointsHistory_Old_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_Old_CustomerPK] ON [dbo].[PointsHistory_Old] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory_Old]') AND name = N'IX_PointsHistory_Old_EarnedUnderCMOfferID')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_Old_EarnedUnderCMOfferID] ON [dbo].[PointsHistory_Old] 
(
	[EarnedUnderCMOfferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory_Old]') AND name = N'IX_PointsHistory_Old_EarnedUnderROID')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_Old_EarnedUnderROID] ON [dbo].[PointsHistory_Old] 
(
	[EarnedUnderROID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory_Old]') AND name = N'IX_PointsHistory_Old_LastServerID')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_Old_LastServerID] ON [dbo].[PointsHistory_Old] 
(
	[LastServerID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory_Old]') AND name = N'IX_PointsHistory_Old_LastUpdate')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_Old_LastUpdate] ON [dbo].[PointsHistory_Old] 
(
	[LastUpdate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistory_Old]') AND name = N'IX_PointsHistory_Old_ProgramID')
CREATE NONCLUSTERED INDEX [IX_PointsHistory_Old_ProgramID] ON [dbo].[PointsHistory_Old] 
(
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PointsHistory_Old' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[PointsHistory_Old] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO


print 'processing tables/dbo.PointsInsertQueue.Table.sql'; 
--
GO
-- $Id: dbo.PointsInsertQueue.Table.sql 31154 2011-05-16 20:14:05Z vkoser $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsInsertQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PointsInsertQueue](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [FileName] [nvarchar](255) NOT NULL,
  [ProgramID] [bigint] NOT NULL,
  [UploadTime] [datetime] NOT NULL CONSTRAINT [DF_PointsInsertQueue_UploadTime] Default (getdate()),
  [StatusFlag] [int] NOT NULL CONSTRAINT [DF_PointsInsertQueue_StatusFlag] Default (0),
 CONSTRAINT [PK_PointsInsertQueue] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO



print 'processing tables/dbo.PointsInsertTemp.Table.sql'; 
--
GO
-- $Id: dbo.PointsInsertTemp.Table.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsInsertTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PointsInsertTemp](
  [ExternalID] [nvarchar](400) NULL,
  [ExtCardTypeID] [nvarchar] (26) NULL, 
  [AdjAmount] [decimal] (15,3) NULL, 
  [CardTypeID] int NULL,
  [CustomerPK] [bigint] NULL,
  [CustomerTypeID] [int] NULL,
  [ResolvedCustomerID] [nvarchar] (400) NULL,
  [HHPK] [bigint] NULL,
  [ExtHHID] [nvarchar] (400) NULL,
  [ProcessFlag] [int] NOT NULL,
  [PKID]  [bigint] IDENTITY(1,1) Not Null,
  [AdjustmentSourceID] [int] NULL,
  [AdjustmentTypeID] [smallint] NULL,
  [AdjustmentReasonID] [int] NULL,
  [AdjustmentReasonText] [nvarchar](20) NULL,
  [KeyRotationFlag] bit NULL,
  [ExternalIDOriginal] [nvarchar](400) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'PointsInsertTemp' AND column_name = 'PKID')
ALTER TABLE [dbo].[PointsInsertTemp] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsInsertTemp]') AND name = N'PK_PointsInsertTemp')
ALTER TABLE [dbo].[PointsInsertTemp] ADD CONSTRAINT [PK_PointsInsertTemp] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PointsInsertTemp]') and name='ExternalID')
BEGIN
  alter table PointsInsertTemp alter column ExternalID nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PointsInsertTemp]') and name='ExtHHID')
BEGIN
  alter table PointsInsertTemp alter column ExtHHID nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PointsInsertTemp]') and name='ResolvedCustomerID')
BEGIN
  alter table PointsInsertTemp alter column ResolvedCustomerID nvarchar(400)
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PointsInsertTemp_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[PointsInsertTemp]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PointsInsertTemp_ProcessFlag]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[PointsInsertTemp] ADD  CONSTRAINT [DF_PointsInsertTemp_ProcessFlag]  DEFAULT (0) FOR [ProcessFlag]
  END
End
GO

-- Add columns to PointsInsertTemp table
 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsInsertTemp' AND COLUMN_NAME = 'AdjustmentSourceID')
BEGIN
	ALTER TABLE [dbo].[PointsInsertTemp] ADD [AdjustmentSourceID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsInsertTemp' AND COLUMN_NAME = 'AdjustmentTypeID')
BEGIN
	ALTER TABLE [dbo].[PointsInsertTemp] ADD [AdjustmentTypeID] [smallint] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsInsertTemp' AND COLUMN_NAME = 'AdjustmentReasonID')
BEGIN
	ALTER TABLE [dbo].[PointsInsertTemp] ADD [AdjustmentReasonID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsInsertTemp' AND COLUMN_NAME = 'AdjustmentReasonText')
BEGIN
	ALTER TABLE [dbo].[PointsInsertTemp] ADD [AdjustmentReasonText] [nvarchar](50) NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsInsertTemp' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[PointsInsertTemp] ADD KeyRotationFlag bit NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PointsInsertTemp' AND COLUMN_NAME = 'ExternalIDOriginal')
BEGIN
ALTER TABLE [dbo].[PointsInsertTemp] ADD ExternalIDOriginal [nvarchar](400) NULL
END
GO

print 'processing tables/dbo.PointsPending.Table.sql'; 
--
GO
-- $Id: dbo.PointsPending.Table.sql 1 2015-01-07 18:14:10Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PointsPending]    Script Date: 11/24/2014 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsPending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PointsPending](
   [PKID] [bigint] IDENTITY(6,1) NOT NULL,
   [ProgramID] [bigint] NULL,
   [CustomerPK] [bigint] NULL,
   [PromoVarID] [bigint] NULL,
   [EarnedAmount] [decimal](15, 3) NULL,
   [RedeemedAmount] [decimal](15, 3) NULL,
   [CartID] [nvarchar](36) NULL,
   [ExtLocationCode] [nvarchar](20) NULL,
   [Deleted] [bit] NOT NULL,
   [LastUpdate] [datetime] NULL,
   [LogixTransNum] [char](36) NULL,
   [POSTimeStamp] [datetime] NULL, 
   [ServerSerial] [int] NULL,
   [LocationID] [bigint] NULL,
   [WaitingACK] [int] NULL,
   CONSTRAINT [PK_PointsPending] PRIMARY KEY CLUSTERED 
   (
      [PKID] ASC
   ) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsPending]') AND name = N'IX_PointsPending_CustomerPK_ProgramID')
    CREATE NONCLUSTERED INDEX [IX_PointsPending_CustomerPK_ProgramID] ON [dbo].[PointsPending] 
    (
	    [CustomerPK] ASC,
	    [ProgramID] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PointsPending]') AND name = N'IX_PointsPending_ProgramID')
    CREATE NONCLUSTERED INDEX [IX_PointsPending_ProgramID] ON [dbo].[PointsPending] 
    (
	    [ProgramID] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PointsPending_EarnedAmount]') AND parent_object_id = OBJECT_ID(N'[dbo].[PointsPending]'))
Begin
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PointsPending_EarnedAmount]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[PointsPending] ADD CONSTRAINT [DF_PointsPending_EarnedAmount] DEFAULT ((0)) FOR [EarnedAmount]
    END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PointsPending_RedeemedAmount]') AND parent_object_id = OBJECT_ID(N'[dbo].[PointsPending]'))
Begin
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PointsPending_RedeemedAmount]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[PointsPending] ADD CONSTRAINT [DF_PointsPending_RedeemedAmount] DEFAULT ((0)) FOR [RedeemedAmount]
    END
End
GO



print 'processing tables/dbo.Points_Locked.Table.sql'; 
--
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO
/****** Object  Table [dbo].[Points_Locked]    Script Date 10/28/2015 090328 ******/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'PK_Points_Locked') AND type = 'K')
BEGIN
ALTER TABLE dbo.Points_Locked DROP CONSTRAINT PK_Points_Locked
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Points_Locked' AND COLUMN_NAME = 'PKID')
BEGIN
	ALTER TABLE dbo.Points_Locked DROP COLUMN PKID
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Points_Locked]') AND type in (N'U'))
CREATE TABLE [dbo].[Points_Locked](
    [PromoVarID] [bigint] NULL,
    [CustomerPK] [bigint] NULL,
    [Amount] [decimal](15, 3) NULL,
    [ProgramID] [bigint] NULL,
    [Version] [bigint] NULL,
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Points_Locked_Amount]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[Points_Locked] ADD  CONSTRAINT [DF_Points_Locked_Amount]  DEFAULT ((0)) FOR [Amount]
END
GO

-- Adding index to improve CustomerLookup for with Consistent reward.

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'dbo.Points_Locked') AND name = N'IX_Points_Locked_CustomerPK')
  CREATE NONCLUSTERED INDEX IX_Points_Locked_CustomerPK ON dbo.Points_Locked (CustomerPK) 
GO

print 'processing tables/dbo.PromoVarTypes.Table.sql'; 
--
GO
-- $Id: dbo.PromoVarTypes.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PromoVarTypes]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PromoVarTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PromoVarTypes](
	[TypeID] [int] NOT NULL,
	[Description] [nvarchar](255) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_PromoVarTypes] PRIMARY KEY CLUSTERED 
(
	[TypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM PromoVarTypes WHERE  [TypeID] = 1  )
    INSERT [dbo].[PromoVarTypes] ([TypeID], [Description], [PhraseID]) VALUES (1, N'Distribution Limit', 2819)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM PromoVarTypes WHERE  [TypeID] = 2  )
    INSERT [dbo].[PromoVarTypes] ([TypeID], [Description], [PhraseID]) VALUES (2, N'Accumulation', 272)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM PromoVarTypes WHERE  [TypeID] = 3  )
    INSERT [dbo].[PromoVarTypes] ([TypeID], [Description], [PhraseID]) VALUES (3, N'Points', 224)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM PromoVarTypes WHERE  [TypeID] = 4  )
    INSERT [dbo].[PromoVarTypes] ([TypeID], [Description], [PhraseID]) VALUES (4, N'Reward Limit', 2818)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM PromoVarTypes WHERE  [TypeID] = 5  )
    INSERT [dbo].[PromoVarTypes] ([TypeID], [Description], [PhraseID]) VALUES (5, N'Advanced Limit', 4715)
GO


print 'processing tables/dbo.PromoVariables.Table.sql'; 
--
GO
-- $Id: dbo.PromoVariables.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PromoVariables]    Script Date: 12/27/2010 16:15:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PromoVariables]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PromoVariables](
	[PromoVarID] [bigint] IDENTITY(1,1) NOT NULL,
	[VarTypeID] [int] NULL,
	[Description] [nvarchar](255) NULL,
	[LinkID] [bigint] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[Name] [nvarchar](50) NULL,
	[UpdateToHost] [bit] NULL,
	[Deleted] [bit] NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdate] [datetime] NULL,
 CONSTRAINT [PK_PromoVariables] PRIMARY KEY CLUSTERED 
(
	[PromoVarID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PromoVariables]') AND name = N'IX_PromoVariables_LinkID')
CREATE NONCLUSTERED INDEX [IX_PromoVariables_LinkID] ON [dbo].[PromoVariables] 
(
	[LinkID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PromoVariables]') AND name = N'IX_PromoVariables_VarTypeID')
CREATE NONCLUSTERED INDEX [IX_PromoVariables_VarTypeID] ON [dbo].[PromoVariables] 
(
	[VarTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Promo_Variables_UpdateToHost]') AND parent_object_id = OBJECT_ID(N'[dbo].[PromoVariables]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Promo_Variables_UpdateToHost]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[PromoVariables] ADD  CONSTRAINT [DF_Promo_Variables_UpdateToHost]  DEFAULT ((0)) FOR [UpdateToHost]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_Promo_Variables_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[PromoVariables]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_Promo_Variables_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[PromoVariables] ADD  CONSTRAINT [DF_Promo_Variables_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[PromoVariables]') and name='ExternalID')
BEGIN
  alter table PromoVariables alter column ExternalID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='PromoVariables' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[PromoVariables] ADD KeyRotationFlag bit NULL
END
GO


print 'processing tables/dbo.RewardDistributionIDSequence.Table.sql'; 
--
GO
-- $Id: dbo.RewardDistributionIDSequence.Table.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[RewardDistributionIDSequence]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RewardDistributionIDSequence]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RewardDistributionIDSequence](
	[LocalID] [bigint] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'RewardDistributionIDSequence' AND column_name = 'PKID')
ALTER TABLE [dbo].[RewardDistributionIDSequence] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RewardDistributionIDSequence]') AND name = N'PK_RewardDistributionIDSequence')
ALTER TABLE [dbo].[RewardDistributionIDSequence] ADD CONSTRAINT [PK_RewardDistributionIDSequence] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM RewardDistributionIDSequence WHERE  [LocalID] = 1  )
    INSERT [dbo].[RewardDistributionIDSequence] ([LocalID]) VALUES (1)
GO


print 'processing tables/dbo.RewardLimitVariables.Table.sql'; 
--
GO
-- $Id: dbo.RewardLimitVariables.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[RewardLimitVariables]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RewardLimitVariables]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RewardLimitVariables](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[PromoVarID] [bigint] NULL,
	[CustomerPK] [bigint] NULL,
	[Amount] [decimal](12, 3) NOT NULL,
 CONSTRAINT [PK_RewardLimitVariables] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RewardLimitVariables]') AND name = N'IX_Unique_RewardLimitVariables')
CREATE UNIQUE NONCLUSTERED INDEX [IX_Unique_RewardLimitVariables] ON [dbo].[RewardLimitVariables] 
(
	[PromoVarID] ASC,
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.RewardLimitVariablesPending.Table.sql'; 
--
GO
-- $Id: dbo.RewardLimitVariablesPending.Table.sql 1 2015-01-22 13:52:11Z db123627 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RewardLimitVariablesPending]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RewardLimitVariablesPending](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [CustomerPK] [bigint] NULL,
  [PromoVarID] [bigint] NULL,
  [Amount] [decimal] NULL,
  [CartID] [nvarchar](36) NULL,
  [ExtLocationCode] [nvarchar](20) NULL,
  [Deleted] [bit] NOT NULL,
  [LastUpdate] [datetime] NULL,
  [LogixTransNum] [char](36) NULL,
  [POSTimeStamp] [datetime] NULL, 
  [ServerSerial] [int] NULL,
  [LocationID] [bigint] NULL,
  [WaitingACK] [int] NULL,
  CONSTRAINT [PK_RewardLimitVariablesPending] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RewardLimitVariablesPending]') AND name = N'IX_RewardLimitVariablesPending_CustomerPK')
  CREATE NONCLUSTERED INDEX [IX_RewardLimitVariablesPending_CustomerPK] ON [dbo].[RewardLimitVariablesPending] ([CustomerPK] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RewardLimitVariablesPending]') AND name = N'IX_RewardLimitVariablesPending_PromoVarID')
  CREATE NONCLUSTERED INDEX [IX_RewardLimitVariablesPending_PromoVarID] ON [dbo].[RewardLimitVariablesPending] ([PromoVarID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_RewardLimitVariablesPending_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[RewardLimitVariablesPending]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_RewardLimitVariablesPending_Deleted]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[RewardLimitVariablesPending] ADD  CONSTRAINT [DF_RewardLimitVariablesPending_Deleted]  DEFAULT ((0)) FOR [Deleted]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_RewardDistributionPending_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[RewardLimitVariablesPending]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_RewardDistributionPending_LogixTransNum]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[RewardLimitVariablesPending] ADD  CONSTRAINT [DF_RewardDistributionPending_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
  END
End
GO



print 'processing tables/dbo.RewardsTrackingCodeSequence.sql'; 
--
GO
/****** Object:  Table [dbo].[RewardsTrackingCodeSequence]    Script Date: 06/08/2011 10:31:58 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

    -- $Id: dbo.RewardsTrackingCodeSequence.sql 32384 2011-06-14 15:15:12Z rob $                    
    -- Build Version: 7.3.1.138972

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RewardsTrackingCodeSequence]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RewardsTrackingCodeSequence](
	[UPCID] [bigint] NOT NULL,
	[LastTrackingValue] [char](6) NOT NULL,
 CONSTRAINT [PK_RewardsTrackingCodeSequence] PRIMARY KEY CLUSTERED 
(
	[UPCID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_RewardsTrackingCodeSequence_LastTrackingValue]') AND type = 'D')
BEGIN
    ALTER TABLE [dbo].[RewardsTrackingCodeSequence] ADD CONSTRAINT [DF_RewardsTrackingCodeSequence_LastTrackingValue] DEFAULT ('000001') FOR [LastTrackingValue]
END

GO




print 'processing tables/dbo.SVHistory.Table.sql'; 
--
GO
-- $Id: dbo.SVHistory.Table.sql 124310 2018-06-01 14:13:27Z pm185205 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[SVHistory]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[SVHistory](
	[LocalID] [bigint] NOT NULL,
	[ServerSerial] [int] NOT NULL,
	[SVProgramID] [bigint] NOT NULL,
	[OfferID] [bigint] NOT NULL,
	[CustomerPK] [bigint] NOT NULL,
	[QtyEarned] [int] NOT NULL,
	[QtyUsed] [int] NOT NULL,
	[Value] [decimal](12, 3) NOT NULL,
	[EarnedDate] [datetime] NOT NULL,
	[EarnedLocationID] [bigint] NULL,
	[ExpireDate] [datetime] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[StatusFlag] [int] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[LastLocationID] [int] NULL,
	[Deleted] [bit] NOT NULL,
	[ExpireStatusRewardRpt] [int] NOT NULL,
	[ExpireStatusPointsRpt] [int] NOT NULL,
	[ExpireStatusAgingRpt] [int] NOT NULL,
	[ExpireStatusAdjustRpt] [int] NULL,
	[TotalValueEarned] [decimal](12, 3) NOT NULL,
	[RedeemedValue] [decimal](12, 3) NOT NULL,
	[BreakageValue] [decimal](12, 3) NOT NULL,
	[DataExportT1S1] [int] NOT NULL,
	[AdminUserID] [int] NULL,
	[LogixTransNum] [char](36) NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[ResolvedCustomerID] [nvarchar](400) NULL,
	[HHID] [nvarchar](400) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

-- Remove indexes and constraints

-- Remove columns

-- Alter columns

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[SVHistory]') and name='ResolvedCustomerID')
BEGIN
  alter table SVHistory alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[SVHistory]') and name='PresentedCustomerID')
BEGIN
  alter table SVHistory alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[SVHistory]') and name='HHID')
BEGIN
  alter table SVHistory alter column HHID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[SVHistory]') and name='ExternalID')
BEGIN
  alter table SVHistory alter column ExternalID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'SVHistory' AND column_name = 'LastUpdate' and IS_NULLABLE='NO')
	ALTER TABLE [dbo].[SVHistory] ALTER COLUMN [LastUpdate] [datetime] NOT NULL
GO

-- Add columns

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'SVHistory' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[SVHistory] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'SVHistory' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[SVHistory] ADD [ReplayedDate] [datetime] NULL 
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'SVHistory' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[SVHistory] ADD [POSTimeStamp] [datetime] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'SVHistory' AND column_name = 'ID')
	ALTER TABLE [dbo].[SVHistory] ADD [ID] [bigint] IDENTITY(1,1) NOT NULL
GO



-- Add indexes and constraints

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name=N'PK_SVHistory')
	ALTER TABLE [dbo].[SVHistory] ADD CONSTRAINT [PK_SVHistory] PRIMARY KEY CLUSTERED (LastUpdate ASC, ID ASC)
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_DataExportT1S1')
CREATE NONCLUSTERED INDEX [IX_DataExportT1S1] ON [dbo].[SVHistory] 
(
	[DataExportT1S1] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_AdjReport')
CREATE NONCLUSTERED INDEX [IX_SVHistory_AdjReport] ON [dbo].[SVHistory] 
(
	[StatusFlag] ASC,
	[LastLocationID] ASC,
	[Deleted] ASC,
	[DataExportT1S1] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_SVHistory_CustomerPK] ON [dbo].[SVHistory] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_EarnedLocationID')
CREATE NONCLUSTERED INDEX [IX_SVHistory_EarnedLocationID] ON [dbo].[SVHistory] 
(
	[EarnedLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_ExternalID')
CREATE NONCLUSTERED INDEX [IX_SVHistory_ExternalID] ON [dbo].[SVHistory] 
(
	[ExternalID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_ID')
CREATE NONCLUSTERED INDEX [IX_SVHistory_ID] ON [dbo].[SVHistory] 
(
	[ServerSerial] ASC,
	[LocalID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_OfferID')
CREATE NONCLUSTERED INDEX [IX_SVHistory_OfferID] ON [dbo].[SVHistory] 
(
	[OfferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_SVHistory_StatusFlag] ON [dbo].[SVHistory] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_SVProgramID')
CREATE NONCLUSTERED INDEX [IX_SVHistory_SVProgramID] ON [dbo].[SVHistory] 
(
	[SVProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_OfferID]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_OfferID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_OfferID]  DEFAULT ((0)) FOR [OfferID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_QtyEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_QtyEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_QtyEarned]  DEFAULT ((0)) FOR [QtyEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_QtyUsed]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_QtyUsed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_QtyUsed]  DEFAULT ((0)) FOR [QtyUsed]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_Value]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_Value]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_Value]  DEFAULT ((0)) FOR [Value]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_EarnedDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_EarnedDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_EarnedDate]  DEFAULT (getdate()) FOR [EarnedDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_StatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_StatusFlag]  DEFAULT ((1)) FOR [StatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_ExpireStatusRewardRpt]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'SVHistory'
        AND parent_column_id = 17
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'SVHistory';
      SET @ColumnOrdinalNumber = 17;
      SET @StandardConstraintName = 'DF_SVHistory_ExpireStatusRewardRpt';
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_ExpireStatusRewardRpt]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD CONSTRAINT [DF_SVHistory_ExpireStatusRewardRpt] DEFAULT ((0)) FOR [ExpireStatusRewardRpt]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_ExpireStatusPointsRpt]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'SVHistory'
        AND parent_column_id = 18
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'SVHistory';
      SET @ColumnOrdinalNumber = 18;
      SET @StandardConstraintName = 'DF_SVHistory_ExpireStatusPointsRpt';
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_ExpireStatusPointsRpt]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD CONSTRAINT [DF_SVHistory_ExpireStatusPointsRpt] DEFAULT ((0)) FOR [ExpireStatusPointsRpt]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_ExpireStatusAgingRpt]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
   IF EXISTS (
      SELECT 1 
      FROM sys.default_constraints 
      WHERE OBJECT_NAME(parent_object_id) = 'SVHistory'
        AND parent_column_id = 19
        AND charindex('__', name) > 0
        AND is_system_named = 1
   )
   BEGIN
   --  Rename system named constraint to standard naming convention
      SET NOCOUNT ON;
      DECLARE @CurrentConstraintName sysname, @StandardConstraintName sysname, @ParentObjectName sysname, @ColumnOrdinalNumber int, @Error int;
   
      SET @ParentObjectName = 'SVHistory';
      SET @ColumnOrdinalNumber = 19;
      SET @StandardConstraintName = 'DF_SVHistory_ExpireStatusAgingRpt';
   
      SELECT top 1 @CurrentConstraintName = name 
      FROM   sys.default_constraints
      WHERE  OBJECT_NAME(parent_object_id) = @ParentObjectName
        AND  parent_column_id = @ColumnOrdinalNumber
        AND  charindex('__', name) > 0
        AND is_system_named = 1;
     
      IF @@rowcount = 1
      BEGIN
         exec sp_rename @CurrentConstraintName, @StandardConstraintName, 'OBJECT'
      END;
   END;
   SET NOCOUNT OFF;


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_ExpireStatusAgingRpt]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD CONSTRAINT [DF_SVHistory_ExpireStatusAgingRpt] DEFAULT ((0)) FOR [ExpireStatusAgingRpt]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_ESAdjRpt]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_ESAdjRpt]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_ESAdjRpt]  DEFAULT ((0)) FOR [ExpireStatusAdjustRpt]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_TotalValueEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_TotalValueEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_TotalValueEarned]  DEFAULT ((0)) FOR [TotalValueEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_RedeemedValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_RedeemedValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_RedeemedValue]  DEFAULT ((0)) FOR [RedeemedValue]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_BreakageValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_BreakageValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_BreakageValue]  DEFAULT ((0)) FOR [BreakageValue]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_DataExportT1S1]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_DataExportT1S1]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_DataExportT1S1]  DEFAULT ((1)) FOR [DataExportT1S1]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_SVHistory_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[SVHistory]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_SVHistory_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[SVHistory] ADD  CONSTRAINT [DF_SVHistory_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END


End
GO

/****** Object:  Index [IX_SVHistory_ExpireDate]    Script Date: 06/17/2011 15:20:54 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVHistory]') AND name = N'IX_SVHistory_ExpireDate')
CREATE NONCLUSTERED INDEX [IX_SVHistory_ExpireDate] ON [dbo].[SVHistory] 
(
	[ExpireDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

-- Add columns to SVHistory table
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='SVHistory' AND COLUMN_NAME = 'AdjustmentSourceID')
BEGIN
	ALTER TABLE [dbo].[SVHistory] ADD [AdjustmentSourceID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='SVHistory' AND COLUMN_NAME = 'AdjustmentTypeID')
BEGIN
	ALTER TABLE [dbo].[SVHistory] ADD [AdjustmentTypeID] [smallint] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='SVHistory' AND COLUMN_NAME = 'AdjustmentReasonID')
BEGIN
	ALTER TABLE [dbo].[SVHistory] ADD [AdjustmentReasonID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='SVHistory' AND COLUMN_NAME = 'AdjustmentReasonText')
BEGIN
	ALTER TABLE [dbo].[SVHistory] ADD [AdjustmentReasonText] [nvarchar](50) NULL
END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SVHistory' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[SVHistory] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='SVHistory' AND COLUMN_NAME = 'KeyRotationFlag')
begin
alter table [dbo].[SVHistory] add KeyRotationFlag bit NULL
end
go

print 'processing tables/dbo.SVUnitOfMeasureLimits.Table.sql'; 
--
GO
-- $Id: dbo.SVUnitOfMeasureLimits.Table.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[SVUnitOfMeasureLimits]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SVUnitOfMeasureLimits]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[SVUnitOfMeasureLimits](
	[SVProgramID] [bigint] NOT NULL,
	[UnitOfMeasureLimit] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'SVUnitOfMeasureLimits' AND column_name = 'PKID')
ALTER TABLE [dbo].[SVUnitOfMeasureLimits] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[SVUnitOfMeasureLimits]') AND name = N'PK_SVUnitOfMeasureLimits')
ALTER TABLE [dbo].[SVUnitOfMeasureLimits] ADD CONSTRAINT [PK_SVUnitOfMeasureLimits] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

print 'processing tables/dbo.StoredFranking.Table.sql'; 
--
GO
--
-- $Id: dbo.StoredFranking.Table.sql 39527 2011-11-03 14:49:56Z rob $
--
/****** Object:  Table [dbo].[StoredFranking]    Script Date: 01/07/2011 14:40:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredFranking]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredFranking](
	[customerpk]      [bigint]          NOT NULL,
	[rewardid]        [bigint]          NOT NULL,
	[franking_text]   [nvarchar](128)   NOT NULL,
	[create_date]     [datetime]        NOT NULL,
	[origin_store]    [bigint]          NOT NULL,
	[status]          [smallint]        NOT NULL,
	[issuing_store]   [bigint]          NULL,
	[issue_date]      [datetime]        NULL,
	[priority]        [int]             NULL,
	[deliverabletype] [int]             NULL,
	[cpestatusflag]   [int]             NOT NULL,
	
	CONSTRAINT [PK_StoredFranking] PRIMARY KEY ( [customerpk], [rewardid] )
	
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredFranking' AND column_name = 'cpestatusflag')
BEGIN
    ALTER TABLE [dbo].[StoredFranking] ADD [cpestatusflag] [int] NOT NULL  CONSTRAINT [DF_StoredFranking_cpestatusflag] DEFAULT ((0))
END
GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredFranking_cpestatusflag]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredFranking]'))
BEGIN
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredFranking_cpestatusflag]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[StoredFranking] ADD  CONSTRAINT [DF_StoredFranking_cpestatusflag] DEFAULT ((0)) FOR [cpestatusflag]
    END
END


GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredFranking' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[StoredFranking] ADD [POSTimeStamp] [datetime] NULL 

GO

print 'processing tables/dbo.StoredValue.Table.sql'; 
--
GO
-- $Id: dbo.StoredValue.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValue]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValue](
	[StoredValueID] [bigint] IDENTITY(1,1) NOT NULL,
	[LocalID] [bigint] NOT NULL,
	[ServerSerial] [int] NOT NULL,
	[SVProgramID] [bigint] NOT NULL,
	[OfferID] [bigint] NOT NULL,
	[CustomerPK] [bigint] NOT NULL,
	[QtyEarned] [int] NOT NULL,
	[QtyUsed] [int] NOT NULL,
	[Value] [decimal](12, 3) NOT NULL,
	[EarnedDate] [datetime] NOT NULL,
	[EarnedLocationID] [bigint] NULL,
	[ExpireDate] [datetime] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[StatusFlag] [int] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[LastLocationID] [int] NULL,
	[Deleted] [bit] NOT NULL,
	[ExpireACK] [int] NOT NULL,
	[AlteredSinceEarned] [bit] NOT NULL,
	[TotalValueEarned] [decimal](12, 3) NOT NULL,
	[RedeemedValue] [decimal](12, 3) NOT NULL,
	[BreakageValue] [decimal](12, 3) NOT NULL,
	[LogixTransNum] [char](36) NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[ResolvedCustomerID] [nvarchar](400) NULL,
	[HHID] [nvarchar](400) NULL,
	[AdjustmentSourceID] [int],
	[AdjustmentTypeID] [smallint],
	[AdjustmentReasonID] [int],
	[AdjustmentReasonText] [nvarchar](50)
 CONSTRAINT [PK_StoredValue] PRIMARY KEY CLUSTERED 
(
	[StoredValueID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_StoredValue_CustomerPK] ON [dbo].[StoredValue] 
(
	[CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_EarnedLocationID')
CREATE NONCLUSTERED INDEX [IX_StoredValue_EarnedLocationID] ON [dbo].[StoredValue] 
(
	[EarnedLocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_ExpireACK')
CREATE NONCLUSTERED INDEX [IX_StoredValue_ExpireACK] ON [dbo].[StoredValue] 
(
	[ExpireACK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_ExternalID')
CREATE NONCLUSTERED INDEX [IX_StoredValue_ExternalID] ON [dbo].[StoredValue] 
(
	[ExternalID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_OfferID')
CREATE NONCLUSTERED INDEX [IX_StoredValue_OfferID] ON [dbo].[StoredValue] 
(
	[OfferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_StoredValue_StatusFlag] ON [dbo].[StoredValue] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_SVProgramID')
CREATE NONCLUSTERED INDEX [IX_StoredValue_SVProgramID] ON [dbo].[StoredValue] 
(
	[SVProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_Unique')
CREATE UNIQUE NONCLUSTERED INDEX [IX_StoredValue_Unique] ON [dbo].[StoredValue] 
(
	[ServerSerial] ASC,
	[LocalID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue]') AND name = N'IX_StoredValue_ExpireDate')
CREATE NONCLUSTERED INDEX [IX_StoredValue_ExpireDate] ON [dbo].[StoredValue] 
(
	[ExpireDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_OfferID]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_OfferID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_OfferID]  DEFAULT ((0)) FOR [OfferID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_QtyEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_QtyEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_QtyEarned]  DEFAULT ((0)) FOR [QtyEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_QtyUsed]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_QtyUsed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_QtyUsed]  DEFAULT ((0)) FOR [QtyUsed]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_Value]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_Value]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_Value]  DEFAULT ((0)) FOR [Value]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_EarnedDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_EarnedDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_EarnedDate]  DEFAULT (getdate()) FOR [EarnedDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_StatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_StatusFlag]  DEFAULT ((1)) FOR [StatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End

GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_ExpireACK]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_ExpireACK]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_ExpireACK]  DEFAULT ((0)) FOR [ExpireACK]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_AlternedSinceEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_AlternedSinceEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_AlternedSinceEarned]  DEFAULT ((0)) FOR [AlteredSinceEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_TotalValueEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_TotalValueEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_TotalValueEarned]  DEFAULT ((0)) FOR [TotalValueEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_RedeemedValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_RedeemedValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_RedeemedValue]  DEFAULT ((0)) FOR [RedeemedValue]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_BreakageValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_BreakageValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_BreakageValue]  DEFAULT ((0)) FOR [BreakageValue]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END


End
GO


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredValue' AND column_name = 'Replayed')
    ALTER TABLE [dbo].[StoredValue] ADD [Replayed] [bit] NULL 
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredValue' AND column_name = 'ReplayedDate')
    ALTER TABLE [dbo].[StoredValue] ADD [ReplayedDate] [datetime] NULL 
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredValue' AND column_name = 'POSTimeStamp')
    ALTER TABLE [dbo].[StoredValue] ADD [POSTimeStamp] [datetime] NULL 
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredValue' AND column_name = 'ExpireCentralServerTZ')
    ALTER TABLE [dbo].[StoredValue] ADD [ExpireCentralServerTZ] BIT NULL 
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValue]') and name='ResolvedCustomerID')
BEGIN
  alter table StoredValue alter column ResolvedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValue]') and name='PresentedCustomerID')
BEGIN
  alter table StoredValue alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValue]') and name='HHID')
BEGIN
  alter table StoredValue alter column HHID nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValue]') and name='ExternalID')
BEGIN
  alter table StoredValue alter column ExternalID nvarchar(400)
END
GO

UPDATE StoredValue SET ExpireCentralServerTZ=0 WHERE ExpireCentralServerTZ IS NULL
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValue_ExpireCentralServerTZ]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValue]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_ExpireCentralServerTZ]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValue] ADD  CONSTRAINT [DF_StoredValue_ExpireCentralServerTZ]  DEFAULT ((0)) FOR [ExpireCentralServerTZ]
END
End
GO

-- Add columns to StoredValue table
 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValue' AND COLUMN_NAME = 'AdjustmentSourceID')
BEGIN
	ALTER TABLE [dbo].[StoredValue] ADD [AdjustmentSourceID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValue' AND COLUMN_NAME = 'AdjustmentTypeID')
BEGIN
	ALTER TABLE [dbo].[StoredValue] ADD [AdjustmentTypeID] [smallint] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValue' AND COLUMN_NAME = 'AdjustmentReasonID')
BEGIN
	ALTER TABLE [dbo].[StoredValue] ADD [AdjustmentReasonID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValue' AND COLUMN_NAME = 'AdjustmentReasonText')
BEGIN
	ALTER TABLE [dbo].[StoredValue] ADD [AdjustmentReasonText] [nvarchar](50) NULL
END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StoredValue' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[StoredValue] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValue' AND COLUMN_NAME = 'KeyRotationFlag')
begin
alter table [dbo].[StoredValue] add KeyRotationFlag bit NULL
end
go

print 'processing tables/dbo.StoredValueExpirationExtensions.Table.sql'; 
--
GO
-- $Id: dbo.StoredValueExpirationExtensions.Table.sql 68080 2013-07-19 19:08:57Z lf250051 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValueExpirationExtensions]    Script Date: 12/27/2010 15:04:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueExpirationExtensions]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValueExpirationExtensions](
   [SVProgramID] [bigint] NOT NULL,
   [ExpireDate] [datetime] NULL,
   [Status] [int] NOT NULL,
   [LastUpdate] [datetime] NULL,
)
END
GO
SET ANSI_PADDING OFF
GO


print 'processing tables/dbo.StoredValueExternalId_Fix.Table.sql'; 
--
GO
-- $Id: dbo.StoredValueExternalId_Fix.Table.sql 79260 2014-05-31 09:18:13Z mv250132 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValue]    Script Date: 04/03/2015 21:15:03 ******/
SET XACT_ABORT ON

BEGIN TRANSACTION T1 
	DECLARE @CurrentTime AS BIGINT
	DECLARE @IsUEEnt AS BIT
	DECLARE @IsExtIdUpdated AS BIT


	SET @CurrentTime = CONVERT(BIGINT, DATEDIFF(s, '1970-01-01 00:00:00', GETUTCDATE()))
	SET @CurrentTime = @CurrentTime * 1000

	-- First update records in stored value table.
	UPDATE StoredValue SET ExternalID = @CurrentTime , @CurrentTime = @CurrentTime+1 WHERE ExternalID = '' AND DELETED = 0
	
	IF @@ERROR <> 0 
	BEGIN 
		ROLLBACK TRAN T1
		PRINT ' Failed at Updating StoredValue'
	END 

	-- Now update records in CPE_UploadTemp_SV where OpertaionID = 1
	UPDATE CPE_UploadTemp_SV SET Col11 = @CurrentTime , @CurrentTime = @CurrentTime+1 WHERE Col11 = '' AND Operation  = 1

	IF @@ERROR <> 0 
	BEGIN 
		ROLLBACK TRAN T1
		PRINT ' Failed at First Update of CPE_UploadTemp_SV'
	END 
	-- Now update records in CPE_UploadTemp_SV where OperationID = 3

	--- Operation = 3
	--- External Id = ''
	--- Call 1 when will retrieve values from StoredValue Table
	--- Call 2 will retrieve values from CPE_UploadTemp_SV Table

	UPDATE USV SET USV.Col4 = SV.ExternalID 
	FROM CPE_UploadTemp_SV AS USV
	INNER JOIN StoredValue AS SV ON USV.Col1 = SV.LocalID AND USV.Col2 = SV.ServerSerial 
	WHERE Operation = 3 AND USV.Col4 = ''
	
	IF @@ERROR <> 0 
	BEGIN 
		ROLLBACK TRAN T1
		PRINT ' Failed at Second Update of CPE_UploadTemp_SV'
	END 


	UPDATE USV SET USV.Col4 = 
		(SELECT TOP 1 SV.Col11 
		 FROM  CPE_UploadTemp_SV AS SV 
		 WHERE Operation = 1 AND USV.Col1 = SV.Col1 AND USV.Col2 = SV.Col2)
	FROM CPE_UploadTemp_SV AS USV
	WHERE Operation = 3 AND USV.Col4 = ''
	
	IF @@ERROR <> 0 
	BEGIN 
		ROLLBACK TRAN T1
		PRINT ' Failed at Third Update of CPE_UploadTemp_SV'
	END 
	
COMMIT TRANSACTION T1
GO

SET XACT_ABORT OFF

print 'processing tables/dbo.StoredValueIDSequence.Table.sql'; 
--
GO
-- $Id: dbo.StoredValueIDSequence.Table.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValueIDSequence]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueIDSequence]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValueIDSequence](
	[LocalID] [bigint] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredValueIDSequence' AND column_name = 'PKID')
ALTER TABLE [dbo].[StoredValueIDSequence] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueIDSequence]') AND name = N'PK_StoredValueIDSequence')
ALTER TABLE [dbo].[StoredValueIDSequence] ADD CONSTRAINT [PK_StoredValueIDSequence] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM StoredValueIDSequence)
    INSERT [dbo].[StoredValueIDSequence] ([LocalID]) VALUES (1)
GO


print 'processing tables/dbo.StoredValueLocks.Table.sql'; 
--
GO
-- $Id: dbo.StoredValueLocks.Table.sql 80499 2014-06-30 12:22:59Z sr185204 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValueLocks]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueLocks]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValueLocks](
	[StoredValueID] [bigint] NOT NULL,
	[LocationID] [bigint] NOT NULL,
	[TerminalNumber] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[LockedDate] [datetime] NULL,
 CONSTRAINT [PK_StoredValueLocks] PRIMARY KEY CLUSTERED 
(
	[StoredValueID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValueLocks]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='StoredValueLocks' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table StoredValueLocks alter column [TransactionNumber] [nvarchar](128);
END
GO


print 'processing tables/dbo.StoredValuePointsConversion.Table.sql'; 
--
GO
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValuePointsConversion]    Script Date: 10/03/2012 10:15:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValuePointsConversion]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValuePointsConversion](
  [SVProgramID] [bigint] NOT NULL,
  [SVMonetaryValue] [decimal](12, 3) NOT NULL,
  [SVPointsValue] [int] NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValuePointsConversion_SVMonetaryValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValuePointsConversion]'))
BEGIN
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValuePointsConversion_SVMonetaryValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValuePointsConversion] ADD  CONSTRAINT [DF_StoredValuePointsConversion_SVMonetaryValue]  DEFAULT ((0.00)) FOR [SVMonetaryValue]
END
END

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValuePointsConversion_SVPointsValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValuePointsConversion]'))
BEGIN
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValuePointsConversion_SVPointsValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValuePointsConversion] ADD  CONSTRAINT [DF_StoredValuePointsConversion_SVPointsValue]  DEFAULT ((0)) FOR [SVPointsValue]
END
END

print 'processing tables/dbo.StoredValueSequence.Table.sql'; 
--
GO
-- $Id: dbo.StoredValueSequence.Table.sql 49251 2012-05-18 13:50:15Z hn250024 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValueSequence]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueSequence]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValueSequence](
	[SequenceID] [int] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredValueSequence' AND column_name = 'PKID')
ALTER TABLE [dbo].[StoredValueSequence] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueSequence]') AND name = N'PK_StoredValueSequence')
ALTER TABLE [dbo].[StoredValueSequence] ADD CONSTRAINT [PK_StoredValueSequence] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValueSequence_SequenceID]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValueSequence]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValueSequence_SequenceID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValueSequence] ADD  CONSTRAINT [DF_StoredValueSequence_SequenceID]  DEFAULT ((0)) FOR [SequenceID]
END


End
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM StoredValueSequence WHERE  [SequenceID] = 0  )
    INSERT [dbo].[StoredValueSequence] ([SequenceID]) VALUES (0)
GO


print 'processing tables/dbo.StoredValueStatus.Table.sql'; 
--
GO
-- $Id: dbo.StoredValueStatus.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValueStatus]    Script Date: 12/27/2010 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueStatus]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValueStatus](
	[StatusID] [int] NOT NULL,
	[Description] [nvarchar](50) NOT NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_StoredValueStatus] PRIMARY KEY CLUSTERED 
(
	[StatusID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM StoredValueStatus WHERE  [StatusID] = -1  )
    INSERT [dbo].[StoredValueStatus] ([StatusID], [Description], [PhraseID]) VALUES (-1, N'Blocked', 3589)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM StoredValueStatus WHERE  [StatusID] = 1  )
    INSERT [dbo].[StoredValueStatus] ([StatusID], [Description], [PhraseID]) VALUES (1, N'Earned', 2839)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM StoredValueStatus WHERE  [StatusID] = 2  )
    INSERT [dbo].[StoredValueStatus] ([StatusID], [Description], [PhraseID]) VALUES (2, N'Revoked', 2594)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM StoredValueStatus WHERE  [StatusID] = 3  )
    INSERT [dbo].[StoredValueStatus] ([StatusID], [Description], [PhraseID]) VALUES (3, N'Expired', 147)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM StoredValueStatus WHERE  [StatusID] = 4  )
    INSERT [dbo].[StoredValueStatus] ([StatusID], [Description], [PhraseID]) VALUES (4, N'Used', 2840)
GO


print 'processing tables/dbo.StoredValueThirdPartyTransactions.Table.sql'; 
--
GO
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[StoredValueThirdPartyTransactions]    Script Date: 10/03/2012 10:15:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValueThirdPartyTransactions]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValueThirdPartyTransactions](
  [SVThirdPartyTransactionID] [bigint] IDENTITY(1,1) NOT NULL,
  [CustomerPK] [bigint] NOT NULL,
  [PartnerID] [bigint] NOT NULL,
  [SVProgramID] [bigint] NOT NULL,
  [RewardAmtRedeemed] [decimal](12, 3) NULL,
  [UnitsPumped] [decimal](12, 3) NULL,
  [TransactionID] [nvarchar] (20) NULL,
	[ExtLocationCode] [nvarchar](20) NULL,
	[LastUpdate] [datetime] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

IF NOT EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValueThirdPartyTransactions_RewardAmtRedeemed]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValueThirdPartyTransactions]'))
BEGIN
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValueThirdPartyTransactions_RewardAmtRedeemed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValueThirdPartyTransactions] ADD  CONSTRAINT [DF_StoredValueThirdPartyTransactions_RewardAmtRedeemed]  DEFAULT ((0.00)) FOR [RewardAmtRedeemed]
END
END

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValueThirdPartyTransactions_LastUpdate]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValueThirdPartyTransactions]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValueThirdPartyTransactions_LastUpdate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[StoredValueThirdPartyTransactions] ADD  CONSTRAINT [DF_StoredValueThirdPartyTransactions_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
END
End
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValueThirdPartyTransactions]') and name='TransactionID')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='StoredValueThirdPartyTransactions' and COLUMN_NAME='TransactionID' and 
DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH <128)) BEGIN
  alter table StoredValueThirdPartyTransactions alter column [TransactionID] [nvarchar](128);
END
GO

print 'processing tables/dbo.StoredValue_Locked.Table.sql'; 
--
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'PK_StoredValue_Locked') AND type = 'K')
BEGIN
ALTER TABLE dbo.StoredValue_Locked DROP CONSTRAINT PK_StoredValue_Locked
END
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValue_Locked' AND COLUMN_NAME = 'StoredValueID')
BEGIN
	ALTER TABLE dbo.StoredValue_Locked DROP COLUMN StoredValueID
END
GO

IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValue_Locked]') AND type in (N'U'))
CREATE TABLE [dbo].[StoredValue_Locked](
    [SVProgramID] [bigint] NOT NULL,
    [OfferID] [bigint] NOT NULL,
    [CustomerPK] [bigint] NOT NULL,
    [QtyEarned] [int] NOT NULL,
    [QtyUsed] [int] NOT NULL,
    [Value] [decimal](12, 3) NOT NULL,
    [EarnedDate] [datetime] NOT NULL,
    [EarnedLocationID] [bigint] NULL,
    [ExpireDate] [datetime] NULL,
    [ExternalID] [nvarchar](400) NULL,
    [LastUpdate] [datetime] NULL,
    [LastLocationID] [int] NULL,
  
 ) ON [PRIMARY]
GO


IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_Locked_OfferID]') AND type = 'D')
ALTER TABLE [dbo].[StoredValue_Locked] ADD  CONSTRAINT [DF_StoredValue_Locked_OfferID]  DEFAULT ((0)) FOR [OfferID]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_Locked_QtyEarned]') AND type = 'D')
ALTER TABLE [dbo].[StoredValue_Locked] ADD  CONSTRAINT [DF_StoredValue_Locked_QtyEarned]  DEFAULT ((0)) FOR [QtyEarned]
GO

IF NOT  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_Locked_QtyUsed]') AND type = 'D')
ALTER TABLE [dbo].[StoredValue_Locked] ADD  CONSTRAINT [DF_StoredValue_Locked_QtyUsed]  DEFAULT ((0)) FOR [QtyUsed]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_Locked_Value]') AND type = 'D')
ALTER TABLE [dbo].[StoredValue_Locked] ADD  CONSTRAINT [DF_StoredValue_Locked_Value]  DEFAULT ((0)) FOR [Value]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValue_Locked_EarnedDate]') AND type = 'D')
ALTER TABLE [dbo].[StoredValue_Locked] ADD  CONSTRAINT [DF_StoredValue_Locked_EarnedDate]  DEFAULT (getdate()) FOR [EarnedDate]
GO

-- Adding index to improve CustomerLookup for with Consistent reward.

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'dbo.StoredValue_Locked') AND name = N'IX_StoredValue_Locked_CustomerPK')
  CREATE NONCLUSTERED INDEX IX_StoredValue_Locked_CustomerPK ON dbo.StoredValue_Locked (CustomerPK) 
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValue_Locked]') and name='ExternalID')
BEGIN
  alter table StoredValue_Locked alter column ExternalID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValue_Locked' AND COLUMN_NAME = 'KeyRotationFlag')
begin
alter table [dbo].[StoredValue_Locked] add KeyRotationFlag bit NULL
end
go

print 'processing tables/dbo.StoredValuesInsertQueue.Table.sql'; 
--
GO
-- $Id: dbo.StoredValuesInsertQueue.Table.sql 6244 2012-11-09 05:25:21P JN185015 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValuesInsertQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValuesInsertQueue](
  [PKID] [bigint] IDENTITY(1,1) NOT NULL,
  [FileName] [nvarchar](255) NOT NULL,
  [ProgramID] [bigint] NOT NULL,
  [UploadTime] [datetime] NOT NULL CONSTRAINT [DF_StoredValuesInsertQueue_UploadTime] Default (getdate()),
  [StatusFlag] [int] NOT NULL CONSTRAINT [DF_StoredValuesInsertQueue_StatusFlag] Default (0),
 CONSTRAINT [PK_StoredValuesInsertQueue] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO



print 'processing tables/dbo.StoredValuesInsertTemp.Table.sql'; 
--
GO
-- $Id: dbo.StoredValuesInsertTemp.Table.sql 6244 2012-11-09 05:25:21P JN185015 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StoredValuesInsertTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[StoredValuesInsertTemp](
  [ExternalID] [nvarchar](400) NULL,
  [ExtCardTypeID] [nvarchar] (26) NULL, 
  [AdjAmount] [decimal] (15,3) NULL, 
  [CardTypeID] int NULL,
  [CustomerPK] [bigint] NULL,
  [CustomerTypeID] [int] NULL,
  [ResolvedCustomerID] [nvarchar] (400) NULL,
  [HHPK] [bigint] NULL,
  [ExtHHID] [nvarchar] (400) NULL,
  [ProcessFlag] [int] NOT NULL,
  [PKID]  [bigint] IDENTITY(1,1) Not Null,
  [AdjustmentSourceID] [int],
  [AdjustmentTypeID] [smallint],
  [AdjustmentReasonID] [int],
  [AdjustmentReasonText] [nvarchar](50),
  [KeyRotationFlag] bit NULL,
  [ExternalIDOriginal] [nvarchar](400) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'StoredValuesInsertTemp' AND column_name = 'PKID')
ALTER TABLE [dbo].[StoredValuesInsertTemp] ADD [PKID] [bigint] IDENTITY(1,1) NOT NULL
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[StoredValuesInsertTemp]') AND name = N'PK_StoredValuesInsertTemp')
ALTER TABLE [dbo].[StoredValuesInsertTemp] ADD CONSTRAINT [PK_StoredValuesInsertTemp] PRIMARY KEY CLUSTERED ([PKID] ASC) 
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValuesInsertTemp]') and name='ExternalID')
BEGIN
  alter table StoredValuesInsertTemp alter column ExternalID nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValuesInsertTemp]') and name='ExtHHID')
BEGIN
  alter table StoredValuesInsertTemp alter column ExtHHID nvarchar(400)
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[StoredValuesInsertTemp]') and name='ResolvedCustomerID')
BEGIN
  alter table StoredValuesInsertTemp alter column ResolvedCustomerID nvarchar(400)
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_StoredValuesInsertTemp_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[StoredValuesInsertTemp]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_StoredValuesInsertTemp_ProcessFlag]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[StoredValuesInsertTemp] ADD  CONSTRAINT [DF_StoredValuesInsertTemp_ProcessFlag]  DEFAULT (0) FOR [ProcessFlag]
  END
End
GO

-- Add columns to StoredValuesInsertTemp table
 IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValuesInsertTemp' AND COLUMN_NAME = 'AdjustmentSourceID')
BEGIN
	ALTER TABLE [dbo].[StoredValuesInsertTemp] ADD [AdjustmentSourceID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValuesInsertTemp' AND COLUMN_NAME = 'AdjustmentTypeID')
BEGIN
	ALTER TABLE [dbo].[StoredValuesInsertTemp] ADD [AdjustmentTypeID] [smallint] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValuesInsertTemp' AND COLUMN_NAME = 'AdjustmentReasonID')
BEGIN
	ALTER TABLE [dbo].[StoredValuesInsertTemp] ADD [AdjustmentReasonID] [int] NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValuesInsertTemp' AND COLUMN_NAME = 'AdjustmentReasonText')
BEGIN
	ALTER TABLE [dbo].[StoredValuesInsertTemp] ADD [AdjustmentReasonText] [nvarchar](50) NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValuesInsertTemp' AND COLUMN_NAME = 'KeyRotationFlag')
begin
alter table [dbo].[StoredValuesInsertTemp] add KeyRotationFlag bit NULL
end
go

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='StoredValuesInsertTemp' AND COLUMN_NAME = 'ExternalIDOriginal')
BEGIN
ALTER TABLE [dbo].[StoredValuesInsertTemp] add ExternalIDOriginal nvarchar(400) NULL
END
GO


print 'processing tables/dbo.ThirdPartyReceiptPref.sql'; 
--
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ThirdPartyReceiptPref]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[ThirdPartyReceiptPref](
	[PrefID] [Bigint] not null primary key,
	[Description] [nvarchar](1000) null
	)
END
GO



print 'processing tables/dbo.TrackableCoupons.Table.sql'; 
--
GO
-- $Id: dbo.TrackableCoupons.Table.sql 128574 2018-09-04 20:02:07Z db123627 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- Table usage: Stores trackable coupons earned, redeemed and expired by users within programs.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCoupons]') AND TYPE IN (N'U')) 
BEGIN
  CREATE TABLE [dbo].[TrackableCoupons] (
    [CouponID] [bigint] IDENTITY(1,1) NOT NULL, -- The primary key for this table, also used as the LockKey to unlock this coupon
    [CouponCode] [varchar] (150) NOT NULL,      -- Unique coupon's Code128 or GS1 barcode
    [ProgramID] [int] NOT NULL,                 -- FK link to LogixRT.TrackableCouponProgram.ProgramID - the ID of the program this coupon belongs to
    [RemainingUses] [smallint] NOT NULL CONSTRAINT [DF_TrackableCoupons_RemainingUses] DEFAULT (0), -- Number of times this coupon can still be redeemed
    [InitialUses] [tinyint] NOT NULL CONSTRAINT [DF_TrackableCoupons_InitialUses] DEFAULT (1),      -- Initial number of times this coupon can be redeemed (LogixRT.TrackableCouponProgram.MaxRedeemCount)
    [ExpireDate] [datetime] NULL,               -- Expiration date, if one exists for the coupon
    CONSTRAINT [PK_TrackableCoupons] PRIMARY KEY CLUSTERED ([CouponID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
  ) ON [PRIMARY];
END
GO

---FK - 10302013 - Creating a Unique Non-Clustered Index on CouponCode column
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCoupons]') AND name = N'IX_UniqueCouponCode')
CREATE UNIQUE NONCLUSTERED INDEX [IX_UniqueCouponCode] ON [dbo].[TrackableCoupons] 
(
	[CouponCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR  = 80) ON [PRIMARY]
GO


--FK 1172013 - Creating a Non-Clustered index on ProgramID
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCoupons]') AND name = N'IX_TrackableCoupons_ProgramID')
CREATE NONCLUSTERED INDEX [IX_TrackableCoupons_ProgramID] ON [dbo].[TrackableCoupons] 
(
	[ProgramID] ASC
)
INCLUDE ( [RemainingUses],
[InitialUses]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCoupons]') AND name = 'ExpireDate')
BEGIN
   ALTER TABLE TrackableCoupons ADD [ExpireDate] [datetime] NULL
END

-- Create an Index on ExpireDate column
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCoupons]') AND name = N'IX_TrackableCoupons_ExpireDate')
CREATE NONCLUSTERED INDEX [IX_TrackableCoupons_ExpireDate] ON [dbo].[TrackableCoupons] 
(
	[ExpireDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR  = 80) ON [PRIMARY]
GO



print 'processing tables/dbo.TrackableCouponsCache.Table.sql'; 
--
GO
-- $Id: dbo.TrackableCouponsCache.Table.sql 132861 2019-01-14 10:57:14Z ad185283 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- Table usage: Stores recently queried or scanned trackable coupons for faster access.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsCache]') AND TYPE IN (N'U')) 
BEGIN
  CREATE TABLE [dbo].[TrackableCouponsCache] (
    [CouponID] [bigint] NOT NULL,               -- The primary key for this table, also used as the LockKey to unlock this coupon - FK link to LogixXS.TrackableCoupons
    [CouponCode] [varchar] (150) NOT NULL,      -- Unique coupon's Code128 or GS1 barcode
    [ProgramID] [int] NOT NULL,                 -- FK link to LogixRT.TrackableCouponProgram.ProgramID - the ID of the program this coupon belongs to
    [RemainingUses] [smallint] NOT NULL CONSTRAINT [DF_TrackableCouponsCache_RemainingUses] DEFAULT (0),  -- Number of times this coupon can still be redeemed
    [InitialUses] [tinyint] NOT NULL CONSTRAINT [DF_TrackableCouponsCache_InitialUses] DEFAULT (1),       -- Initial number of times this coupon can be redeemed (LogixRT.TrackableCouponProgram.MaxRedeemCount)
    [ExpireDate] [datetime] NULL,               -- Expiration date, if one exists for the coupon
    [CachedDate] [datetime] NOT NULL CONSTRAINT [DF_TrackableCouponsCache_CachedDate] DEFAULT GETDATE(),  -- Last date/time this record was updated or accessed in the cache
    [LockDate] [datetime] NULL,                 -- The date/time this record was locked, indicates if this coupon is currently in use, not locked if NULL  
    CONSTRAINT [PK_TrackableCouponsCache] PRIMARY KEY CLUSTERED ([CouponID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
  ) ON [PRIMARY];
END
GO


--1172013 - Create Non-Clustered Index for column CouponCode
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsCache]') AND name = N'IX_TrackableCouponsCache_CouponCode')
CREATE NONCLUSTERED INDEX [IX_TrackableCouponsCache_CouponCode] ON [dbo].[TrackableCouponsCache] 
(
	[CouponCode] ASC
)
INCLUDE ( [ProgramID],
[RemainingUses],
[InitialUses],
[LockDate]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO

--1172013 - Create Non-Clustered index on Cachedate for purging the data
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsCache]') AND name = N'IX_TrackableCouponsCache_CacheDate')
CREATE NONCLUSTERED INDEX [IX_TrackableCouponsCache_CacheDate] ON [dbo].[TrackableCouponsCache] 
(
	[CachedDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsCache]') AND name = 'ExpireDate')
BEGIN
   ALTER TABLE TrackableCouponsCache ADD [ExpireDate] [datetime] NULL
END

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsCache]') AND name = 'TerminalID')
BEGIN
   ALTER TABLE TrackableCouponsCache ADD [TerminalID] [varchar] (8) NULL
END

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsCache]') AND name = 'TransactionID')
BEGIN
   ALTER TABLE TrackableCouponsCache ADD [TransactionID] [varchar] (128) NULL
END

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsCache]') AND name = 'LocationID')
BEGIN
   ALTER TABLE TrackableCouponsCache ADD [LocationID] [int] NULL
END


print 'processing tables/dbo.TrackableCouponsInsertQueue.Table.sql'; 
--
GO
-- $Id: dbo.TrackableCouponsInsertQueue.Table.sql 71721 2013-11-06 21:24:05Z jg185197 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- Table usage:  This table contains trackable coupon files to be imported into the database by TrackableCouponsProcessing agent
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsInsertQueue]') AND TYPE IN (N'U')) 
BEGIN
	CREATE TABLE [dbo].[TrackableCouponsInsertQueue](
		[PKID] [bigint] IDENTITY(1,1) NOT NULL,   -- The auto-incrementing primary key for this table
		[FileName] [nvarchar](255) NOT NULL,      -- Name of file containing trackable coupon codes
		[ExternalId] [nvarchar](400) NOT NULL,     -- FK links to LogixRT.TrackableCouponProgram.ExtProgramID for linking coupons to programs
		[UploadTime] [datetime] NOT NULL CONSTRAINT [DF_TrackableCouponsInsertQueue_UploadTime]  DEFAULT (GETDATE()), -- The date/time this record was created
		[StatusFlag] [int] NOT NULL CONSTRAINT [DF_TrackableCouponsInsertQueue_StatusFlag]  DEFAULT ((0))             -- Status of the upload operation
	) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='TrackableCouponsInsertQueue' AND COLUMN_NAME = 'FileVersion')
begin
alter table [dbo].[TrackableCouponsInsertQueue] add FileVersion varchar(10) not null
end
go

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TrackableCouponsInsertQueue]') and name='ExternalID')
BEGIN
  alter table TrackableCouponsInsertQueue alter column ExternalID nvarchar(400)
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='TrackableCouponsInsertQueue' AND COLUMN_NAME = 'KeyRotationFlag')
begin
alter table [dbo].[TrackableCouponsInsertQueue] add KeyRotationFlag bit NULL
end
go

print 'processing tables/dbo.TrackableCouponsInsertTemp.Table.sql'; 
--
GO
-- $Id: dbo.TrackableCouponsInsertTemp.Table.sql 71721 2013-11-06 21:24:05Z jg185197 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- Table usage:  This table contains trakcable coupon data imported from files by TracableCouponsProcessing agent
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsInsertTemp]') AND TYPE IN (N'U')) 
BEGIN
	CREATE TABLE [dbo].[TrackableCouponsInsertTemp](
		[PKID] [bigint] IDENTITY(1,1) NOT NULL,   -- The auto-incrementing primary key for this table
		[CouponCode] [varchar](255) NOT NULL,     -- Unique coupon's Code128 or GS1 barcode
		[ProcessFlag] [tinyint] NOT NULL CONSTRAINT [TrackableCouponsInsertTemp_ProcessFlag]  DEFAULT ((0)),  -- Indicates the processing status of the record
		CONSTRAINT [PK_TrackableCouponsInsertTemp] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='TrackableCouponsInsertTemp' AND COLUMN_NAME = 'Uses')
begin
alter table [dbo].[TrackableCouponsInsertTemp] add Uses nvarchar(10)
end
go

print 'processing tables/dbo.TrackableCouponsStatus.Table.sql'; 
--
GO
-- $Id: dbo.TrackableCouponsStatus.Table.sql 84222 2014-10-31 08:13:23Z vd185037 $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

-- Table usage: Defines the different status values associated with a trackable coupon transactions
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsStatus]') AND TYPE IN (N'U')) 
BEGIN
  CREATE TABLE [dbo].[TrackableCouponsStatus] (
    [StatusID] [tinyint] NOT NULL,                -- The primary key for this table and unique coupon status  
    [Description] [nvarchar](50) NULL,            -- The text description of the card status type
    [PhraseID] [int] NULL,                        -- FK links to LogixRT.PhraseText.PhraseID for transation phrase of status	
    CONSTRAINT [PK_TrackableCouponsStatus] PRIMARY KEY CLUSTERED ([StatusID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
  ) ON [PRIMARY];
END
GO

-- Status 0:  Coupon Code not found
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 0)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (0, N'Coupon Code not found', 7211);
GO

-- Status 1:  Operation successful
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 1)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (1, N'Success', 7212);
GO

-- Status 2:  Coupon locked
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 2)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (2, N'Coupon locked', 7213);
GO

-- Status 3:  Incorrect lock key
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 3)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (3, N'Incorrect lock key', 7214);
GO

-- Status 4:  Incorrect coupon format
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 4)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (4, N'Incorrect format', 7215);
GO

-- Status 5:  Error while processing coupon
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 5)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (5, N'Error occurred while processing coupon', 7216);
GO

-- Status 6:  Invalid External ProgramID
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 6)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (6, N'Invalid External ProgramID', 7920);
GO

-- Status 7:  Coupon code exists
IF NOT EXISTS (SELECT TOP 1 * FROM [TrackableCouponsStatus] WHERE  [StatusID] = 7)
	INSERT [dbo].[TrackableCouponsStatus] ([StatusID], [Description], [PhraseID]) VALUES (7, N'Coupon code already exists', 7921);
GO


print 'processing tables/dbo.UE_ActiveCustomers_Output.Table.sql'; 
--
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UE_ActiveCustomers_Output]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[UE_ActiveCustomers_Output](
	[CustomerPK] [bigint] NOT NULL,
	[CardId] [nvarchar](400) NULL,
	[CardTypeId] [int] NULL,
	[TargetLocationId] [int] NULL,
	[WaitingACK] [int] NULL,
	[LastUpdate] [datetime] NULL
)

END
GO




print 'processing tables/dbo.UniqueUPCCouponReasonCodes.Table.sql'; 
--
GO
-- $Id: dbo.UniqueUPCCouponReasonCodes.Table.sql 31268 2011-06-9 12:36:44Z Lakshmi Y. $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[UniqueUPCCouponReasonCodes]    Script Date: 06/09/2011 16:15:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UniqueUPCCouponReasonCodes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[UniqueUPCCouponReasonCodes](
	[ReasonID] [int] NOT NULL,
	[Description] [nvarchar](100) NULL
 CONSTRAINT [PK_UniqueUPCCouponReasonCodes] PRIMARY KEY CLUSTERED 
(
	[ReasonID] ASC
) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 1  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (1, N'Valid Coupon')
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 2  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (2, N'Invalid Coupon')
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 3  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (3, N'Voided Coupon')
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 4  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (4, N'Coupon Not Effective yet')
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 5  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (5, N'Coupon Expired')
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 6  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (6, N'Coupon Already Redeemed')
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 7  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (7, N'Invalid Location')
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCCouponReasonCodes WHERE  [ReasonID] = 99  )
    INSERT [dbo].[UniqueUPCCouponReasonCodes] ([ReasonID], [Description]) VALUES (99, N'Invalid Card ID')
GO

print 'processing tables/dbo.UniqueUPCManufacturerCodeMapping.Table.sql'; 
--
GO
-- $Id: dbo.UniqueUPCManufacturerCodeMapping.Table.sql 2011-06-08 23:40:15Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[UniqueUPCManufacturerCodeMapping]    Script Date: 06/08/2011 09:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/**   This table contains the mappedid for manufacturer code, which is used for generating the Unique UPC Coupon Code **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UniqueUPCManufacturerCodeMapping]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[UniqueUPCManufacturerCodeMapping](
	[ManufacturerCode] [nvarchar](5) NOT NULL,
	[MappedID] [nvarchar](5) NOT NULL
 CONSTRAINT [PK_UniqueUPCManufacturerCodeMapping] PRIMARY KEY CLUSTERED 
(
	[ManufacturerCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM UniqueUPCManufacturerCodeMapping WHERE  [ManufacturerCode] = '52894'  )
    INSERT [dbo].[UniqueUPCManufacturerCodeMapping] ([ManufacturerCode], [MappedID]) VALUES ('52894', '1')
GO




print 'processing tables/dbo.UnusedCoupons.sql'; 
--
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UnusedCoupons]') AND TYPE IN (N'U')) 
BEGIN
CREATE TABLE UnusedCoupons
    (CouponID INT NOT NULL IDENTITY(1,1),
	CouponCode VARCHAR(150) NOT NULL
	)

END
GO




--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixXS/views/ --
--
print 'processing views/dbo.GetNewID.View.sql'; 
--
GO
/* View on NEWID() to be used in UDF */
IF EXISTS (SELECT 1 FROM SYS.VIEWS WHERE name = 'GetNewID')
BEGIN
	DROP VIEW GetNewID
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO	
CREATE VIEW GetNewID AS SELECT NEWID() as NewID
GO

print 'processing views/dbo.GetRAND.View.sql'; 
--
GO
/* View on NEWID() to be used in UDF */
IF EXISTS (SELECT 1 FROM SYS.VIEWS WHERE name = 'GetRAND')
BEGIN
	DROP VIEW GetRAND
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW GetRAND AS SELECT RAND() as Random
GO

print 'processing views/dbo.InactivePointsHistoryView.View.sql'; 
--
GO
-- $Id: dbo.InactivePointsHistoryView.View.sql 32824 2011-06-22 19:00:59Z randy $
-- Build Version: 7.3.1.138972
/****** Object:  View [dbo].[InactivePointsHistoryView]    Script Date: 03/30/2011 08:38:00 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[InActivePointsHistoryView]'))
  DROP VIEW [dbo].[InactivePointsHistoryView]
GO
CREATE VIEW [dbo].[InactivePointsHistoryView] AS
  select ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, EarnedUnderCMOfferID, LastUpdate, LastServerID, LocationID, LogixTransNum, SourceTypeID, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp
    from InActivePointsHistory WITH (NoLock)

GO

print 'processing views/dbo.PointsHistoryView.View.sql'; 
--
GO
-- $Id: dbo.PointsHistoryView.View.sql 32662 2011-06-20 17:53:32Z randy $
-- Build Version: 7.3.1.138972
/****** Object:  View [dbo].[PointsHistoryView]    Script Date: 12/27/2010 16:43:10 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[PointsHistoryView]'))
  DROP VIEW [dbo].[PointsHistoryView]
GO
CREATE VIEW [dbo].[PointsHistoryView] AS
  select ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, EarnedUnderCMOfferID, LastUpdate, LastServerID, LocationID, LogixTransNum, SourceTypeID, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp
    from PointsHistory WITH (NoLock, INDEX = IX_PointsHistory_CustomerPK)
  union all
  select ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, EarnedUnderCMOfferID, LastUpdate, LastServerID, 0 as LocationID, '0' as LogixTransNum, case when LastServerID > 0 then 0 else 1 end as SourceTypeID, NULL as PresentedCustomerID, NULL as PresentedCardTypeID, NULL as ResolvedCustomerID, NULL as HHID, NULL as Replayed, NULL as ReplayedDate, NULL as POSTimeStamp
    from PointsHistory_Old WITH (NoLock, INDEX = IX_PointsHistory_OLD_CustomerPK);
GO

print 'processing views/dbo.TC_Customers.View.sql'; 
--
GO
-- $Id: dbo.TC_Customers.View.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  View [dbo].[TC_Customers]    Script Date: 12/27/2010 16:43:10 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[TC_Customers]'))
DROP VIEW [dbo].[TC_Customers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[TC_Customers]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[TC_Customers]
AS
  select OfferID, ConditionNumber, CustomerID, Excluded, Action, TransID, TCRMAgentStatusFlag from Copient_TC_Customers
'
GO



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixXS/functions/ --
--
print 'processing functions/dbo.AppendPrefixSuffixToCouponCode.UserDefinedFunction.sql'; 
--
GO
-- To Append Prefix or Suffix to CouponCode
IF EXISTS (SELECT
		1
	FROM SYS.OBJECTS
	WHERE type = 'FN'
	AND name = 'AppendPrefixSuffixToCouponCode') BEGIN
DROP FUNCTION dbo.AppendPrefixSuffixToCouponCode
END
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION AppendPrefixSuffixToCouponCode (   @Prefix          NVARCHAR(150) = '',         
												   @CouponCode		NVARCHAR(150) = '',         
												   @Suffix          NVARCHAR(150) = '')         
RETURNS VARCHAR(150)         
AS         
BEGIN
	DECLARE @ResultantCouponCode VARCHAR(150)

SET @ResultantCouponCode = ISNULL(@Prefix, '') + ISNULL(@CouponCode, '') + ISNULL(@Suffix, '')

RETURN @ResultantCouponCode
END

GO
GRANT EXECUTE ON [DBO].[AppendPrefixSuffixToCouponCode] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.CheckIfCouponCodeAvailable.UserDefinedFunction.sql'; 
--
GO
-- To check the availability of CouponCode
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE type = 'FN'
    AND name = 'CheckIfCouponCodeAvailable')
BEGIN
    DROP FUNCTION dbo.CheckIfCouponCodeAvailable
END
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION CheckIfCouponCodeAvailable (@CouponCode VARCHAR(150) = '')
RETURNS BIT
AS
BEGIN
    DECLARE @IsCouponCodeAvailable BIT = 0

    IF NOT EXISTS (SELECT
            1
        FROM TrackableCoupons
        WHERE COUPONCODE = @CouponCode)
    BEGIN
        SET @IsCouponCodeAvailable = 1
    END

    RETURN @IsCouponCodeAvailable
END
GO
GRANT EXECUTE ON [DBO].[CheckIfCouponCodeAvailable] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.CheckIfPatternChanged.UserDefinedFunction.sql'; 
--
GO
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE type = 'FN'
    AND name = 'CheckIfPatternChanged')
BEGIN
    DROP FUNCTION dbo.CheckIfPatternChanged
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION CheckIfPatternChanged (     @CouponLength    INT           = 20,
								    @OrderType       VARCHAR(1)    = 'R',
								    @Prefix          NVARCHAR(150) = NULL,
								    @Suffix          NVARCHAR(150) = NULL,
								    @StartRange      VARCHAR(150)  = NULL,
								    @EndRange        VARCHAR(150)  = NULL,
								    @CouponDataType  VARCHAR(1)    = 'N')
RETURNS BIT
AS
BEGIN
    DECLARE	 @CouponLength_New    INT           = 20,
			 @OrderType_New       VARCHAR(1)    = 'R',
			 @Prefix_New          NVARCHAR(150) = NULL,
			 @Suffix_New          NVARCHAR(150) = NULL,
			 @StartRange_New      VARCHAR(150)  = NULL,
			 @EndRange_New        VARCHAR(150)  = NULL,
			 @CouponDataType_New  VARCHAR(1)    = 'N'
    
    SELECT  @CouponLength_New = CouponLength, @OrderType_New = PatternOrder, @Prefix_New = @Prefix_New, 
		  @Suffix_New = Suffix, @StartRange_New = StartRange, @EndRange_New = EndRange, @CouponDataType_New = PatternDataType 
		  FROM CouponPattern
    IF ((@CouponLength_New <> @CouponLength) OR (@OrderType_New <> @OrderType) OR (@Prefix_New <> @Prefix) OR (@Suffix_New <> @Suffix)
		  OR (@StartRange_New <> @StartRange) OR (@EndRange_New <> @EndRange) OR (@CouponDataType_New <> @CouponDataType))
		  RETURN 1    
    
    RETURN 0

END
GO
GRANT EXECUTE ON [DBO].[CheckIfPatternChanged] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.CompareTwoStrings.UserDefinedFunction.sql'; 
--
GO
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE type = 'FN'
    AND name = 'CompareTwoStrings')
BEGIN
    DROP FUNCTION dbo.CompareTwoStrings
END
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION CompareTwoStrings (@String1 AS VARCHAR(MAX),@String2 AS VARCHAR(MAX))
RETURNS VARCHAR(MAX)
AS
BEGIN

    DECLARE @MaxLength INT = CASE WHEN LEN(@String1) > LEN(@String2) THEN LEN(@String1) ELSE LEN(@String2) END
    
    IF(@String1 = @String2)
		RETURN NULL
		
    SET @String1 = dbo.StringPadLeft(@String1,@MaxLength,'0')
    SET @String2 = dbo.StringPadLeft(@String2,@MaxLength,'0')
    
    RETURN CASE WHEN @String1 > @String2 THEN @String1 ELSE @String2 END

END
GO
GRANT EXECUTE ON [DBO].[CompareTwoStrings] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.GetCustomerExtCards.UserDefinedFunction.sql'; 
--
GO
/****** Object:  UserDefinedFunction [dbo].[Split]    Script Date: 04/26/201 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetCustomerExtCards]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
    DROP FUNCTION [dbo].[GetCustomerExtCards]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  FUNCTION  [dbo].[GetCustomerExtCards](@CustPK as int)
RETURNS  VARCHAR(MAX)
AS
BEGIN
          
          DECLARE @RESULT VARCHAR(MAX)=''
          
          SELECT @RESULT=@RESULT+ CAST(CID.CardPK as varchar(10)) +':'+CID.ExtCardIDOriginal+':'+ CAST(CardStatusID AS VARCHAR(1))+':'+ CAST(CardTypeID AS VARCHAR(1))+ '�' FROM CardIDs  CID WHERE CustomerPK=@CustPK
          IF(LEN(@RESULT)>0)
          SET @RESULT= SUBSTRING(@RESULT,0,LEN(@RESULT)) 
          RETURN @RESULT
END

GO

GRANT EXECUTE ON [dbo].[GetCustomerExtCards] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing functions/dbo.GetNextAlphaNumericValue.UserDefinedFunction.sql'; 
--
GO
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE type = 'FN'
    AND name = 'GetNextAlphaNumericValue')
BEGIN
    DROP FUNCTION dbo.GetNextAlphaNumericValue
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION GetNextAlphaNumericValue (@InputAlphaNumeric VARCHAR(150))
RETURNS VARCHAR(150)
AS
BEGIN
    DECLARE @LastIndex INT = LEN(@InputAlphaNumeric)
    DECLARE @ValueAtIndex VARCHAR(4) = SUBSTRING(@InputAlphaNumeric, @LastIndex, 1)
    DECLARE @Result VARCHAR(150) = @InputAlphaNumeric

    BEGIN
        SET @ValueAtIndex = SUBSTRING(@InputAlphaNumeric, @LastIndex, 1)

    CheckZ:
        IF (@ValueAtIndex = 'Z')
        BEGIN
            SET @LastIndex = @LastIndex - 1
            SET @ValueAtIndex = SUBSTRING(@InputAlphaNumeric, @LastIndex, 1)

            SET @Result = STUFF(@InputAlphaNumeric, @LastIndex + 1, 1, 0)

            IF (@LastIndex = 0)
                RETURN '1' + @Result

            SET @InputAlphaNumeric = @Result

            GOTO CheckZ;
        END

        IF (@ValueAtIndex = '9')
        BEGIN
            RETURN STUFF(@Result, @LastIndex, 1, 'A')
        END

        -- Set the Result to Next value
        SET @Result = STUFF(@Result, @LastIndex, 1, CHAR(ASCII(@ValueAtIndex) + 1))


    END

    RETURN @Result

END
GO
GRANT EXECUTE ON [DBO].[GetNextAlphaNumericValue] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO


print 'processing functions/dbo.GetNextTrackIngCode.sql'; 
--
GO
/****** Object:  UserDefinedFunction [dbo].[GetNextTrackingCode]    Script Date: 06/08/2011 08:16:55 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetNextTrackingCode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[GetNextTrackingCode]
GO

/****** Object:  UserDefinedFunction [dbo].[GetNextTrackingCode]    Script Date: 06/08/2011 08:16:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetNextTrackingCode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'/****** Object:  UserDefinedFunction [dbo].[GetNextTrackingCode]    Script Date: 06/08/2011 08:03:14 ******/
CREATE FUNCTION [dbo].[GetNextTrackingCode] (@incode char(6))
   RETURNS char(6)

/*  this function takes the input 6 character sequence and generates the next sequence per the algorithm below  */
    -- $Id: dbo.GetNextTrackIngCode.sql 32583 2011-06-16 20:22:15Z rob $
    -- Build Version: 7.3.1.138972
BEGIN

declare @outcode char(6)
select @outcode = 
-- 1st digit of new value
CASE WHEN substring(@incode,6,1) = ''Z'' THEN											--  61 start
	CASE WHEN substring(@incode,5,1) = ''Z'' THEN 									   --  51 start
		CASE WHEN substring(@incode,4,1) = ''Z'' THEN									--  41 start
			CASE WHEN substring(@incode,3,1) = ''Z'' THEN								--  31 start
				CASE WHEN substring(@incode,2,1) = ''Z'' THEN							--  21 start
					CASE substring(@incode,1,1) WHEN ''9'' THEN ''B''					--  11 start
 								  WHEN ''Z'' THEN ''0''
   							  WHEN ''D'' THEN ''F''
   							  WHEN ''H'' THEN ''J''
   							  WHEN ''N'' THEN ''P''
   							  WHEN ''T'' THEN ''V'' 
   							  ELSE char(ascii(substring(@incode,1,1))+1) END	--  11 end
 				ELSE substring(@incode,1,1) END											--  21 end
 			ELSE substring(@incode,1,1) END 											--  31 end
 		ELSE substring(@incode,1,1) END 												--  41 end
	ELSE substring(@incode,1,1) END 													--  51 end
ELSE substring(@incode,1,1) END 														--  61 end
+
-- 2nd digit of new value
CASE WHEN substring(@incode,6,1) = ''Z'' THEN											--  61 start
	CASE WHEN substring(@incode,5,1) = ''Z'' THEN 									--  51 start
		CASE WHEN substring(@incode,4,1) = ''Z'' THEN									--  41 start
			CASE WHEN substring(@incode,3,1) = ''Z'' THEN								--  31 start
				CASE substring(@incode,2,1) WHEN ''9'' THEN ''B''						--  21 start
 							  WHEN ''Z'' THEN ''0''
   						  WHEN ''D'' THEN ''F''
   						  WHEN ''H'' THEN ''J''
   						  WHEN ''N'' THEN ''P''
   						  WHEN ''T'' THEN ''V'' 
   						  ELSE char(ascii(substring(@incode,2,1))+1) END		--  21 end
 			ELSE substring(@incode,2,1) END 											--  31 end
 		ELSE substring(@incode,2,1) END 												--  41 end
	ELSE substring(@incode,2,1) END 													--  51 end
ELSE substring(@incode,2,1) END 														--  61 end
+ 
-- 3rd digit of new value
CASE WHEN substring(@incode,6,1) = ''Z'' THEN									--  61 start
	CASE WHEN substring(@incode,5,1) = ''Z'' THEN 							--  51 start
		CASE WHEN substring(@incode,4,1) = ''Z'' THEN							--  41 start
			CASE substring(@incode,3,1) WHEN ''9'' THEN ''B''					--  31 start
 						  WHEN ''Z'' THEN ''0''
   					  WHEN ''D'' THEN ''F''
   					  WHEN ''H'' THEN ''J''
   					  WHEN ''N'' THEN ''P''
   					  WHEN ''T'' THEN ''V'' 
   					  ELSE char(ascii(substring(@incode,3,1))+1) END	--  31 end
 		ELSE substring(@incode,3,1) END 										--  41 end
	ELSE substring(@incode,3,1) END 											--  51 end
ELSE substring(@incode,3,1) END 												--  61 end
+    
-- 4th digit of new value 
CASE WHEN substring(@incode,6,1) = ''Z'' THEN								--  61 start
	CASE WHEN substring(@incode,5,1) = ''Z'' THEN 						--  51 start
		CASE substring(@incode,4,1) WHEN ''9'' THEN ''B''					--  41 start
 					  WHEN ''Z'' THEN ''0''
   				  WHEN ''D'' THEN ''F''
   				  WHEN ''H'' THEN ''J''
   				  WHEN ''N'' THEN ''P''
   				  WHEN ''T'' THEN ''V'' 
   				  ELSE char(ascii(substring(@incode,4,1))+1) END	--  41 end
	ELSE substring(@incode,4,1) END 										--  51 end
ELSE substring(@incode,4,1) END 											--  61 end
+ 
-- 5th digit of new value 
CASE WHEN substring(@incode,6,1) = ''Z'' THEN							--  61 start
	CASE substring(@incode,5,1) WHEN ''9'' THEN ''B''					--  51 start
 				  WHEN ''Z'' THEN ''0''
   			  WHEN ''D'' THEN ''F''
   			  WHEN ''H'' THEN ''J''
   			  WHEN ''N'' THEN ''P''
   			  WHEN ''T'' THEN ''V'' 
   			  ELSE char(ascii(substring(@incode,5,1))+1) END	--  51 end
ELSE substring(@incode,5,1) END 										--  61 end
+ 
-- 6th digit of new value 
CASE substring(@incode,6,1) WHEN ''9'' THEN ''B''					--  61 start
 			  WHEN ''Z'' THEN ''0''
   		  WHEN ''D'' THEN ''F''
   		  WHEN ''H'' THEN ''J''
   		  WHEN ''N'' THEN ''P''
   		  WHEN ''T'' THEN ''V'' 
   		  ELSE char(ascii(substring(@incode,6,1))+1) END	--  61 end

RETURN @outcode
END
' 
END

GO

GRANT EXECUTE ON dbo.GetNextTrackingCode TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing functions/dbo.GetUsedCouponCount.UserDefinedFunction.sql'; 
--
GO
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE type = 'FN'
    AND name = 'GetUsedCouponCount')
BEGIN
    DROP FUNCTION dbo.GetUsedCouponCount
END
GO
CREATE FUNCTION GetUsedCouponCount (@table CouponType readonly)
RETURNS BIGINT
AS
BEGIN

    DECLARE	 @CouponLength		 INT           = 20,
			 @Prefix			 NVARCHAR(150) = NULL,
			 @Suffix			 NVARCHAR(150) = NULL,
			 @StartRange		 VARCHAR(150)  = NULL,
			 @EndRange		 VARCHAR(150)  = NULL,
			 @CouponDataType	 VARCHAR(1)    = 'N',
			 @PrefixLength		 TINYINT		 = 0,
			 @SuffixLength		 TINYINT		 = 0,
			 @UsedCouponCount	 BIGINT	      = 0,
			 @PadLength		 INT		 = 0
                       
    SELECT	 @CouponLength	  =	  CouponLength,
			 @Prefix		  =	  ISNULL(Prefix,''),
			 @Suffix		  =	  ISNULL(Suffix,''),
			 @StartRange	  =	  ISNULL(StartRange,''),
			 @EndRange	  =	  ISNULL(EndRange,''),
			 @CouponDataType =	  PatternDataType		  
    FROM		 CouponPattern
    
    SELECT	 @PrefixLength	  = LEN(@Prefix),	   
			 @SuffixLength	  = LEN(@Suffix) 
    SELECT	 @PadLength	  = @CouponLength - (@PrefixLength + @SuffixLength)
    
    IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'n')
    BEGIN
	   SELECT 
	   @UsedCouponCount = COUNT(1)
	   FROM	 @table 
	   WHERE LEN(CouponCode) = @CouponLength
	   AND SUBSTRING(CouponCode,0,@PrefixLength+1) = @Prefix	-- Filtering Prefix
	   AND SUBSTRING(CouponCode,@CouponLength-@SuffixLength+1,@SuffixLength) = @Suffix -- Filtering Suffix
	   AND PATINDEX('%[^0-9]%',SUBSTRING(CouponCode, @PrefixLength + 1, (@CouponLength - (@PrefixLength + @SuffixLength)))) = 0 -- Filtering Numeric values
	   AND SUBSTRING(CouponCode, @PrefixLength + 1, (@CouponLength - (@PrefixLength + @SuffixLength)))  BETWEEN @StartRange AND @EndRange -- Filtering Range	   
	   
    END
    ELSE IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'a')
    BEGIN
	   SELECT	 @StartRange =  dbo.StringPadLeft(@StartRange,@PadLength,'0'),
			 @EndRange =  dbo.StringPadLeft(@EndRange,@PadLength,'0')	   
	   
	   SELECT	 @UsedCouponCount =  COUNT(*)
	   FROM	 @table 
	   WHERE LEN(CouponCode) = @CouponLength
	   AND SUBSTRING(CouponCode,0,@PrefixLength+1) = @Prefix	-- Filtering Prefix
	   AND SUBSTRING(CouponCode,@CouponLength-@SuffixLength+1,@SuffixLength) = @Suffix -- Filtering Suffix
	   AND SUBSTRING(CouponCode, @PrefixLength + 1, (@CouponLength - (@PrefixLength + @SuffixLength))) BETWEEN @StartRange AND @EndRange  -- Filtering Range
    END    
    
    RETURN  @UsedCouponCount

END
GO
GRANT EXECUTE ON [DBO].[GetUsedCouponCount] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.RandomWithRange.UserDefinedFunction.sql'; 
--
GO
-- To Generate Random Number within given range
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE TYPE = 'FN'
    AND NAME LIKE 'RandomWithRange')
BEGIN
    DROP FUNCTION dbo.RandomWithRange
END
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION dbo.RandomWithRange (@StartRange BIGINT = 0,
                                     @EndRange   BIGINT = 0)
RETURNS BIGINT
AS
BEGIN
    DECLARE @RandomNumber BIGINT
    IF (@EndRange = @StartRange)
    BEGIN
		RETURN @StartRange
    END
    
    IF (@EndRange <> 0)
    BEGIN
		SET @EndRange = @EndRange + 1 -- To get the last number in the range
        SET @RandomNumber = (SELECT
            CAST(ROUND(CAST((@EndRange - @StartRange) * RANDOM AS BIGINT) + @StartRange, 0) AS BIGINT)
        FROM DBO.GETRAND)
    END
    ELSE
    BEGIN
		SET @RandomNumber = (SELECT
            RANDOM
        FROM DBO.GETRAND)
    END

    RETURN @RandomNumber
END
GO
GRANT EXECUTE ON [DBO].[RandomWithRange] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.Split.UserDefinedFunction.sql'; 
--
GO
-- $Id: dbo.Split.UserDefinedFunction.sql 48755 2012-05-09 13:24:07Z josh $
-- Build Version: 7.3.1.138972
/****** Object:  UserDefinedFunction [dbo].[Split]    Script Date: 12/27/2010 15:18:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Split]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
    DROP FUNCTION [dbo].[Split]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION [dbo].[Split]( @String nvarchar(max), @Delimiter nchar(1) )
    returns @temptable TABLE (items nvarchar(max))
as
begin
    if @String is null
        return

    if @Delimiter is null
    begin
        insert into @temptable (items) values (@String)
        return
    end

    declare @StringLen int
    set @StringLen = len(@String)
    declare @begin int, @end int
    set @begin = 1
    set @end = -1

    while @end < @StringLen
    begin
        set @end = charindex(@Delimiter,@String,@begin)
        if @end = 0
            set @end = @StringLen + 1

        if @end - @begin > 0
            insert into @temptable(Items) values( substring(@String, @begin, @end - @begin) )

        set @begin = @end + 1
    end
    return
end

GO

GRANT SELECT ON [dbo].[Split] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing functions/dbo.SplitInts.UserDefinedFunction.sql'; 
--
GO
-- $Id: dbo.SplitInts.UserDefinedFunction.sql 48755 12:00 PM 5/14/2013 $
-- Build Version: 7.3.1.138972
/****** Object:  UserDefinedFunction [dbo].[SplitInts]    Script Date: 12:00 PM 5/14/2013******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SplitInts]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[SplitInts]
GO 
CREATE FUNCTION dbo.SplitInts(@List VARCHAR(MAX),@Delimiter  CHAR(1))
RETURNS TABLE
AS
RETURN 
(
	SELECT Item = CONVERT(INT, Item)
	FROM(SELECT Item = x.i.value('(./text())[1]', 'INT') FROM( SELECT [XML] = CONVERT(XML, '<i>' + REPLACE(@List, @Delimiter, '</i><i>') + '</i>').query('.')) AS a
	CROSS APPLY
	[XML].nodes('i') AS x(i)) AS y
	WHERE Item IS NOT NULL
);
GO  
GRANT SELECT ON [dbo].[SplitInts] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing functions/dbo.StringPadLeft.UserDefinedFunction.sql'; 
--
GO
-- To Pad any number of characters to given string
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE type = 'FN'
    AND name = 'StringPadLeft')
BEGIN
    DROP FUNCTION dbo.StringPadLeft
END
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION StringPadLeft 
 ( @InputString as Varchar(max),
   @RequiredLength as BIGINT,
   @Char as char(1)
 )
RETURNS Varchar(max)
AS
BEGIN

    Declare @PaddedString as Varchar(max)

    -- Return same string if @RequiredLength is smaller or equal to the length of @InputString value
    If(Len(@InputString) >= @RequiredLength )
            RETURN @InputString

    -- Create PaddedString
    Set @PaddedString = Replicate(@Char, @RequiredLength- Len(@InputString)) + @InputString

    -- Return the PaddedString
    RETURN @PaddedString

END
GO
GRANT EXECUTE ON [DBO].[StringPadLeft] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.TrailingZeros.UserDefinedFunction.sql'; 
--
GO
IF EXISTS (SELECT
        1
    FROM SYS.OBJECTS
    WHERE type = 'FN'
    AND name = 'TrailingZeros')
BEGIN
    DROP FUNCTION dbo.TrailingZeros
END
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION TrailingZeros (@StartRange      AS VARCHAR(MAX),
                               @StuffStartIndex INT)
RETURNS VARCHAR(MAX)
AS
BEGIN

    DECLARE @TrailingZerosCount INT = (LEN(@StartRange) - (@StuffStartIndex + 2))
    DECLARE @TrailingChar VARCHAR(MAX)
    WHILE (@TrailingZerosCount > 0)
    BEGIN
        SET @TrailingChar = ISNULL(@TrailingChar, '') + '30' -- Hex value for Zero: 30   
        SET @TrailingZerosCount = @TrailingZerosCount - 2
    END

    RETURN @TrailingChar

END
GO
GRANT EXECUTE ON [DBO].[TrailingZeros] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing functions/dbo.VerifyCAMCard.UserDefinedFunction.sql'; 
--
GO
-- $Id: dbo.VerifyCAMCard.UserDefinedFunction.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  UserDefinedFunction [dbo].[VerifyCAMCard]    Script Date: 12/27/2010 17:12:28 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VerifyCAMCard]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[VerifyCAMCard]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VerifyCAMCard]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[VerifyCAMCard](@CCNumberOri as varchar(20))
  RETURNS bit AS 
  BEGIN
  -- (D1*6)+(D2*5)+(D3*4)+(D4*3)+(D5*8)+(D6*7)+(D7*6)+(D8*5)+(D9*4)+(D10*3) 
  -- Divide the digit total by 11 (using a 5 digit quotient and 2 digit remainder) 
  -- If the remainder is less than 2, the check digit equals 0 
  -- If the remainder is 2 or greater, the check digit equals 11 minus the remainder. 
  -- If Check Digit = D11 verification passed 
  declare @Return bit;
  declare @CCNumber as char(11)
  set @CCNumber = RIGHT(REPLACE(@CCNumberOri,'' '', ''''),11);
  if (IsNull(@CCNumber,'''')='''' or (IsNumeric(@CCNumber)=0) or LEN(@CCNumber) < 11) set @Return = 0;
  if @Return=0 return @Return;  --- exit if invalid at this point

  declare @Result int;
  declare @Remainder tinyint;
  declare @CheckDigit tinyint;
  set @Result = (CAST(LEFT(@CCNumber,1) as int)*6) + 
                (CAST(SUBSTRING(@CCNumber,2,1) as int)*5) + (CAST(SUBSTRING(@CCNumber,3,1) as int)*4) + (CAST(SUBSTRING(@CCNumber,4,1)  as int)*3) + 
                (CAST(SUBSTRING(@CCNumber,5,1) as int)*8) + (CAST(SUBSTRING(@CCNumber,6,1) as int)*7) + (CAST(SUBSTRING(@CCNumber,7,1)  as int)*6) + 
                (CAST(SUBSTRING(@CCNumber,8,1) as int)*5) + (CAST(SUBSTRING(@CCNumber,9,1) as int)*4) + (CAST(SUBSTRING(@CCNumber,10,1) as int)*3);

  set @Remainder = @Result%11;
  if @Remainder <2 set @CheckDigit = 0;
  else set @CheckDigit = 11 - @Remainder;

  if @CheckDigit = CAST(RIGHT(@CCNumber,1) as int) set @Return=1;
  else set @Return=0;

  return @Return;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[VerifyCAMCard] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing functions/dbo.fn_IsNumeric.UserDefinedFunction.sql'; 
--
GO
-- $Id: dbo.fn_IsNumeric.UserDefinedFunction.sql 48755 12:00 PM 5/14/2013 $
-- Build Version: 7.3.1.138972
/****** Object:  UserDefinedFunction [dbo].[fn_IsNumeric]    Script Date: 12:00 PM 5/14/2013******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_IsNumeric]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fn_IsNumeric]
GO 
CREATE FUNCTION [dbo].[fn_IsNumeric] (@ExternalID nvarchar(400))    
RETURNS int    
AS    
BEGIN      
Declare @chkVal int = 0    
IF ISNULL(@ExternalID,'')=''
      SET @chkVal = 0      
 ELSE    
  BEGIN      
   SET @chkVal = ISNUMERIC(@ExternalID  + '.0e0')     
    IF ((@chkVal = 1) AND CAST(@ExternalID as Float(51)) > 0  )    
         SET @chkVal = 1         
   else  
   SET @chkVal = 0         
  END       
   RETURN(@chkVal)    
END    
 GO  
  GRANT EXECUTE ON [dbo].[fn_IsNumeric] TO [Copient_Logix_uspRole] AS [dbo]
GO
  

print 'processing functions/dbo.fn_PadExtCardID.UserDefinedFunction.sql'; 
--
GO
-- $Id: dbo.fn_PadExtCardID.UserDefinedFunction.sql 48755 2013-04-02 13:24:07Z shaifali $
-- Build Version: 7.3.1.138972
/****** Object:  UserDefinedFunction [dbo].[fn_PadExtCardID]    Script Date: 04/02/2013 15:18:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_PadExtCardID]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[fn_PadExtCardID]
GO
 
CREATE FUNCTION [dbo].[fn_PadExtCardID]  
(  
@ExtCardID varchar(256),  
@CardTypeID int  
)  
returns varchar(256)  
As  
 BEGIN  
   declare @OutExtCardID varchar(50), @MaxIDLength varchar(50), @PaddingLength tinyint, @IsNumeric bit  
   set @OutExtCardID = LTRIM(rtrim(@ExtCardID))  
   set @PaddingLength = 0  
   set @MaxIDLength = 0  
      
   select @PaddingLength = isnull(PaddingLength,0), @MaxIDLength = isnull(MaxIDLength,0), @IsNumeric = isnull(NumericOnly,1)   
   from CardTypes where CardTypeID = @CardTypeID  
 
	IF (@MaxIDLength > 0) AND (@MaxIDLength <  LEN(@OutExtCardID))  
		set @OutExtCardID = RIGHT(@OutExtCardID,@MaxIDLength)
					    
	IF @IsNumeric = 1  
	   BEGIN    
			IF (isnumeric(@ExtCardID) = 0)
				return 'Its a Invalid Card' 
	          
			IF (@PaddingLength > 0)    
				BEGIN     
					IF (@PaddingLength >  LEN(@OutExtCardID))  
						set @OutExtCardID = REPLICATE('0', @PaddingLength -LEN(@OutExtCardID)) + @OutExtCardID  
    			END 
	   END  
   return @OutExtCardID  
  END 
  GO 
  
  GRANT EXECUTE ON [dbo].[fn_PadExtCardID] TO [Copient_Logix_uspRole] AS [dbo]
GO
  



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixXS/storedprocedures/ --
--
print 'processing storedprocedures/dbo.pa_BuckPromoVarsCreate.sql'; 
--
GO
-- $Id: dbo.pa_BuckPromoVarsCreate.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_BuckPromoVarsCreate]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_BuckPromoVarsCreate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_BuckPromoVarsCreate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_BuckPromoVarsCreate] 
  @NumberOfVars int,
  @ProgramID bigint, 
  @FirstPromoVarID bigint OUTPUT,
  @ErrMsg nvarchar(max) OUTPUT
AS 
  SET NOCOUNT ON;
    
  DECLARE @Today as datetime 
  DECLARE @ExistingCount as integer
  DECLARE @I as integer
  DECLARE @PromoVarTemp as table ([VarTypeID] [int] NULL,
	[Description] [nvarchar](255) NULL,
	[LinkID] [bigint] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[Name] [nvarchar](50) NULL,
	[UpdateToHost] [bit] NULL,
	[Deleted] [bit] NULL,
	[CreatedDate] [datetime] NULL, 
	[LastUpdate] [datetime] NULL)		
    
  SET @FirstPromoVarID = 0
  SET @Today = GETDATE()
    
  SELECT @ExistingCount = (SELECT COUNT(*) from PromoVariables with (NoLock) where VarTypeID=3 and Deleted=0 and LinkID=@ProgramID);
  IF @ExistingCount = 0
  BEGIN
    If @NumberOfVars <= 99
    BEGIN
      -- generate data for temp table
      SET @I = 0;
      WHILE @I < @NumberOfVars
      BEGIN 
        SET @I = @I + 1;
        INSERT INTO @PromoVarTemp (VarTypeID, [Description], LinkID, ExternalID, Name, UpdateToHost, Deleted, CreatedDate, LastUpdate)
          VALUES (3, 'Bucks PromoVar', @I-1, null,'Tier #' + cast(@I as varchar),0,0,@Today,@Today);
      END

      -- insert data from temp table into PromoVariables to get contiguous PromoVarIDs	
      BEGIN TRANSACTION
        BEGIN TRY
          INSERT INTO PromoVariables (VarTypeID, [Description], LinkID, ExternalID, Name, UpdateToHost, Deleted, CreatedDate, LastUpdate)
            SELECT VarTypeID,[Description],LinkID + @ProgramID as LinkID, ExternalID,Name,UpdateToHost,Deleted,CreatedDate,LastUpdate			
            FROM @PromoVarTemp;
          COMMIT TRANSACTION
          SELECT @FirstPromoVarID = (SELECT top 1 PromoVarID from PromoVariables with (NoLock) where VarTypeID=3 and Deleted=0 and LinkID=@ProgramID);
          SET @ErrMsg = '';
        END TRY
        BEGIN CATCH
          SELECT @ErrMsg=ERROR_MESSAGE();
          ROLLBACK TRANSACTION;
          SET @FirstPromoVarID = 0;
        END CATCH
    --End Transaction
    END ELSE BEGIN
      SET @ErrMsg = 'Invalid value for number of Promotion Variables (Tiers)!';
      SET @FirstPromoVarID = 0;
    END
  END ELSE BEGIN
    SET @ErrMsg = 'Buck Promotion Variables already exist for this Program!';
    SET @FirstPromoVarID = 0;
  END

GO

GRANT EXECUTE ON [dbo].[pa_BuckPromoVarsCreate] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CAM_CreateCustomer.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CAM_CreateCustomer.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CAM_CreateCustomer]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CAM_CreateCustomer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CAM_CreateCustomer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CAM_CreateCustomer]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CAM_CreateCustomer] @ExtCardID varchar(400), @CustomerPK bigint OUTPUT
as 
  set nocount on;
  set @CustomerPK = 0;

  -- determine if this card already exists
  select Top 1 @CustomerPK = IsNull(CustomerPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=2;

  if @CustomerPK = 0
    begin
      insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, FirstName, LastName, CreatedDate, UpdateCount ,CustomerTypeID)
      values (@ExtCardID, 2, '''', '''', getdate(),0,2);
      set @CustomerPK=Scope_Identity();
    end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CAM_CreateCustomer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_ExternalPointsPromoVar_Update.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_ExternalPointsPromoVar_Update.StoredProcedure.sql 99999 2011-03-01 17:56:18Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_ExternalPointsPromoVar_Update]    Script Date: 03/01/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_ExternalPointsPromoVar_Update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_ExternalPointsPromoVar_Update]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_ExternalPointsPromoVar_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CM_ExternalPointsPromoVar_Update]
  @UseCustomerPK bigint,
  @PromoVarID bigint,
  @AmountNew decimal(12,3),
  @AmountAdj decimal(12,3),
  @LocalServerID int,
  @LocationID bigint,
  @LogixTransNum char(36),
  @Status int OUTPUT
AS 
  SET NOCOUNT ON;
  declare @NumRows int;
  declare @VarTypeId int;
  declare @LinkID bigint;
  
  set @NumRows=0;
  set @Status=-1;
  
  select @VarTypeId=VarTypeID, @LinkID=isnull(LinkID, 0) from PromoVariables where PromoVarId = @PromoVarID
  if @VarTypeId is not null begin
    if @VarTypeId=3 begin
      select @NumRows=count(*) from Points with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
      if @NumRows=0 begin
        Insert into Points with (RowLock) (PromoVarID, CustomerPK, Amount, ProgramID) values (@PromoVarID, @UseCustomerPK, @AmountNew, @LinkID);
        set @Status=0;
      end else begin
        Update Points with (RowLock) set Amount = @AmountNew where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
        set @Status=0;
      end
      insert into PointsHistory with (RowLock)
        (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, EarnedUnderCMOfferID, LastUpdate, LastServerID, LocationID, LogixTransNum)
        values (@LinkID, @UseCustomerPK, @AmountAdj, 0, 0, getdate(), @LocalServerID, @LocationID, @LogixTransNum);	
    end
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_ExternalPointsPromoVar_Update] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_Extracts_MemberAddresses.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_Extracts_MemberAddresses.StoredProcedure.sql 32583 2012-07-08 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_Extracts_MemberAddresses]    Script Date: 07/08/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MemberAddresses]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_Extracts_MemberAddresses]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MemberAddresses]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE Procedure [dbo].[pa_CM_Extracts_MemberAddresses]
  @CardTypeID int,
  @LastCustomerPK bigint,
  @MaxRowCount int
as
set nocount on;
  if @MaxRowCount < 1
  begin
    set @MaxRowCount = 1800;
  end

  create table #CustomerList (
    [CustomerPK] [bigint] NULL,
	[Prefix] [nvarchar](20) NULL,
	[FirstName] [nvarchar](50) NULL,
	[LastName] [nvarchar](50) NULL,
	[Suffix] [nvarchar](20) NULL,
    [Address] [nvarchar](1000) NULL,
    [City] [nvarchar](1000) NULL,
    [State] [nvarchar](1000) NULL,
    [Zip] [nvarchar](1000) NULL, 
    [Email] [nvarchar](1000) NULL,
    [Phone]  [nvarchar](100) NULL,
    [MobilePhone]  [nvarchar](100) NULL,
    [Employee] [bit]
  );

  --set rowcount @MaxRowCount; 

  insert into #CustomerList (CustomerPK, Prefix,FirstName,LastName,Suffix,Address,City,State,Zip,Email,Phone,MobilePhone,Employee)
    select TOP (@MaxRowCount) CUST.CustomerPK,CUST.Prefix,CUST.FirstName,CUST.LastName,CUST.Suffix,CE.Address,CE.City,CE.State,CE.Zip,CE.email,CE.PhoneAsEntered,CE.MobilePhoneAsEntered,CUST.Employee
    from Customers as CUST with (NoLock)
    left join CustomerExt as CE with (NoLock) on CE.CustomerPK = CUST.CustomerPK
    where CUST.CustomerTypeID=0 and CUST.CustomerPK > @LastCustomerPK

  --set rowcount 0;

  select CL.CustomerPK,isnull(CI.ExtCardID,''NoPrimaryID'') as PrimaryID,Prefix,FirstName,LastName,Suffix,Address,City,State,Zip,Email,Phone,MobilePhone,Employee
  from #CustomerList as CL with (NoLock)
  left join CardIDs as CI with (NoLock) on CI.CustomerPk=CL.CustomerPK and CI.CardTypeId=@CardTypeID;

  drop table #CustomerList;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_Extracts_MemberAddresses] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_Extracts_MemberPoints.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_Extracts_MemberPoints.StoredProcedure.sql 32583 2012-07-08 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_Extracts_MemberPoints]    Script Date: 07/08/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MemberPoints]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_Extracts_MemberPoints]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MemberPoints]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE Procedure [dbo].[pa_CM_Extracts_MemberPoints]
  @ProgramID bigint,
  @CardTypeID int,
  @LastCustomerPK bigint,
  @MaxRowCount int,
  @SubTotal bigint output
as
set nocount on;
  if @MaxRowCount < 1
  begin
    set @MaxRowCount = 1800;
  end

  create table #CustomerList (
    [CustomerPK] [bigint] NULL,
    [Points] [bigint] NULL
  );

  --set rowcount @MaxRowCount; 

  insert into #CustomerList (CustomerPK,Points)
    select TOP (@MaxRowCount) PT.CustomerPK,convert(bigint,PT.Amount)
    from Points as PT with (NoLock)
    where PT.ProgramID=@ProgramID and PT.CustomerPK > @LastCustomerPK

  --set rowcount 0;

  select @SubTotal = isnull(sum(Points),0) from #CustomerList as CL with (NoLock);

  select CL.CustomerPK,isnull(CI.ExtCardID,''NoPrimaryID'') as PrimaryID,CL.Points
  from #CustomerList as CL with (NoLock)
  left join CardIDs as CI with (NoLock) on CI.CustomerPk=CL.CustomerPK and (CI.CardTypeId=@CardTypeID or CI.CardTypeId=1);

  drop table #CustomerList;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_Extracts_MemberPoints] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_Extracts_MembersEnrolledToday.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_Extracts_MembersEnrolledToday.StoredProcedure.sql 32583 2012-07-08 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_Extracts_MembersEnrolledToday]    Script Date: 07/08/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MembersEnrolledToday]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_Extracts_MembersEnrolledToday]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MembersEnrolledToday]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE Procedure [dbo].[pa_CM_Extracts_MembersEnrolledToday]
  @CardTypeID int = 0,
  @ExtractDate datetime = null
as
set nocount on;

  create table #CustomerList (
    [CustomerPK] [bigint] NULL,
    [Prefix] [nvarchar](20) NULL,
    [FirstName] [nvarchar](50) NULL,
    [LastName] [nvarchar](50) NULL,
    [Address] [nvarchar](1000) NULL,
    [City] [nvarchar](1000) NULL,
    [State] [nvarchar](1000) NULL,
    [Zip] [nvarchar](1000) NULL, 
    [Email] [nvarchar](1000) NULL
  );

  if @ExtractDate is null
  begin
    set @ExtractDate = getdate();
  end

  insert into #CustomerList (CustomerPK, Prefix,FirstName,LastName,Address,City,State,Zip,Email)
    select CUST.CustomerPK,CUST.Prefix,CUST.FirstName,CUST.LastName,CE.Address,CE.City,CE.State,CE.Zip,CE.email
    from Customers as CUST with (NoLock)
    left join CustomerExt as CE with (NoLock) on CE.CustomerPK = CUST.CustomerPK
    where CUST.CustomerTypeID=0
    and Convert(varchar,CUST.CreatedDate,101) = Convert(varchar,@ExtractDate,101);

  select isnull(CI.ExtCardID,''NoPrimaryID'') as PrimaryID,Prefix,FirstName,LastName,Address,City,State,Zip,Email
  from #CustomerList as CL with (NoLock)
  left join CardIDs as CI with (NoLock) on CI.CustomerPk=CL.CustomerPK and CI.CardTypeId=@CardTypeID;

  drop table #CustomerList;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_Extracts_MembersEnrolledToday] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_Extracts_MembersEnrolledTodayCount.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_Extracts_MembersEnrolledTodayCount.StoredProcedure.sql 32583 2012-07-08 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_Extracts_MembersEnrolledTodayCount]    Script Date: 07/08/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MembersEnrolledTodayCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_Extracts_MembersEnrolledTodayCount]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_MembersEnrolledTodayCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE Procedure [dbo].[pa_CM_Extracts_MembersEnrolledTodayCount]
  @ExtractDate datetime = null
as 

  set nocount on;
  
  if @ExtractDate is null
  begin
    set @ExtractDate = getdate();
  end

  select count(*) as Enrollments, isnull(CUST.CreatedLocationID,0) as LocationID, '''' as StoreNumber
  from Customers as CUST with (NoLock)
  where CUST.CustomerTypeID=0
  and Convert(varchar,CUST.CreatedDate,101) = Convert(varchar,@ExtractDate,101)
  group by CreatedLocationID
  order by LocationID;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_Extracts_MembersEnrolledTodayCount] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_Extracts_PointsAdjustTodayGetCardID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_Extracts_PointsAdjustTodayGetCardID.StoredProcedure.sql 32583 2012-07-08 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_Extracts_PointsAdjustTodayGetCardID]    Script Date: 07/08/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_PointsAdjustTodayGetCardID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_Extracts_PointsAdjustTodayGetCardID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_Extracts_PointsAdjustTodayGetCardID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE Procedure [dbo].[pa_CM_Extracts_PointsAdjustTodayGetCardID]
  @CardTypeID int,
  @PointsAdjustXml xml
as
  set nocount on;

  create table #PointList (
    [CustomerPK] [bigint] NULL,
	[Date] [datetime] NULL,
    [RoleName] [nvarchar] (200) NULL,
    [UserName] [nvarchar] (50) NULL,
	[Adjustment] [bigint] NULL
  );

  insert into #PointList (CustomerPK,Date,RoleName,UserName,Adjustment)
  select Adj.PL.value(''@CustomerPK'', ''bigint'') as CustomerPK,
         Adj.PL.value(''@Date'', ''datetime'') as Date,
         Adj.PL.value(''@RoleName'', ''nvarchar(200)'') as RoleName,
         Adj.PL.value(''@UserName'', ''nvarchar(50)'') as UserName,
         Adj.PL.value(''@Adjustment'', ''bigint'') as Adjustment
  from @PointsAdjustXml.nodes(''Adjustments/PL'') as Adj(PL);
 
  select PL.CustomerPK,PL.Date,PL.RoleName,PL.UserName,PL.Adjustment,CI.ExtCardID as PrimaryID
  from #PointList as PL with (NoLock)
  inner join CardIDs as CI with (NoLock) on CI.CustomerPk=PL.CustomerPK and (CI.CardTypeID=@CardTypeID or CI.CardTypeID=1);
 
  drop table #PointList;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_Extracts_PointsAdjustTodayGetCardID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_FuelPartner_UpdateStoredValues.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_FuelPartner_UpdateStoredValues.StoredProcedure.sql 32583 2012-07-08 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_FuelPartner_UpdateStoredValues]    Script Date: 07/08/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_FuelPartner_UpdateStoredValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_FuelPartner_UpdateStoredValues]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_FuelPartner_UpdateStoredValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CM_FuelPartner_UpdateStoredValues]
  @StatusFlag int,
  @CustomerPK bigint,
  @LocationId bigint,
  @LocalID bigint,
  @ServerSerial int,
  @ExternalID nvarchar(400),
  @SVProgramID bigint,
  @OfferID bigint,
  @QtyEarned int,
  @QtyUsed int,
  @Value decimal(12,3),
  @EarnedDate datetime,
  @ExpireDate datetime,
  @TotalValueEarned decimal(12,3),
  @RedeemedValue decimal(12,3),
  @BreakageValue decimal(12,3),
  @LogixTransNum char(36),
  @UpdateCount int output
as 
set nocount on;

declare @EarnedLocationID as bigint
declare @Today as datetime
declare @AltEarned as bit

set @Today = getdate()
set @UpdateCount = 0
  
begin
  if @StatusFlag = 1
    -- issued
    begin
      set @EarnedLocationID = @LocationID
      set @AltEarned = 0

      insert into StoredValue with (RowLock)
        ([LocalID]
        ,[ServerSerial]
        ,[SVProgramID]
        ,[OfferID]
        ,[CustomerPK]
        ,[QtyEarned]
        ,[QtyUsed]
        ,[Value]
        ,[EarnedDate]
        ,[EarnedLocationID]
        ,[ExpireDate]
        ,[ExternalID]
        ,[StatusFlag]
        ,[LastUpdate]
        ,[LastLocationID]
        ,[AlteredSinceEarned]
        ,[TotalValueEarned]
        ,[RedeemedValue]
        ,[BreakageValue]
        ,[LogixTransNum])
      values
        (@LocalID
        ,@ServerSerial
        ,@SVProgramID
        ,@OfferID
        ,@CustomerPK
        ,@QtyEarned
        ,@QtyUsed
        ,@Value
        ,@EarnedDate
        ,@EarnedLocationID
        ,@ExpireDate
        ,@ExternalID
        ,@StatusFlag
        ,@Today
        ,@LocationID
        ,@AltEarned
        ,@TotalValueEarned
        ,@RedeemedValue
        ,@BreakageValue
        ,@LogixTransNum);
    end
  else if @StatusFlag = 10
    -- reissued
    begin
      set @StatusFlag = 1
      set @AltEarned = 1
      set @RedeemedValue=0.00
      set @BreakageValue=0.00
      set @QtyUsed = 0
      set @EarnedLocationID = @LocationID

      update StoredValue
      set StatusFlag=@StatusFlag,QtyEarned=@QtyEarned,QtyUsed=@QtyUsed, EarnedDate=@EarnedDate,
          EarnedLocationID=@EarnedLocationID, LastUpdate=@Today, LastLocationID=@LocationID,
          TotalValueEarned=@TotalValueEarned, RedeemedValue=@RedeemedValue, BreakageValue=@BreakageValue,
          AlteredSinceEarned=@AltEarned
      where LocalId=@LocalID and ServerSerial=@ServerSerial;
    end
  else if @StatusFlag = 4
    -- redeemed
    begin
      set @AltEarned = 1
      update StoredValue
      set StatusFlag=@StatusFlag, LastUpdate=@Today, LastLocationID=@LocationID, AlteredSinceEarned=@AltEarned,
          QtyUsed=QtyUsed+@QtyUsed,RedeemedValue=RedeemedValue+@RedeemedValue,BreakageValue=BreakageValue+@BreakageValue
      where LocalId=@LocalID and ServerSerial=@ServerSerial;
    end
  else if @StatusFlag = 2
    -- invalid
    begin
      set @AltEarned = 1
      update StoredValue
        set StatusFlag=2, LastUpdate=@Today, LastLocationID=@LocationID, AlteredSinceEarned=@AltEarned, BreakageValue=@BreakageValue
      where LocalId=@LocalID and ServerSerial=@ServerSerial;
    end
  else
    begin
      set @StatusFlag = 0
    end

  set @UpdateCount = @@rowcount
  if @UpdateCount > 0
    begin
      insert into SVHistory with (RowLock)
        ([LocalID]
        ,[ServerSerial]
        ,[SVProgramID]
        ,[OfferID]
        ,[CustomerPK]
        ,[QtyEarned]
        ,[QtyUsed]
        ,[Value]
        ,[EarnedDate]
        ,[EarnedLocationID]
        ,[ExpireDate]
        ,[ExternalID]
        ,[StatusFlag]
        ,[LastUpdate]
        ,[LastLocationID]
        ,[TotalValueEarned]
        ,[RedeemedValue]
        ,[BreakageValue]
        ,[LogixTransNum])
      values
        (@LocalID
        ,@ServerSerial
        ,@SVProgramID
        ,@OfferID
        ,@CustomerPK
        ,@QtyEarned
        ,@QtyUsed
        ,@Value
        ,@EarnedDate
        ,@EarnedLocationID
        ,@ExpireDate
        ,@ExternalID
        ,@StatusFlag
        ,@Today
        ,@LocationID
        ,@TotalValueEarned
        ,@RedeemedValue
        ,@BreakageValue
        ,@LogixTransNum);
    end
end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_FuelPartner_UpdateStoredValues] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_RedemptionExport_GetHouseholdMembers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_RedemptionExport_GetHouseholdMembers.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_RedemptionExport_GetHouseholdMembers]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RedemptionExport_GetHouseholdMembers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_RedemptionExport_GetHouseholdMembers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RedemptionExport_GetHouseholdMembers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CM_RedemptionExport_GetHouseholdMembers]
  @HhPk as bigint
as 
  set nocount on;
  select CustomerPK from Customers where HHPK = @HhPk;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_RedemptionExport_GetHouseholdMembers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_RestrictedUseCouponBuffer_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_RestrictedUseCouponBuffer_Insert.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_RestrictedUseCouponBuffer_Insert]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RestrictedUseCouponBuffer_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_RestrictedUseCouponBuffer_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RestrictedUseCouponBuffer_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CM_RestrictedUseCouponBuffer_Insert]  @SVProgramID bigint,@ExternalID nvarchar(400),@ExpireDate datetime,@UpdateCount int output
AS 
  SET NOCOUNT ON;

  declare @Today as datetime
  declare @Count as int
  declare @LocalID as bigint
  declare @CurrentID as bigint

  set @Today = getdate()
  set @UpdateCount = 0

  if not exists (select ExternalID from CM_RestrictedUseCouponBuffer with (nolock) where ExternalID=@ExternalID) begin
    if not exists (select ExternalID from StoredValue with (nolock) where ExternalID=@ExternalID) begin
      -- get & update next local id
      select @CurrentID = LocalID from StoredValueIDSequence with (tablockx);
      set @LocalID = @CurrentID + 1;
 	  update StoredValueIDSequence with (tablockx) set LocalID = @LocalID;

      insert into CM_RestrictedUseCouponBuffer with (RowLock)
       (SVProgramID,ExternalID,LocalID,ExpireDate,Status,StatusDate)
      values
       (@SVProgramID,@ExternalID,@LocalID,@ExpireDate,0,@Today);
    end
  end

  set @UpdateCount = @@rowcount;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_RestrictedUseCouponBuffer_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_RestrictedUseCouponBuffer_Move.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_RestrictedUseCouponBuffer_Move.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_RestrictedUseCouponBuffer_Move]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RestrictedUseCouponBuffer_Move]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_RestrictedUseCouponBuffer_Move]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RestrictedUseCouponBuffer_Move]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CM_RestrictedUseCouponBuffer_Move] @UpdateCount int output, @RunAgain int output
AS 
  set nocount on;
  declare @NumMarked bigint;
  declare @StartTime datetime;

  set @RunAgain=1;
  set @StartTime=getdate();
  set @UpdateCount=0;

  -- See if there are any rows marked for processing left behind from a previously 
  -- failed run.  If so, unmark them so we don''t snowball
  select @NumMarked=count(*) from CM_RestrictedUseCouponBuffer with (NoLock) where Status=1;
  if @NumMarked>100 begin
    update CM_RestrictedUseCouponBuffer with (RowLock) set Status=0 where Status=1;
  end

  CREATE TABLE #CouponTemp
   ([SVProgramID] bigint NULL,
    [ExternalID] nvarchar(400) NULL,
    [LocalID] bigint NULL,
    [ExpireDate] datetime NULL);

  -- run for up to 2 minutes
  while @RunAgain=1 and @StartTime>dateadd(mi, -2, getdate()) begin
    -- Mark a set of rows to work with
    --set rowcount 1800; 
    update TOP (1800) CM_RestrictedUseCouponBuffer with (RowLock) set Status=1; 
    --set rowcount 0;

    -- copy the marked rows to our temp table
    insert into #CouponTemp (SVProgramID,ExternalID,LocalID,ExpireDate)
      select SVProgramID,ExternalID,LocalID,ExpireDate
      from CM_RestrictedUseCouponBuffer with (NoLock) where Status=1;

    if (@@ROWCOUNT>0) begin
      set @RunAgain=1;
      BEGIN TRY		
        BEGIN TRAN T1
          insert into StoredValue with (RowLock) ([LocalID], [ServerSerial], [SVProgramID], [OfferID], [CustomerPK], [QtyEarned], [QtyUsed], [Value],
                  [EarnedDate], [EarnedLocationID], [ExpireDate], [ExternalID], [StatusFlag], [LastUpdate], [LastLocationID], [AlteredSinceEarned], 
                  [TotalValueEarned], [RedeemedValue], [BreakageValue])
            select LocalID, -9, SVProgramID, 0, 0, 1, 0, 0.01, @StartTime, 0, ExpireDate, ExternalID, 1, @StartTime, 0, 0, 0.01, 0.00, 0.00
            from #CouponTemp as IB with (NoLock);

          set @UpdateCount = @UpdateCount + @@rowcount

          insert into SVHistory with (RowLock) ([LocalID], [ServerSerial], [SVProgramID], [OfferID], [CustomerPK], [QtyEarned], [QtyUsed], [Value], 
                  [EarnedDate], [EarnedLocationID], [ExpireDate], [ExternalID], [StatusFlag], [LastUpdate], [LastLocationID], [TotalValueEarned], 
                  [RedeemedValue], [BreakageValue])
            select LocalID, -9, SVProgramID, 0, 0, 1, 0, 0.01, @StartTime, 0, ExpireDate, ExternalID, 1, @StartTime, 0, 0.01, 0.00, 0.00
            from #CouponTemp as IB with (NoLock);
  
          delete from CM_RestrictedUseCouponBuffer with (RowLock) where Status=1;
          truncate table #CouponTemp;

        COMMIT TRAN T1;
      END TRY
      BEGIN CATCH
        ROLLBACK TRAN T1;
        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;
        SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
      END CATCH
    end else begin
      set @RunAgain=0;
    end

  end -- while
  drop table #CouponTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_RestrictedUseCouponBuffer_Move] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_RestrictedUseCouponSV_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_RestrictedUseCouponSV_Insert.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_RestrictedUseCouponSV_Insert]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RestrictedUseCouponSV_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_RestrictedUseCouponSV_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_RestrictedUseCouponSV_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CM_RestrictedUseCouponSV_Insert]  @SVProgramID bigint,@ExternalID nvarchar(400),@ExpireDate datetime,@UpdateCount int output
AS 
  SET NOCOUNT ON;

  declare @Today as datetime
  declare @Count as int
  declare @LocalID as bigint
  declare @CurrentID as bigint

  set @Today = getdate()
  set @UpdateCount = 0

  if not exists (select ExternalID from StoredValue with (nolock) where ExternalID=@ExternalID) begin
    -- get & update next local id
    select @CurrentID = LocalID from StoredValueIDSequence with (tablockx);
    set @LocalID = @CurrentID + 1;
    update StoredValueIDSequence with (tablockx) set LocalID = @LocalID;

    insert into StoredValue with (RowLock) ([LocalID], [ServerSerial], [SVProgramID], [OfferID], [CustomerPK], [QtyEarned], [QtyUsed], [Value],
        [EarnedDate], [EarnedLocationID], [ExpireDate], [ExternalID], [StatusFlag], [LastUpdate], [LastLocationID], [AlteredSinceEarned],
        [TotalValueEarned], [RedeemedValue], [BreakageValue])
      values (@LocalID, -9, @SVProgramID, 0, 0, 1, 0, 0.01, @Today, 0, @ExpireDate, @ExternalID, 1, @Today, 0, 0, 0.01, 0.00, 0.00);

    set @UpdateCount = @@rowcount;

    if @UpdateCount > 0 begin
      insert into SVHistory with (RowLock) ([LocalID], [ServerSerial], [SVProgramID], [OfferID], [CustomerPK], [QtyEarned], [QtyUsed], [Value],
          [EarnedDate], [EarnedLocationID], [ExpireDate], [ExternalID], [StatusFlag], [LastUpdate], [LastLocationID],
          [TotalValueEarned], [RedeemedValue], [BreakageValue])
      values (@LocalID, -9, @SVProgramID, 0, 0, 1, 0, 0.01, @Today, 0, @ExpireDate, @ExternalID, 1, @Today, 0, 0.01, 0.00, 0.00);
    end
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_RestrictedUseCouponSV_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CM_TU_InsertData_PA.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CM_TU_InsertData_PA.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CM_TU_InsertData_PA]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_TU_InsertData_PA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CM_TU_InsertData_PA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CM_TU_InsertData_PA]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CM_TU_InsertData_PA] @TableNum varchar(4), @Operation varchar(2), @Col1 varchar(255), @Col2 varchar(255), @Col3 varchar(255), @Col4 varchar(255), @Col5 varchar(255), @LocalServerID int, @LocationID bigint, @WaitingACK int
AS 
  SET NOCOUNT ON;
  Insert into CPE_UploadTemp_PA with (RowLock) (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, ServerSerial, LocationID, WaitingACK)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @LocalServerID, @LocationID, @WaitingACK);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CM_TU_InsertData_PA] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CA_FillClipAgentDataTable.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CA_FillClipAgentDataTable.sql 50612 2012-06-18 14:51:37Z bin $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CA_FillClipAgentDataTable]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CA_FillClipAgentDataTable]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CA_FillClipAgentDataTable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[pa_CPE_CA_FillClipAgentDataTable] @TableName nvarchar(40), @RunAgain int Output, @RowCountLimit int = 4800 Output
    as 
    BEGIN
		declare @cmd as nvarchar(1000)
        declare @NumRows int        
        declare @ParmDefinition nvarchar(500);
        
        set NOCOUNT ON;
        set @RunAgain=1;
        
        set @cmd =N'Set Nocount on; declare @UnfinishedRows int; '+ 
					'select @UnfinishedRows=count(*) from '+@TableName +' where ProcessFlag=1; '+
					' if (@UnfinishedRows=0) '+
					' begin ' +					
					' Update Top ('+cast(@RowCountLimit as nvarchar(10)) +') '+@TableName +' set ProcessFlag=1 where ProcessFlag=0 ' +
					' set @NumRows = @@RowCount ' +
					' if @NumRows<'+cast(@RowCountLimit as nvarchar(10)) +			
					' set @RunAgain=0 ' +
					' end ' +
					' else ' +
					' begin ' +
					' set @NumRows = @UnfinishedRows ' +
					' set @RunAgain = 1 ' +
					' end '
		--print @cmd
		set @ParmDefinition = N'@RunAgain int output, @NumRows int output';					
	    exec sp_executesql @cmd,@ParmDefinition, @RunAgain Output, @NumRows Output
	    set @RowCountLimit = @NumRows

		-- The xml returning would be concatenated by caller, so do not send with root element
		set @cmd = N'set nocount on; declare @offercustomerlocation table ( OfferID  bigint, CustomerPK  bigint, LocationID  int, Deleted  int, WaitingACK  int,  CustomerGroupID  int); '+ 
				   ' insert into @offercustomerlocation (CustomerPK,CustomerGroupID,LocationID,Deleted,WaitingACK,OfferID) '+
				   ' select ocit.customerpk as CustomerPK, ocit.CustomerGroupID as CustomerGroupID, cl.locationid as LocationID, 0 as Deleted, 0 as WaitingACK, ocit.OfferID as OfferID ' +                                
                   ' from customerlocations as cl with (NoLock) '+
                   ' right join ' + @TableName + ' as ocit on ocit.CustomerPK = cl.CustomerPK AND ocit.ProcessFlag = 1 ;' +
                   ' select OfferID, CustomerPK, LocationID, Deleted, WaitingACK, CustomerGroupID from @offercustomerlocation as OfferCustomerLocation for xml auto, elements xsinil';                           
    
		exec sp_executesql @cmd 
		
    END
GO

GRANT EXECUTE ON [dbo].[pa_CPE_CA_FillClipAgentDataTable] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CA_FillClipAgentTable.StoredProcedure.sql'; 
--
GO
 -- $Id: dbo.pa_CPE_CA_FillClipAgentTable.StoredProcedure.sql 60523 2012-12-24 18:34:03Z by185006 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CA_FillClipAgentDataTable]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CA_FillClipAgentTable]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CA_FillClipAgentTable]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_CA_FillClipAgentTable] 
	@OfferCustomerLocationXML xml,
	@ClipFileName nvarchar(50),
	@TableName nvarchar(100),
	@OperationType nvarchar(100)
AS
	Begin
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	-- SET NOCOUNT ON;
	DECLARE @cmd as nvarchar(1000)
	 -- Prepare the XML input so read from it can be much faster.
	DECLARE @idoc int
	EXEC sp_xml_preparedocument @idoc OUTPUT, @OfferCustomerLocationXML
	
	Create Table #ClipInsertTemp (
                            UserID  bigint,
                            UserGroupID bigint,
                            TargetLocationID  bigint,
                            Deleted int
                           );
                           
	Insert into #ClipInsertTemp (UserGroupID, UserID, TargetLocationID, Deleted) 
		SELECT CustomerGroupID, CustomerPK, TargetLocationID, Deleted 
		FROM OPENXML(@idoc,'/Offers/OfferCustomerLocation') 
		with 
		(
			CustomerGroupID int './CustomerGroupID',
			CustomerPK int './CustomerPK',
			TargetLocationID int './TargetLocationID',
			Deleted int './Deleted'
		);                           
	-- Store the Offer XML document into a table variable
	set @cmd = N'Insert into '+ @TableName+' (UserGroupID, UserID, TargetLocationID, Deleted, ClipFileName) ' +
		'SELECT UserGroupID, UserID, TargetLocationID, ' + @OperationType + ' as Deleted, '''+ @ClipFileName +''' as ClipFileName ' +
		'FROM #ClipInsertTemp Where Deleted=0
		;
		'
		
	EXEC sp_executesql @cmd 
	drop table #ClipInsertTemp;
	EXEC sp_xml_removedocument @idoc;
  End
  
  GO
GRANT EXECUTE ON [dbo].[pa_CPE_CA_FillClipAgentTable] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CPE_CA_FindComWork.StoredProcedure.sql'; 
--
GO

-- $Id: dbo.pa_CPE_CA_FindComWork.StoredProcedure.sql 60523 2012-12-24 18:34:03Z by185006 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CA_FindComWork]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CA_FindComWork]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CA_FindComWork]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[pa_CPE_CA_FindComWork] @CA_TableName nvarchar(128), @RowCountLimit int = 4800 Output
AS
BEGIN
	DECLARE @cmd AS nvarchar(max)
	-- after some performance testing, we chose to use table variable, as with table variable the query was much faster (4k ms vs 44k ms, 100k rows in table)
	-- if we pass the table name as variable, the table variable with same structure has to be declared twice.
	DECLARE @tmptable_outer AS Table (SeqID int, UserID bigint, UserGroupID bigint, TargetLocationID bigint, Deleted bit, ClipFileName nvarchar(50))
	
	SET @cmd = N' DECLARE @tmptable_inner AS Table (SeqID int, UserID bigint, UserGroupID bigint, TargetLocationID bigint, Deleted bit, ClipFileName nvarchar(50)) '
				+ ' INSERT INTO @tmptable_inner '
				+ ' SELECT TOP(' + Cast(@RowCountLimit AS nvarchar) + ') SeqID, UserID, UserGroupID, TargetLocationID, Deleted, ClipFileName FROM ' 
				+ @CA_TableName + ' WITH (NOLOCK) WHERE TargetLocationID= (SELECT TOP (1) TargetLocationID FROM ' + @CA_TableName 
				+ ' ORDER BY SeqID ASC)'
				+ ' DELETE ' + @CA_TableName + ' FROM ' + @CA_TableName + ' AS CA INNER JOIN @tmptable_inner AS T ON CA.SeqID=T.SeqID ' 	
				+ ' SELECT SeqID, UserID, UserGroupID, TargetLocationID, Deleted, ClipFileName FROM @tmptable_inner '				
	-- cannot pass table var, use insert from exec
	INSERT INTO @tmptable_outer 
		EXEC sp_executesql @cmd
	SET @RowCountLimit=@@RowCount
		
	SELECT SeqID, UserID, UserGroupID, TargetLocationID, Deleted, ClipFileName FROM @tmptable_outer ORDER BY SeqID
END
GO

GRANT EXECUTE ON [dbo].[pa_CPE_CA_FindComWork] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CA_SetClipsForTransDownload.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CA_SetClipsForTransDownload.StoredProcedure.sql 40086 2011-11-15 21:22:38Z bin $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CA_SetClipsForTransDownload]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CA_SetClipsForTransDownload]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CA_SetClipsForTransDownload]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[pa_CPE_CA_SetClipsForTransDownload] @ClipCustomerLocationXML xml, @ClipSentFailed bit
	As 
	
	 -- Prepare the XML input so read from it can be much faster.
	DECLARE @idoc int
	EXEC sp_xml_preparedocument @idoc OUTPUT, @ClipCustomerLocationXML
	
	Create Table #ClipSentTemp (
                            UserID  bigint,
                            UserGroupID bigint,
                            TargetLocationID  bigint
                           );
                           
	Insert into #ClipSentTemp (UserGroupID, UserID, TargetLocationID) 
		SELECT UserGroupID, UserID, TargetLocationID 
		FROM OPENXML(@idoc,'/Clips/Clip') 
		with 
		(
			UserGroupID int './UserGroupID',
			UserID int './UserID',
			TargetLocationID int './TargetLocationID'
			
		);        
	Declare @NewStatusFlag as int
	if(@ClipSentFailed=1) 
		set @NewStatusFlag = 0
	else
		set @NewStatusFlag =-5
		
	-- set manual, cpestatusflag, and uestatusflag
	-- ocamt set those to x,-6,-6 originally.
	-- when clipsentfailed, set to 1,0,0, so traffic put them to transDownload
	-- when clipsentsucceeded, set to 0,-5,-5.
	begin
		Update GroupMembership set Manual = @ClipSentFailed, CPEStatusFlag=@NewStatusFlag,UEStatusFlag =@NewStatusFlag, LastUpdate = GETDATE() 
		From GroupMembership as GM with (NoLock) inner join #ClipSentTemp as t 
		On t.UserID = GM.CustomerPK and t.UserGroupID = GM.CustomerGroupID 
		Where gm.Manual=1 and (GM.CPEStatusFlag=-6 or GM.UEStatusFlag=-6); 
    end

	drop table #ClipSentTemp;
	EXEC sp_xml_removedocument @idoc;
--End
GO
GRANT EXECUTE ON [dbo].[pa_CPE_CA_SetClipsForTransDownload] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CPE_CA_UpdateClipSendingStatus.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CA_UpdateClipSendingStatus.StoredProcedure.sql 60523 2012-12-24 18:34:03Z by185006 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CA_UpdateClipSendingStatus]    Script Date: 11/20/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CA_UpdateClipSendingStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CA_UpdateClipSendingStatus]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create Procedure [dbo].[pa_CPE_CA_UpdateClipSendingStatus] @WaitingACK int, @CA_TempTableName nvarchar(100),@ClipSendingFailed int
	As 
	
Declare @cmd nvarchar(4000);
IF OBJECT_ID('tempdb..'+ @CA_TempTableName) IS NULL 
begin
	Declare @ErrMsg as nvarchar
	set @ErrMsg = 'Table ' + @CA_TempTableName + ' was not found.'
	Raiserror (@ErrMsg, 10, 255)
	return 255	
end

-- no transaction need for this way of handling clip sending status.
-- if failed, do nothing	
-- if sent successfully, insert into ocamt_gm_sent
                                   
Set @cmd = N'
DECLARE @Sent_GM Table
(
	UserGroupID bigint,
	UserID bigint,
	TargetLocationID bigint,
	Deleted int,
	[ClipFileName] nvarchar(50)
); 
-- load this batch of clips 
INSERT INTO @Sent_GM (UserGroupID,UserID,TargetLocationID,Deleted,ClipFileName) 
	SELECT DISTINCT UserGroupID,UserID, TargetLocationID, Deleted, ClipFileName FROM  '+@CA_TempTableName+' WHERE WaitingACK = '+ Convert(nvarchar, @WaitingACK) + '
	IF('+CONVERT(nvarchar,@ClipSendingFailed)+'=0)
	BEGIN
		INSERT INTO OCAMT_GM_Sent (CustomerPK,CustomerGroupID,TargetLocationID,Deleted,ClipFileName,InsertTime) 
			SELECT DISTINCT UserID AS CustomerPK, UserGroupID AS CustomerGroupID, TargetLocationID, Deleted, ClipFileName, GETDATE() AS InsertTime FROM @Sent_GM ' + '
	END  
	-- delete from clip temp table		
	DELETE '+@CA_TempTableName+' FROM '+@CA_TempTableName+' AS ca join @Sent_GM AS sg ON sg.UserGroupID = ca.UserGroupID AND sg.UserID = ca.UserID AND sg.TargetLocationID = ca.TargetLocationID AND sg.Deleted=ca.Deleted	';
	
EXEC dbo.sp_executesql @cmd;
GO


GRANT EXECUTE ON [dbo].[pa_CPE_CA_UpdateClipSendingStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CI_HandleInitialCard.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_CI_HandleInitialCard]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CI_HandleInitialCard]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_CI_HandleInitialCard]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_CI_HandleInitialCard] @ExtCardID nvarchar(400), @CardTypeID int,@ExtCardIDOriginal nvarchar(400)
AS  
    -- $Id: dbo.pa_CPE_CI_HandleInitialCard.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
    -- Build Version: 7.3.1.138972

  declare @CustomerPK bigint;
  declare @ExistingCardID nvarchar(400);
  declare @ExistingCardTypeID int;
  
  set @CustomerPK = 0;
  set @ExistingCardID = '';
  set @ExistingCardTypeID = 0;
  
  -- find out if a customer was initially created using this card id/type
  select top 1 @CustomerPK = CustomerPK 
  from Customers with (NoLock)
  where InitialCardID = @ExtCardID and InitialCardTypeID = @CardTypeID;

  if @CustomerPK > 0 
    begin
      select top 1 @ExistingCardID = ExtCardID, @ExistingCardTypeID = CardTypeID
      from CardIDs with (NoLock) 
      where CustomerPK = @CustomerPK;
	  
      if @ExistingCardID <> '' 
        begin
           if @ExistingCardID<>@ExtCardID or @ExistingCardTypeID<>@CardTypeID begin
            -- recursive call self to ensure that this initial card / type doesn't exist as well
            exec pa_CPE_CI_HandleInitialCard @ExistingCardID, @ExistingCardTypeID,@ExtCardIDOriginal
          
            -- resync the initial card id with a valid and current customer card id and type
            update Customers with (RowLock) 
              set InitialCardID = @ExistingCardID, InitialCardTypeID = @ExistingCardTypeID , InitialCardIDOriginal=@ExtCardIDOriginal
            where CustomerPK = @CustomerPK;
		 end
        end
      else
        begin
          -- no cards exist for this customer so set the InitialCardTypeID to -1 to avoid an
          -- constraint error, first adjust any customers with this state already down one. 
          update Customers with (RowLock) set InitialCardTypeID = InitialCardTypeID - 1 where InitialCardID = @ExtCardID and InitialCardTypeID < 0;
          update Customers with (RowLock) set InitialCardTypeID = -1 where CustomerPK = @CustomerPK;
        end
    end

GO

GRANT EXECUTE ON [dbo].[pa_CPE_CI_HandleInitialCard] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CI_PointsAdj.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CI_PointsAdj.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CI_PointsAdj]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CI_PointsAdj]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CI_PointsAdj]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CI_PointsAdj]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_CI_PointsAdj] @SourceCustPK bigint, @DestCustPK bigint, 
                                             @PointsProgramID bigint, @PromoVarID bigint, 
                                             @TransferAmount decimal(15,3), @Status int OUTPUT
AS  
  -- This procedure adjusts points immediately when cross shopping the points data is not needed.
    declare @PointsPK int;
    set @PointsPK = 0;
    set @Status =0;
    
    BEGIN TRY
      BEGIN TRAN T1
               
        -- decrement the source customer pk''s point balance in the specified program
        select @PointsPK = PKID from Points with (NoLock) where CustomerPK = @SourceCustPK and ProgramID = @PointsProgramID;
        if @PointsPK > 0
          begin
            update Points with (RowLock) set Amount = case
                                                        when (Amount - @TransferAmount <= 0) then 0
                                                        else Amount - @TransferAmount 
                                                      end
             where CustomerPK = @SourceCustPK and ProgramID = @PointsProgramID;
             
            insert into PointsHistory with (RowLock) (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, LogixTransNum, LastUpdate, LastServerID, LocationID, SourceTypeID) 
              values (@PointsProgramID, @SourceCustPK, -@TransferAmount, 0, ''0'', GETDATE(), -9, -9, 0)
                                                               

            -- increment the destination customer pk''s point balance in the specified program
            set @PointsPK = 0;
            select @PointsPK = PKID from Points with (NoLock) where CustomerPK = @DestCustPK and ProgramID = @PointsProgramID;
            if @PointsPK = 0 
              begin
                insert into Points with (RowLock) (PromoVarID, CustomerPK, ProgramID, Amount)
                    values (@PromoVarID, @DestCustPK, @PointsProgramID, @TransferAmount)
                if @@ROWCOUNT > 0
                  begin
                    insert into PointsHistory with (RowLock) (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, LogixTransNum, LastUpdate, LastServerID, LocationID, SourceTypeID) 
                      values (@PointsProgramID, @DestCustPK, @TransferAmount, 0, ''0'', GETDATE(), -9, -9, 0)
                    set @Status = 1;
                  end
                else
                  begin
                    -- insert adjustment failed
                    set @Status = -2;
                  end
              end
            else
              begin
                update Points with (RowLock) set Amount = case
                                                            when (Amount + @TransferAmount < 0) then 0
                                                            else Amount + @TransferAmount 
                                                          end
                where PKID = @PointsPK;
                if @@ROWCOUNT > 0
                  begin
                    insert into PointsHistory with (RowLock) (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, LogixTransNum, LastUpdate, LastServerID, LocationID, SourceTypeID) 
                      values (@PointsProgramID, @DestCustPK, @TransferAmount, 0, ''0'', GETDATE(), -9, -9, 0)
                    set @Status = 1;
                  end
                else
                  begin
                    -- update adjustment failed
                    set @Status = -3;
                  end
              end
          end
        else
          begin
            -- no points exist for the source customer in the specified program
            set @Status = -1;
          end              

      -- commit the transaction only if both the increment and decrement adjustments successfully processed
      if @Status = 1
        begin
         COMMIT TRAN T1;
        end
      else
        begin
          ROLLBACK TRAN T1;     
        end
        
    END TRY
    BEGIN CATCH
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH


' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_CI_PointsAdj] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CustomerLockDelete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CustomerLockDelete.StoredProcedure.sql 92937 2015-09-15 06:45:27Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockDelete]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CustomerLockDelete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CustomerLockDelete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CustomerLockDelete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_CustomerLockDelete] @CustomerPK bigint, @LockingGroupID bigint, @Count int output
AS 
  declare @CUPK bigint
  declare @HHPK bigint

  delete from CustomerLock with (RowLock) where CustomerPK=@CustomerPK and LockingGroupID=@LockingGroupID;
  set @Count = @@rowcount;
  
  select @CUPK=CustomerPk,@HHPK=isnull(HHPK,0) from Customers with (NoLock) where CustomerPK=@CustomerPK;
  if @CUPK is not null begin
    if @HHPK > 0 begin
      delete from CustomerLock with (RowLock) where CustomerPK=@HHPK and LockingGroupID=@LockingGroupID;
    end
    set @Count = @Count + @@rowcount;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_CustomerLockDelete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CustomerLockFetch.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CustomerLockFetch.StoredProcedure.sql 93131 2015-09-21 09:01:09Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockFetch]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CustomerLockFetch]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CustomerLockFetch]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_CustomerLockFetch] @CustomerPK bigint, @LockingGroupID bigint
AS 
  select LockID, LockedDate from CustomerLock with (NoLock)
   where CustomerPK=@CustomerPK and LockingGroupID=@LockingGroupID;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_CustomerLockFetch] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CustomerLockInsert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CustomerLockInsert.StoredProcedure.sql 93128 2015-09-21 07:08:05Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockInsert]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CustomerLockInsert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CustomerLockInsert]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_CustomerLockInsert] @CustomerPK bigint, @LockingGroupID bigint, @LocationID bigint, @LockExpireDate datetime, @TerminalNumber int = 0, @TransactionNumber nvarchar(128) = "0" , @LockedBy bigint = -1
AS 
  insert into CustomerLock (CustomerPK,LockingGroupID,LocationID,TerminalNumber,TransactionNumber,LockedDate,LockedBy, UE_LockExpireDate)
  values (@CustomerPK,@LockingGroupID,@LocationID,@TerminalNumber,@TransactionNumber,getdate(),@LockedBy,@LockExpireDate );
GO

GRANT EXECUTE ON [dbo].[pa_CPE_CustomerLockInsert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CustomerLockStatus.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CustomerLockStatus.StoredProcedure.sql 92937 2015-09-15 06:45:27Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockStatus]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CustomerLockStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CustomerLockStatus]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_CustomerLockStatus] @CustomerPK bigint, @LockingGroupID bigint, @LockStatus int
AS 
  declare @CUPK bigint
  declare @HHPK bigint
  declare @LockID bigint
  set @LockID=0;

  select @CUPK=CustomerPk,@HHPK=isnull(HHPK,0) from Customers with (NoLock) where CustomerPK=@CustomerPK;
  if @CUPK is null begin
    -- The customer record is not found, so return the status as 2 (not found)
    select 0 as LockID, @CustomerPK as UserID,0 as HHPrimaryID,2 as LockStatus,@LockingGroupID as LockingGroupID,getdate() as LockedTime;  
  end else begin
    if @HHPK = 0 begin
     set @CUPK = @CustomerPK;
    end else begin
     set @CUPK = @HHPK;
    end
    select @LockID=LockID from CustomerLock with (NoLock) where CustomerPK=@CUPK and LockingGroupID=@LockingGroupID;  
    if @LockID>0 begin
      select LockID, @CustomerPK as UserID, @HHPK as HHPrimaryID, @LockStatus as LockStatus, LockingGroupID as LockingGroupID, LockedDate as LockedTime  
    from CustomerLock with (NoLock) where CustomerPK=@CUPK and LockingGroupID=@LockingGroupID;
  end
    else begin
      -- The customer record is not locked, so return the status as 3 (not locked)
      select 0 as LockID, @CustomerPK as UserID,0 as HHPrimaryID, 3 as LockStatus,@LockingGroupID as LockingGroupID,getdate() as LockedTime;  
    end 
  end  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_CustomerLockStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_CustomerLockUpdate.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_CustomerLockUpdate.StoredProcedure.sql 93128 2015-09-21 07:08:05Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockUpdate]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CustomerLockUpdate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_CustomerLockUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_CustomerLockUpdate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_CustomerLockUpdate] @CustomerPK bigint, @LockingGroupID bigint, @LocationID bigint, @LockExpireDate datetime, @TerminalNumber int = 0, @TransactionNumber nvarchar(128) = ''0'', @LockedBy bigint =-1
AS 
  update CustomerLock with (RowLock) 
     set LockedDate=getdate(),LocationId=@LocationID,TerminalNumber=@TerminalNumber,TransactionNumber=@TransactionNumber, LockedBy=@LockedBy, UE_LockExpireDate=@LockExpireDate 
   where CustomerPK= @CustomerPK and LockingGroupID=@LockingGroupID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_CustomerLockUpdate] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_Distributed_Prefs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_Distributed_Prefs.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_Distributed_Prefs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_Distributed_Prefs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_Distributed_Prefs] @BatchID decimal(20,0),  @RunAgain int Output
AS 
  -- This procedure moves new and modified Preference records from LogixXS.CustomerPreferences to LogixXS.CPE_Prefs_Output
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @RunAgain=0;
  
  CREATE TABLE #PrefsTemp ([PreferenceID] bigint NULL, [CustomerPK] bigint NULL, [Value] nvarchar(250) NULL, [UpdateLevel] int NULL);

  --set rowcount 1800;

  insert into #PrefsTemp (PreferenceID, CustomerPK, Value, UpdateLevel) 
    select TOP 1800 CP.PreferenceID, CP.CustomerPK, CP.Value, CP.UpdateLevel
        from CustomerPreferences as CP with (NoLock)
        where UpdateLevel>LastDeployLevel;

  set @NumRows=@@ROWCOUNT;
  if @NumRows>100 begin
    set @RunAgain=1;
  end
  --set rowcount 0;

  if @NumRows>0 begin
    BEGIN TRY		
      BEGIN TRAN T1
     
        -- copy the records from the temporary table into the CPE_Prefs_Output table
        insert into CPE_Prefs_Output with (RowLock) (PreferenceID, CustomerPK, Value, WaitingACK, TargetLocationID, BatchID) 
          select  CP.PreferenceID, CP.CustomerPK, CP.Value, 0 as WaitingACK, CL.LocationID as TargetLocationID, @BatchID as BatchID 
              from #PrefsTemp as CP Inner Join CustomerLocations as CL with (NoLock) on CP.CustomerPK=CL.CustomerPK;
      
        -- update the LastDeployLevel in CustomerPreferences for the records we just processed
        update CustomerPreferences with (RowLock) set LastDeployLevel=PT.UpdateLevel
          from CustomerPreferences Inner Join #PrefsTemp as PT on CustomerPreferences.PreferenceID=PT.PreferenceID AND
          CustomerPreferences.CustomerPK =PT.CustomerPK 

      COMMIT TRAN T1;
    END TRY

    BEGIN CATCH
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  end -- if @NumRows>0

  drop table #PrefsTemp;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_Distributed_Prefs] TO [Copient_Logix] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_CPE_Distributed_PrefsMV.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_Distributed_PrefsMV.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_Distributed_PrefsMV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_Distributed_PrefsMV]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_Distributed_PrefsMV] @RunAgain int Output
AS 
  -- This procedure moves new and modified Preference records from LogixXS.CustomerPreferencesMV to LogixXS.CPE_PrefsMV_Output
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @RunAgain=0;
  
  CREATE TABLE #PrefsTemp ([PreferenceID] bigint  NULL, [CustomerPK] bigint  NULL, [Value] nvarchar(250) NULL, [Deleted] bit NULL, [UpdateLevel] int NULL);

  --set rowcount 1800;

  insert into #PrefsTemp (PreferenceID, CustomerPK, Value, Deleted, UpdateLevel) 
    select TOP 1800 CP.PreferenceID, CP.CustomerPK, CP.Value, CP.Deleted, CP.UpdateLevel
        from CustomerPreferencesMV as CP with (NoLock)
        where UpdateLevel>LastDeployLevel;

  set @NumRows=@@ROWCOUNT;
  if @NumRows>100 begin
    set @RunAgain=1;
  end
  --set rowcount 0;

  if @NumRows>0 begin
    BEGIN TRY		
      BEGIN TRAN T1
     
        -- copy the records from the temporary table into the CPE_PrefsMV_Output table
        insert into CPE_PrefsMV_Output with (RowLock) (PreferenceID, CustomerPK, Value, Deleted, WaitingACK, TargetLocationID) 
          select CP.PreferenceID, CP.CustomerPK, CP.Value, isnull(CP.Deleted, 0) as Deleted, 0 as WaitingACK, CL.LocationID as TargetLocationID 
              from #PrefsTemp as CP Inner Join CustomerLocations as CL with (NoLock) on CP.CustomerPK=CL.CustomerPK;

        -- update the LastDeployLevel in CustomerPreferencesMV for the ACTIVE records we just processed
        update CustomerPreferencesMV with (RowLock) set LastDeployLevel=PT.UpdateLevel 
          from CustomerPreferencesMV Inner Join #PrefsTemp as PT on CustomerPreferencesMV.CustomerPK =PT.CustomerPK 
          AND CustomerPreferencesMV.PreferenceID =PT.PreferenceID AND CustomerPreferencesMV.Value =PT.Value 
           Where PT.Deleted=0

        -- delete the CustomerPreferencesMV records for the DELETED records we just processed
        delete CustomerPreferencesMV with (RowLock) 
          from CustomerPreferencesMV Inner Join #PrefsTemp as PT on CustomerPreferencesMV.CustomerPK =PT.CustomerPK 
          AND CustomerPreferencesMV.PreferenceID =PT.PreferenceID AND CustomerPreferencesMV.Value =PT.Value 
          Where PT.Deleted=1


      COMMIT TRAN T1;
    END TRY

    BEGIN CATCH
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  end -- if @NumRows>0

  drop table #PrefsTemp;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_Distributed_PrefsMV] TO [Copient_Logix] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_CPE_Force_CustomerLocations_WaitingACK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_Force_CustomerLocations_WaitingACK.StoredProcedure.sql 47544 2012-04-17 14:02:01Z mark $
-- Build Version: 7.3.1.138972


-- 20120417.MM: This stored procedure is not used anywhere in the AMS system - dropping it from the database
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_Force_CustomerLocations_WaitingACK]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CPE_Force_CustomerLocations_WaitingACK]
GO



print 'processing storedprocedures/dbo.pa_CPE_IN_CRActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_CRActive.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_CRActive]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CRActive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_CRActive]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CRActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_IN_CRActive] @CustomerPK bigint
AS 
  select CustomerResponseID as UserResponseID, CustomerPK as UserID, IncentiveID, OnScreenAdID, RewardOptionID, Response from CustomerResponses with (NoLock) where CustomerPK=@CustomerPK and Deleted=0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_CRActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_CreateCustomer.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_CreateCustomer]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CreateCustomer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_CreateCustomer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_IN_CreateCustomer] @InitialCardID varchar(400), @CustomerTypeID int, @LocationID bigint, @BannerID int, @InitialCardTypeID int, @PKID bigint OUTPUT,@ExtCardIDOriginal nvarchar(400)=null
AS 
    -- $Id: dbo.pa_CPE_IN_CreateCustomer.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
    -- Build Version: 7.3.1.138972

  SELECT @CustomerTypeID = CustTypeID FROM CardTypes with (NoLock) WHERE CardTypeID = @InitialCardTypeID;
  
  SET NOCOUNT ON;
  Insert into Customers with (RowLock) (InitialCardID, CustomerTypeID, CreatedDate, CreatedLocationID, BannerID, InitialCardTypeID,InitialCardIDOriginal) 
    values (@InitialCardID, @CustomerTypeID, getdate(), @LocationID, @BannerID, @InitialCardTypeID,@ExtCardIDOriginal); 
    
  select @PKID = Scope_Identity()

GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_CreateCustomer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_CustPrefsActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_CustPrefsActive.StoredProcedure.sql 36898 2011-09-08 14:58:15Z anthony $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CustPrefsActive]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CPE_IN_CustPrefsActive]
GO

CREATE PROCEDURE [dbo].[pa_CPE_IN_CustPrefsActive] @CustomerPK bigint
AS 
  select P.PKID, P.CustomerPK, P.PreferenceID, isnull(P.Value, '') as Value
    from CustomerPreferences as P with (NoLock) 
    where P.CustomerPK=@CustomerPK;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_CustPrefsActive] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_CustPrefsMVActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_CustPrefsMVActive.StoredProcedure.sql 38741 2011-10-17 18:21:06Z mark $
-- Build Version: 7.3.1.138972

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CustPrefsMVActive]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CPE_IN_CustPrefsMVActive]
GO

CREATE PROCEDURE [dbo].[pa_CPE_IN_CustPrefsMVActive] @CustomerPK bigint
AS 
  select P.PKID, P.CustomerPK, P.PreferenceID, isnull(P.Value, '') as Value, Deleted
    from CustomerPreferencesMV as P with (NoLock) 
    where P.CustomerPK=@CustomerPK;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_CustPrefsMVActive] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_CustomerAttributes.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_CustomerAttributes]    Script Date: 1/30/2013 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CustomerAttributes]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_IN_CustomerAttributes]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_CPE_IN_CustomerAttributes] @CustomerPK bigint
AS 
    -- $Id: dbo.pa_CPE_IN_CustomerAttributes.StoredProcedure.sql 41996 2013-01-30 16:01:17Z rob $
    -- Build Version: 7.3.1.138972
    select 
        isnull(CA.CustomerPK, 0)                               as CustomerPK, 
        isnull(CA.AttributeTypeID, 0)                          as AttributeTypeID, 
        isnull(CA.AttributeValueID, 0)                         as AttributeValueID,
        isnull(CA.Deleted, 0)                                  as Deleted
    from CustomerAttributes as CA with (NoLock) 
    where CA.CustomerPK = @CustomerPK;
    

GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_CustomerAttributes] TO [Copient_Logix_uspRole] AS [dbo]
GO
    

print 'processing storedprocedures/dbo.pa_CPE_IN_CustomerPrefs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_CustomerPrefs.StoredProcedure.sql 97359 2016-02-02 03:07:43Z lf250051 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CustomerPrefs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_CustomerPrefs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_IN_CustomerPrefs] @CustomerPK bigint
AS 
  select CustomerPK, PreferenceID, isnull(RTrim(Value), '') as Value 
    from CustomerPreferences with (NoLock) 
   where CustomerPK=@CustomerPK;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_CustomerPrefs] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_CustomerPrefsMV.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_CustomerPrefsMV.StoredProcedure.sql 97359 2016-02-02 03:07:43Z lf250051 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CustomerPrefsMV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_CustomerPrefsMV]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_IN_CustomerPrefsMV] @CustomerPK bigint
AS 
  select CustomerPK, PreferenceID, isnull(RTrim(Value), '') as Value 
    from CustomerPreferencesMV with (NoLock) 
   where CustomerPK=@CustomerPK and Deleted=0;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_CustomerPrefsMV] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_CustomersActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_CustomersActive.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_CustomersActive]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CustomersActive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_CustomersActive]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_CustomersActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'Create Procedure [dbo].[pa_CPE_IN_CustomersActive] @CustomerPK int
as 
  declare @ExtCardID nvarchar(400);
  
  set @ExtCardID = '''';
  
  select top 1 @ExtCardID = ExtCardID from CardIDs with (NoLock) where CustomerPK = @CustomerPK;
  
  select CustomerPK as UserID, @ExtCardID as ClientUserID1, '''' as ClientUserID2, isnull(HHPK, 0) as HHPrimaryID, CustomerTypeID as HHRec, Employee, CurrYearSTD, LastYearSTD, isnull(CustomerStatusID, 0) as CustomerStatusID from Customers with (NoLock) where CustomerPK=@CustomerPK;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_CustomersActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_FetchCustomerID1.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_FetchCustomerID1.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_FetchCustomerID1]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_FetchCustomerID1]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_FetchCustomerID1]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_FetchCustomerID1]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_IN_FetchCustomerID1] @ExtCardID nvarchar(400), @CardTypeID int
AS 
  select CustomerPK from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_FetchCustomerID1] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_GMActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_GMActive.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_GMActive]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_GMActive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_GMActive]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_GMActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_IN_GMActive] @CustomerPK bigint
AS 
  select isnull(CustomerPK, 0) as UserID, isnull(CustomerGroupID, 0) as UserGroupID 
    from GroupMembership with (NoLock) 
   where CustomerPK=@CustomerPK and Deleted=0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_GMActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_PointsActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_PointsActive.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_PointsActive]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_PointsActive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_PointsActive]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_PointsActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_IN_PointsActive] @CustomerPK bigint
AS 
  select ProgramID, CustomerPK as UserID, convert(int, round(Amount,0)) as PointsAmt 
    from Points with (NoLock) 
   where CustomerPK=@CustomerPK and ProgramID is not NULL;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_PointsActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_RAActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_RAActive.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_RAActive]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_RAActive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_RAActive]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_RAActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_IN_RAActive] @CustomerPK bigint
AS 
  select LocalID, ServerSerial, RewardAccumulationID, RewardOptionID, CustomerPK as UserID, QtyPurchased, 
         TotalPrice, convert(varchar, AccumulationDate, 120) as AccumulationDate, OverThreshold, 2 as WaitingACK
    from CPE_RewardAccumulation with (NoLock) 
   where CustomerPK=@CustomerPK and Deleted=0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_RAActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_RDActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_RDActive.StoredProcedure.sql 49693 2012-05-25 13:02:40Z randy $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_RDActive]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_RDActive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IN_RDActive]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_RDActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_IN_RDActive] @CustomerPK bigint
AS 
  select RD.ServerSerial, RD.LocalID, RD.DistributionID, RD.IncentiveID, RD.RewardOptionID, RD.Phase, RD.CustomerPK as UserID, 
         convert(varchar, RD.DistributionDate, 120) as DistributionDate 
    from CPE_RewardDistribution as RD with (NoLock) 
   where RD.CustomerPK=@CustomerPK and RD.deleted=0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_RDActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_StoredFranking.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_StoredFranking.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_StoredValue]    Script Date: 03/ 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_StoredFranking]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CPE_IN_StoredFranking]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_StoredFranking]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_IN_StoredFranking] @CustomerPK bigint
AS 
  select customerpk as userid, rewardid as roid, franking_text as output, create_date, status, priority, deliverabletype
    from StoredFranking with (NoLock) 
    where CustomerPK=@CustomerPK and status=1;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IN_StoredFranking] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CPE_IN_StoredValue.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_IN_StoredValue]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_StoredValue]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_IN_StoredValue]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_CPE_IN_StoredValue] @CustomerPK bigint
AS 
    -- $Id: dbo.pa_CPE_IN_StoredValue.StoredProcedure.sql 111493 2017-04-13 14:07:23Z sk185403 $
    -- Build Version: 7.3.1.138972
    select 
        isnull(LocalID, 0)                                     as LocalID, 
        isnull(ServerSerial, 0)                                as ServerSerial, 
        isnull(SVProgramID, 0)                                 as SVProgramID, 
        isnull(OfferID, 0)                                     as IncentiveID, 
        isnull(SV.CustomerPK, 0)                               as CustomerPK, 
        isnull(QtyEarned, 0)                                   as QtyEarned, 
        isnull(QtyUsed, 0)                                     as QtyUsed, 
        isnull(Value, 0)                                       as Value, 
        convert(varchar, isnull(EarnedDate, '1/1/1980'), 120)  as EarnedDate, 
        isnull(EarnedLocationID, 0)                            as EarnedLocationID, 
        convert(varchar, isnull(ExpireDate, '1/1/1980'), 120)  as ExpireDate, 
        isnull(ExternalID, '0')                                as ExternalID 
    from StoredValue as SV with (NoLock) 
    where SV.CustomerPK = @CustomerPK and SV.StatusFlag = 1
    and SV.ExpireDate >= GETDATE();

GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_StoredValue] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IN_UpdateCustomerLocation.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IN_UpdateCustomerLocation.StoredProcedure.sql 47548 2012-04-17 14:07:42Z mark $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IN_UpdateCustomerLocation]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CPE_IN_UpdateCustomerLocation]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_IN_UpdateCustomerLocation] @CustomerPK bigint, @LocationID bigint
AS  
  declare @NumRecs int;
  select @NumRecs=count(*) from CustomerLocations with (NoLock) where CustomerPK=@CustomerPK and LocationID=@LocationID;
  if @NumRecs=0 begin
    insert into CustomerLocations with (RowLock) (CustomerPK, LocationID, LastVisit, LastUpdate, WaitingACK)
       values (@CustomerPK, @LocationID, getdate(), getdate(), 0);
  end
GO

GRANT EXECUTE ON [dbo].[pa_CPE_IN_UpdateCustomerLocation] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_IPL_Points.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_IPL_Points.StoredProcedure.sql 123167 2018-04-25 09:43:21Z ma185300 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_IPL_Points]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_IPL_Points]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_IPL_Points]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_IPL_Points] @LocationID int
AS 
  SET NOCOUNT ON;
  
  -- Do an initial purge to get rid of everything stored for this location (to maintain back-compatibility).
  EXEC [dbo].[pc_CPE_IPLPurge_PointsAdj_Output] @LocationID
  
  SELECT P.ProgramID, P.CustomerPK, P.Amount, P.[Version] INTO #IPL_Points_Temp FROM Points P with (NoLock) 
      INNER JOIN CustomerLocations CL WITH (NoLock) on P.CustomerPK=CL.CustomerPK
      WHERE CL.LocationID=@LocationID
      
  DELETE pao FROM [dbo].[CPE_PointsAdj_Output] pao WITH (RowLock)
      INNER JOIN #IPL_Points_Temp P ON P.ProgramID=pao.ProgramID AND P.CustomerPK=pao.CustomerPK AND pao.[Version] <= P.[Version]
      
  SELECT convert(nvarchar, P.ProgramID) + char(30) + convert(nvarchar, P.CustomerPK) + char(30) + convert(nvarchar, convert(int, round(P.Amount,0))) as data
      FROM #IPL_Points_Temp P

  DROP TABLE #IPL_Points_Temp
GO
GRANT EXECUTE ON [dbo].[pa_CPE_IPL_Points] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_KioskWeb_LookupCardData.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_KioskWeb_LookupCardData.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_KioskWeb_LookupCardData]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_KioskWeb_LookupCardData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_KioskWeb_LookupCardData]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_KioskWeb_LookupCardData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_KioskWeb_LookupCardData] @CustomerPK bigint
AS
	set nocount on

  select ExtCardIDOriginal as ExtCardID, CardTypeID, CardStatusID, CustomerPK from CardIDs with (NoLock) where CustomerPK = @CustomerPK

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_KioskWeb_LookupCardData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_LocalID_Seeds.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_LocalID_Seeds.StoredProcedure.sql 77166 2014-04-11 15:45:03Z mf200002 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_LocalID_Seeds]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_LocalID_Seeds]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_LocalID_Seeds]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_LocalID_Seeds]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_LocalID_Seeds] @LocalServerID int
AS 
  select ''RewardAccumulation'' as TableName, isnull(max(LocalID), 0) as MaxLocalID from CPE_RewardAccumulation with (NoLock, index=IX_CPE_RewardAccumulation_ServerSerial) where ServerSerial=@LocalServerID
  union
  select ''RewardDistribution'' as TableName, isnull(max(LocalID), 0) as MaxLocalID from CPE_RewardDistribution with (NoLock, index=IX_CPE_RewardDistribution_ServerSerial) where ServerSerial=@LocalServerID
  union 
  select ''StoredValue'' as TableName, isnull(max(LocalID), 0) as MaxLocalID from
  (
    select LocalID as LocalID from StoredValue with (NoLock, index=IX_StoredValue_Unique) where ServerSerial=@LocalServerID
    union all
    select Col1 as LocalID from CPE_UploadTemp_SV with (NoLock) where Col2=@LocalServerID
  ) SVLocalID
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_LocalID_Seeds] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_OCAMT_ProcessClipSendingStatus.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_OCAMT_ProcessClipSendingStatus.StoredProcedure.sql 66062 2013-05-24 14:57:24Z by185006 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_OCAMT_ProcessClipSendingStatus]    Script Date: 11/20/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_OCAMT_ProcessClipSendingStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_OCAMT_ProcessClipSendingStatus]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_OCAMT_ProcessClipSendingStatus] @RunAgain int Output, @RowsInserted int Output
	As 
	
	DECLARE @StartTime datetime	
	DECLARE @max_InsertTime AS DateTime
	DECLARE @max_SequenceID AS bigint
	DECLARE @tmp_output AS Table (SequenceID bigint, CustomerPK bigint,CustomerGroupID bigint,TargetLocationID bigint,Deleted int, InsertTime DateTime)
	DECLARE @oldest_clip_time AS DateTime
	DECLARE @purge_time AS DateTime
	DECLARE @RowLimit AS int
	DECLARE @BatchSize AS int
	DECLARE @Min_InsertTime AS DATETIME
	
	SET @RowLimit = 4800
	SET @purge_time = DATEADD(d, -14, GETDATE())
	SET @oldest_clip_time = DATEADD(MI,-5,GETDATE())
	SET @RowsInserted = 0
	SET @RunAgain = 1
	SET @StartTime = GETDATE()
	SET @BatchSize = 0
	
	SELECT TOP (1) @max_SequenceID=last_SequenceID, @max_InsertTime=last_InsertTime FROM [dbo].[OCFA_Variables]
	
	WHILE @RunAgain = 1 and DATEDIFF(SECOND, @StartTime, getdate()) < 60
	BEGIN
		-- process top @RowLimit rows a time
		INSERT INTO @tmp_output (InsertTime,SequenceID,CustomerPK,CustomerGroupID,TargetLocationID,Deleted)
			SELECT Top(@RowLimit) InsertTime,SequenceID,CustomerPK,CustomerGroupID,TargetLocationID,Deleted FROM OCAMT_GM_Output 
				WHERE (InsertTime>@max_InsertTime OR InsertTime=@max_InsertTime AND SequenceID>@max_SequenceID) AND (InsertTime<=@oldest_clip_time) ORDER BY InsertTime,SequenceID ASC
		SET @BatchSize = @@ROWCOUNT
		IF(@BatchSize < @RowLimit)
			SET @RunAgain = 0
		IF(@BatchSize > 0)
		BEGIN
			-- GET MAX INSERTTIME

			--------------------------------------------------------
			-- Fixed by Robin B & Kenta Y 2013-05-15			
			--SELECT @max_SequenceID=MAX(SequenceID), @max_InsertTime=MAX(InsertTime), @Min_InsertTime = MIN(InsertTime) FROM @tmp_output
			-- Sometimes the PKID and InsertTime would not be in same order
			-- For examples,
			--			SequenceID			InsertTime				
			--			15853196            2013-05-15 11:10:31.547 2013-05-15 11:10:33.313 0       OC_2ff0d3cf-8eca-4ee5-8d71-33c6acb559ed.txt
			--			15853197            2013-05-15 11:10:31.547 2013-05-15 11:10:33.313 0       OC_2ff0d3cf-8eca-4ee5-8d71-33c6acb559ed.txt
			--			15853198            2013-05-15 11:10:31.543 2013-05-15 11:10:33.320 0       OC_792ff91e-e1b5-4685-bfd2-4761fd237461.txt
			--			15853199            2013-05-15 11:10:31.543 2013-05-15 11:10:33.320 0       OC_792ff91e-e1b5-4685-bfd2-4761fd237461.txt
			SELECT @max_InsertTime=MAX(InsertTime), @Min_InsertTime = MIN(InsertTime) FROM @tmp_output

			SELECT @max_SequenceID=MAX(SequenceID)
			FROM @tmp_output
			WHERE InsertTime = @max_InsertTime
			--------------------------------------------------------
			
			-- SEND TO TRANSDOWNLOAD
			INSERT CPE_GM_Output (CustomerPK,CustomerGroupID, TargetLocationID, Manual,Deleted,WaitingACK)
				SELECT OGO.CustomerPK,OGO.CustomerGroupID,OGO.TargetLocationID, 0 AS Manual,OGO.Deleted,0 AS WaitingACK
				FROM @tmp_output AS OGO LEFT OUTER JOIN OCAMT_GM_SENT AS OGS 
				ON OGO.CustomerPK = OGS.CUSTOMERPK AND OGO.CustomerGroupID = OGS.CUSTOMERGROUPID AND OGO.TargetLocationID = OGS.TARGETLOCATIONID AND OGO.Deleted = OGS.DELETED AND OGS.InsertTime > @Min_InsertTime
				WHERE OGS.CUSTOMERPK IS NULL 

			SET @RowsInserted = @RowsInserted + @@ROWCOUNT 

			-- Record that these records have been processed.
			UPDATE [dbo].[OCFA_Variables] SET last_InsertTime=@max_InsertTime, last_SequenceID=@max_SequenceID
			DELETE @tmp_output
		END
	End

	IF @RunAgain = 0
	BEGIN
		DECLARE @DeleteRunAgain bit
		DECLARE @NumRows int
		SET @DeleteRunAgain = 1
		-- Delete from OCAMT_GM_Output. Purge date is well beyond the timeout date, so there are no concerns about date collision.
		WHILE @DeleteRunAgain = 1
			EXEC [dbo].[pa_Purge_OCAMT_GM_Output_by_Date] @purge_time, @NumRows OUTPUT, @DeleteRunAgain OUTPUT

		SET @DeleteRunAgain = 1
		-- Delete OCAMT_GM_Sent. Purge date is well beyond the timeout date, so there are no concerns about date collision.
		WHILE @DeleteRunAgain = 1
			EXEC [dbo].[pa_Purge_OCAMT_GM_Sent_by_Date] @purge_time, @NumRows OUTPUT, @DeleteRunAgain OUTPUT
	END
GO

GRANT EXECUTE ON [dbo].[pa_CPE_OCAMT_ProcessClipSendingStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_CustomerAttributes.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_CustomerAttributes]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_CustomerAttributes]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TC_CustomerAttributes]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_CPE_TC_CustomerAttributes] @BatchID decimal (20,0), @RunAgain int Output
AS 
BEGIN

    -- $Id: dbo.pa_CPE_TC_CustomerAttributes.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  -- This procedure moves CustomerAttributes records to TransDownload staging tables where CPEStoreSendFlag=1
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @RunAgain=0;
  
  CREATE TABLE #TCCATemp ([CustomerPK] bigint NULL, [AttributeTypeID] int NULL, [AttributeValueID] int NULL, [AlternateValue] nvarchar(100) NULL, [Deleted] bit NULL)

  -- Clean up an records that may be hanging out from a previous failed run
  --set rowcount 1800
  set @NumRows=1800
  while @NumRows=1800 begin
    delete TOP (1800) from CPE_CustomerAttributes_Output where WaitingACK=-5
    set @NumRows=@@ROWCOUNT;
  end
  --set rowcount 0;

  --set rowcount 500;
  -- Populate our temporary table with the customer data to be inserted into CPE_CustomerAttributes_Output
  insert into #TCCATemp (CustomerPK, AttributeTypeID, AttributeValueID, AlternateValue, Deleted) 
  select TOP 500 CustomerPK, AttributeTypeID, AttributeValueID, AlternateValue, Deleted
  from CustomerAttributes Where CPEStoreSendFlag=1
  set @NumRows=@@ROWCOUNT;
  if @NumRows>100 begin
    set @RunAgain=1;
  end
  --set rowcount 0;

  -- Insert the records into the CPE_CustomerAttributes_Output table - creating one record for each store the customer shops in 
  Insert into CPE_CustomerAttributes_Output with (RowLock) (CustomerPK, AttributeTypeID, AttributeValueID, AlternateValue, Deleted, TargetLocationID, WaitingACK, BatchID) 
    select TA.CustomerPK, TA.AttributeTypeID, TA.AttributeValueID, TA.AlternateValue, TA.Deleted, CL.LocationID as TargetLocationID, -5 as WaitingACK, @BatchID
      from #TCCATemp as TA Inner Join CustomerLocations as CL with (NoLock) on TA.CustomerPK=CL.CustomerPK;

  -- Release the WaitingACK flags on the TransDownload Output tables
  update CPE_CustomerAttributes_Output with (RowLock) set WaitingACK=0 where WaitingACK=-5;

  -- Reset the CPEStoreSendFlag on the CustomerAttributes table
  Update CustomerAttributes with (RowLock) set CPEStoreSendFlag=0 
    from CustomerAttributes Inner Join #TCCATemp as TA on CustomerAttributes.CustomerPK=TA.CustomerPK

  -- Clean up before exiting
  drop table #TCCATemp;
 
END

GO
GRANT EXECUTE ON [dbo].[pa_CPE_TC_CustomerAttributes] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_CustomerAttributes_AttributeTypes.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TC_CustomerAttributes_AttributeTypes.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_CustomerAttributes_AttributeTypes]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_CustomerAttributes_AttributeTypes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TC_CustomerAttributes_AttributeTypes]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_CustomerAttributes_AttributeTypes]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TC_CustomerAttributes_AttributeTypes] @BatchID decimal (20,0), @IDList nvarchar(1000)
AS 
  -- This procedure moves CustomerAttributes records to TransDownload staging tables where CPEStoreSendFlag=1
  SET NOCOUNT ON;
  declare @NumRows as int;
  declare @SQL nvarchar(2000);
  
  CREATE TABLE #TCCAATTemp ([CustomerPK] bigint NULL, [AttributeTypeID] int NULL, [AttributeValueID] int NULL, [Deleted] bit NULL)

  -- Clean up an records that may be hanging out from a previous failed run
  --set rowcount 1800
  set @NumRows=1800
  while @NumRows=1800 begin
    delete TOP (1800) from CPE_CustomerAttributes_Output where WaitingACK=-5
    set @NumRows=@@ROWCOUNT;
  end
  --set rowcount 0;

  --set rowcount 500;
  -- Populate our temporary table with the customer data to be inserted into CPE_CustomerAttributes_Output
  set @sql = ''insert into #TCCAATTemp (CustomerPK, AttributeTypeID, AttributeValueID, Deleted) 
  select TOP 500 CustomerPK, AttributeTypeID, AttributeValueID, Deleted 
  from CustomerAttributes Where AttributeTypeID IN ('' + @IDList + '');''
  
  EXEC sp_executesql @SQL
    --set rowcount 0;

  -- Insert the records into the CPE_CustomerAttributes_Output table - creating one record for each store the customer shops in 
  Insert into CPE_CustomerAttributes_Output with (RowLock) (CustomerPK, AttributeTypeID, AttributeValueID, Deleted, TargetLocationID, WaitingACK, BatchID) 
    select TA.CustomerPK, TA.AttributeTypeID, TA.AttributeValueID, 2, CL.LocationID as TargetLocationID, -5 as WaitingACK, @BatchID
      from #TCCAATTemp as TA Inner Join CustomerLocations as CL with (NoLock) on TA.CustomerPK=CL.CustomerPK;

  -- Release the WaitingACK flags on the TransDownload Output tables
  update CPE_CustomerAttributes_Output with (RowLock) set WaitingACK=0 where WaitingACK=-5;

  -- Reset the CPEStoreSendFlag on the CustomerAttributes table
  --Update CustomerAttributes with (RowLock) set Deleted=1
  --from CustomerAttributes Inner Join #TCCAATTemp as TA on CustomerAttributes.CustomerPK=TA.CustomerPK AND CustomerAttributes.AttributeTypeID=TA.AttributeTypeID;

  -- Clean up before exiting
  drop table #TCCAATTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TC_CustomerAttributes_AttributeTypes] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_CustomerAttributes_AttributeValues.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TC_CustomerAttributes_AttributeValues.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_CustomerAttributes_AttributeValues]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_CustomerAttributes_AttributeValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TC_CustomerAttributes_AttributeValues]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_CustomerAttributes_AttributeValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TC_CustomerAttributes_AttributeValues] @BatchID decimal (20,0), @ValueList nvarchar(1000)
AS 
  -- This procedure moves CustomerAttributes records to TransDownload staging tables where CPEStoreSendFlag=1
  SET NOCOUNT ON;
  declare @NumRows as int;
  declare @SQL nvarchar(2000);
  
  CREATE TABLE #TCCAAVTemp ([CustomerPK] bigint NULL, [AttributeTypeID] int NULL, [AttributeValueID] int NULL, [Deleted] bit NULL)

  -- Clean up an records that may be hanging out from a previous failed run
  --set rowcount 1800
  set @NumRows=1800
  while @NumRows=1800 begin
    delete TOP (1800) from CPE_CustomerAttributes_Output where WaitingACK=-5
    set @NumRows=@@ROWCOUNT;
  end
  --set rowcount 0;

  --set rowcount 500;
  -- Populate our temporary table with the customer data to be inserted into CPE_CustomerAttributes_Output
  set @sql = ''insert into #TCCAAVTemp (CustomerPK, AttributeTypeID, AttributeValueID, Deleted) 
  select TOP 500 CustomerPK, AttributeTypeID, AttributeValueID, Deleted 
  from CustomerAttributes Where AttributeValueID IN ('' + @ValueList + '');''
  
  EXEC sp_executesql @SQL
    --set rowcount 0;

  -- Insert the records into the CPE_CustomerAttributes_Output table - creating one record for each store the customer shops in 
  Insert into CPE_CustomerAttributes_Output with (RowLock) (CustomerPK, AttributeTypeID, AttributeValueID, Deleted, TargetLocationID, WaitingACK, BatchID) 
    select TA.CustomerPK, TA.AttributeTypeID, TA.AttributeValueID, 3, CL.LocationID as TargetLocationID, -5 as WaitingACK, @BatchID
      from #TCCAAVTemp as TA Inner Join CustomerLocations as CL with (NoLock) on TA.CustomerPK=CL.CustomerPK;

  -- Release the WaitingACK flags on the TransDownload Output tables
  update CPE_CustomerAttributes_Output with (RowLock) set WaitingACK=0 where WaitingACK=-5;

  -- Reset the CPEStoreSendFlag on the CustomerAttributes table
  --Update CustomerAttributes with (RowLock) set Deleted=1
  --  from CustomerAttributes Inner Join #TCCAAVTemp as TA on CustomerAttributes.CustomerPK=TA.CustomerPK AND CustomerAttributes.AttributeValueID=TA.AttributeValueID

  -- Clean up before exiting
  drop table #TCCAAVTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TC_CustomerAttributes_AttributeValues] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_Customers_CardIDs.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_Customers_CardIDs]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_Customers_CardIDs]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TC_Customers_CardIDs]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_CPE_TC_Customers_CardIDs] @AltIDColumn varchar(100), @VerifierColumn varchar(100), @BatchID decimal (20,0), @RunAgain int Output    
AS     
BEGIN
    -- $Id: dbo.pa_CPE_TC_Customers_CardIDs.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  -- This procedure moves Customers and CardIDs records to TransDownload staging tables where CPEStoreSendFlag=1    
  SET NOCOUNT ON;    
  declare @NumRows as int;    
  set @RunAgain=0;    
      
  CREATE TABLE #TCCustTemp (
    [CustomerPK]        bigint NULL, 
    [InitialCardID]     nvarchar(400), 
    [HHPK]              bigint NULL, 
    [CustomerTypeID]    int NULL, 
    [CustomerStatusID]  int NULL, 
    [AlternateID]       nvarchar(50) NULL, 
    [Verifier]          nvarchar(50) NULL, 
    [Employee]          bit NULL, 
    [AltIDOptOut]       int NULL, 
    [FirstName]         nvarchar(50) NULL, 
    [LastName]          nvarchar(50) NULL, 
    [EmployeeID]        nvarchar(26) NULL, 
    [AirmileMemberID]   nvarchar(50) NULL, 
    [Prefix]            nvarchar(20) NULL, 
    [Suffix]            nvarchar(20) NULL
  ) 
  CREATE TABLE #TCCardIDsTemp (
    [CardPK]        bigint NULL, 
    [CustomerPK]    bigint NULL, 
    [ExtCardID]     nvarchar(400) NULL, 
    [CardStatusID]  int NULL, 
    [CardTypeID]    int NULL, 
    [Deleted]       bit NULL
  )    
    
    
  -- Clean up an records that may be hanging out from a previous failed run    
  --set rowcount 1800    
  set @NumRows=1800    
  while @NumRows=1800 begin    
    delete TOP (1800) from CPE_Customers_Output where WaitingACK=-5    
    set @NumRows=@@ROWCOUNT;    
  end
  
  set @NumRows=1800    
  while @NumRows=1800 begin    
    delete TOP (1800) from CPE_CardIDs_Output where WaitingACK=-5    
    set @NumRows=@@ROWCOUNT;    
  end    
  --set rowcount 0;    
    
  --set rowcount 500;    
  -- Populate our temporary table with the customer data to be inserted into CPE_Cusomters_Output    
  exec ('insert into #TCCustTemp (CustomerPK, InitialCardID, HHPK, CustomerTypeID, CustomerStatusID, AlternateID, Verifier, Employee, AltIDOptOut, FirstName, LastName, EmployeeID, AirmileMemberID, Prefix, Suffix) '+      
    'select TOP 500 Customers.CustomerPK, Customers.InitialCardIDOriginal, Customers.HHPK, Customers.CustomerTypeID, Customers.CustomerStatusID'+@AltIDColumn+@VerifierColumn+', Customers.Employee, Customers.AltIDOptOut, Customers.FirstName, Customers.LastName, Customers.EmployeeID, '+    
      'isnull(CustomerExt.AirmileMemberID, '''') as AirmileMemberID, Customers.Prefix, Customers.Suffix '+  
      'from Customers with (NoLock) Left Join CustomerExt with (NoLock) on Customers.CustomerPK = CustomerExt.CustomerPK '+    
      'Where Customers.CPEStoreSendFlag = 1')    
  set @NumRows = @@ROWCOUNT;    
  if @NumRows > 100 begin    
    set @RunAgain = 1;    
  end    
  --set rowcount 0;    
    
  -- Insert the records into the CPE_Customers_Output table - creating one record for each store the customer shops in     
  Insert into CPE_Customers_output with (RowLock) (CustomerPK, InitialCardID, HHPK, CustomerTypeID, CustomerStatusID, WaitingACK, TargetLocationID, AlternateID, Verifier, Employee, AltIDOptOut, FirstName, LastName, EmployeeID, AirmileMemberID, Prefix, Suffix)     
    select TC.CustomerPK, TC.InitialCardID, TC.HHPK, TC.CustomerTypeID, TC.CustomerStatusID, -5 as WaitingACK, CL.LocationID as TargetLocationID, TC.AlternateID, TC.Verifier, TC.Employee, TC.AltIDOptOut, TC.FirstName, TC.LastName, TC.EmployeeID, TC.AirmileMemberID, TC.Prefix, TC.Suffix   
      from #TCCustTemp as TC Inner Join CustomerLocations as CL with (NoLock) on TC.CustomerPK=CL.CustomerPK;    
    
  -- We need to create records that will cause the local server to delete all of the CardIDs records for all of the customer data we are sending    
  Insert into #TCCardIDsTemp (CustomerPK, Deleted)      
    select Distinct TC.CustomerPK, 1 as Deleted from #TCCustTemp as TC     
    
  -- Populate the temporary CardIDs table for all of the customer records that need to be sent to the stores    
  Insert into #TCCardIDsTemp (CardPK, CustomerPK, ExtCardID, CardStatusID, CardTypeID, Deleted)     
    select CID.CardPK, CID.CustomerPK, CID.ExtCardIDOriginal, CID.CardStatusID, CID.CardTypeID, 0 as Deleted    
    from CardIDs as CID with (NoLock) Inner Join #TCCustTemp as TC on CID.CustomerPK = TC.CustomerPK;    
    
  -- Insert the recrods into CPE_CardIDs_Output table - creating one record for each store the customer shops in     
  Insert into CPE_CardIDs_Output with (RowLock) (CardPK, CustomerPK, ExtCardID, CardStatusID, CardTypeID, Deleted, WaitingACK, TargetLocationID, BatchID)    
    select TCID.CardPK, TCID.CustomerPK, TCID.ExtCardID, TCID.CardStatusID, TCID.CardTypeID, TCID.Deleted, -5 as WaitingACK, CL.LocationID as TargetLocationID, @BatchID as BatchID  
    from #TCCardIDsTemp as TCID Inner Join CustomerLocations as CL with (NoLock) on TCID.CustomerPK = CL.CustomerPK;    
    
    
  -- Release the WaitingACK flags on the TransDownload Output tables    
  update CPE_Customers_Output with (RowLock) set WaitingACK = 0 where WaitingACK = -5 OPTION (MAXDOP 1);    
  update CPE_CardIDs_Output   with (RowLock) set WaitingACK = 0 where WaitingACK = -5 OPTION (MAXDOP 1);    
    
  -- Reset the CPEStoreSendFlag on the Customers table    
  Update Customers with (RowLock) set CPEStoreSendFlag = 0     
    from Customers Inner Join #TCCustTemp as TC on Customers.CustomerPK = TC.CustomerPK    
    
  -- Clean up before exiting    
  drop table #TCCustTemp;    
  drop table #TCCardIDsTemp;    
END
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TC_Customers_CardIDs] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TC_GM.StoredProcedure.sql 131333 2018-11-22 03:23:33Z ac185320 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_GM]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TC_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_GM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TC_GM] @RunAgain int Output
AS 
  -- This procedure moves GroupMembership records from YellowBox.GroupMembership to YellowShopping.GM_Output
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @RunAgain=0;
  
  CREATE TABLE #GMTemp ([MembershipID] bigint NULL, [CustomerPK] bigint NULL, [CustomerGroupID] bigint NULL, [Manual] bit NULL, [Deleted] bit NULL);

  --set rowcount 1800;

  insert into #GMTemp (MembershipID, CustomerPK, CustomerGroupID, Manual, Deleted) 
    select TOP 1800 GM.MembershipID, GM.CustomerPK, GM.CustomerGroupID, GM.Manual, GM.Deleted
        from GroupMembership as GM with (NoLock)
		--Inner Join CustomerLocations as CL with (NoLock) on GM.CustomerPK=CL.CustomerPK
        where Manual=1 and (CPEStatusFlag=0 or UEStatusFlag=0);
  set @NumRows=@@ROWCOUNT;
  if @NumRows>100 begin
    set @RunAgain=1;
  end
  --set rowcount 0;

  if @NumRows>0 begin
    BEGIN TRY		
      BEGIN TRAN T1
     
        insert into CPE_GM_Output with (RowLock) (CustomerPK, CustomerGroupID, Manual, Deleted, WaitingACK, TargetLocationID) 
          select GM.CustomerPK, GM.CustomerGroupID, GM.Manual, GM.Deleted, 0 as WaitingACK, CL.LocationID as TargetLocationID 
              from #GMTemp as GM Inner Join CustomerLocations as CL with (NoLock) on GM.CustomerPK=CL.CustomerPK;
      
        update GroupMembership with (RowLock) set CPEStatusFlag=-5, UEStatusFlag=-5 where MembershipID in (select MembershipID from #GMTemp)         
      COMMIT TRAN T1;
    END TRY

    BEGIN CATCH
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  end -- if @NumRows>0

  drop table #GMTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TC_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_RewardAccumulation.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TC_RewardAccumulation.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_RewardAccumulation]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_RewardAccumulation]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TC_RewardAccumulation]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_RewardAccumulation]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TC_RewardAccumulation] @RunAgain int Output
AS  
  -- This procedure moves RewardAccumulation records from YellowBox.RewardAccumulation to YellowShopping.RA_Output
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @RunAgain=0;
  
  select @NumRows=count(*) from CPE_RewardAccumulation with (NoLock) where WaitingACK=-4;
  if @NumRows<100 begin
    --set rowcount 1800; 
    update TOP (1800) CPE_RewardAccumulation with (RowLock) set WaitingACK=-4 where WaitingACK=0;
    if @@ROWCOUNT=1800 begin
      set @RunAgain=1;
    end
    --set rowcount 0;
  end

  BEGIN TRY		
    BEGIN TRAN T1
      insert into CPE_RA_Output with (RowLock) (LocalID, ServerSerial, RewardOptionID, CustomerPK, QtyPurchased, TotalPrice, AccumulationDate, Deleted, LastUpdate, WaitingACK, TargetLocationID) 
        select RA.LocalID, RA.ServerSerial, RA.RewardOptionID, RA.CustomerPK, RA.QtyPurchased, RA.TotalPrice, RA.AccumulationDate, RA.Deleted, RA.LastUpdate, -5 as WaitingACK, CL.LocationID as TargetLocationID 
        from CPE_RewardAccumulation as RA with (NoLock) Inner Join CustomerLocations as CL with (NoLock) on RA.CustomerPK=CL.CustomerPK 
        where RA.WaitingACK=-4 option (maxdop 1);

      update CPE_RA_Output with (RowLock) set WaitingACK=0 where WaitingACK=-5;
      update CPE_RewardAccumulation with (RowLock) set WaitingACK=-5 where WaitingACK=-4;
    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 BEGIN
	ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;

      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TC_RewardAccumulation] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_RewardDistribution.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TC_RewardDistribution.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_RewardDistribution]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_RewardDistribution]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TC_RewardDistribution]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_RewardDistribution]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TC_RewardDistribution] @RunAgain int Output
AS 
  -- This procedure moves RewardDistribution records from YellowBox.RewardDistribution to YellowShopping.RD_Output
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @RunAgain=0;
  
  select @NumRows=count(*) from CPE_RewardDistribution with (NoLock) where WaitingACK=-4;
  if @NumRows<100 begin
    --set rowcount 1800; 
    update TOP (1800) CPE_RewardDistribution with (RowLock) set WaitingACK=-4 where WaitingACK=0;
    if @@ROWCOUNT=1800 begin
      set @RunAgain=1;
    end
    --set rowcount 0;
  end

  BEGIN TRY		
    BEGIN TRAN T1
      insert into CPE_RD_Output with (RowLock) (LocalID, ServerSerial, IncentiveID, RewardOptionID, Phase, CustomerPK, DistributionDate, Deleted, LastUpdate, WaitingACK, TargetLocationID) 
        select RD.LocalID, RD.ServerSerial, RD.IncentiveID, RD.RewardOptionID, RD.Phase, RD.CustomerPK, RD.DistributionDate, RD.Deleted, RD.LastUpdate, -5 as WaitingACK, CL.LocationID as TargetLocationID 
        from CPE_RewardDistribution as RD with (NoLock) Inner Join CustomerLocations as CL with (NoLock) on RD.CustomerPK=CL.CustomerPK
        where RD.WaitingACK=-4  option (maxdop 1);

      update CPE_RD_Output with (RowLock) set WaitingACK=0 where WaitingACK=-5;
      update CPE_RewardDistribution with (RowLock) set WaitingACK=-5 where WaitingACK=-4;
    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 BEGIN
	ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;

      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TC_RewardDistribution] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TC_SF.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TC_SF.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TC_SF]    Script Date: 03/11/2011 09:53:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_SF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TC_SF]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TC_SF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TC_SF] @RunAgain int Output
AS 
  -- This procedure moves StoredFranking records from StoredFranking to CPE_SF_Output
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @RunAgain=0;
  
  CREATE TABLE #SFTemp ([customerpk] bigint NULL, [rewardid] bigint NULL, [franking_text] nvarchar(128) NULL, [create_date] datetime NULL, [origin_store] bigint NULL, [status] smallint NULL, [issuing_store] bigint NULL, [issue_date] datetime NULL, [priority] int NULL, [deliverabletype] int NULL);

  --set rowcount 1800;

  insert into #SFTemp (customerpk, rewardid, franking_text, create_date, origin_store, status, issuing_store, issue_date, priority, deliverabletype) 
    select TOP 1800 SF.customerpk, SF.rewardid, SF.franking_text, SF.create_date, SF.origin_store, SF.status, SF.issuing_store, SF.issue_date, SF.priority, SF.deliverabletype
        from StoredFranking as SF with (NoLock)
        where CPEStatusFlag=0;
  set @NumRows=@@ROWCOUNT;
  if @NumRows>100 begin
    set @RunAgain=1;
  end
  --set rowcount 0;

  if @NumRows>0 begin
    BEGIN TRY		
      BEGIN TRAN T1
     
        insert into CPE_SF_Output with (RowLock) (customerpk, rewardid, franking_text, create_date, origin_store, status, issuing_store, issue_date, priority, deliverabletype, WaitingACK, TargetLocationID) 
          select SF.customerpk, SF.rewardid, SF.franking_text, SF.create_date, SF.origin_store, SF.status, SF.issuing_store, SF.issue_date, SF.priority, SF.deliverabletype, 0 as WaitingACK, CL.LocationID as TargetLocationID 
              from #SFTemp as SF
          inner join CustomerLocations as CL with (NoLock) on SF.CustomerPK=CL.CustomerPK;
      
        update StoredFranking with (RowLock) set CPEStatusFlag=-5 where customerpk in (select customerpk from #SFTemp) and rewardid in (select rewardid from #SFTemp)
      COMMIT TRAN T1;
    END TRY

    BEGIN CATCH
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  end -- if @NumRows>0

  drop table #SFTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TC_SF] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_ActiveCustomers_Output.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_ActiveCustomers_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_ActiveCustomers_Output]
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_ActiveCustomers_Output] @LocationID int      
AS       
BEGIN
	  Declare @NumRows int;        
	  SET NOCOUNT ON;        
	  set @NumRows=0;        
	  select @NumRows=count(*) from UE_ActiveCustomers_Output with (NoLock) where WaitingACK=@LocationID;        
	  if @NumRows<500 begin        
		--set rowcount 1000;         
		  -- Mark the oldest 1000 records to process        
		  Update UE_ActiveCustomers_Output with (RowLock) set WaitingACK=@LocationID where CustomerPK in (select TOP 1000 Customerpk from UE_ActiveCustomers_Output with (NoLock) where TargetLocationID=@LocationID and WaitingACK=0 order by Customerpk)and TargetLocationID=@LocationID OPTION(MAXDOP 1);         
	  end        
	  --set rowcount 0;        
	  -- send only the newest record for each distinct CustomerPK within the set of marked records        
	  select Customerpk,CardID,CardTypeId
	  from UE_ActiveCustomers_Output with (NOLOCK)         
	  where WaitingACK=@LocationID       
END
GO
	GRANT EXECUTE ON [dbo].[pa_CPE_TD_ActiveCustomers_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CPE_TD_CROutput_Active.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CROutput_Active]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CROutput_Active]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TD_CROutput_Active]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_CROutput_Active] @LocationID int
AS 

    -- $Id: dbo.pa_CPE_TD_CROutput_Active.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows = 0;
  select @NumRows = count(*) from CPE_CR_Output with (NoLock) where WaitingACK = @LocationID;
  if @NumRows < 500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_CR_Output with (RowLock) set WaitingACK = @LocationID where TargetLocationID = @LocationID and WaitingACK = 0; 
  end
  
  --set rowcount 0;
  select CR.LocalID, CR.ServerSerial, CR.CustomerPK as UserID, CR.IncentiveID, CR.OnScreenAdID, CR.RewardOptionID, CR.Response, 2 as WaitingACK 
    from CPE_CR_Output as CR with (NoLock) 
   where Deleted = 0 and WaitingACK = @LocationID;

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_CROutput_Active] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CROutput_Deleted.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CROutput_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CROutput_Deleted]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TD_CROutput_Deleted]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_CROutput_Deleted] @LocationID int
AS 
    -- $Id: dbo.pa_CPE_TD_CROutput_Deleted.StoredProcedure.sql 43250 2012-02-03 15:06:13Z rob $
    -- Build Version: 7.3.1.138972

  select CR.LocalID, CR.ServerSerial from CPE_CR_Output as CR with (NoLock) where Deleted = 1 and WaitingACK = @LocationID;
 
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_CROutput_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CardIDsOutput.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CardIDsOutput]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CardIDsOutput]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TD_CardIDsOutput]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_CPE_TD_CardIDsOutput] @LocationID int
AS 
BEGIN
    -- $Id: dbo.pa_CPE_TD_CardIDsOutput.StoredProcedure.sql 40244 2011-11-17 22:17:47Z rob $
    -- Build Version: 7.3.1.138972
    SET NOCOUNT ON;

    Declare @NumRows int;
    set @NumRows = 0;
    select @NumRows = count(*) from CPE_Customers_Output with (NoLock) where WaitingACK = @LocationID;

    if @NumRows < 500 
    begin
      -- Mark the oldest 1000 records to process
      UPDATE TOP( 1000 ) CPE_CardIDs_Output with (RowLock) set WaitingACK = @LocationID 
        WHERE TargetLocationID = @LocationID and WaitingACK = 0 and Deleted = 0; 
    end

    /*
        select distinct isnull(CardPK, 0) as CardPK, isnull(CustomerPK, 0) as UserID, isnull(ExtCardID, '''') as ExtCardID, isnull(CardStatusID, 1) as CardStatusID, isnull(CardTypeID, 0) as CardTypeID 
        from CPE_CardIDs_Output with (NOLOCK) where WaitingACK=@LocationID and Deleted=0;
    */
    SELECT  
        isnull(CID.CardPK,       0  ) as CardPK, 
        isnull(CID.CustomerPK,   0  ) as UserID, 
        isnull(CID.ExtCardID,    '' ) as ExtCardID, 
        isnull(CID.CardStatusID, 1  ) as CardStatusID, 
        isnull(CID.CardTypeID,   0  ) as CardTypeID
    FROM cpe_cardids_output as CID with (NoLock) 
        left Join (
            select CustomerPK, max( isnull(BatchID, 0)) as BatchID 
            from cpe_CardIDs_output with (NOLock) 
            where WaitingACK = @LocationID group by CustomerPK
        ) as T2 on CID.CustomerPK = T2.CustomerPK 
    WHERE CID.WaitingACK = @LocationID and CID.Deleted = 0 
        and ( CID.BatchID = T2.BatchID or CID.BatchID is NULL )
 
END
GO


GRANT EXECUTE ON [dbo].[pa_CPE_TD_CardIDsOutput] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CardIDsOutput_Deleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CardIDsOutput_Deleted.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CardIDsOutput_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CardIDsOutput_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CardIDsOutput_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CardIDsOutput_Deleted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CardIDsOutput_Deleted] @LocationID int
AS 
  Declare @NumRows int;
  SET NOCOUNT ON;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_Customers_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
      Update TOP (1000) CPE_CardIDs_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0 and Deleted=1; 
  end
  --set rowcount 0;

  select distinct CustomerPK as UserID from CPE_CardIDs_Output with (NOLOCK) where WaitingACK=@LocationID and Deleted=1;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CardIDsOutput_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CardIDs_CheckDeleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CardIDs_CheckDeleted.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CardIDs_CheckDeleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CardIDs_CheckDeleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CardIDs_CheckDeleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CardIDs_CheckDeleted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CardIDs_CheckDeleted] @LocationID int, @NumDeleted bigint Output
AS 
  select @NumDeleted=count(*) from CPE_CardIDs_Output where Deleted=1 and TargetLocationID=@LocationID and WaitingACK=0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CardIDs_CheckDeleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CustomerAttributesOutput.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CustomerAttributesOutput.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CustomerAttributesOutput]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributesOutput]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributesOutput]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributesOutput]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributesOutput] @LocationID int
AS 
  Declare @NumRows int;
  SET NOCOUNT ON;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_CustomerAttributes_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
      -- Mark the oldest 1000 records to process
      Update TOP (1000) CPE_CustomerAttributes_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0 and Deleted=0; 
  end
  --set rowcount 0;

  select  isnull(CA.CustomerPK, 0) as CustomerPK, isnull(CA.AttributeTypeID, 0) as AttributeTypeID, isnull(CA.AttributeValueID, '''') as AttributeValueID
  from CPE_CustomerAttributes_Output as CA with (NoLock) left Join (select CustomerPK, max(isnull(BatchID, 0)) as BatchID from CPE_CustomerAttributes_Output with (NOLock) where WaitingACK=@LocationID group by CustomerPK) as T2 on CA.CustomerPK=T2.CustomerPK 
  where CA.WaitingACK=@LocationID and CA.Deleted=0 
  and (CA.BatchID=T2.BatchID or CA.BatchID is NULL)
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CustomerAttributesOutput] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CustomerAttributesOutput_Deleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CustomerAttributesOutput_Deleted.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CustomerAttributesOutput_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributesOutput_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributesOutput_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributesOutput_Deleted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributesOutput_Deleted] @LocationID int
AS 
  Declare @NumRows int;
  SET NOCOUNT ON;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_CustomerAttributes_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
      Update TOP (1000) CPE_CustomerAttributes_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0 and Deleted=1; 
  end
  --set rowcount 0;

  select distinct CustomerPK, AttributeTypeID from CPE_CustomerAttributes_Output with (NOLOCK) where WaitingACK=@LocationID and Deleted=1;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CustomerAttributesOutput_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CustomerAttributes_AttributeType_Deleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CustomerAttributes_AttributeType_Deleted.StoredProcedure.sql 66030 2013-05-23 20:45:53Z by185006 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CustomerAttributes_AttributeType_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributes_AttributeType_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributes_AttributeType_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributes_AttributeType_Deleted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributes_AttributeType_Deleted] @LocationID int
AS 
  Declare @NumRows int;
  declare @tbl_TMP table (PKID bigint);  
  
  SET NOCOUNT ON;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_CustomerAttributes_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    --Update CPE_CustomerAttributes_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0 and Deleted=2; 
    Insert into @tbl_TMP (PKID) SELECT TOP (1000) PKID FROM CPE_CustomerAttributes_Output with (NoLock) where TargetLocationID=@LocationID and WaitingACK=0 and Deleted=2;   
    Merge CPE_CustomerAttributes_Output as CPE using @tbl_TMP as TMP on CPE.PKID=TMP.PKID when matched then update set WaitingACK=@LocationID;    
  end
  set rowcount 0;

  select distinct AttributeTypeID from CPE_CustomerAttributes_Output with (NOLOCK) where WaitingACK=@LocationID and Deleted=2;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CustomerAttributes_AttributeType_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted] @LocationID int
AS 
  Declare @NumRows int;
  SET NOCOUNT ON;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_CustomerAttributes_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
      Update TOP (1000) CPE_CustomerAttributes_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0 and Deleted=3; 
  end
  --set rowcount 0;

  select distinct AttributeValueID, AttributeTypeID from CPE_CustomerAttributes_Output with (NOLOCK) where WaitingACK=@LocationID and Deleted=3;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CustomerAttributes_AttributeValue_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CustomerRemoval.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CustomerRemoval.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CustomerRemoval]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerRemoval]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CustomerRemoval]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomerRemoval]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CustomerRemoval] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_CustomerRemoval_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_CustomerRemoval_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  select CustomerPK as UserID from CPE_CustomerRemoval_Output with (NoLock) where WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CustomerRemoval] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_CustomersOutput.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_CustomersOutput.StoredProcedure.sql 120918 2018-02-23 03:18:37Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_CustomersOutput]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomersOutput]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_CustomersOutput]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_CustomersOutput]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_CustomersOutput] @LocationID int    
AS     
  Declare @NumRows int;      
  SET NOCOUNT ON;      
  set @NumRows=0;      
  select @NumRows=count(*) from CPE_Customers_Output with (NoLock) where WaitingACK=@LocationID;      
  if @NumRows<500 begin      
    --set rowcount 1000;       
      -- Mark the oldest 1000 records to process      
      Update CPE_Customers_Output with (RowLock) set WaitingACK=@LocationID where PKID in (select TOP (1000) PKID from CPE_Customers_Output with (NoLock) where TargetLocationID=@LocationID and WaitingACK=0 order by PKID) OPTION(MAXDOP 1);       
  end      
  --set rowcount 0;      
  -- send only the newest record for each distinct CustomerPK within the set of marked records      
  select CustomerPK as UserID, InitialCardID as ClientUserID1, HHPK as HHPrimaryID, case CustomerTypeID when 2 then 0 else CustomerTypeID end as HHRec, 
      CustomerTypeID, isnull(CustomerStatusID, 1) as CustomerStatusID, isnull(AlternateID, '''') as AlternateID, 
      isnull(Verifier, '''') as Verifier, isnull(Employee, 0) as Employee, AltIDOptOut, isnull(FirstName, '''') as FirstName, isnull(LastName, '''') as LastName, 
      isnull(EmployeeID, '''') as EmployeeID, isnull(AirmileMemberID, '''') as AirmileMemberID, isnull(Prefix, '''') as Prefix, isnull(Suffix, '''') as Suffix
    from CPE_Customers_Output with (NOLOCK)       
    where PKID in (select max(PKID) as PKID from CPE_Customers_Output with (NoLock) where WaitingACK=@LocationID group by CustomerPK);      
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_CustomersOutput] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_GMOutput_Active.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_GMOutput_Active.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_GMOutput_Active]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_GMOutput_Active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_GMOutput_Active]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_GMOutput_Active]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_GMOutput_Active] @LocationID int
AS  
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_GM_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_GM_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  select CustomerPK as UserID, CustomerGroupID as UserGroupID from CPE_GM_Output with (NOLOCK) where Deleted=0 and WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_GMOutput_Active] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_GMOutput_Deleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_GMOutput_Deleted.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_GMOutput_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_GMOutput_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_GMOutput_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_GMOutput_Deleted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_GMOutput_Deleted] @LocationID int
AS 
  select CustomerPK as UserID, CustomerGroupID as UserGroupID from CPE_GM_Output with (NOLOCK) where Deleted=1 and WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_GMOutput_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PendingPointsAdj.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_PendingPointsAdj]    Script Date: 11/02/2015 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PendingPointsAdj]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PendingPointsAdj]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_PendingPointsAdj] @LocationID int
AS 
    -- $Id: dbo.pa_CPE_TD_PendingPointsAdj.StoredProcedure.sql 36177 2015-10-02 22:04:41Z db123627 $
    -- Build Version: 7.3.1.138972
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_PointsPending_Output with (NoLock) where WaitingACK=@LocationID;

  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_PointsPending_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  
  select ProgramID, EarnedAdjAmount, RedeemedAdjAmount, CustomerPK as UserID, CartID, Deleted
    from CPE_PointsPending_Output with (NOLOCK) 
    where WaitingACK=@LocationID;  

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PendingPointsAdj] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PendingRewardDistributionAdj.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_PendingRewardDistributionAdj]    Script Date: 11/02/2015 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PendingRewardDistributionAdj]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PendingRewardDistributionAdj]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_PendingRewardDistributionAdj] @LocationID int
AS 
    -- $Id: dbo.pa_CPE_TD_PendingRewardDistributionAdj.StoredProcedure.sql 36177 2015-10-02 22:04:41Z db123627 $
    -- Build Version: 7.3.1.138972
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_RewardDistributionPending_Output with (NoLock) where WaitingACK=@LocationID;

  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_RewardDistributionPending_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  
  select IncentiveID, RewardOptionID, CustomerPK as UserID, CartID, Deleted
    from CPE_RewardDistributionPending_Output with (NOLOCK) 
    where WaitingACK=@LocationID;  

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PendingRewardDistributionAdj] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PendingRewardLimitAdj.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_PendingRewardLimitAdj]    Script Date: 11/02/2015 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PendingRewardLimitAdj]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PendingRewardLimitAdj]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_PendingRewardLimitAdj] @LocationID int
AS 
    -- $Id: dbo.pa_CPE_TD_PendingRewardLimitAdj.StoredProcedure.sql 36177 2015-10-02 22:04:41Z db123627 $
    -- Build Version: 7.3.1.138972
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_RewardLimitPending_Output with (NoLock) where WaitingACK=@LocationID;

  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_RewardLimitPending_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  
  select PromoVarID, CustomerPK as UserID, AdjAmount, CartID, Deleted
    from CPE_RewardLimitPending_Output with (NOLOCK) 
    where WaitingACK=@LocationID;  

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PendingRewardLimitAdj] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PointsAdj.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_PointsAdj]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PointsAdj]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PointsAdj]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_PointsAdj] @LocationID int
AS 
    -- $Id: dbo.pa_CPE_TD_PointsAdj.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_PointsAdj_Output with (NoLock) where WaitingACK=@LocationID;

  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_PointsAdj_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  
  select ProgramID, CustomerPK as UserID, AdjAmount
    from CPE_PointsAdj_Output with (NOLOCK) 
    where WaitingACK=@LocationID;  

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PointsAdj] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PrefValueRemovalMVOutput.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PrefValueRemovalMVOutput]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PrefValueRemovalMVOutput]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_PrefValueRemovalMVOutput] @LocationID int  
AS   
-- $Id: dbo.pa_CPE_TD_PrefValueRemovalMVOutput.StoredProcedure.sql 120379 2018-02-08 18:56:50Z kn250067 $
-- Build Version: 7.3.1.138972
  Declare @NumRows int;  
  SET NOCOUNT ON;  
  set @NumRows=0;  
  select @NumRows=count(*) from CPE_PrefValueRemovalMV_Output with (NoLock) where WaitingACK=@LocationID;  
  IF @NumRows<500 BEGIN  
    --set rowcount 1000;
    update TOP (1000) CPE_PrefValueRemovalMV_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
	select TOP (1000) isnull(PreferenceID, 0) as PreferenceID, isnull(Value, '') as Value from CPE_PrefValueRemovalMV_Output with (NoLock) where WaitingACK=@LocationID 
  END  
  Else BEGIN
	select  isnull(PreferenceID, 0) as PreferenceID, isnull(Value, '') as Value from CPE_PrefValueRemovalMV_Output with (NoLock) where WaitingACK=@LocationID 
  END
  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PrefValueRemovalMVOutput] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PrefValueRemovalOutput.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PrefValueRemovalOutput]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PrefValueRemovalOutput]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_PrefValueRemovalOutput] @LocationID int  
AS   
-- $Id: dbo.pa_CPE_TD_PrefValueRemovalOutput.StoredProcedure.sql 120481 2018-02-13 03:41:40Z kn250067 $
-- Build Version: 7.3.1.138972
  Declare @NumRows int;  
  SET NOCOUNT ON;  
  set @NumRows=0;  
  select @NumRows=count(*) from CPE_PrefValueRemoval_Output with (NoLock) where WaitingACK=@LocationID;  
  if @NumRows<500 begin  
    --set rowcount 1000;
    update TOP (1000) CPE_PrefValueRemoval_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 

	select TOP (1000) isnull(PreferenceID, 0) as PreferenceID, isnull(Value, '') as Value from CPE_PrefValueRemoval_Output with (NoLock) where WaitingACK=@LocationID 
  end  
  Else Begin
	select  isnull(PreferenceID, 0) as PreferenceID, isnull(Value, '') as Value from CPE_PrefValueRemoval_Output with (NoLock) where WaitingACK=@LocationID
  End 
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PrefValueRemovalOutput] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PrefValuelMVOutputPurge.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PrefValueMVOutputPurge]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PrefValueMVOutputPurge]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_PrefValueMVOutputPurge] @LocationID int  
AS   
-- $Id: dbo.pa_CPE_TD_PrefValuelMVOutputPurge.StoredProcedure.sql 40687 2011-11-30 16:11:37Z mark $
-- Build Version: 7.3.1.138972
-- This stored procedure removes rows from the CPE_Prefs_Output table that are being sent from the CPE_PrefValueRemoval_Output table (the preference/value combination is being deleted)
  SET NOCOUNT ON;  

  delete from CPE_PrefsMV_Output with (RowLock)
    from CPE_PrefsMV_Output as PO Inner Join CPE_PrefValueRemovalMV_Output as PVRO with (NoLock) on PVRO.PreferenceID=PO.PreferenceID and PVRO.Value=PO.Value and PVRO.TargetLocationID=PO.TargetLocationID 
    where PVRO.WaitingACK=@LocationID;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PrefValueMVOutputPurge] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PrefValuelOutputPurge.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PrefValueOutputPurge]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PrefValueOutputPurge]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_PrefValueOutputPurge] @LocationID int  
AS   
-- $Id: dbo.pa_CPE_TD_PrefValuelOutputPurge.StoredProcedure.sql 40687 2011-11-30 16:11:37Z mark $
-- Build Version: 7.3.1.138972
-- This stored procedure removes rows from the CPE_Prefs_Output table that are being sent from the CPE_PrefValueRemoval_Output table (the preference/value combination is being deleted)
  SET NOCOUNT ON;  

  delete from CPE_Prefs_Output with (RowLock)
    from CPE_Prefs_Output as PO Inner Join CPE_PrefValueRemoval_Output as PVRO with (NoLock) on PVRO.PreferenceID=PO.PreferenceID and PVRO.Value=PO.Value and PVRO.TargetLocationID=PO.TargetLocationID
    where PVRO.WaitingACK=@LocationID;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PrefValueOutputPurge] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PrefsMVOutput_Active.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_PrefsMVOutput_Active.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PrefsMVOutput_Active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PrefsMVOutput_Active]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_PrefsMVOutput_Active] @LocationID int  
AS   
  Declare @NumRows int;  
  SET NOCOUNT ON;  
  set @NumRows=0;  
  select @NumRows=count(*) from CPE_PrefsMV_Output with (NoLock) where WaitingACK=@LocationID;  
  if @NumRows<500 begin  
      --set rowcount 1000
      Update TOP (1000) CPE_PrefsMV_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0;
      --set rowcount 0
  end  
  
  select  isnull(PO.CustomerPK, 0) as CustomerPK, isnull(PO.PreferenceID, 0) as PreferenceID, isnull(PO.Value, '') as Value   
  from CPE_PrefsMV_Output as PO with (NoLock) 
  where PO.WaitingACK=@LocationID and PO.Deleted=0;
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PrefsMVOutput_Active] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PrefsMVOutput_Deleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_PrefsMVOutput_Deleted.StoredProcedure.sql 78602 2014-05-19 10:34:16Z nk250133 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PrefsMVOutput_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PrefsMVOutput_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_PrefsMVOutput_Deleted] @LocationID int  
AS   
  SET NOCOUNT ON;  

  select  isnull(PO.CustomerPK, 0) as CustomerPK, isnull(PO.PreferenceID, 0) as PreferenceID, isnull(Value, '') as Value 
  from CPE_PrefsMV_Output as PO with (NoLock) 
  where PO.WaitingACK=@LocationID and PO.Deleted=1
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PrefsMVOutput_Deleted] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_PrefsOutput.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_PrefsOutput.StoredProcedure.sql 78602 2014-05-19 10:34:16Z nk250133 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_PrefsOutput]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_PrefsOutput]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_PrefsOutput] @LocationID int  
AS   
  Declare @NumRows int;  
  SET NOCOUNT ON;  
  set @NumRows=0;  
  select @NumRows=count(*) from CPE_Prefs_Output with (NoLock) where WaitingACK=@LocationID;  
  if @NumRows<500 begin  
      -- mark the oldest 1000 records to process
      With TempRecs as (select top 1000 * from CPE_Prefs_Output where TargetLocationID=@LocationID and WaitingACK=0 order by PrefValPKID)
      Update TempRecs with (RowLock) set WaitingACK=@LocationID;
  end  
  
  select  isnull(PO.CustomerPK, 0) as CustomerPK, isnull(PO.PreferenceID, 0) as PreferenceID, isnull(Value, '') as Value   
  from CPE_Prefs_Output as PO with (NoLock) where PO.WaitingACK=@LocationID 
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_PrefsOutput] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_ProcessACK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_ProcessACK.StoredProcedure.sql 120481 2018-02-13 03:41:40Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_ProcessACK]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_ProcessACK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_ProcessACK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TD_ProcessACK] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  Declare @MaxRowCount Int = 1800;
  declare @LocID bigint;
  --set rowcount 1800;
  set @ProcessRows=1;
  set @LocID=@LocationID

    while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from UE_ActiveCustomers_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_GM_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_SF_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_Customers_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_CardIDs_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_CustomerAttributes_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_STD_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_RA_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_PointsAdj_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (@MaxRowCount) from CPE_RD_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (@MaxRowCount) from CPE_CR_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (@MaxRowCount) from CPE_SV_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (@MaxRowCount) from CPE_SVUpdated_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_PointsPending_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_RewardDistributionPending_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_RewardLimitPending_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_PrefValueRemoval_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_PrefValueRemovalMV_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_Prefs_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (@MaxRowCount) from CPE_PrefsMV_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (@MaxRowCount) from CPE_CustomerRemoval_Output with (RowLock) where WaitingACK=@LocID OPTION (MAXDOP 1);
    if @@RowCount<@MaxRowCount set @ProcessRows=0;
  end
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_ProcessACK] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_RAOutput_Active.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_RAOutput_Active]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_RAOutput_Active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_RAOutput_Active]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_RAOutput_Active] @LocationID int
AS
    -- $Id: dbo.pa_CPE_TD_RAOutput_Active.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972

    SET NOCOUNT ON;
    declare @NumRows int;
    set @NumRows=0;
    select @NumRows=count(*) from CPE_RA_Output with (NoLock) where WaitingACK=@LocationID;
    if @NumRows < 500 begin
        --set rowcount 1000; 
        update TOP (1000) CPE_RA_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
    end

    --set rowcount 0;
    select 
                                                   LocalID, 
                                                   ServerSerial, 
                                                   RewardOptionID, 
        CustomerPK                              as UserID, 
                                                   QtyPurchased, 
                                                   TotalPrice, 
        convert(varchar, AccumulationDate, 20)  as AccumulationDate, 
        isnull(OverThreshold, 0)                as OverThreshold, 
        2                                       as WaitingACK       
    from CPE_RA_Output with (NOLOCK) 
    where Deleted = 0 and WaitingACK = @LocationID;

GO


GRANT EXECUTE ON [dbo].[pa_CPE_TD_RAOutput_Active] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_RAOutput_Deleted.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_RAOutput_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_RAOutput_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_RAOutput_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_RAOutput_Deleted] @LocationID int
AS 
    -- $Id: dbo.pa_CPE_TD_RAOutput_Deleted.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
    -- Build Version: 7.3.1.138972
    select 
        LocalID, 
        ServerSerial 
    from CPE_RA_Output with (NOLOCK) 
    where Deleted = 1 and WaitingACK = @LocationID;

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_RAOutput_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_RDOutput_Active.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_RDOutput_Active.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_RDOutput_Active]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_RDOutput_Active]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_RDOutput_Active]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_RDOutput_Active]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_RDOutput_Active] @LocationID int
AS
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_RD_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_RD_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  select LocalID, ServerSerial, IncentiveID, RewardOptionID, Phase, CustomerPK as UserID, convert(varchar, DistributionDate, 20) as DistributionDate, 2 as WaitingACK from CPE_RD_Output with (NOLOCK) where Deleted=0 and WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_RDOutput_Active] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_RDOutput_Deleted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_RDOutput_Deleted.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_RDOutput_Deleted]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_RDOutput_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_RDOutput_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_RDOutput_Deleted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_RDOutput_Deleted] @LocationID int
AS 
  select LocalID, ServerSerial from CPE_RD_Output with (NOLOCK) where Deleted=1 and WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_RDOutput_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_STDOutput.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_STDOutput.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_STDOutput]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_STDOutput]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_STDOutput]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_STDOutput]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_STDOutput] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_STD_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_STD_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  select CustomerPK as UserID, AdjAmount, LastUpdate from CPE_STD_Output with (NOLOCK) where WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_STDOutput] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_SVOutput_New.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_SVOutput_New]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_SVOutput_New]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_SVOutput_New]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_SVOutput_New] @LocationID int
AS 
    -- $Id: dbo.pa_CPE_TD_SVOutput_New.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows = 0;
  
  select @NumRows=count(*) from CPE_SV_Output with (NoLock) where WaitingACK = @LocationID;
  if @NumRows < 500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_SV_Output with (RowLock) set WaitingACK = @LocationID where TargetLocationID = @LocationID and WaitingACK = 0; 
  end
  
  --set rowcount 0;
  select 
    isnull(LocalID, 0)                                     as LocalID, 
    isnull(ServerSerial, 0)                                as ServerSerial, 
    isnull(SVProgramID, 0)                                 as SVProgramID, 
    isnull(OfferID, 0)                                     as IncentiveID, 
    isnull(CustomerPK, 0)                                  as CustomerPK, 
    isnull(QtyEarned, 0)                                   as QtyEarned, 
    isnull(QtyUsed, 0)                                     as QtyUsed, 
    isnull(Value, 0)                                       as Value, 
    isnull(convert(varchar, EarnedDate, 20), '1/1/1980')   as EarnedDate, 
    isnull(EarnedLocationID, 0)                            as EarnedLocationID, 
    isnull(convert(varchar, ExpireDate, 20), '1/1/1980')   as ExpireDate, 
    isnull(ExternalID, '0')                                as ExternalID
  from CPE_SV_Output with (NOLOCK) 
  where WaitingACK=@LocationID;

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_SVOutput_New] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_SVOutput_Transfer.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_SVOutput_Transfer]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_SVOutput_Transfer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_SVOutput_Transfer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_SVOutput_Transfer] @LocationID int
AS 

    -- $Id: dbo.pa_CPE_TD_SVOutput_Transfer.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  Declare @NumRows int;
  set nocount on;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_SVTransferred_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_SVTransferred_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  
  --set rowcount 0;
  
  select 
    isnull(LocalID, 0)          as LocalID, 
    isnull(ServerSerial, 0)     as ServerSerial, 
    isnull(NewCustomerPK, 0)    as CustomerPK  
  from CPE_SVTransferred_Output with (NOLOCK) 
  where WaitingACK=@LocationID;


GO


GRANT EXECUTE ON [dbo].[pa_CPE_TD_SVOutput_Transfer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_SVOutput_Used.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_SVOutput_Used]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_SVOutput_Used]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_SVOutput_Used]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TD_SVOutput_Used] @LocationID int
AS 

    -- $Id: dbo.pa_CPE_TD_SVOutput_Used.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_SVUpdated_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_SVUpdated_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end

  --set rowcount 0;
  select 
    isnull(LocalID, 0)                                     as LocalID, 
    isnull(ServerSerial, 0)                                as ServerSerial, 
    isnull(NewExternalID, '')                              as NewExternalID, 
    isnull(QtyUsed, 0)                                     as QtyUsed,  
    isnull(convert(varchar, LastUpdate, 20), '1/1/1980')   as LastUpdate
  from CPE_SVUpdated_Output with (NOLOCK) 
  where WaitingACK=@LocationID;

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TD_SVOutput_Used] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_StoredFranking_Issued.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_StoredFranking_Issued.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_StoredFranking_Issued]    Script Date: 3/7/2011 9:00:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_StoredFranking_Issued]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_StoredFranking_Issued]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_StoredFranking_Issued]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_StoredFranking_Issued] @LocationID int
AS 
  SET NOCOUNT ON;
  select customerpk as userid, rewardid as roid from CPE_SF_Output as SF with (NoLock) where status=2 and WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_StoredFranking_Issued] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TD_StoredFranking_New.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TD_StoredFranking_New.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TD_StoredFranking_New]    Script Date: 3/7/2011 9:00:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_StoredFranking_New]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TD_StoredFranking_New]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TD_StoredFranking_New]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TD_StoredFranking_New] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @NumRows int;
  set @NumRows=0;
  select @NumRows=count(*) from CPE_SF_Output with (NoLock) where WaitingACK=@LocationID;
  if @NumRows<500 begin
    --set rowcount 1000; 
    update TOP (1000) CPE_SF_Output with (RowLock) set WaitingACK=@LocationID where TargetLocationID=@LocationID and WaitingACK=0; 
  end
  --set rowcount 0;
  select customerpk as userid, priority, franking_text as output, deliverabletype, rewardid as roid, status, create_date, issue_date from CPE_SF_Output as SF with (NoLock) where status in (0,1) and WaitingACK=@LocationID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TD_StoredFranking_New] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_CR.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_CR.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_CR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_CR]  
AS   
  -- This procedure moves CustomerResponses records from CPE_UploadTemp_UR  
  SET NOCOUNT ON;  
  declare @NumRecs int;  
  select @NumRecs=count(*) from CPE_UploadTemp_UR with (NoLock) where WaitingACK=-5;  
  if @NumRecs=0 begin  
    --set rowcount 1800;   
    update TOP (1800) CPE_UploadTemp_UR with (RowLock) set WaitingACK=-5 where WaitingACK=0;  
    --set rowcount 0;  
  end  
  
  BEGIN TRY    
    BEGIN TRAN T1  
      -- Move records to CustomerResponses  
      insert into CustomerResponses with (RowLock) (LocalID, ServerSerial, LocationID, CustomerPK, IncentiveID, RewardOptionID, OnScreenAdID, Response, Deleted, LastUpdate, WaitingACK, LastServerID, LogixTransNum)   
        select Col1 as LocalID, Col2 as ServerSerial, Col9 as LocationID, Col3 as UserID, Col4 as IncentiveID, Col5 as RewardOptionID, Col6 as OnScreenAdID, Col7 as Response, 0 as Deleted,   
        getdate() as LastUpdate, 0 as WaitingACK, ServerSerial as LastServerID, Col8 as LogixTransNum from CPE_UploadTemp_UR with (NoLock) where WaitingACK=-5;  
  
      -- Move records to CPE_CR_Output  
      insert into CPE_CR_Output with (RowLock) (LocalID, ServerSerial, CustomerPK, IncentiveID, OnScreenAdID, RewardOptionID, Response, LastUpdate, WaitingACK, TargetLocationID)   
        select BT.Col1 as LocalID, BT.Col2 as ServerSerial, BT.Col3 as CustomerPK, Col4 as IncentiveID, Col6 as OnScreenAdID, Col5 as RewardOptionID, Col7 as Response,   
        getdate() as LastUpdate, 0 as WaitingACK, CL.LocationID as TargetLocationID   
        from CPE_UploadTemp_UR as BT with (NoLock) 
         Inner Join CustomerLocations as CL with (NoLock) on BT.Col3=CL.CustomerPK and BT.WaitingACK=-5
        where ( (BT.LocationID<>CL.LocationID) )
               
      Delete from CPE_UploadTemp_UR with (RowLock) where WaitingACK=-5;  
    COMMIT TRAN T1;  
  END TRY  
  BEGIN CATCH  
    IF @@TRANCOUNT > 0 BEGIN  
 ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_CR] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_CheckCount_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_CheckCount_GM.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_CheckCount_GM]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_GM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_GM]
AS 
  select count(*) as NumRecs from CPE_UploadTemp_GM with (NoLock);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_CheckCount_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_CheckCount_RD.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_CheckCount_RD.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_CheckCount_RD]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_RD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_RD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_RD]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_RD]
AS 
  select count(*) as NumRecs from CPE_UploadTemp_RD with (NoLock);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_CheckCount_RD] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_CheckCount_SF.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_CheckCount_SF.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_CheckCount_SF]    Script Date: 03/14/2011 09:39:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_SF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_SF]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_SF]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_SF]
AS 
  select count(*) as NumRecs from CPE_UploadTemp_SF with (NoLock);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_CheckCount_SF] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_CheckCount_UL.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_CheckCount_UL.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_CheckCount_UL]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_UL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_UL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_UL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_UL]
AS 
  select count(*) as NumRecs from CPE_UploadTemp_UL with (NoLock);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_CheckCount_UL] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_CheckCount_UR.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_CheckCount_UR.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_CheckCount_UR]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_UR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_UR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_UR]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_UR]
AS 
  select count(*) as NumRecs from CPE_UploadTemp_UR with (NoLock);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_CheckCount_UR] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_CheckCount_YB.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_CheckCount_YB.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_CheckCount_YB]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_YB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_YB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_CheckCount_YB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TUA_CheckCount_YB]
AS 
  select count(*) as NumRecs from CPE_UploadTemp_YB with (NoLock);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_CheckCount_YB] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_GM.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_GM]
AS 

-- $Id: dbo.pa_CPE_TUA_GM.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

-- This procedure moves group membership records from CPE_UploadTemp_GM
SET NOCOUNT ON;

CREATE TABLE #tempInputDups (
idcol int identity,
col3 varchar(255),
col4 varchar(255),
rcount int
)

declare @NumRecs int, @col3 varchar(255), @col4 varchar(255), @rcount int, @rownum int;
select @NumRecs=count(*) from CPE_UploadTemp_GM with (NoLock) where WaitingACK=-5;
if @NumRecs=0 begin
  --set rowcount 1800; 
  update TOP (1800) CPE_UploadTemp_GM with (RowLock) set WaitingACK=-5 where WaitingACK=0;
  --set rowcount 0;
end

--  RT 5175 indicates an error on duplicate key insert into dbo.GroupMembership with unique index 'IX_Unique_GM'
--    from the the 1st insert in the begin tran block below
--  The following code removes any duplicates from CPE_UploadTemp_GM before the attempted insert
DELETE c
FROM dbo.CPE_UploadTemp_GM c
INNER JOIN GroupMembership gm
 ON c.Col3 = gm.CustomerPK and c.Col4 = gm.CustomerGroupID and gm.Deleted = 0
WHERE c.TableNum = '3' and c.WaitingACK = -5

--  RT5175 also indicates that there are duplicate rows in the input table CPE_UploadTemp_GM
--  Now to find those duplicate entries and delete all except the last one
--  this is a psuedo-cursor ... in the past i have found this to be less resource intensive than a cursor
truncate table #tempInputDups
insert into #tempInputDups (col3, col4, rcount)
select col3, col4, count(*)
from CPE_UploadTemp_GM with (NoLock) 
where TableNum='3' 
  and CPE_UploadTemp_GM.WaitingACK=-5
group by col3, col4;

select @rownum = min(idcol) from #tempInputDups
while @rownum IS NOT NULL
BEGIN
   SELECT @col3 = col3, 
          @col4 = col4, 
          @rcount = rcount 
   FROM #tempInputDups
   WHERE idcol = @rownum
   
   DELETE TOP (@rcount - 1)
   FROM CPE_UploadTemp_GM 
   WHERE col3 = @col3
     AND col4 = @col4
     AND CPE_UploadTemp_GM.TableNum='3' 
     AND CPE_UploadTemp_GM.WaitingACK=-5
     
   SELECT @rownum = min(idcol) from #tempInputDups where idcol > @rownum
END
--  END of RT 5157 code

--  process the remaining CPE_UploadTemp_GM
  BEGIN TRY		
    BEGIN TRAN T1
      -- Move record into Group membership table 
      insert into GroupMembership with (RowLock) 
         (CustomerPK, CustomerGroupID, Manual, LogixTransNum, Deleted, LastUpdate, CPEStatusFlag, POSTimeStamp, UEStatusFlag) 
      select Col3, Col4, Col5, Col6, 0 as Deleted, getdate() as LastUpdate, -5 as CPEStatusFlag, POSTimeStamp, -5 as UEStatusFlag 
      from CPE_UploadTemp_GM GM with (NoLock) 
      where TableNum='3' 
        and GM.WaitingACK=-5;
  

      -- Move group membership records to CPE_GM_Output
      insert into CPE_GM_Output with (RowLock) 
         (CustomerPK, CustomerGroupID, Manual, Deleted, WaitingACK, TargetLocationID, POSTimeStamp) 
      select BT.Col3 as CustomerPK, BT.Col4 as CustomerGroupID, BT.Col5 as Manual, 0 as Deleted, 0 as WaitingACK, CL.LocationID as TargetLocationID, POSTimeStamp
      from CPE_UploadTemp_GM as BT (NoLock) 
         Inner Join CustomerLocations as CL with (NoLock) 
            on BT.Col3=CL.CustomerPK and BT.TableNum=3 and BT.WaitingACK=-5
        where ( (BT.LocationID<>CL.LocationID) )
      Delete from CPE_UploadTemp_GM with (RowLock) where WaitingACK=-5;
    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 
    BEGIN
         ROLLBACK TRAN T1;
    END
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_PointsAdj.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_PointsAdj]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_PointsAdj]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TUA_PointsAdj]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- @ThreadID MUST be >= 0
CREATE PROCEDURE [dbo].[pa_CPE_TUA_PointsAdj] @ThreadID int, @CmInstalled bit, @RunAgain int Output  
AS      
  -- $Id: dbo.pa_CPE_TUA_PointsAdj.StoredProcedure.sql 120247 2018-02-06 02:57:26Z kn250067 $
  -- Build Version: 7.3.1.138972
  -- This procedure moves PointsAdj records from CPE_UploadTemp_PA
  declare @NumRecs int;
  set nocount on;
  declare @StartTime datetime;
  set @RunAgain = 1;
  set @StartTime = getdate();

  IF @ThreadID < 0
  BEGIN
      RAISERROR( N'@ThreadID must be greater than or equal to zero: %d', 18, 1, @ThreadID)
      RETURN
  END

  declare @thread_WaitingACK int  
  declare @TopCount int
  declare @low_pkid bigint, @high_pkid bigint
  Declare @CleanupQuery nvarchar(1000)
  
  set @thread_WaitingACK = -100 - @ThreadID  
  set @thread_WaitingACK = -100 - @ThreadID
  set @TopCount = 1800
  
 
   
  --set @CleanupQuery = 'Update CPE_UploadTemp_PA with (RowLock) Set WaitingACK=-33 where WaitingACK=' + CAST(@thread_WaitingACK as nvarchar(10))
  -- The line below replace the line above after a new table CPE_PointHistoryMovementTemp was created for pointhistorymovement.
  /* Commented out 20120311 bin: replaced cleaupquery build at later part after dropping index on waiting ack
  set @CleanupQuery = 'INSERT INTO CPE_PointHistoryMovementTemp (ProgramID, CustomerPK, Amount, EarnedUnderROID,EarnedLocationID, ServerSerial, CustomerTypeID, '+
						 'LogixTransNum, SourceTypeID, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp) '+   
					  'SELECT Col1 as ProgramID, Col2 as CustomerPK, Col3 as Amount, Col4 as EarnedUnderROID, Col8 as EarnedLocationID, ServerSerial, '+ 
					  'Col5 as CustomerTypeID, Col6 as LogixTransNum, Col7 as SourceTypeID,  Col9 as PresentedCustomerID, Col10 as PresentedCardTypeID, '+
					  'Col11 as ResolvedCustomerID, Col12 as HHID, Replayed, ReplayedDate, POSTimeStamp '+
					  'FROM CPE_UploadTemp_PA WHERE waitingack = '+ CAST(@thread_WaitingACK as nvarchar(10)) + '; DELETE FROM CPE_UploadTemp_PA WHERE waitingack = ' + CAST(@thread_WaitingACK as nvarchar(10))
  */
  
  CREATE TABLE #PointsAdjTemp (
    [PKID]					bigint Not NULL, 
    [ProgramID]             bigint NULL, 
    [CustomerPK]            bigint NULL, 
    [Amount]                decimal(12,3) NULL, 
    [EarnedUnderROID]       int NULL, 
    [EarnedUnderCMOfferID]  bigint NULL, 
    [CustomerTypeID]        int NULL, 
    [LogixTransNum]         char(36) NULL, 
    [ServerSerial]          int NULL, 
    [LocationID]            bigint NULL, 
    [SourceTypeID]          int NULL, 
    [EarnedLocationID]      bigint NULL, 
    [PresentedCustomerID]   nvarchar(400) NULL, 
    [PresentedCardTypeID]   int NULL, 
    [ResolvedCustomerID]    nvarchar(400) NULL, 
    [HHID]                  nvarchar(400) NULL,
    [Replayed]              bit NULL,
    [ReplayedDate]          datetime NULL,
    [POSTimeStamp]          datetime NULL,
    [IPLSeqNum]             int NULL,
    [AdjustmentSourceID]	int NULL,
    [AdjustmentTypeID]		smallint NULL,
    [AdjustmentReasonID]	int NULL,
    [AdjustmentReasonText]	nvarchar(50) NULL
    );    
  
  CREATE CLUSTERED index cidx_PointsAdjTemp on #PointsAdjTemp(ProgramID,CustomerPK) 
    
  -- run for up to 5 minutes    
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin    
    /*
    /*code when waitingack index is used.*/
    select @NumRecs = count(*) from CPE_UploadTemp_PA with (NoLock) where WaitingACK = @thread_WaitingACK;    
    if @NumRecs = 0 begin    
      --set rowcount 1800;     
      Update TOP (1800) CPE_UploadTemp_PA with (RowLock) set WaitingACK = @thread_WaitingACK where WaitingACK = 0;    
      --set rowcount 0;    
    end    
	*/
	Update Top(@TopCount) CPE_UploadTemp_PA Set WaitingACK = @thread_WaitingACK where WaitingACK = 0 or WaitingACK = @thread_WaitingACK;    
	Set @TopCount = @@RowCount
	declare @rowsaffected int
    Insert into #PointsAdjTemp 
        (PKID, ProgramID, CustomerPK, Amount, EarnedUnderROID, CustomerTypeID, LogixTransNum, ServerSerial, LocationID, SourceTypeID, EarnedLocationID, PresentedCustomerID, PresentedCardTypeID, 
            ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp, IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText)    
      select top(@TopCount)
								   PKID,	 
            Col1                as ProgramID, 
            Col2                as CustomerPK, 
            isnull(Col3, 0)     as Amount, 
            isnull(Col4, 0)     as EarnedUnderROID, 
            isnull(Col5, 0)     as CustomerTypeID, 
            isnull(Col6, 0)     as LogixTransNum, 
                                   ServerSerial, 
                                   LocationID, 
            isnull(Col7, 0)     as SourceTypeID, 
            isnull(Col8, 0)     as EarnedLocationID, 
            isnull(Col9, '')    as PresentedCustomerID, 
            isnull(Col10, 0)    as PresentedCardTypeID, 
            isnull(Col11, '')   as ResolvedCustomerID, 
            isnull(Col12, '')   as HHID,
                                   Replayed,
                                   ReplayedDate,
                                   POSTimeStamp,
                                   IPLSeqNum,
                                   AdjustmentSourceID,
                                   AdjustmentTypeID,
                                   AdjustmentReasonID,
                                   AdjustmentReasonText
      from CPE_UploadTemp_PA with (NoLock) 
      where WaitingACK = @thread_WaitingACK
      order by PKID asc;

	set @rowsaffected = @@ROWCOUNT

    if ( @rowsaffected > 100 ) begin    
      set @RunAgain = 1;    
    end    
    else begin      
      set @RunAgain = 0;    
    end    
    
    /* code to use pkid, no index on waitingack */
    If (@rowsaffected > 0)
	Begin
			select @low_pkid=min(pkid), @high_pkid=max(pkid) from #PointsAdjTemp;
			
			set @CleanupQuery = 'INSERT INTO CPE_PointHistoryMovementTemp (ProgramID, CustomerPK, Amount, EarnedUnderROID,EarnedLocationID, ServerSerial, CustomerTypeID, '+
								 'LogixTransNum, SourceTypeID, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText) '+   
							  'SELECT Col1 as ProgramID, Col2 as CustomerPK, Col3 as Amount, Col4 as EarnedUnderROID, Col8 as EarnedLocationID, ServerSerial, '+ 
							  'Col5 as CustomerTypeID, Col6 as LogixTransNum, Col7 as SourceTypeID,  Col9 as PresentedCustomerID, Col10 as PresentedCardTypeID, '+
							  'Col11 as ResolvedCustomerID, Col12 as HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText '+
							  'FROM CPE_UploadTemp_PA WHERE WaitingACK='+CAST(@thread_WaitingACK as nvarchar(10))+
							  ' AND PKID>='+ CAST(@low_pkid as nvarchar(20)) + ' AND PKID<='+ CAST(@high_pkid as nvarchar(20))+
							  ' ; DELETE FROM CPE_UploadTemp_PA WHERE WaitingACK='+CAST(@thread_WaitingACK as nvarchar(10))+' AND PKID>='+ CAST(@low_pkid as nvarchar(20)) + ' AND PKID<='+ CAST(@high_pkid as nvarchar(20))
			
			exec pa_PointsAdj_CrossShop @CMInstalled, @CleanupQuery
			-- exec dbo.sp_executesql @statement = @CleanupQuery
			TRUNCATE TABLE #PointsAdjTemp
	End
  end  -- while    

  drop table #PointsAdjTemp; 
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_PointsAdj] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_PointsPending.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_PointsPending]    Script Date: 10/18/2015 21:37:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_PointsPending]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TUA_PointsPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_PointsPending] 	
     @ProgramPromoVarTable ProgramPromoVarTableType READONLY
   , @RunAgain int Output  
AS      
   -- This procedure moves PointsPending records from CPE_UploadTemp_PointsPending
   declare @NumRecs int;  
   declare @NumAffected int;  
   SET NOCOUNT ON;  
   set @RunAgain=1;  
   set @NumAffected=0;  
  
   select @NumRecs=count(*) from CPE_UploadTemp_PointsPending with (NoLock) where WaitingACK=-5;  
   if @NumRecs=0 begin  
      --set rowcount 1800;   
      Update TOP (1800) CPE_UploadTemp_PointsPending with (RowLock) set WaitingACK=-5 where WaitingACK=0;   
      set @NumAffected=@@RowCount;  
      if @NumAffected=0 begin  
         set @RunAgain=0;  
      end  
      --set rowcount 0;  
   end

   insert into PointsPending (CustomerPK
                            , ProgramID
                            , PromoVarID
                            , EarnedAmount
                            , RedeemedAmount
                            , CartID
                            , ExtLocationCode
                            , Deleted
                            , LastUpdate
                            , LogixTransNum
                            , POSTimeStamp
                            , ServerSerial
                            , LocationID
                            , WaitingACK) 
                       select TempPP.CustomerPK
                            , TempPP.ProgramID
                            , PPVT.PromoVarID
                            , TempPP.EarnedAmount
                            , TempPP.RedeemedAmount
                            , TempPP.CartID
                            , TempPP.ExtLocationCode
                            , 0
                            , GetDate()
                            , TempPP.LogixTransNum
                            , TempPP.POSTimeStamp
                            , TempPP.ServerSerial
                            , TempPP.LocationID
                            , 0
              From CPE_UploadTemp_PointsPending as TempPP Left Join @ProgramPromoVarTable as PPVT on TempPP.ProgramID=PPVT.ProgramID where TempPP.WaitingACK=-5;
    
   update Customers with (RowLocK) set UpdateCount=UpdateCount+1 where CustomerPK in   
      (select distinct CustomerPK from CPE_UploadTemp_PointsPending as TempPP with (NoLock) where TempPP.WaitingACK=-5);  
  
   delete from CPE_UploadTemp_PointsPending with (RowLock) where WaitingACK=-5;  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_PointsPending] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_RA_ND_New_Deleted.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_RA_ND_New_Deleted]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_RA_ND_New_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_RA_ND_New_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_RA_ND_New_Deleted] @RunAgain int Output  
AS      
  -- $Id: dbo.pa_CPE_TUA_RA_ND_New_Deleted.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
  -- Build Version: 7.3.1.138972
  -- This procedure moves new (deleted) RewardAccumulation records from CPE_UploadTemp_RA to LogixWH.CPE_RA_Archive    
  SET NOCOUNT ON;    
  declare @NumRecs int;    
  declare @StartTime datetime;    
  set @RunAgain=1;    
  set @StartTime=getdate();    
    
  -- run for up to 5 minutes    
  -- everything processed here should be Operation=2 (Delete exsiting records)    
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin    

    select @NumRecs=count(*) from CPE_UploadTemp_RA_ND with (NoLock) where WaitingACK=-5;    

    if @NumRecs=0 begin    
      --set rowcount 1800;     
      update TOP (1800) CPE_UploadTemp_RA_ND with (RowLock) set WaitingACK=-5 where WaitingACK=0;     
      if (@@ROWCOUNT>100) begin    
        set @RunAgain=1;    
      end    
      else begin    
        set @RunAgain=0;    
      end    
      --set rowcount 0;    
    end    
    
    BEGIN TRY      
      BEGIN TRAN T1    
    
        -- Move new (deleted) records to CPE_RA_Archive    
        insert into CPE_RA_Archive with (RowLock) 
            ( LocalID, ServerSerial, LocationID, RewardOptionID, CustomerPK, PurchCustomerPK, QtyPurchased, TotalPrice, AccumulationDate, LogixTransNumEarned, LogixTransNumConsumed, 
                PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Deleted, LastUpdate, LastServerID, Replayed, ReplayedDate,POSTimeStamp )  
            select 
                Col1, Col2, Col10, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col9, Col11, Col12, Col13, Col14, 1 as Deleted, getdate() as LastUpdate, ServerSerial as LastServerID, Replayed, ReplayedDate, POSTimeStamp
            from CPE_UploadTemp_RA_ND with (NoLock) 
            where WaitingACK = -5;    
    
        Delete from CPE_UploadTemp_RA_ND with (RowLock) where WaitingACK = -5;    

      COMMIT TRAN T1;    

    END TRY    
    BEGIN CATCH    
      IF @@TRANCOUNT > 0 BEGIN      
        ROLLBACK TRAN T1;    
      END    
        DECLARE @ErrorMessage NVARCHAR(4000);    
        DECLARE @ErrorSeverity INT;    
        DECLARE @ErrorState INT;    
        SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();    
        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
    END CATCH    
  end -- while   

GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_RA_ND_New_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_RA_N_New.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_RA_N_New]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_RA_N_New]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_RA_N_New]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_RA_N_New] @RunAgain int Output  
AS     
  -- $Id: dbo.pa_CPE_TUA_RA_N_New.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
  -- Build Version: 7.3.1.138972
  -- This procedure moves new (non-deleted) RewardAccumulation records from CPE_UploadTemp_RA    
  SET NOCOUNT ON;    
  declare @NumRecs int;    
  declare @StartTime datetime;    
  set @RunAgain=1;    
  set @StartTime=getdate();    
    
  CREATE TABLE #RATempNew (
    [TableNum] int NULL, 
    [Operation] int NULL,  
    [Col1] varchar(255) NULL, 
    [Col2] varchar(255) NULL, 
    [Col3] varchar(255) NULL, 
    [Col4] varchar(255) NULL, 
    [Col5] varchar(255) NULL, 
    [Col6] varchar(255) NULL, 
    [Col7] varchar(255) NULL, 
    [Col8] varchar(255) NULL, 
    [Col9] varchar(255) NULL, 
    [Col10] varchar(255) NULL, 
    [Col11] varchar(255) NULL, 
    [Col12] nvarchar(400) NULL, --PresentedCustomerID
    [Col13] nvarchar(255) NULL, 
    [Col14] varchar(400) NULL, --ResolvedCustomerID
    [Col15] nvarchar(400) NULL,--HHID
    [POSTimeStamp] datetime, 
    [ServerSerial] int NULL, 
    [LocationID] bigint NULL,
    [Replayed] bit NULL,
    [ReplayedDate] datetime NULL,
    [IPLSeqNum] int NULL
    );    
    
  -- run for up to 5 minutes    
  -- everything processed here should be Operation=1 (newly created records)    
  while @RunAgain = 1 and @StartTime > dateadd( mi, -5, getdate() ) 
  begin
  
    select @NumRecs=count(*) from CPE_UploadTemp_RA_N with (NoLock) where WaitingACK=-5;    
    if @NumRecs=0 begin    
      --set rowcount 1800;     
      update TOP (1800) CPE_UploadTemp_RA_N with (RowLock) set WaitingACK=-5 where WaitingACK=0;     
      --set rowcount 0;    
    end    
  
    insert into #RATempNew ( TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, POSTimeStamp, ServerSerial, LocationID, Replayed, ReplayedDate, IPLSeqNum)    
      select 
                             TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, POSTimeStamp, ServerSerial, LocationID, Replayed, ReplayedDate, IPLSeqNum
        from CPE_UploadTemp_RA_N with (NoLock, index(IX_CPE_UploadTemp_RA_N_WaitingACK)) 
        where WaitingACK=-5    
  
    if (@@ROWCOUNT>100) begin    
      set @RunAgain=1;    
    end    
    else begin    
      set @RunAgain=0;    
    end    
    
    BEGIN TRY      
      BEGIN TRAN T1    
    
        -- Move new (non-deleted) records to CPE_RewardAccumulation    
        insert into CPE_RewardAccumulation with (RowLock) 
            (LocalID, ServerSerial, LocationID, RewardOptionID, CustomerPK, PurchCustomerPK, QtyPurchased, TotalPrice, AccumulationDate, LogixTransNumEarned, LogixTransNumConsumed, 
                OverThreshold, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Deleted, LastUpdate, WaitingACK, LastServerID, Replayed, ReplayedDate, POSTimeStamp)     
          select 
            Col1, 
            Col2, 
            Col10, 
            Col3, 
            Col4, 
            Col5, 
            Col6, 
            Col7, 
            Col8, 
            Col9, 
            0                as LogixTransNumConsumed, 
            isnull(Col11, 0) as OverThreshold, 
            Col12            as PresentedCustomerID, 
            Col13            as PresentedCardTypeID, 
            Col14            as ResolvedCustomerID, 
            Col15            as HHID, 
            0                as Deleted, 
            getdate()        as LastUpdate, 
            -5               as WaitingACK, 
            ServerSerial     as LastServerID,
            Replayed,
            ReplayedDate, 
            POSTimeStamp
          from #RATempNew with (NoLock);    
    
        -- Move new (non-deleted) records to CPE_RA_Output    
        insert into CPE_RA_Output with (RowLock) 
            (LocalID, ServerSerial, CustomerPK, RewardOptionID, QtyPurchased, TotalPrice, AccumulationDate, LogixTransNumEarned, OverThreshold, Deleted, LastUpdate, WaitingACK, TargetLocationID, Replayed, ReplayedDate,POSTimeStamp )     
          select 
            BT.Col1             as LocalID, 
            BT.Col2             as ServerSerial, 
            BT.Col4             as CustomerPK, 
            BT.Col3             as RewardOptionID, 
            BT.Col6             as QtyPurchased, 
            BT.Col7             as TotalPrice,  
            BT.Col8             as AccumulationDate, 
            BT.Col9             as LogixTransNumEarned, 
            isnull(BT.Col11, 0) as OverThreshold,    
            0                   as Deleted, 
            getdate()           as LastUpdate, 
            0                   as WaitingACK, 
            CL.LocationID       as TargetLocationID,
            Replayed,
            ReplayedDate,
            POSTimeStamp
          from #RATempNew as BT with (NoLock) 
            Inner Join CustomerLocations as CL with (NoLock) 
              on BT.Col4 = CL.CustomerPK 
             where ( (BT.LocationID<>CL.LocationID) )
    
        Delete from CPE_UploadTemp_RA_N with (RowLock) where WaitingACK=-5;    
        Truncate Table #RATempNew;    
    
      COMMIT TRAN T1;    
    END TRY    
    BEGIN CATCH    
      IF @@TRANCOUNT > 0 BEGIN    
        ROLLBACK TRAN T1;    
      END    
      DECLARE @ErrorMessage NVARCHAR(4000);    
      DECLARE @ErrorSeverity INT;    
      DECLARE @ErrorState INT;    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();    
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
    END CATCH    
  
  end -- while    
  drop table #RATempNew;    

GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_RA_N_New] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_RA_OD_Old_Deleted.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_RA_OD_Old_Deleted]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_RA_OD_Old_Deleted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_RA_OD_Old_Deleted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_RA_OD_Old_Deleted] @RunAgain int Output  
AS      
  -- $Id: dbo.pa_CPE_TUA_RA_OD_Old_Deleted.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
  -- Build Version: 7.3.1.138972
  -- This procedure deletes old RewardAccumulation records from CPE_RewardAccumulation     
  -- and creates cross shopping records in CPE_UploadTemp_RA    
  SET NOCOUNT ON;    
  declare @NumRecs int;    
  declare @StartTime datetime;    
  set @RunAgain=1;    
  set @StartTime=getdate();    
    
  CREATE TABLE #RATemp (
    [TableNum] int NULL, 
    [Operation] int NULL,  
    [Col1] varchar(255) NULL, 
    [Col2] varchar(255) NULL, 
    [Col3] varchar(255) NULL, 
    [Col4] varchar(255) NULL, 
    [Col5] varchar(255) NULL, 
    [Col6] varchar(255) NULL, 
    [Col7] varchar(255) NULL, 
    [Col8] varchar(255) NULL, 
    [Col9] varchar(255) NULL, 
    [Col10] varchar(255) NULL, 
    [Col11] varchar(255) NULL, 
    [Col12] nvarchar(400) NULL, 
    [Col13] nvarchar(255) NULL, 
    [Col14] varchar(400) NULL, 
    [Col15] nvarchar(400) NULL, 
    [ServerSerial] int NULL, 
    [LocationID] bigint NULL,
    [Replayed] bit NULL,
    [ReplayedDate] datetime NULL,
    [POSTimeStamp] datetime NULL, 
    [IPLSeqNum] int NULL
   );    
    
  -- run for up to 5 minutes    
  -- everything processed here should be Operation=2 (Delete exsiting records)    
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin    

    select @NumRecs=count(*) from CPE_UploadTemp_RA_OD with (NoLock) where WaitingACK=-5;    
    if @NumRecs=0 begin    
      --set rowcount 1800;     
      update TOP (1800) CPE_UploadTemp_RA_OD with (RowLock) set WaitingACK=-5 where WaitingACK=0;     
      --set rowcount 0;    
    end    

    insert into #RATemp (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, ServerSerial, LocationID, Replayed, ReplayedDate, POSTimeStamp, IPLSeqNum)
      select TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, ServerSerial, LocationID, Replayed, ReplayedDate, POSTimeStamp, IPLSeqNum
      from CPE_UploadTemp_RA_OD with (NoLock, index(IX_CPE_UploadTemp_RA_OD_WaitingACK)) 
      where WaitingACK = -5    
      
    if (@@ROWCOUNT>100) begin    
      set @RunAgain=1;    
    end    
    else begin    
      set @RunAgain=0;    
    end    
    
    BEGIN TRY      
      BEGIN TRAN T1    
    
        update CPE_RewardAccumulation with (RowLock) 
            set 
                Deleted=1, 
                WaitingACK=-1, 
                LogixTransNumConsumed=UTRA.Col10, 
                Replayed = (isnull( UTRA.Replayed, 0 ) | isnull( RA.Replayed, 0 )),
                ReplayedDate = case isnull( UTRA.Replayed, 0 ) when 0 then RA.ReplayedDate else UTRA.ReplayedDate end                
          from CPE_RewardAccumulation as RA with (RowLock) Inner Join #RATemp as UTRA with (NoLock) on UTRA.Col1=RA.LocalID and UTRA.Col2=RA.ServerSerial;    
              
      
        -- Move old (deleted) records to CPE_RA_Output    
        insert into CPE_RA_Output with (RowLock) (LocalID, ServerSerial, Deleted, WaitingACK, TargetLocationID, Replayed, ReplayedDate, POSTimeStamp )     
          select BT.Col1 as LocalID, BT.Col2 as ServerSerial, 1 as Deleted, 0 as WaitingACK, CL.LocationID as TargetLocationID, BT.Replayed, BT.ReplayedDate, BT.POSTimeStamp
          from #RATemp as BT with (NoLock) 
            Inner Join CustomerLocations as CL with (NoLock) 
              on BT.Col3=CL.CustomerPK 
		where ( (BT.LocationID<>CL.LocationID) )
        -- Insert the deleted records in CPE_RA_Archive    
        insert into CPE_RA_Archive with (RowLock) 
            (LocalID, ServerSerial, LocationID, RewardOptionID, CustomerPK, PurchCustomerPK, QtyPurchased, TotalPrice, AccumulationDate, LogixTransNumEarned, 
             LogixTransNumConsumed, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Deleted, LastUpdate, LastServerID, Replayed, ReplayedDate, POSTimeStamp )  
          select 
            Col1, Col2, Col11, Col4, Col3, Col5, Col6, Col7, Col8, Col9, Col10, Col12, Col13, Col14, Col15, 1 as Deleted, getdate() as LastUpdate, ServerSerial as LastServerID, Replayed, ReplayedDate, POSTimeStamp 
          from #RATemp with (NoLock);    
    
        Delete from CPE_UploadTemp_RA_OD with (RowLock) where WaitingACK = -5;    
        Truncate Table #RATemp;    
    
      COMMIT TRAN T1;    
    END TRY    
    BEGIN CATCH    
      IF @@TRANCOUNT > 0 BEGIN    
   ROLLBACK TRAN T1;    
      END    
      DECLARE @ErrorMessage NVARCHAR(4000);    
      DECLARE @ErrorSeverity INT;    
      DECLARE @ErrorState INT;    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();    
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
    END CATCH    
    
  END  -- while    
  drop table #RATemp;    

GO


GRANT EXECUTE ON [dbo].[pa_CPE_TUA_RA_OD_Old_Deleted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_RD.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_RD.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_RD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_RD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_RD]  
AS       
  -- This procedure moves RewardDistribution records from UploadTemp_RD    
  SET NOCOUNT ON;    
  declare @NumRecs int;    
  select @NumRecs=count(*) from CPE_UploadTemp_RD with (NoLock) where WaitingACK=-5;    
  if @NumRecs=0 begin    
    --set rowcount 1800;     
    update TOP (1800) CPE_UploadTemp_RD with (RowLock) set WaitingACK=-5;     
    --set rowcount 0;    
  end    
    
  -- Move records to CPE_RewardDistribution    
  insert into CPE_RewardDistribution with (RowLock) (LocalID, ServerSerial, LocationID, IncentiveID, RewardOptionID, Phase, CustomerPK, DistributionDate, LogixTransNum, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Deleted, LastUpdate, WaitingACK, LastServerID, POSTimeStamp)     
    select Col1, Col2, Col9, Col3, Col4, Col5, Col6, Col7, Col8, Col10, Col11, Col12, Col13, 0 as Deleted, getdate() as LastUpdate, -5 as WaitingACK, ServerSerial as LastServerID, POSTimeStamp from CPE_UploadTemp_RD with (NoLock)     
    where WaitingACK=-5;    
    
  -- Move records to CPE_RD_Output    
  insert into CPE_RD_Output with (RowLock) (LocalID, ServerSerial, IncentiveID, RewardOptionID, Phase, CustomerPK, DistributionDate, Deleted, LastUpdate, WaitingACK, TargetLocationID, POSTimeStamp)     
    select BT.Col1 as LocalID, BT.Col2 as ServerSerial, BT.Col3 as IncentiveID, BT.Col4 as RewardOptionID, BT.Col5 as Phase, BT.Col6 as CustomerPK, BT.Col7 as DistributionDate,     
    0 as Deleted, getdate() as LastUpdate, 0 as WaitingACK, CL.LocationID as TargetLocationID, BT.POSTimeStamp as POSTimeStamp     
    from CPE_UploadTemp_RD as BT with (NoLock) 
      Inner Join CustomerLocations as CL with (NoLock) 
        on BT.Col6=CL.CustomerPK and BT.WaitingACK=-5
     where ( (BT.LocationID<>CL.LocationID) )
    
  Delete from CPE_UploadTemp_RD with (RowLock) where WaitingACK=-5;    
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_RD] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_RewardDistributionPending.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_RewardDistributionPending]    Script Date: 11/15/2016 21:37:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_RewardDistributionPending]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TUA_RewardDistributionPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_RewardDistributionPending] 	
     @IncentivePromoVarTable IncentivePromoVarTableType READONLY
   , @RunAgain int Output  
AS      
   -- This procedure moves RewardDistributionPending records from CPE_UploadTemp_RewardDistributionPending
   declare @NumRecs int;  
   declare @NumAffected int;  
   SET NOCOUNT ON;  
   set @RunAgain=1;  
   set @NumAffected=0;  
  
   select @NumRecs=count(*) from CPE_UploadTemp_RewardDistributionPending with (NoLock) where WaitingACK=-5;  
   if @NumRecs=0 begin  
      --set rowcount 1800;   
      Update TOP (1800) CPE_UploadTemp_RewardDistributionPending with (RowLock) set WaitingACK=-5 where WaitingACK=0;   
      set @NumAffected=@@RowCount;  
      if @NumAffected=0 begin  
         set @RunAgain=0;  
      end  
      --set rowcount 0;  
   end

   insert into CPE_RewardDistributionPending (CustomerPK
                                            , IncentiveID
                                            , RewardOptionID
                                            , CartID
                                            , ExtLocationCode
                                            , Deleted
                                            , LastUpdate
                                            , LogixTransNum
                                            , POSTimeStamp
                                            , ServerSerial
                                            , LocationID
                                            , WaitingACK) 
                                       select TempRDP.CustomerPK
                                            , TempRDP.IncentiveID
                                            , TempRDP.RewardOptionID
                                            , TempRDP.CartID
                                            , TempRDP.ExtLocationCode
                                            , 0
                                            , GetDate()
                                            , TempRDP.LogixTransNum
                                            , TempRDP.POSTimeStamp
                                            , TempRDP.ServerSerial
                                            , TempRDP.LocationID
                                            , 0
              From CPE_UploadTemp_RewardDistributionPending as TempRDP where TempRDP.WaitingACK=-5;

   insert into DistributionVariablesPending (CustomerPK
                                           , PromoVarID
                                           , Amount
                                           , CartID
                                           , ExtLocationCode
                                           , Deleted
                                           , LastUpdate
                                           , LogixTransNum
                                           , POSTimeStamp
                                           , ServerSerial
                                           , LocationID
                                           , WaitingACK)  
                                      select TempRDP.CustomerPK
                                           , IPVT.PromoVarID
                                           , 1
                                           , TempRDP.CartID
                                           , TempRDP.ExtLocationCode
                                           , 0
                                           , GetDate()
                                           , TempRDP.LogixTransNum
                                           , TempRDP.POSTimeStamp
                                           , TempRDP.ServerSerial
                                           , TempRDP.LocationID
                                           , 0
              From CPE_UploadTemp_RewardDistributionPending as TempRDP Left Join @IncentivePromoVarTable as IPVT on TempRDP.IncentiveID=IPVT.IncentiveID where TempRDP.WaitingACK=-5;
              
   update Customers with (RowLocK) set UpdateCount=UpdateCount+1 where CustomerPK in   
      (select distinct CustomerPK from CPE_UploadTemp_RewardDistributionPending as TempRDP with (NoLock) where TempRDP.WaitingACK=-5);  
  
   delete from CPE_UploadTemp_RewardDistributionPending with (RowLock) where WaitingACK=-5;  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_RewardDistributionPending] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_RewardLimitPending.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_RewardLimitPending]    Script Date: 11/15/2016 21:37:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_RewardLimitPending]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CPE_TUA_RewardLimitPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_RewardLimitPending] 	
   @RunAgain int Output  
AS      
   -- This procedure moves RewardLimitPending records from CPE_UploadTemp_RewardLimitPending
   declare @NumRecs int;  
   declare @NumAffected int;  
   SET NOCOUNT ON;  
   set @RunAgain=1;  
   set @NumAffected=0;  
  
   select @NumRecs=count(*) from CPE_UploadTemp_RewardLimitPending with (NoLock) where WaitingACK=-5;  
   if @NumRecs=0 begin  
      --set rowcount 1800;   
      Update TOP (1800) CPE_UploadTemp_RewardLimitPending with (RowLock) set WaitingACK=-5 where WaitingACK=0;   
      set @NumAffected=@@RowCount;  
      if @NumAffected=0 begin  
         set @RunAgain=0;  
      end  
      --set rowcount 0;  
   end

   insert into RewardLimitVariablesPending (CustomerPK
                                          , PromoVarID
                                          , Amount
                                          , CartID
                                          , ExtLocationCode
                                          , Deleted
                                          , LastUpdate
                                          , LogixTransNum
                                          , POSTimeStamp
                                          , ServerSerial
                                          , LocationID
                                          , WaitingACK) 
                                     select TempRLP.CustomerPK
                                          , TempRLP.PromoVarID
                                          , TempRLP.Amount
                                          , TempRLP.CartID
                                          , TempRLP.ExtLocationCode
                                          , 0
                                          , GetDate()
                                          , TempRLP.LogixTransNum
                                          , TempRLP.POSTimeStamp
                                          , TempRLP.ServerSerial
                                          , TempRLP.LocationID
                                          , 0
              From CPE_UploadTemp_RewardLimitPending as TempRLP where TempRLP.WaitingACK=-5;
    
   update Customers with (RowLocK) set UpdateCount=UpdateCount+1 where CustomerPK in   
      (select distinct CustomerPK from CPE_UploadTemp_RewardLimitPending as TempRLP with (NoLock) where TempRLP.WaitingACK=-5);  
  
   delete from CPE_UploadTemp_RewardLimitPending with (RowLock) where WaitingACK=-5;  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_RewardLimitPending] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_SF.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_SF.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_SF]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CPE_TUA_SF]
GO
CREATE PROCEDURE [dbo].[pa_CPE_TUA_SF]
AS 
  -- This procedure moves group membership records from CPE_UploadTemp_SF
  SET NOCOUNT ON;
  declare @NumRecs int;
  select @NumRecs=count(*) from CPE_UploadTemp_SF with (NoLock) where WaitingACK=-5;
  if @NumRecs=0 begin
    --set rowcount 1800; 
    update TOP (1800) CPE_UploadTemp_SF with (RowLock) set WaitingACK=-5 where WaitingACK=0;
    --set rowcount 0;
  end

  BEGIN TRY
    BEGIN TRAN T1
      -- Copy new records (status=1) into StoredFranking table
      insert into StoredFranking with (RowLock) (customerpk, rewardid, franking_text, create_date, origin_store, status, issuing_store, issue_date, priority, deliverabletype, cpestatusflag, POSTimeStamp) 
        select customerpk, rewardid, franking_text, create_date, origin_store, status, issuing_store, issue_date, priority, deliverabletype, -5 as CPEStatusFlag, UTSF.POSTimeStamp from CPE_UploadTemp_SF as UTSF with (NoLock) where TableNum=11 and UTSF.WaitingACK=-5 and status=1;
      -- Update existing records that have been issued (status=2) in StoredFranking table
      update StoredFranking
        set status = UTSF.status, issue_date = UTSF.issue_date, issuing_store = UTSF.issuing_store, priority = UTSF.priority, cpestatusflag = -5
        from StoredFranking SF
        inner join CPE_UploadTemp_SF UTSF
        on SF.customerpk = UTSF.customerpk and SF.rewardid = UTSF.rewardid
        where UTSF.status=2;
      
      -- Move stored franking records to CPE_SF_Output
      insert into CPE_SF_Output with (RowLock) (customerpk, rewardid, franking_text, create_date, origin_store, status, issuing_store, issue_date, priority, deliverabletype, WaitingACK, TargetLocationID, POSTimeStamp) 
        select UT.customerpk, UT.rewardid, UT.franking_text, UT.create_date, UT.origin_store, UT.status, UT.issuing_store, UT.issue_date, UT.priority, UT.deliverabletype, 0 as WaitingACK, CL.LocationID as TargetLocationID, UT.POSTimeStamp
        from CPE_UploadTemp_SF as UT (NoLock)
          inner join CustomerLocations as CL with (NoLock) 
            on UT.customerpk=CL.CustomerPK and UT.TableNum=11 and UT.WaitingACK=-5
			 where ((UT.LocationID<>CL.LocationID) )
      Delete from CPE_UploadTemp_SF with (RowLock) where WaitingACK=-5;
    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 BEGIN
	ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH

GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_SF] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CPE_TUA_SV.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_SV]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_SV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_SV]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_CPE_TUA_SV] @CmInstalled bit, @RunAgain int OUTPUT   
AS   
  -- $Id: dbo.pa_CPE_TUA_SV.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972
  -- This procedure moves StoredValue records from UploadTemp_SV  
  -- operation 1 = Insert new
  -- operation 3 = Update existing

  declare @NumRecs int;  
  declare @NumAffected int;  
  SET NOCOUNT ON;  
  set @RunAgain = 0;  
  set @NumAffected = 0;  
  

  CREATE TABLE #SVULTemp (
    [TableNum]       [varchar](4) NULL,
    [Operation]      [varchar](2) NULL,
    [Col1]           [varchar](255) NULL, 
    [Col2]           [varchar](255) NULL, 
    [Col3]           [varchar](255) NULL, 
    [Col4]           [varchar](400) NULL, 
    [Col5]           [varchar](255) NULL, 
    [Col6]           [varchar](255) NULL, 
    [Col7]           [varchar](400) NULL, 
    [Col8]           [varchar](255) NULL, 
    [Col9]           [varchar](255) NULL, 
    [Col10]          [varchar](255) NULL, 
    [Col11]          [varchar](400) NULL, 
    [ServerSerial]   [int] NULL, 
    [LocationID]     [bigint] NULL, 
    [PKID]           [bigint] NULL,
    [AdminUserID]    [int] NULL,
    [Col12]          [varchar](255) NULL, 
    [Col13]          [varchar](255) NULL, 
    [Col14]          [varchar](255) NULL,
    [Col15]          [varchar](255) NULL,
    [Col16]          [varchar](400) NULL,
    [Col17]          [varchar](255) NULL, 
    [Col18]          [varchar](400) NULL, 
    [Col19]          [varchar](400) NULL, 
    [Col20]          [varchar](255) NULL,
    [POSTimeStamp]	 [datetime] NULL,
    [Replayed]       [bit] NULL,
    [ReplayedDate]   [datetime] NULL,
    [IPLSeqNum]      [int] NULL,
    [AdjustmentSourceID]    [int] NULL,
    [AdjustmentTypeID]      [smallint] NULL,
    [AdjustmentReasonID]    [int] NULL,
    [AdjustmentReasonText]  [varchar](50) NULL
   );



  insert into #SVULTemp 
    (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, ServerSerial, LocationID, PKID, AdminUserID, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, Col20, POSTimeStamp, Replayed, ReplayedDate, IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText)
    select top 1800 
     TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, ServerSerial, LocationID, PKID, AdminUserID, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, Col20, POSTimeStamp, Replayed, ReplayedDate, IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText 
     from CPE_UploadTemp_SV with (NoLock) order by PKID;

  set @NumAffected = @@RowCount;
  if @NumAffected = 1800 begin
    set @RunAgain = 1
  end

  if @NumAffected > 0 begin

    BEGIN TRY    
      BEGIN TRAN T1  
  
      -- Insert new records into StoredValue  
      insert into StoredValue with (RowLock) 
        (LocalID, ServerSerial, SVProgramID, OfferID, CustomerPK, QtyEarned, QtyUsed, Value, EarnedDate, EarnedLocationID, ExpireDate, 
            ExternalID, StatusFlag, LastUpdate, LastLocationID, TotalValueEarned, RedeemedValue, BreakageValue, LogixTransNum, 
            PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText )  
        select 
            Col1            as LocalID, 
            Col2            as ServerSerial, 
            Col3            as SVProgramID, 
            Col4            as OfferID, 
            Col5            as CustomerPK, 
            Col6            as QtyEarned, 
            Col7            as QtyUsed, 
            Col8            as Value, 
            Col9            as EarnedDate, 
            Col15           as EarnedLocationID, 
            Col10           as ExpireDate, 
            Col11           as ExternalID, 
            1               as StatusFlag, 
            Col9            as LastUpdate, 
            LocationID      as LastLocationID, 
            IsNull(Col12,0) as TotalValueEarned, 
            0               as RedeemedValue, 
            0               as BreakageValue, 
            Col14           as LogixTransNum, 
            Col16           as PresentedCustomerID, 
            Col17           as PresentedCardTypeID, 
            Col18           as ResolvedCustomerID, 
            Col19           as HHID,
                               Replayed,
                               ReplayedDate,
                               POSTimeStamp,
                               AdjustmentSourceID, 
                               AdjustmentTypeID, 
                               AdjustmentReasonID, 
                               AdjustmentReasonText
        from #SVULTemp as UTSV with (NoLock)   
        where UTSV.Operation = 1 
  
      -- Insert new records into SVHistory  
      insert into SVHistory with (RowLock) 
        (LocalID, ServerSerial, SVProgramID, OfferID, CustomerPK, QtyEarned, QtyUsed, Value, EarnedDate, EarnedLocationID, ExpireDate, 
            ExternalID, StatusFlag, LastUpdate, LastLocationID, TotalValueEarned, RedeemedValue, BreakageValue, AdminUserID, LogixTransNum, 
            PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText )  
        select 
            Col1            as LocalID, 
            Col2            as ServerSerial, 
            Col3            as SVProgramID, 
            Col4            as OfferID, 
            Col5            as CustomerPK, 
            Col6            as QtyEarned, 
            Col7            as QtyUsed, 
            Col8            as Value, 
            Col9            as EarnedDate, 
            Col15           as EarnedLocationID, 
            Col10           as ExpireDate, 
            Col11           as ExternalID, 
            1               as StatusFlag, 
            Col9            as LastUpdate, 
            LocationID      as LastLocationID, 
            IsNull(Col12,0) as TotalValueEarned, 
            0               as RedeemedValue, 
            0               as BreakageValue, 
                               AdminUserID, 
            Col14           as LogixTransNum, 
            Col16           as PresentedCustomerID, 
            Col17           as PresentedCardTypeID, 
            Col18           as ResolvedCustomerID, 
            Col19           as HHID,
                               Replayed,
                               ReplayedDate,
                               POSTimeStamp,
                               AdjustmentSourceID,
                               AdjustmentTypeID,
                               AdjustmentReasonID,
                               AdjustmentReasonText
        from #SVULTemp as UTSV with (NoLock)   
        where UTSV.Operation = 1;  
  
        -- Update customers "UpdateCount" if CM installed  
        if @CmInstalled = 1 begin  
          update Customers with (RowLocK) set UpdateCount = UpdateCount+1 where CustomerPK in 
            ( select distinct Col5 from #SVULTemp as UTSV with (NoLock) where UTSV.Operation = 1 );  
        end  
  

        -- Copy cross shopping records to CPE_SV_Output for new records  
        insert into CPE_SV_Output with (RowLock) 
            (LocalID, ServerSerial, SVProgramID, OfferID, CustomerPK, QtyEarned, QtyUsed, Value, EarnedDate, EarnedLocationID, ExpireDate, ExternalID, WaitingACK, TargetLocationID, Replayed, ReplayedDate, POSTimeStamp )  
        select  
            Col1            as LocalID, 
            Col2            as ServerSerial, 
            Col3            as SVProgramID, 
            Col4            as OfferID, 
            Col5            as CustomerPK, 
            Col6            as QtyEarned, 
            Col7            as QtyUsed, 
            Col8            as Value, 
            Col9            as EarnedDate, 
            BT.LocationID   as EarnedLocationID, 
            Col10           as ExpireDate, 
            Col11           as ExternalID, 
            -5              as WaitingACK, 
            CL.LocationID   as TargetLocationID,
                               Replayed,
                               ReplayedDate,
                               POSTimeStamp
          from #SVULTemp as BT with(NoLock) 
            Inner Join CustomerLocations as CL with (NoLock, index(PK_CustomerLocations)) 
              on BT.Col5 = CL.CustomerPK and BT.Operation = 1
            where ((BT.LocationID<>CL.LocationID) ) 

  

        -- Update existing records in StoredValue  
            -- Update only QtyUsed, RedeemedValue, and BreakageValue in this query
        Update StoredValue 
            set QtyUsed = QtyUsed + tmp.QtyUsedDelta, RedeemedValue = RedeemedValue + tmp.RedeemedValueDelta, BreakageValue = BreakageValue + tmp.BreakageValueDelta
          from StoredValue with (NoLock) Inner Join 
          (select 
                sum(convert(int,UTSV.Col6))                 as QtyUsedDelta, 
                sum(convert(decimal,IsNull(UTSV.Col12,0)))  as RedeemedValueDelta, 
                sum(convert(decimal,isnull(UTSV.Col13, 0))) as BreakageValueDelta, 
                UTSV.Col1, 
                UTSV.Col2
            from #SVULTemp as UTSV with (NoLock) 
            where UTSV.Operation = 3 
            group by UTSV.Col1, UTSV.Col2
          ) as tmp  
          on StoredValue.LocalID = tmp.Col1 and StoredValue.ServerSerial = tmp.Col2; 

            -- update other fields now
        Update StoredValue 
            set StatusFlag = UTSV.Col5, 
                LastUpdate = UTSV.Col9, 
                LastLocationID = UTSV.LocationID, 
                ExternalID = UTSV.Col4, 
                AlteredSinceEarned = 1, 
                Replayed = (isnull( StoredValue.Replayed, 0 ) | isnull( UTSV.Replayed, 0 )),
                ReplayedDate = case isnull( UTSV.Replayed, 0 ) when 0 then StoredValue.ReplayedDate else UTSV.ReplayedDate end                
          from StoredValue with (NoLock) Inner Join #SVULTemp as UTSV with (NoLock) on StoredValue.LocalID = UTSV.Col1 and StoredValue.ServerSerial = UTSV.Col2   
          where 
            UTSV.PKID in ( select max(PKID) as PKID from #SVULTemp as UTSV2 with (NoLock) where UTSV2.Operation = 3  group by UTSV2.Col1, UTSV2.Col2 )  
            and Convert(datetime, UTSV.Col9, 0) > StoredValue.LastUpdate;


        -- Copy cross shopping records to CPE_SVupdated_Output for existing records  
        insert into CPE_SVupdated_Output with (RowLock) 
            (LocalID, ServerSerial, NewExternalID, QtyUsed, LastUpdate, WaitingACK, TargetLocationID, Replayed, ReplayedDate, POSTimeStamp )  
          select 
            Col1 as LocalID, 
            Col2 as ServerSerial, 
            Col4 as NewExternalID, 
            Col6 as QtyUsed, 
            Col9 as LastUpdate, 
            -5   as WaitingACK, 
            CL.LocationID as TargetLocationID,
            Replayed,
            ReplayedDate,
            POSTimeStamp
          from #SVULTemp as BT with(NoLock) 
            Inner Join CustomerLocations as CL with (NoLock, index(PK_CustomerLocations)) 
              on BT.Col3=CL.CustomerPK and BT.Operation=3
            Left Join LocationSeqNum as LSN with (NoLock) 
              on LSN.LocationID=BT.LocationID 
          where ((BT.LocationID<>CL.LocationID) 
                 or 
                 (BT.LocationID=CL.LocationID 
                   and BT.IPLSeqNum<isnull(LSN.IPLSequenceNum, 0) 
                   and isnull(LSN.IPLSequenceNum, 0)>0
                 )
                );

        -- Create a SVHistory record  
        insert into SVHistory with (RowLock) 
            (LocalID, ServerSerial, SVProgramID, CustomerPK, QtyUsed, Value, ExternalID, StatusFlag, LastUpdate, LastLocationID, TotalValueEarned, RedeemedValue, BreakageValue, 
             AdminUserID, ExpireDate, LogixTransNum, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate )  
          select 
            Col1            as LocalID, 
            Col2            as ServerSerial, 
            Col11           as SVProgramID, 
            Col3            as CustomerPK, 
            Col6            as QtyUsed, 
            Col10           as Value, 
            Col7            as ExternalID, 
            Col8            as StatusFlag, 
            Col9            as LastUpdate, 
            LocationID      as LastLocationID, 
            0               as TotalValueEarned, 
            IsNull(Col12,0) as RedeemedValue, 
            IsNull(Col13,0) as BreakageValue, 
                               AdminUserID,
            Col20           as ExpireDate, 
            Col14           as LogixTransNum, 
            Col16           as PresentedCustomerID, 
            Col17           as PresentedCardTypeID, 
            Col18           as ResolvedCustomerID, 
            Col19           as HHID,
                               Replayed,
                               ReplayedDate
          from #SVULTemp as UTSV with (NoLock)  
          where UTSV.Operation = 3;  



        -- Update customers "UpdateCount" if CM installed  
        if @CmInstalled = 1 begin  
          update Customers with (RowLocK) set UpdateCount = UpdateCount + 1 where CustomerPK in   
           (select distinct Col3 from #SVULTemp as UTSV with (NoLock) where UTSV.Operation = 3);  
        end  

        Update CPE_SVupdated_Output with (RowLock) set WaitingACK=0 where WaitingACK=-5;  

        Update CPE_SV_Output with (RowLock) set WaitingACK=0 where WaitingACK=-5;  

        Delete from CPE_UploadTemp_SV with (RowLock)
            from CPE_UploadTemp_SV Inner Join #SVULTemp on CPE_UploadTemp_SV.PKID=#SVULTemp.PKID;

        COMMIT TRAN T1;  
    END TRY  

  
    BEGIN CATCH  
      IF @@TRANCOUNT > 0 BEGIN  
        ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  

  END -- if @NumAffected>0

  DROP TABLE #SVULTemp

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_SV] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_UL.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_UL.StoredProcedure.sql 108207 2017-01-11 12:08:30Z gs250217 $
-- Build Version: 7.3.1.138972
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_UL]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CPE_TUA_UL]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TUA_UL]  
    @EnableSTD int, 
    @UE_CustomerLockingEnabled int,
    @UnlockDelayMins bigint, 
    @RunAgain int Output  
AS   
  declare @NumRecs int;  
  declare @StartTime datetime;  
  declare @NumAltID int;  
  set nocount on;  
  set @RunAgain=1;  
  set @StartTime=getdate();  
  
  
  CREATE TABLE #ULTemp ([TableNum] int NULL, [Operation] int NULL, [CustomerPK] bigint NULL, [Col2] varchar(255) NULL, [Col3] varchar(255) NULL, [AltIDOptOut] int NULL, [HHPK] bigint NULL, [LockID] bigint NULL, [ServerSerial] int NULL, [LocationID] bigint NULL, [PKID] [bigint] NULL, [IPLSeqNum] [int] NULL);  
  
  -- run for up to 5 minutes  
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) 
  begin  
    
    Insert into #ULTemp (TableNum, Operation, CustomerPK, Col2, Col3, AltIDOptOut, HHPK, LockID, ServerSerial, LocationID, PKID, IPLSeqNum)  
      select top 1800
        TableNum, 
        Operation, 
        cast(Col1 as bigint) as CustomerPK, 
        Col2, 
        Col3, 
        cast(Col4 as Int) as AltIDOptOut, 
        cast(Col5 as bigint) as HHPK, 
        cast(Col6 as bigint) as LockID,
        ServerSerial, 
        LocationID,
        PKID,
        IPLSeqNum
      from CPE_UploadTemp_UL with (NoLock) 
      where WaitingACK = 0
      order by PKID;

    if (@@ROWCOUNT>100) begin  
      set @RunAgain=1;  
    end  
    else begin  
      set @RunAgain=0;  
    end  

    -- this is needed in case no value is present in Col3 for the savings to date delta  
    Update #ULTemp set Col3='0' where Col3='';  
  
    BEGIN TRY    
      BEGIN TRAN T1  
  
        -- handle any AltIDOptOut's  
        if exists( select * from #ULTemp where not (AltIDOptOut = '-1') and not (AltIDOptOut is NULL) ) 
        begin  
          Update Customers set AltIDOptOut = #ULTemp.AltIDOptOut, CPEStoreSendFlag = 2   
            from Customers Inner Join #ULTemp on Customers.CustomerPK = #ULTemp.CustomerPK  
            where not (#ULTemp.AltIDOptOut = '-1') and not (#ULTemp.AltIDOptOut is NULL) AND NOT(Customers.CPEStoreSendFlag=1);  
        end  
  
  
  
  
		--Savings To Date
		--customer and household savings-to-date values are updated according to the following chart
		  
		  --CUSTOMERPK value		HHPK value		"Customer savings-to-date updated"	"Household savings-to-date updated"
		  --	X						X							no									yes
		  --	X						Y							yes									yes
		  --	X						none						yes									no
		  --	X						0							yes									no
		  
        if (@EnableSTD=1 or @EnableSTD=3) begin  
          -- this set of queries filters out records from #ULTemp where the customer PK equals the household PK
		  -- when the customer PK equals the household PK, this implies that this is a household only record, see chart above for the
		  -- update matrix
		  
          -- Update the customers CurrYearSTD  
          Update Customers with (RowLock)   
            set CurrYearSTD=isnull(CurrYearSTD, 0)+TUL.STDDelta  
            From Customers as C with (RowLock) Inner Join (select SUM(cast(col3 as decimal(12,3))) as STDDelta, CustomerPK from #ULTemp   where CustomerPK <> HHPK group by CustomerPK) as TUL 
              on TUL.CustomerPK=C.CustomerPK;  
          -- This query moves SavingsToDate deltas to LogixXS.STD_Output for the customer
          Insert into CPE_STD_Output with (RowLock) (CustomerPK, AdjAmount, LastUpdate, WaitingACK, TargetLocationID)   
            select BT.CustomerPK, BT.Col3 as AdjAmount, getdate() as LastUpdate, 0 as WaitingACK, CL.LocationID as TargetLocationID   
            from #ULTemp as BT with(NoLock) 
              Inner Join CustomerLocations as CL with (NoLock) 
                on BT.CustomerPK=CL.CustomerPK 
              Left Join LocationSeqNum as LSN with (NoLock) 
                on LSN.LocationID=BT.LocationID 
          where ((BT.LocationID<>CL.LocationID) 
                 or 
                 (BT.LocationID=CL.LocationID 
                   and BT.IPLSeqNum<isnull(LSN.IPLSequenceNum, 0) 
                   and isnull(LSN.IPLSequenceNum, 0)>0
                 )                 
                ) and BT.CustomerPK<>BT.HHPK;
        end 
        
        if (@EnableSTD=2 or @EnableSTD=3) begin
          -- Update the Households CurrYearSTD
          Update Customers with (RowLock)   
            set CurrYearSTD=isnull(CurrYearSTD, 0)+TUL.STDDelta
            From Customers as C with (RowLock) Inner Join (select SUM(cast(col3 as decimal(12,3))) as STDDelta, HHPK from #ULTemp  where not(HHPK=0) group by HHPK) as TUL 
              on TUL.HHPK=C.CustomerPK;
          -- This query moves SavingsToDate deltas to LogixXS.STD_Output for the household
          Insert into CPE_STD_Output with (RowLock) (CustomerPK, AdjAmount, LastUpdate, WaitingACK, TargetLocationID)   
            select BT.HHPK, BT.Col3 as AdjAmount, getdate() as LastUpdate, 0 as WaitingACK, CL.LocationID as TargetLocationID   
            from #ULTemp as BT with(NoLock) 
              Inner Join CustomerLocations as CL with (NoLock) 
                on BT.HHPK=CL.CustomerPK 
            where ((BT.LocationID<>CL.LocationID) )
        end  
  
        -- Update customer records in LogixXS.CustomerLocations  
        update CustomerLocations with (RowLock)   
          set LastVisit=TUL.Col2, LastUpdate=getdate()   
          from CustomerLocations as CL with (RowLock) Inner Join #ULTemp as TUL with (NoLock) on TUL.CustomerPK=CL.CustomerPK and TUL.LocationID=CL.LocationID;  

        -- Update household records in LogixXS.CustomerLocations    
        update CustomerLocations with (RowLock)   
          set LastVisit=TUL.LastVisit, LastUpdate=getdate()   
          from CustomerLocations as CL with (RowLock) Inner Join (select max(cast(Col2 as datetime)) as LastVisit, HHPK, LocationID from #ULTemp where not(HHPK=0) group by HHPK, LocationID) as TUL 
            on TUL.HHPK=CL.CustomerPK and TUL.LocationID=CL.LocationID;  

        if @UE_CustomerLockingEnabled=1 begin
          -- Update CPE_CustomerLocking records
          if @UnlockDelayMins<=0 begin
            Delete from CustomerLock with (Rowlock)
              from #ULTemp Inner Join CustomerLock as CL on #ULTemp.LockID=CL.LockID;
          end
          else begin
            Update CustomerLock
              set UE_LockExpireDate=dateadd(minute, @UnlockDelayMins, getdate())  
              from #ULTemp Inner Join CustomerLock as CL on #ULTemp.LockID=CL.LockID; 
          end
        end  -- @CustomerLockingEnabled=1

        Delete ul 
            from CPE_UploadTemp_UL as ul
            inner join #ULTemp as ult
            on ul.PKID=ult.PKID

        Truncate Table #ULTemp;
  
      COMMIT TRAN T1;  
    END TRY  
    BEGIN CATCH  
      IF @@TRANCOUNT > 0 BEGIN  
        ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  
  end --while  
  drop table #ULTemp;  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TUA_UL] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TUA_YB.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TUA_YB.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_YB]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_YB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TUA_YB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TUA_YB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CPE_TUA_YB]  
as   
  declare @NumRecs int;  
  set nocount on;  
    
  select @NumRecs=count(*) from CPE_UploadTemp_YB with (NoLock) where WaitingACK=-5;  
  if @NumRecs=0 begin  
    --set rowcount 1800;   
    Update TOP (1800) CPE_UploadTemp_YB with (RowLock) set WaitingACK=-5 where WaitingACK=0;  
    --set rowcount 0;  
  end  
  
  BEGIN TRY    
    BEGIN TRAN T1  
      -- update any existing rows in the YellowBoxes table  
      update CPE_YellowBoxes with (RowLock) set InStoreLocationID=TYB.Col2, PrinterTypeID=TYB.Col3 , OpDisplayTypeID=TYB.Col4  
        from CPE_YellowBoxes Inner Join CPE_UploadTemp_YB as TYB with (NoLock) on CPE_YellowBoxes.LocationID=TYB.Col5 and CPE_YellowBoxes.BoxID=TYB.Col1;  
    
      -- insert any non-existant rows into the YellowBoxes table  
      insert into CPE_YellowBoxes(LocationID, BoxID, InStoreLocationID, PrinterTypeID, OpDisplayTypeID)   
        select TYB.Col5, TYB.Col1, TYB.Col2, TYB.Col3, TYB.Col4   
        from CPE_UploadTemp_YB as TYB with (NoLock) left join CPE_YellowBoxes as YB on YB.LocationID=TYB.Col5 and YB.BoxID=TYB.Col1   
        where YB.PKID is Null;  
  
      Delete from CPE_UploadTemp_YB with (RowLock) where WaitingACK=-5;  
    COMMIT TRAN T1;  
  END TRY  
  BEGIN CATCH  
    IF @@TRANCOUNT > 0 BEGIN  
 ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TUA_YB] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_ACK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TU_ACK.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TU_ACK]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_ACK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_ACK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_ACK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TU_ACK] @SerialNum int
AS 
  set nocount on;
  Update CPE_UploadTemp_RD with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
  Update CPE_UploadTemp_RA_N with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
  Update CPE_UploadTemp_RA_ND with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
  Update CPE_UploadTemp_RA_OD with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
  Update CPE_UploadTemp_PA with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
  Update CPE_UploadTemp_GM with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
  Update CPE_UploadTemp_UR with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
  Update CPE_UploadTemp_SF with (RowLock) set WaitingACK=0 where WaitingACK=@SerialNum;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TU_ACK] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_CR.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_CR]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_CR]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_CR] @TableNum varchar(4), @Operation varchar(2), 
  @Col1 varchar(255),     -- LocalID
  @Col2 varchar(255),     -- ServerSerial
  @Col3 varchar(255),     -- UserID
  @Col4 varchar(255),     -- IncentiveID
  @Col5 varchar(255),     -- RewardOptionID
  @Col6 varchar(255),     -- OnScreenAdID
  @Col7 varchar(255),     -- Response
  @Col8 varchar(255)='0', -- LogixTransNum
  @Col9 varchar(255)='0', -- EarnedLocationID
  @IPLSeqNum int=0,       -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, @LocationID bigint, @WaitingACK int
AS 
  -- $Id: dbo.pa_CPE_TU_InsertData_CR.StoredProcedure.sql 72751 2013-12-03 19:38:55Z lf250051 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  if @Col9='0' begin
    set @Col9=@LocationID
  end 
  insert into CPE_UploadTemp_UR with (RowLock) (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, ServerSerial, LocationID, WaitingACK, IPLSeqNum)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @LocalServerID, @LocationID, @WaitingACK, @IPLSeqNum);
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_CR] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_GM.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_GM] @TableNum varchar(4), @Operation varchar(2), 
  @Col1 varchar(255),     -- LocalID
  @Col2 varchar(255),     -- ServerSerial
  @Col3 varchar(255),     -- CustomerPK
  @Col4 varchar(255),     -- CustomerGroupID
  @Col5 varchar(255),     -- Manual
  @Col6 varchar(255)='0', -- LogixTransNum
  @Col7 varchar(255)=NULL,  -- POSTimeStamp
  @IPLSeqNum int=0,       -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, @LocationID bigint, @WaitingACK int
AS 
  -- $Id: dbo.pa_CPE_TU_InsertData_GM.StoredProcedure.sql 72751 2013-12-03 19:38:55Z lf250051 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  insert into CPE_UploadTemp_GM with (RowLock) (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, POSTimeStamp, ServerSerial, LocationID, WaitingACK, IPLSeqNum)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @LocalServerID, @LocationID, @WaitingACK, @IPLSeqNum);
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_PA.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_PA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_PA]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_PA] @TableNum varchar(4), @Operation varchar(2),  
  @Col1 varchar(255),     -- ProgramID  
  @Col2 varchar(255),     -- CustomerPK  
  @Col3 varchar(255),     -- AdjAmount  
  @Col4 varchar(255),     -- EarnedUnderROID  
  @Col5 varchar(255)='0', -- CustomerTypeID  
  @Col6 varchar(255)='0', -- LogixTransNum  
  @Col7 varchar(255)='0', -- SourceTypeID  
  @Col8 varchar(255)='0', -- EarnedLocationID  
  @Col9 varchar(400)='0', -- PresentedCustomerID
  @Col10 varchar(255)='0', -- PresentedCardTypeID
  @Col11 varchar(400)='0', -- ResolvedCustomerID
  @Col12 varchar(400)='0', -- HHID 
  @col13 varchar(255)='0', -- @Replayed bit
  @Col14 varchar(255)=NULL, -- @ReplayedDate datetime
  @Col15 varchar(255)=NULL, --@POSTImeStamp datetime 
  @IPLSeqNum int = 0,       -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint,
  @WaitingACK int,
  @AdjustmentSourceID int=0,
  @AdjustmentTypeID smallint=0,
  @AdjustmentReasonID int=0,
  @AdjustmentReasonText varchar(50)='',
  @PKID bigint = 0 output
AS    
  -- $Id: dbo.pa_CPE_TU_InsertData_PA.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;  

  if @Col8 = '0' begin  
    set @Col8 = @LocationID  
  end   
  insert into CPE_UploadTemp_PA with (RowLock) 
    (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, POSTimeStamp, ServerSerial, LocationID, WaitingACK, Replayed, ReplayedDate, IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText)  
  values 
    (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col15, @LocalServerID, @LocationID, @WaitingACK, @col13, @Col14, @IPLSeqNum, @AdjustmentSourceID, @AdjustmentTypeID, @AdjustmentReasonID, @AdjustmentReasonText );  
    
  set @PKID = @@Identity  
GO


GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_PA] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_Pref.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_Pref]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_Pref]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_Pref] @TableNum varchar(4), @Operation varchar(2), 
  @Col1 varchar(255),     -- customerpk
  @Col2 varchar(255),     -- PrefID
  @Col3 varchar(255),     -- value
  @IPLSeqNum int=0,       -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int
AS 
  -- $Id: dbo.dbo.pa_CPE_TU_InsertData_Pref.StoredProcedure.sql 72751 2013-12-03 19:38:55Z lf250051 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  insert into CPE_UploadTemp_PREF with (RowLock) (TableNum, Operation, Col1, Col2, Col3, ServerSerial, LocationID, WaitingACK, IPLSeqNum)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @LocalServerID, @LocationID, @WaitingACK, @IPLSeqNum);
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_Pref] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_PrefMV.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_PrefMV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_PrefMV]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_PrefMV] @TableNum varchar(4), @Operation varchar(2), 
  @Col1 varchar(255),     -- customerpk
  @Col2 varchar(255),     -- preferenceID
  @Col3 varchar(255),     -- value
  @IPLSeqNum int=0,       -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int
AS 
  -- $Id: dbo.dbo.pa_CPE_TU_InsertData_PrefMV.StoredProcedure.sql 72751 2013-12-03 19:38:55Z lf250051 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  insert into CPE_UploadTemp_PREF_MV with (RowLock) (TableNum, Operation, Col1, Col2, Col3, ServerSerial, LocationID, WaitingACK, IPLSeqNum)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @LocalServerID, @LocationID, @WaitingACK, @IPLSeqNum);
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_PrefMV] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_RA_N.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_RA_N]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_N]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_N] @TableNum int, @Operation int,   
  @Col1 varchar(255),      -- LocalID  
  @Col2 varchar(255),      -- ServerSerial  
  @Col3 varchar(255),      -- RewardOptionID  
  @Col4 varchar(255),      -- UserID  
  @Col5 varchar(255),      -- PurchUserID  
  @Col6 varchar(255),      -- QtyPurchaseed  
  @Col7 varchar(255),      -- TotalPrice  
  @Col8 varchar(255),      -- AccumulationDate  
  @Col9  varchar(255)='0', -- LogixTransNum  
  @Col10 varchar(255)='0', -- EarnedLocationID  
  @Col11 varchar(255)='0', -- OverThreshold  
  @Col12 varchar(400)='0', -- PresentedCustomerID
  @Col13 varchar(255)='0', -- PresentedCardTypeID
  @Col14 varchar(400)='0', -- ResolvedCustomerID
  @Col15 varchar(400)='0', -- HHID 
  @Col16 varchar(255)='0', -- @Replayed bit
  @Col17 varchar(255)=NULL, -- @ReplayedDate datetime
  @Col18 varchar(255)=NULL, -- @POSTimeStamp datetime
  @IPLSeqNum int=0,         -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int  
AS   
  -- $Id: dbo.pa_CPE_TU_InsertData_RA_N.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;  
  if @Col10='0' begin  
    set @Col10 = @LocationID  
  end   
  
  insert into CPE_UploadTemp_RA_N with (RowLock) 
    (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, POSTimeStamp, ServerSerial, LocationID, WaitingACK, Replayed, ReplayedDate, IPLSeqNum)  
  values 
    (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col13, @Col14, @Col15, @Col18, @LocalServerID, @LocationID, @WaitingACK, @Col16, @Col17, @IPLSeqNum);  

 
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_RA_N] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_RA_ND.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_RA_ND]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_ND]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_ND] @TableNum int, @Operation int,   
  @Col1 varchar(255),      -- LocalID  
  @Col2 varchar(255),      -- ServerSerial  
  @Col3 varchar(255),      -- RewardOptionID  
  @Col4 varchar(255),      -- CustomerPK  
  @Col5 varchar(255),      -- PurchUserID  
  @Col6 varchar(255),      -- QtyPurchased  
  @Col7 varchar(255),      -- TotalPrice  
  @Col8 varchar(255),      -- AccumulationDate  
  @Col9 varchar(255)='0',  -- LogixTransNum  
  @Col10 varchar(255)='0', -- EarnedLocationID  
  @Col11 varchar(400)='0', -- PresentedCustomerID
  @Col12 varchar(255)='0', -- PresentedCardTypeID
  @Col13 varchar(400)='0', -- ResolvedCustomerID
  @Col14 varchar(400)='0', -- HHID 
  @Col15 varchar(255)='0', -- @Replayed bit
  @Col16 varchar(255)=NULL,-- @ReplayedDate datetime
  @Col17 varchar(255)=NULL,-- @POSTimeStamp datetime
  @IPLSeqNum int=0,        -- The sequence number from the last time an IPL was performed from the location sending the data 
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int
AS   
  -- $Id: dbo.pa_CPE_TU_InsertData_RA_ND.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;  
  if @Col10='0' begin  
    set @Col10=@LocationID  
  end   
  insert into CPE_UploadTemp_RA_ND with (RowLock) 
    (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, ServerSerial, LocationID, WaitingACK, Replayed, ReplayedDate, POSTimeStamp, IPLSeqNum)  
  values 
    (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col13, @Col14, @LocalServerID, @LocationID, @WaitingACK, @Col15, @Col16, @Col17, @IPLSeqNum);  

GO


GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_RA_ND] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_RA_OD.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_RA_OD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_OD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_OD] @TableNum int, @Operation int,   
  @Col1 varchar(255),      -- LocalID  
  @Col2 varchar(255),      -- ServerSerial  
  @Col3 varchar(255),      -- CustomerPK  
  @Col4 varchar(255),      -- RewardOptionID  
  @Col5 varchar(255),      -- PurchUserID  
  @Col6 varchar(255),      -- QtyPurchased  
  @Col7 varchar(255),      -- TotalPrice  
  @Col8 varchar(255),      -- AccumulationDate  
  @Col9 varchar(255)='0',  -- LogixTransNumEarned  
  @Col10 varchar(255)='0', -- LogixTransNumConsumed  
  @Col11 varchar(255)='0', -- EarnedLocationID  
  @Col12 varchar(400)='0', -- PresentedCustomerID
  @Col13 varchar(255)='0', -- PresentedCardTypeID
  @Col14 varchar(400)='0', -- ResolvedCustomerID
  @Col15 varchar(400)='0', -- HHID 
  @Col16 varchar(255)='0', -- @Replayed bit
  @Col17 varchar(255)=NULL,-- @ReplayedDate datetime
  @IPLSeqNum int=0,        -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int,
  @Col18 varchar(255)=NULL -- @POSTimeStamp datetime 
AS   
  -- $Id: dbo.pa_CPE_TU_InsertData_RA_OD.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;  
  if @Col11='0' begin  
    set @Col11=@LocationID  
  end   
  insert into CPE_UploadTemp_RA_OD with (RowLock) 
    (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, ServerSerial, LocationID, WaitingACK, Replayed, ReplayedDate, POSTimeStamp, IPLSeqNum)  
  values 
    (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col13, @Col14, @Col15, @LocalServerID, @LocationID, @WaitingACK, @Col16, @Col17, @Col18, @IPLSeqNum);  

GO
GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_RA_OD] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_RA_OD_Type2.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TU_InsertData_RA_OD_Type2.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TU_InsertData_RA_OD_Type2]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_RA_OD_Type2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_OD_Type2]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_RA_OD_Type2]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_RA_OD_Type2] @TableNum int, @Operation int, 
	@Col1 varchar(255), @Col2 varchar(255), @Col3 varchar(255), @LocalServerID int, 
	@LocationID bigint, @WaitingACK int
AS 
  SET NOCOUNT ON;
  insert into CPE_UploadTemp_RA_OD with (RowLock) (TableNum, Operation, Col1, Col2, Col3, ServerSerial, LocationID, WaitingACK)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @LocalServerID, @LocationID, @WaitingACK);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_RA_OD_Type2] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_RD.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_RD]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_RD]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_RD] @TableNum varchar(4), @Operation varchar(2),   
  @Col1 varchar(255),     -- LocalID  
  @Col2 varchar(255),     -- ServerSerial  
  @Col3 varchar(255),     -- IncentiveID   
  @Col4 varchar(255),     -- RewardOptionID  
  @Col5 varchar(255),     -- Phase  
  @Col6 varchar(255),     -- CustomerPK  
  @Col7 varchar(255),     -- DistributionDate  
  @Col8 varchar(255)='0', -- LogixTransNum  
  @Col9 varchar(255)='0', -- EarnedLocationID  
  @Col10 varchar(400)='0', -- PresentedCustomerID
  @Col11 varchar(255)='0', -- PresentedCardTypeID
  @Col12 varchar(400)='0', -- ResolvedCustomerID
  @Col13 varchar(400)='0', -- HHID 
  @Col14 varchar(255)=NULL, -- POSTimeStamp datetime 
  @IPLSeqNum int=0,         -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, @LocationID bigint, @WaitingACK int  
AS   
  -- $Id: dbo.pa_CPE_TU_InsertData_RD.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;  
  if @Col9='0' begin  
    set @Col9=@LocationID  
  end   
  insert into CPE_UploadTemp_RD with (RowLock) (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, ServerSerial, LocationID, WaitingACK, POSTimeStamp, IPLSeqNum)  
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col13, @LocalServerID, @LocationID, @WaitingACK, @Col14, @IPLSeqNum); 
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_RD] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_SF.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_SF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_SF]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_SF] @TableNum varchar(4), @Operation varchar(2),   
  @CustomerPK bigint,
  @RewardOptionID bigint,
  @FrankingText varchar(128),
  @CreateDate datetime,
  @Status smallint,
  @IssueDate datetime,
  @Priority int,
  @DeliverableType int,
  @POSTimeStamp datetime=NULL,
  @IPLSeqNum int=0,        -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, @LocationID bigint, @WaitingACK int
AS
  -- $Id: dbo.pa_CPE_TU_InsertData_SF.StoredProcedure.sql 72751 2013-12-03 19:38:55Z lf250051 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON; 
  insert into CPE_UploadTemp_SF with (RowLock) (TableNum, Operation, customerpk, rewardid, franking_text, create_date, origin_store, status, issuing_store, issue_date, priority, deliverabletype, ServerSerial, LocationID, WaitingACK, POSTimeStamp, IPLSeqNum)  
  values (@TableNum, @Operation, @CustomerPK, @RewardOptionID, @FrankingText, @CreateDate, CASE WHEN @Status = 1 THEN @LocationID ELSE NULL END, @Status, CASE WHEN @Status = 2 THEN @LocationID ELSE NULL END, @IssueDate, @Priority, @DeliverableType, @LocalServerID, @LocationID, @WaitingACK, @POSTimeStamp, @IPLSeqNum);  
GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_SF] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_SV.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_SV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_SV]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_SV] @TableNum varchar(4), @Operation varchar(2),   
  @Col1 varchar(255),      -- LocalID  
  @Col2 varchar(255),      -- ServerSerial  
  @Col3 varchar(255),      -- SVProgramID  
  @Col4 varchar(255),      -- OfferID  
  @Col5 varchar(255),      -- CustomerPK  
  @Col6 varchar(255),      -- QtyEarned  
  @Col7 varchar(255),      -- QtyUsed  
  @Col8 varchar(255),      -- Value  
  @Col9 varchar(255),      -- EarnedDate  
  @Col10 varchar(255),     -- ExpireDate  
  @Col11 varchar(400),     -- ExternalID  
  @Col12 varchar(255)='0', -- TotalValueEarned    Not Sent by TransUpload  
  @Col13 varchar(255)='0', -- Not used (place holder)a  
  @Col14 varchar(255)='0', -- LogixTransNum  
  @Col15 varchar(255)='0', -- EarnedLocationID  
  @Col16 varchar(400)='0', -- PresentedCustomerID
  @Col17 varchar(255)='0', -- PresentedCardTypeID
  @Col18 varchar(400)='0', -- ResolvedCustomerID
  @Col19 varchar(400)='0', -- HHID 
  @Col20 varchar(255)='0', --, @Replayed bit
  @Col21 varchar(255)=NULL, --,  @ReplayedDate datetime
  @Col22 varchar(255)=NULL, --,  @POSTimeStamp datetime
  @IPLSeqNum int=0,         -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int, 
  @AdminUserID int = 0,  
  @AdjustmentSourceID int = 0,
  @AdjustmentTypeID smallint = 0,  
  @ReasonID int = 0, 
  @ReasonText varchar(50) = '' 
AS   
  -- $Id: dbo.pa_CPE_TU_InsertData_SV.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;  
  if @Col15='0' begin  
    set @Col15=@LocationID  
  end

  -- CLOUDSOL-959 Special handling for when a card is removed from a household - store ExpireDate in Col20 to col20
  if @LocalServerID='-9' begin
    insert into CPE_UploadTemp_SV with (RowLock) 
        (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8,  Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, ServerSerial, LocationID, WaitingACK, AdminUserID, Col20, ReplayedDate, POSTimeStamp, IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText)  
    values 
        (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col13, @Col14, @Col15, @Col16, @Col17, @Col18, @Col19, 
        @LocalServerID, @LocationID, @WaitingACK, @AdminUserID, @Col20, @Col21, @Col22, @IPLSeqNum, @AdjustmentSourceID, @AdjustmentTypeID, @ReasonID, @ReasonText);  	
	end

  else begin
    insert into CPE_UploadTemp_SV with (RowLock) 
        (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8,  Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, ServerSerial, LocationID, WaitingACK, AdminUserID, Replayed, ReplayedDate, POSTimeStamp, IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText)  
    values 
        (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col13, @Col14, @Col15, @Col16, @Col17, @Col18, @Col19, 
        @LocalServerID, @LocationID, @WaitingACK, @AdminUserID, @Col20, @Col21, @Col22, @IPLSeqNum, @AdjustmentSourceID, @AdjustmentTypeID, @ReasonID, @ReasonText);  		
    end	

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_SV] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_SVUpdated.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_SVUpdated]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_SVUpdated]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_SVUpdated] @TableNum varchar(4), @Operation varchar(2),     
  @Col1 varchar(255),      -- LocalID    
  @Col2 varchar(255),      -- ServerSerial    
  @Col3 varchar(255),      -- CustomerPK    
  @Col4 varchar(400),      -- NewExternalID    
  @Col5 varchar(255),      -- StatusFlag    
  @Col6 varchar(255),      -- QtyUsed    
  @Col7 varchar(400),      -- PrevExternalID    
  @Col8 varchar(255),      -- HistoryStatusFlag    
  @Col9 varchar(255),      -- LastUpdate    
  @Col10 varchar(255),     -- Value    
  @Col11 varchar(255),     -- SVProgramID    
  @Col12 varchar(255)='0', -- RedeemedValueDelta    Not Sent by TransUpload    
  @Col13 varchar(255)='0', -- BreakageValueDelta  Not Sent by TransUpload    
  @Col14 varchar(255)='0', -- LogixTransNum    
  @Col15 varchar(255)='0', -- EarnedLocationID    
  @Col16 varchar(400)='0', -- PresentedCustomerID  
  @Col17 varchar(255)='0', -- PresentedCardTypeID  
  @Col18 varchar(400)='0', -- ResolvedCustomerID  
  @Col19 varchar(400)='0', -- HHID   
  @Col20 varchar(255)=NULL,-- ExpiredDate  
  @Col21 varchar(255)='0', -- @Replayed bit
  @Col22 varchar(255)=NULL, -- @ReplayedDate datetime
  @Col23 varchar(255)=NULL, -- @POSTimeStamp datetime
  @IPLSeqNum int=0,         -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int, 
  @AdminUserID int = 0    
AS     
  -- $Id: dbo.pa_CPE_TU_InsertData_SVUpdated.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;    
  if @Col15 = '0' begin    
    set @Col15 = @LocationID    
  end   
  insert into CPE_UploadTemp_SV with (RowLock) 
    (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, Col20, 
         ServerSerial, LocationID, WaitingACK, AdminUserID, Replayed, ReplayedDate,POSTimeStamp, IPLSeqNum)    
  values 
    (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @Col7, @Col8, @Col9, @Col10, @Col11, @Col12, @Col13, @Col14, @Col15, @Col16, @Col17, @Col18, @Col19, @Col20, 
         @LocalServerID, @LocationID, @WaitingACK, @AdminUserID, @Col21, @Col22, @Col23, @IPLSeqNum);    

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_SVUpdated] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_UL.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TU_InsertData_UL.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TU_InsertData_UL]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_UL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_UL]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_UL]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_UL] @TableNum varchar(4), @Operation varchar(2), 
	@Col1 varchar(255), @Col2 varchar(255), @Col3 varchar(255), @LocalServerID int, 
	@LocationID bigint, @WaitingACK int
AS 
  SET NOCOUNT ON;
  insert into CPE_UploadTemp_UL with (RowLock) (TableNum, Operation, Col1, Col2, Col3, ServerSerial, LocationID, WaitingACK)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @LocalServerID, @LocationID, @WaitingACK);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_UL] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_UL_Type2.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_UL_Type2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_UL_Type2]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_UL_Type2] 
  @TableNum varchar(4), 
  @Operation varchar(2), 
  @Col1 varchar(255),       -- UserID
  @Col2 varchar(255),       -- LastVisit
  @Col3 varchar(255),       -- CurrYearSTDDelta
  @Col4 varchar(255)='-1',  -- AltIDOptOut -1 indicates no change to AltIDOptOut status
  @Col5 varchar(255)='0',   -- HHPK (optional for backwards compatibility)
  @Col6 varchar(255)='0',   -- LockID (for releasing locks in the CPE_CustomerLocks table - used by UE)
  @IPLSeqNum int=0,         -- The sequence number from the last time an IPL was performed from the location sending the data
  @LocalServerID int, 
  @LocationID bigint, 
  @WaitingACK int
AS 
  -- $Id: dbo.pa_CPE_TU_InsertData_UL_Type2.StoredProcedure.sql 72751 2013-12-03 19:38:55Z lf250051 $
  -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  Insert into CPE_UploadTemp_UL with (RowLock) (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, ServerSerial, LocationID, WaitingACK, IPLSeqNum)
    values (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @Col6, @LocalServerID, @LocationID, @WaitingACK, @IPLSeqNum);

GO

GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_UL_Type2] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_InsertData_YB.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TU_InsertData_YB.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TU_InsertData_YB]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_YB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_InsertData_YB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_InsertData_YB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TU_InsertData_YB] @TableNum varchar(4), @Operation varchar(2), 
  @Col1 varchar(255),     -- BoxID
  @Col2 varchar(255),     -- InStoreLocationID
  @Col3 varchar(255),     -- PrinterTypeID
  @Col4 varchar(255),     -- OpDisplayTypeID
  @Col5 varchar(255)=''0'', -- StoreLocationID
  @LocalServerID int, @LocationID bigint, @WaitingACK int
AS
  SET NOCOUNT ON;
  if @Col5=''0'' begin
    set @Col5=@LocationID
  end 
  insert into CPE_UploadTemp_YB with (RowLock) (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, ServerSerial, LocationID, WaitingACK)
  values (@TableNum, @Operation, @Col1, @Col2, @Col3, @Col4, @Col5, @LocalServerID, abs(@LocationID), @WaitingACK);
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TU_InsertData_YB] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_PurgeWaitingACK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TU_PurgeWaitingACK.StoredProcedure.sql 46026 2012-03-15 22:43:35Z bin $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TU_PurgeWaitingACK]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_PurgeWaitingACK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_PurgeWaitingACK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_PurgeWaitingACK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TU_PurgeWaitingACK] @WaitingACK int
AS 
  Delete From CPE_UploadTemp_GM with (RowLock) where WaitingACK=@WaitingACK;
  
  --Delete From CPE_UploadTemp_PA with (RowLock) where WaitingACK=@WaitingACK;
  Declare @RunAgain int;
  Declare @PARowsDeleted bigint;
  Set @RunAgain = 1;
  Set @PARowsDeleted = 0;
  While (@RunAgain > 0)
  Begin
	Delete CPE_UploadTemp_PA From CPE_UploadTemp_PA Cutp Inner Join 
		(Select Top (1800) PKID From CPE_UploadTemp_PA Order by PKID) TopRows 
		On Cutp.PKID=TopRows.PKID And Cutp.WaitingACK=@WaitingACK;
	Set @PARowsDeleted = @@RowCount
	If (@PARowsDeleted < 900)
		Set @RunAgain = 0	
  End
  
  Delete From CPE_UploadTemp_RA_N with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_RA_OD with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_RA_ND with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_RD with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_SV with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_UL with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_UR with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_YB with (RowLock) where WaitingACK=@WaitingACK;
  Delete From CPE_UploadTemp_SF with (RowLock) where WaitingACK=@WaitingACK;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TU_PurgeWaitingACK] TO [Copient_Logix_uspRole] AS [dbo]
GO

-- 20120312 bin: commented out purge in cpe_uploadtemp_pa after dropping index on 
-- waitingackto avoid possible full table scan.

print 'processing storedprocedures/dbo.pa_CPE_TU_ReleaseData.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CPE_TU_ReleaseData.StoredProcedure.sql 77977 2014-05-01 19:43:02Z nk250133 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_TU_ReleaseData]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_ReleaseData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_ReleaseData]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_ReleaseData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CPE_TU_ReleaseData] @WaitingACK int
AS 
  DECLARE @PALowPKID bigint
  DECLARE @PAHighPKID bigint 
  SET @PALowPKID = -1
  SET @PALowPKID = -1
  
  BEGIN TRY		
    BEGIN TRAN T1
      Update CPE_UploadTemp_GM with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      
      SELECT @PALowPKID = LastPALowPKID, @PAHighPKID = LastPAHighPKID from CPE_UploadTemp_PA_Vars WITH (NoLock) WHERE LocalServerID=@WaitingACK;
      If(@PALowPKID>0 AND @PAHighPKID>0)
		Update CPE_UploadTemp_PA with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK And PKID<=@PAHighPKID And PKID>=@PALowPKID;
	  Else
		Update CPE_UploadTemp_PA with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK 
      
      Update CPE_UploadTemp_RA_N with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_RA_OD with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_RA_ND with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_RD with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_SV with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_UL with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_UR with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_YB with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_SF with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_PREF with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
      Update CPE_UploadTemp_PREF_MV with (RowLock) set WaitingACK=0 where WaitingACK=@WaitingACK;
    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 BEGIN
	ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CPE_TU_ReleaseData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CPE_TU_Update_PA_Vars.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CPE_TU_Update_PA_Vars]    Script Date: 12/27/2010 16:44:18 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CPE_TU_Update_PA_Vars]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CPE_TU_Update_PA_Vars]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_CPE_TU_Update_PA_Vars] 
  @LocalServerID	bigint, 
  @LastPALowPKID	bigint,
  @LastPAHighPKID	bigint
AS    

  SET NOCOUNT ON;  
  
  IF EXISTS (SELECT LocalServerID FROM CPE_UploadTemp_PA_Vars WHERE LocalServerID=@LocalServerID)
	UPDATE CPE_UploadTemp_PA_Vars SET LastPAHighPKID = @LastPAHighPKID, LastPALowPKID = @LastPALowPKID WHERE  LocalServerID = @LocalServerID
  ELSE
	INSERT INTO CPE_UploadTemp_PA_Vars (LocalServerID,LastPALowPKID,LastPAHighPKID) VALUES (@LocalServerID,@LastPALowPKID,@LastPAHighPKID)

GO


GRANT EXECUTE ON [dbo].[pa_CPE_TU_Update_PA_Vars] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CRA_RemoveCustomers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CRA_RemoveCustomers.StoredProcedure.sql 66803 2013-06-14 12:04:05Z pk250049 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CRA_RemoveCustomers]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CRA_RemoveCustomers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CRA_RemoveCustomers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CRA_RemoveCustomers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CRA_RemoveCustomers] @NumDeleted int OUTPUT, @RunAgain int OUTPUT as  
  -- This procedure removes customers from the CustomersTable and CustomerLocations table, and stages delete   
  -- records for the stores in CPE_CustomerRemoval_Output.  
  -- Invoked by CustomerRemovalAgent.  
  set nocount on  
  declare @NumRecs as int;  
  declare @StartTime as datetime;  
  set @RunAgain=1  
  set @NumDeleted=0;  
  set @StartTime=getdate();  
  
  CREATE TABLE #CustRemoval ([CustomerPK] bigint NULL);  
  
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin  
    
    Insert into #CustRemoval (CustomerPK) 
      select top 1000 CustomerPK from CustomerRemovalQueue with (NoLock) where StatusFlag=0;
    set @NumRecs=@@ROWCOUNT;  
    set @NumDeleted=@NumDeleted+@NumRecs;  
    if @NumRecs>100 begin  
      set @RunAgain=1  
    end  
    else begin  
      set @RunAgain=0  
    end  
    
    if @NumRecs>0 begin  -- is there anything to process?  
      
      Delete from CustomerAttributes with (RowLock)  
        from CustomerAttributes as CA Inner Join #CustRemoval as CR on CA.CustomerPK=CR.CustomerPK  
            
      Delete from Customers with (RowLock)  
        from Customers as C Inner Join #CustRemoval as CR on C.CustomerPK=CR.CustomerPK  
      
      Delete from CustomerExt with (RowLock)  
        from CustomerExt as CE Inner Join #CustRemoval as CR on CE.CustomerPK=CR.CustomerPK       
      
      Delete from CardIDs with (RowLock)  
        from CardIDs Inner Join #CustRemoval on CardIDs.CustomerPK=#CustRemoval.CustomerPK;  
        
      Delete from Points with (RowLock)  
        from Points Inner Join #CustRemoval on Points.CustomerPK=#CustRemoval.CustomerPK;  
        
      -- Delete from PointsHistory with (RowLock)  
      --  from PointsHistory Inner Join #CustRemoval on PointsHistory.CustomerPK=#CustRemoval.CustomerPK;         
      
      Insert into CPE_CustomerRemoval_Output with (RowLock) (CustomerPK, WaitingACK, TargetLocationID)   
        select CR.CustomerPK, 0 as WaitingACK, CL.LocationID as TargetLocationID   
        from #CustRemoval as CR Inner Join CustomerLocations as CL with (NoLock) on CR.CustomerPK=CL.CustomerPK;  
             
      Delete from CustomerLocations with (RowLock)  
        from CustomerLocations Inner Join #CustRemoval on CustomerLocations.CustomerPK=#CustRemoval.CustomerPK;  
             
      Delete from CustomerRemovalQueue with (RowLock)
        from CustomerRemovalQueue Inner Join #CustRemoval on CustomerRemovalQueue.CustomerPK=#CustRemoval.CustomerPK;
      
    end  -- if @NumRecs>0
    Truncate Table #CustRemoval  
  
  end -- while  
  Drop Table #CustRemoval;  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CRA_RemoveCustomers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CS_UpdateAdjustments.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CS_updateAdjustments]    Script Date: 12/29/2015 23:46:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CS_updateAdjustments]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CS_updateAdjustments]
GO

/****** Object:  StoredProcedure [dbo].[pa_CS_updateAdjustments]    Script Date: 12/29/2015 23:46:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- Expects that #PointsAdjTemp has already been defined and filled. See below
-- for details.
-- 
CREATE PROCEDURE [dbo].[pa_CS_updateAdjustments] @uploadData Varchar(Max)
AS          
BEGIN
  DECLARE @xml XML = @uploadData

DECLARE @logixIplSeed VARCHAR(255)
DECLARE @serial VARCHAR(255)
Declare @LocationId as varchar(255)

SELECT @LocationId = a.c.value('(earnedLocationId/text())[1]', 'varchar(255)')
FROM @xml.nodes('adjustments') AS a(c)

SELECT @logixIplSeed = a.c.value('(logixIplSeed/text())[1]', 'varchar(255)')
	,@serial = a.c.value('(brokerSerialNum/text())[1]', 'varchar(255)')
FROM @xml.nodes('adjustments/serialInfo') AS a(c)

BEGIN TRY      
      BEGIN TRAN T1  

--points
INSERT INTO CPE_UploadTemp_PA
WITH (ROWLOCK) (
		TableNum
		,Operation
		,Col1
		,Col2
		,Col3
		,Col4
		,Col5
		,Col6
		,Col7
		,Col8
		,Col9
		,Col10
		,Col11
		,Col12
		,POSTimeStamp
		,ServerSerial
		,LocationID
		,WaitingACK
		,Replayed
		,ReplayedDate
		,IPLSeqNum
		,AdjustmentSourceID
		,AdjustmentTypeID
		,AdjustmentReasonID
		,AdjustmentReasonText
		)
SELECT 4 --for points adjusments
	,1 --1 for inserts, 3 for updates
	,a.p.value('(programId/text())[1]', 'varchar(255)') AS ProgramID
	,a.p.value('(customerPk/text())[1]', 'varchar(255)') AS CustomerPK
	,a.p.value('(pointsAmount/text())[1]', 'varchar(255)') AS Amount
	,a.p.value('(earnedROId/text())[1]', 'varchar(255)') AS earnedROId
	,a.p.value('(customerTypeId/text())[1]', 'varchar(255)') AS customerTypeId
	,a.p.value('(transNum/text())[1]', 'varchar(255)') AS transNum
	,'0'
	,a.p.value('(earnedLocationId/text())[1]', 'varchar(255)') AS earnedLocationId
	,a.p.value('(presentedCustomerId/text())[1]', 'varchar(255)') AS presentedCustomerId
	,a.p.value('(presentedCardTypeId/text())[1]', 'varchar(255)') AS presentedCardTypeId
	,a.p.value('(resolvedCustomerId/text())[1]', 'varchar(255)') AS resolvedCustomerId
	,a.p.value('(houseHoldId/text())[1]', 'varchar(255)') AS houseHoldId
	,NULL
	,ISNULL(@serial, '0')
	,ISNULL(@LocationId, '0') --putting location id 0 for now, this might affect the transdownload on cpe
	,0 --WaitingACK 0 indicates data is ready for TransUpload agents to be picked up.
	,'0' --default value as this is not sent from customer service
	,NULL --default value as this is not sent from customer service
	,ISNULL(@logixIplSeed, '0')
	,0
	,0
	,0
	,''
FROM @xml.nodes('adjustments/pointsRows') AS a(p)

--rd
INSERT INTO CPE_UploadTemp_RD
WITH (ROWLOCK) (
		TableNum
		,Operation
		,Col1
		,Col2
		,Col3
		,Col4
		,Col5
		,Col6
		,Col7
		,Col8
		,Col9
		,Col10
		,Col11
		,Col12
		,Col13
		,ServerSerial
		,LocationID
		,WaitingACK
		,POSTimeStamp
		,IPLSeqNum
		)
SELECT 1
	,1
	,a.p.value('(localId/text())[1]', 'varchar(255)') --localid
	,ISNULL(@serial, '0') --serial
	,a.p.value('(incentiveId/text())[1]', 'varchar(255)') --incentiveid
	,a.p.value('(rewardOptionId/text())[1]', 'varchar(255)') --roid
	,a.p.value('(phase/text())[1]', 'varchar(255)') --phase
	,a.p.value('(customerPk/text())[1]', 'varchar(255)') --customerpk
	,a.p.value('(distributionDate/text())[1]', 'varchar(255)') --distribution date
	,a.p.value('(transNum/text())[1]', 'varchar(255)') --logixtransnum
	,a.p.value('(earnedLocationId/text())[1]', 'varchar(255)') --earnedlocationid
	,a.p.value('(presentedCustomerId/text())[1]', 'varchar(255)') --presentedcustomerid
	,a.p.value('(presentedCardTypeId/text())[1]', 'varchar(255)') --presentedcardtypeid
	,a.p.value('(resolvedCustomerId/text())[1]', 'varchar(255)') --resolvedcustomerid
	,a.p.value('(houseHoldId/text())[1]', 'varchar(255)') --householdid
	,ISNULL(@serial, '0')
	,ISNULL(@LocationId, '0') --marking location id as 0 for now
	,0 --0 means the rows are ready to be picked up by agent
	,NULL
	,ISNULL(@logixIplSeed, '0')
FROM @xml.nodes('adjustments/rewardDistributionRows') AS a(p)


--pref
--pref type == 1 then
INSERT INTO CPE_UploadTemp_PREF
WITH (ROWLOCK) (
		TableNum
		,Operation
		,Col1
		,Col2
		,Col3
		,ServerSerial
		,LocationID
		,WaitingACK
		,IPLSeqNum
		)
SELECT 11
	,1
	,a.p.value('(customerPk/text())[1]', 'varchar(255)') --customerpk
	,a.p.value('(preferenceId/text())[1]', 'varchar(255)') --pref id
	,a.p.value('(value/text())[1]', 'varchar(255)') --value
	,ISNULL(@serial, '0')
	,ISNULL(@LocationId, '0') --location id 0 for now
	,0
	,ISNULL(@logixIplSeed, '0')
FROM @xml.nodes('adjustments/preferenceRows') AS a(p)
WHERE a.p.value('(type/text())[1]', 'varchar(255)') = '1'

--else
INSERT INTO CPE_UploadTemp_PREF_MV
WITH (ROWLOCK) (
		TableNum
		,Operation
		,Col1
		,Col2
		,Col3
		,ServerSerial
		,LocationID
		,WaitingACK
		,IPLSeqNum
		)
SELECT 12
	,1
	,a.p.value('(customerPk/text())[1]', 'varchar(255)') --customerpk
	,a.p.value('(preferenceId/text())[1]', 'varchar(255)') --pref id
	,a.p.value('(value/text())[1]', 'varchar(255)') --value
	,ISNULL(@serial, '0')
	,ISNULL(@LocationId, '0') --location id 0 for now
	,0
	,ISNULL(@logixIplSeed, '0')
FROM @xml.nodes('adjustments/preferenceRows') AS a(p)
WHERE a.p.value('(type/text())[1]', 'varchar(255)') <> '1'

--gm
INSERT INTO CPE_UploadTemp_GM
WITH (ROWLOCK) (
		TableNum
		,Operation
		,Col1
		,Col2
		,Col3
		,Col4
		,Col5
		,Col6
		,POSTimeStamp
		,ServerSerial
		,LocationID
		,WaitingACK
		,IPLSeqNum
		)
SELECT 3
	,1
	,a.p.value('(localId/text())[1]', 'varchar(255)') --localid
	,ISNULL(@serial, '0') --serial
	,a.p.value('(customerPk/text())[1]', 'varchar(255)') --customerpk
	,a.p.value('(customerGroupPk/text())[1]', 'varchar(255)') --customer group id
	,a.p.value('(manual/text())[1]', 'varchar(255)') --manual
	,a.p.value('(transNum/text())[1]', 'varchar(255)') --logix trans num
	,NULL 
	,ISNULL(@serial, '0')
	,ISNULL(@LocationId, '0')
	,0
	,ISNULL(@logixIplSeed, '0')
FROM @xml.nodes('adjustments/customerGroupRows') AS a(p)

--std
INSERT INTO CPE_UploadTemp_UL
WITH (ROWLOCK) (
		TableNum
		,Operation
		,Col1
		,Col2
		,Col3
		,Col4
		,Col5
		,Col6
		,ServerSerial
		,LocationID
		,WaitingACK
		,IPLSeqNum
		)
SELECT 6
	,1
	,a.p.value('(customerId/text())[1]', 'varchar(255)') --userid
	,a.p.value('(lastVisit/text())[1]', 'varchar(255)') --last visit
	,a.p.value('(amountInTrans/text())[1]', 'varchar(255)') --amount in trans
	,a.p.value('(altIdOptOut/text())[1]', 'varchar(255)') --altidoptout
	,0 --hhpk optional default '0' for backwards compatibilty
	,a.p.value('(lockId/text())[1]', 'varchar(255)') --lockid default '0'
	,ISNULL(@serial, '0')
	,ISNULL(@LocationId, '0')
	,0
	,ISNULL(@logixIplSeed, '0')
FROM @xml.nodes('adjustments/savingsToDateDelta') AS a(p)


----------------------- Stored value data upload --------------------
select 
ID=IDENTITY(int, 1, 1)
	,10 as TableNum
	,0 as Operation
	,0 as localid
	,a.c.value('(customerPk/text())[1]', 'varchar(255)') as customerPK
	,a.c.value('(externalId/text())[1]', 'varchar(255)') as externalId
	,a.c.value('(qtyUsed/text())[1]', 'varchar(255)') as qtyused
	,a.c.value('(qtyEarned/text())[1]', 'varchar(255)') qtyearned
	,a.c.value('(storedValueProgramId/text())[1]', 'varchar(255)') as svprogramid
	,a.c.value('(value/text())[1]', 'varchar(255)') as programvalue
	,a.c.value('(earnedDate/text())[1]', 'varchar(255)') as earneddate
	,a.c.value('(expireDate/text())[1]', 'varchar(255)') as expiredate
	,a.c.value('(offerId/text())[1]', 'varchar(255)') as offerId
	,ISNULL(@serial, '0') as ServerSerial
	,ISNULL(@LocationId, '0') as LocationId
	,a.c.value('(presentedCustomerId/text())[1]', 'varchar(255)') as presentedcustomerid
	,a.c.value('(presentedCardTypeId/text())[1]', 'varchar(255)') as presentedcardtypeid
	,a.c.value('(resolvedCustomerId/text())[1]', 'varchar(255)') as resolvedcustomerid
	,a.c.value('(houseHoldId/text())[1]', 'varchar(255)') as householdid
	into #SVTemp_adjustments 
	FROM @xml.nodes('adjustments/storedValueRows') as a(c)

declare @localId bigint = -1
declare @i int = -1
declare @max int = 0
declare @qtyUsed varchar(255) = '0'
declare @customerPK varchar(255) = '0'
declare @SVProgramId varchar(255) = '0'
declare @EarnedDate varchar(255) = getdate()	-- Using server date as default value	
--declare @ExternalID varchar(255) = '0'

declare @RedeemCompleted bit
declare @TTLocalIdPK int
declare @SVTempTable_LocalIdResolution Table(PK int identity, localid int, QtyEarned int, QtyUsed int, ServerSerial int)
--declare @LocalId int
declare @QtyAvailable int
--declare @UsedValue decimal(12,3)
declare @TempQtyUsed int
--declare @BurnInEarningTransaction bit
declare @ServerSerialOfChosenSVRecord int

declare @LocationIdForRecord as int
--Set @BurnInEarningTransaction=0		--Parameterize SP after discussion if this can be sent by Customer service
-- Validations are done by engine and customer service, that is, the sp gets a record which can be updated against available

--select * from @SVTempTable_LocalIdResolution

select @i = 1, @max = max(ID) from #SVTemp_adjustments

while @i <= @max
begin
	set @RedeemCompleted = 0
	select @qtyUsed = qtyUsed, @customerPK=customerPK, @SVProgramId=svprogramid, @ServerSerialOfChosenSVRecord=ServerSerial,@LocationIdForRecord=@LocationId, @EarnedDate=earneddate from #SVTemp_adjustments where ID=@i	
	--select * from #SVTemp_adjustments where ID=@i
	
	if @qtyUsed = '0'
	begin
		exec pa_GetNextStoredValueLocalID 1, @localId output
		update #SVTemp_adjustments set localId = @localId,operation = 1 where ID = @i
	end
	else
	begin
			--AMS-2228: The single record from broker will have qtyused which can be redeemed against multiple records
			-- For this we need to add additional records in #SVTemp_adjustments
		set @TempQtyUsed = @qtyUsed		
		
		Insert Into @SVTempTable_LocalIdResolution
		Select Temp.LocalId, Temp.QtyEarned, Temp.QtyUsed, Temp.ServerSerial From
		(Select StoredValueID, localid, QtyEarned, QtyUsed, expiredate, ServerSerial From StoredValue 
		Where CustomerPK=cast(@customerPK as int) and SVProgramID = cast(@SVProgramId as int) and QtyEarned - QtyUsed > 0
		and expiredate > @EarnedDate 	
			Union
		Select ID, localid, QtyEarned, QtyUsed, expiredate, ServerSerial From #SVTemp_adjustments 
		Where CustomerPK=cast(@customerPK as int) and SVProgramID = cast(@SVProgramId as int) and (cast(QtyEarned as int) - cast(QtyUsed as int)) > 0
		and expiredate > @EarnedDate) as Temp 
		Order by Temp.expiredate Asc
		
		--select *, @RedeemCompleted as RedeemCompleted from @SVTempTable_LocalIdResolution
		--print 'Enter sv update with pk:' + @customerPK
		while (@RedeemCompleted <> 1)
		begin
			select top 1 @TTLocalIdPK=PK, @localid=localid, @QtyAvailable=QtyEarned-QtyUsed, @ServerSerialOfChosenSVRecord=ServerSerial from @SVTempTable_LocalIdResolution 
			
			--Select @localid as LocalId, @TempQtyUsed as Used, @QtyAvailable as Available, @TTLocalIdPK as LocalIdPK
			--print cast(@TempQtyUsed as varchar(3)) +'::'+ cast(@QtyAvailable as varchar(3))
			--select @localid as localid, @QtyAvailable as AvailableQtyForThisRecord, @TempQtyUsed as QtyToRedeem
			if(@TempQtyUsed <= @QtyAvailable)	--In this case update the existing record in the temp table for the quantitiy that can be burned against actual StoredValue record, rest of the quantity can be burned against other StoredValue records for which new records will be inserted into the temp table
				update #SVTemp_adjustments set QtyUsed=@TempQtyUsed, operation = 3, localid=@localId, ServerSerial=@ServerSerialOfChosenSVRecord where ID = @i
			else
			 
				Insert Into #SVTemp_adjustments(TableNum,Operation,localid,customerPK,externalId,qtyused,qtyearned,svprogramid,programvalue,earneddate,expiredate,offerId,ServerSerial,LocationId)
				Select 	TableNum
						,3	--Operation 3 for Update SV record
						,@localid
						,customerPK
						,externalId
						,@QtyAvailable		--qtyused=@QtyAvailable for this localid record, for remaining quantity create a new record in #SVTemp_adjustments against the new local id
						,qtyearned
						,svprogramid
						,programvalue
						,earneddate
						,expiredate
						,offerId
						,@ServerSerialOfChosenSVRecord
						,LocationId
				from #SVTemp_adjustments where ID=@i
			--End loop
			if(Not Exists (Select 1 From @SVTempTable_LocalIdResolution) OR (@QtyAvailable - @TempQtyUsed >= 0))
			begin
				set @RedeemCompleted = 1
			end
				
			set @TempQtyUsed = @TempQtyUsed	- @QtyAvailable
			--Select * from @SVTempTable_LocalIdResolution where PK=@TTLocalIdPK				
			delete from @SVTempTable_LocalIdResolution where PK=@TTLocalIdPK				
		end
		
		--update #SVTemp_adjustments set localId = @localId, operation = 3 where ID = @i
	end
	
	set @i = @i + 1
end


insert into CPE_UploadTemp_SV with (RowLock)   
        (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8,  Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, ServerSerial, LocationID, WaitingACK, AdminUserID, Replayed, ReplayedDate, POSTimeStamp, IPLSeqNum, 
AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText)
select 10, Operation, localId, ServerSerial, svprogramid, offerId, customerPK, qtyEarned, qtyUsed, programvalue, earnedDate, expireDate, externalId, '0', '0', '0', '0', presentedcustomerid, presentedcardtypeid, resolvedcustomerid, householdid,   
        ServerSerial, LocationId, 0, 0, '0', NULL, NULL, ISNULL(@logixIplSeed, '0'), 0, 0, 0, '0'
from #SVTemp_adjustments
where qtyUsed = '0'


insert into CPE_UploadTemp_SV with (RowLock)   
    (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, Col14, Col15, Col16, Col17, Col18, Col19, Col20,   
         ServerSerial, LocationID, WaitingACK, AdminUserID, Replayed, ReplayedDate,POSTimeStamp, IPLSeqNum)      
select 10, Operation, localId, ServerSerial, customerPK, externalId, 1, qtyUsed, 0, 4, earnedDate, programValue, svprogramid, '0', '0', '0', '0', presentedcustomerid, presentedcardtypeid, resolvedcustomerid, householdid, expireDate,   
         ServerSerial, LocationId, 0, 0, '0', NULL, NULL, ISNULL(@logixIplSeed, '0')
from #SVTemp_adjustments
where qtyUsed <> '0'

      COMMIT TRAN T1;    
    END TRY    
    BEGIN CATCH    
      IF @@TRANCOUNT > 0 BEGIN    
        ROLLBACK TRAN T1;    
      END    
      DECLARE @ErrorMessage NVARCHAR(4000);    
      DECLARE @ErrorSeverity INT;    
      DECLARE @ErrorState INT;    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();    
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
    END CATCH      

drop table #SVTemp_adjustments

-- Reward Limit
INSERT INTO CPE_UploadTemp_RewardLimit
WITH (ROWLOCK) (
      Operation
      ,PromoVarID
      ,CustomerPK
      ,AdjustmentAmount
      ,WaitingACK
      )
SELECT
   1
   ,a.p.value('(promoVarID/text())[1]', 'bigint') --promotion variable ID
   ,a.p.value('(customerPk/text())[1]', 'bigint') --customerpk
   ,a.p.value('(amount/text())[1]', 'decimal(15,3)') AS Amount
   ,0 --0 means the rows are ready to be picked up by agent
FROM @xml.nodes('adjustments/rewardLimitRows') AS a(p)

-- Pending Values?
declare @CartID varchar(255)

select @CartID = a.c.value('(shoppingCartId)[1]', 'varchar(255)') FROM @xml.nodes('adjustments') AS a(c)
   
if @CartID is not null 
begin
   -- Delete any existing pending points/distribution/limits for this cart
   EXEC pt_PendingDeleteByCartID 0,0,@CartID,0,0,0

   -- Pending Points
   INSERT INTO CPE_UploadTemp_PointsPending
   WITH (ROWLOCK) (
         CustomerPK
         ,ProgramID
         ,EarnedAmount
         ,RedeemedAmount
         ,CartID
         ,ExtLocationCode
         ,LogixTransNum
         ,POSTimeStamp
         ,ServerSerial
         ,LocationID
         ,WaitingACK
         )
   SELECT 
      a.p.value('(customerPk/text())[1]', 'bigint') AS CustomerPK
      ,a.p.value('(programId/text())[1]', 'bigint') AS ProgramID
      ,a.p.value('(earnedAmount/text())[1]', 'decimal(15,3)') AS EarnedAmount
      ,a.p.value('(redeemedAmount/text())[1]', 'decimal(15,3)') AS RedeemedAmount
      ,a.p.value('(shoppingCartId/text())[1]', 'nvarchar(36)') AS CartID
      ,a.p.value('(extLocationCode/text())[1]', 'nvarchar(20)') AS ExtLocationCode
      ,a.p.value('(transNum/text())[1]', 'nvarchar(20)') AS LogixTransNum
      ,a.p.value('(posTimeStamp/text())[1]', 'nvarchar(20)') AS POSTimeStamp
      ,ISNULL(@serial, '0')
      ,@LocationId --putting location id 0 for now, this might affect the transdownload on cpe
      ,0 --WaitingACK 0 indicates data is ready for TransUpload agents to be picked up.
   FROM @xml.nodes('adjustments/pendingPointsRows') AS a(p)

   -- Pending reward distribution
   INSERT INTO CPE_UploadTemp_RewardDistributionPending
   WITH (ROWLOCK) (
         CustomerPK
         ,IncentiveID
         ,RewardOptionID
         ,CartID
         ,ExtLocationCode
         ,LogixTransNum
         ,POSTimeStamp
         ,ServerSerial
         ,LocationID
         ,WaitingACK
         )
   SELECT
      a.p.value('(customerPk/text())[1]', 'bigint') --customerpk
      ,a.p.value('(incentiveId/text())[1]', 'bigint') --incentiveid
      ,a.p.value('(rewardOptionId/text())[1]', 'bigint') --roid
      ,a.p.value('(shoppingCartId/text())[1]', 'nvarchar(36)') AS CartID
      ,a.p.value('(extLocationCode/text())[1]', 'nvarchar(20)') AS ExtLocationCode
      ,a.p.value('(transNum/text())[1]', 'nvarchar(20)') AS LogixTransNum
      ,a.p.value('(posTimeStamp/text())[1]', 'nvarchar(20)') AS POSTimeStamp
      ,ISNULL(@serial, '0')
      ,@LocationId --marking location id as 0 for now
      ,0 --0 means the rows are ready to be picked up by agent
   FROM @xml.nodes('adjustments/pendingRewardDistributionRows') AS a(p)

   -- Pending reward limits
   INSERT INTO CPE_UploadTemp_RewardLimitPending
   WITH (ROWLOCK) (
         CustomerPK
         ,IncentiveID
         ,RewardOptionID
         ,PromoVarID
         ,Amount
         ,CartID
         ,ExtLocationCode
         ,LogixTransNum
         ,POSTimeStamp
         ,ServerSerial
         ,LocationID
         ,WaitingACK
         )
   SELECT
      a.p.value('(customerPk/text())[1]', 'bigint') --customerpk
      ,a.p.value('(incentiveId/text())[1]', 'bigint') --incentiveid
      ,a.p.value('(rewardOptionId/text())[1]', 'bigint') --roid
      ,a.p.value('(promoVarID/text())[1]', 'bigint') --promotion variable ID
      ,a.p.value('(amount/text())[1]', 'decimal(15,3)') AS Amount
      ,a.p.value('(shoppingCartId/text())[1]', 'nvarchar(36)') AS CartID
      ,a.p.value('(extLocationCode/text())[1]', 'nvarchar(20)') AS ExtLocationCode
      ,a.p.value('(transNum/text())[1]', 'nvarchar(20)') AS LogixTransNum
      ,a.p.value('(posTimeStamp/text())[1]', 'nvarchar(20)') AS POSTimeStamp
      ,ISNULL(@serial, '0')
      ,@LocationId --marking location id as 0 for now
      ,0 --0 means the rows are ready to be picked up by agent
   FROM @xml.nodes('adjustments/pendingRewardLimitRows') AS a(p)
end

END
GO
GRANT EXECUTE ON [dbo].[pa_CS_updateAdjustments] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CUA_AddCardPermitted.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_AddCardPermitted.StoredProcedure.sql 43060 2012-01-31 21:25:24Z nathan $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_AddCardPermitted]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_AddCardPermitted]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_AddCardPermitted]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_AddCardPermitted]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_AddCardPermitted] @CustomerPK bigint, @CardTypeID int, @ReadOnlyAlternate bit = 0,
                                                 @Permitted bit OUTPUT, @ReturnCode int = 1 OUTPUT
AS
  declare @OnePerCust bit;
  declare @CardCount int;
  
  set @Permitted = 1;
  set @OnePerCust = 0;
  set @CardCount = 0;
  set @ReturnCode = 1;
  
  select @OnePerCust = IsNull(OnePerCustomer,0) from CardTypes with (NoLock) where CardTypeID = @CardTypeID;    

  -- if a restriction is placed on this card type then check for a potential violation
  if @OnePerCust = 1 and @CustomerPK > 0
    begin
      EXEC	[dbo].[pl_Return_CustCardCount] @CustomerPK, @CardTypeID, @CardCount OUTPUT
      if @CardCount > 0 
        begin
          set @Permitted = 0;
          set @ReturnCode = -1;
        end
    end

  -- validate that the card type ID is valid for this customer type
  if not Exists (select CT.CardTypeID from Customers as CUST with (NoLock)
                 inner join CardTypes as CT with (NoLock) on CT.CustTypeID = CUST.CustomerTypeID
                 where CUST.CustomerPK=@CustomerPK and CT.CardTypeID=@CardTypeID) 
    begin
	  set @Permitted = 0;
	  set @ReturnCode = -2;
    end
  
  -- validate that card type id is not an alternate id card type and that alternated id is not read only
  if @ReadOnlyAlternate = 1 and Exists (select CT.CardTypeID from CardTypes as CT with (NoLock)
										where (CT.Description like ''%Alternate%ID%''
										or CT.extcardtypeid like ''%Alternate%ID%'')
										and CT.CardTypeID = @CardTypeID)
    begin
	  set @Permitted = 0;
	  set @ReturnCode = -3;
    end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_AddCardPermitted] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_AddToHH.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_AddToHH.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_AddToHH]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_AddToHH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_AddToHH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_AddToHH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_AddToHH] @HHID nvarchar(400), @ExtCardID nvarchar(400), @CardTypeID int,
                                       @Result varchar(200) OUTPUT, @HHPK bigint OUTPUT, @CustomerPK bigint OUTPUT
as 
  set nocount on
  set @CustomerPK=0;
  set @HHPK=0;
 
  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
  if @CustomerPK=0 begin
    -- resync the initial card values for any customers that may have this ExtCardID/CardTypeID as its IntialCardID/InitialCardTypeID
    exec dbo.pa_CPE_CI_HandleInitialCard @ExtCardID, @CardTypeID
   
    Insert into Customers with (RowLock) (InitialCardID, CustomerStatusID, CreatedDate, CustomerTypeID, InitialCardTypeID) values (@ExtCardID, 1, getdate(), 0, @CardTypeID);
    set @CustomerPK=Scope_Identity();
  end

  -- see if the household record exists, if not then create it
  select @HHPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@HHID and CardTypeID=1;
  if @HHPK=0 begin
    Insert into Customers with (RowLock) (InitialCardID, CustomerStatusID, CreatedDate, CustomerTypeID, InitialCardTypeID) values (@ExtCardID, 1, getdate(), 1, @CardTypeID);
    set @HHPK=Scope_Identity();
  end

  Update Customers with (RowLock) set HHPK=@HHPK, CPEStoreSendFlag=1 where CustomerPK=@CustomerPK;
  set @Result=''OK - CustomerPK(''+cast(@CustomerPK as varchar)+'') linked to HHPK(''+cast(@HHPK as varchar)+'')''


' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_AddToHH] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_ChangeExtCardID.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CUA_ChangeExtCardID]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_ChangeExtCardID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CUA_ChangeExtCardID]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[pa_CUA_ChangeExtCardID] @ExtCardID nvarchar(400), @ExtCardTypeID int, @NewExtCardID nvarchar(400), @Success bit Output,  @ExtCardIDOriginal nvarchar(400)
as 
    -- $Id: dbo.pa_CUA_ChangeExtCardID.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
    -- Build Version: 7.3.1.138972

    declare @NumRecs int;
    set @NumRecs = 0;

    declare @CustomerPK bigint;
    set @CustomerPK = 0;
    
    set @Success = 0;

    select @NumRecs = count(*) from CardIDs with (NoLock) where ExtCardID = @NewExtCardID and CardTypeID = @ExtCardTypeID;

    if @NumRecs = 0 begin

        -- get the customer pk for this card
        select @CustomerPK = CustomerPK from CardIDs with(NoLock) where ExtCardID = @ExtCardID and CardTypeID = @ExtCardTypeID;

        -- switch the card number 
        Update CardIDs with (RowLock) set ExtCardID = @NewExtCardID, ExtCardIDOriginal=@ExtCardIDOriginal where ExtCardID = @ExtCardID and CardTypeID = @ExtCardTypeID;

        -- flag the customer for changes that need sent to the local server
        Update Customers with (RowLock) set CPEStoreSendFlag = 1, UpdateCount = UpdateCount + 1 where CustomerPK = @CustomerPK;

        set @Success = 1

    end

GO

GRANT EXECUTE ON [dbo].[pa_CUA_ChangeExtCardID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_GetAltID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_GetAltID.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_GetAltID]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_GetAltID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_GetAltID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_GetAltID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_GetAltID] @AltIDTableName nvarchar(100), @AltIDFieldName nvarchar(100),
                                         @ExtCardID nvarchar(400), @ExtCardTypeID int
AS
	set nocount on
	declare @CustomerPK int;
	declare @RecCt int ;

	set @CustomerPK = 0;
	set @RecCt = 0;


    select @CustomerPK = CustomerPK from CardIDs where ExtCardID = @ExtCardID and CardTypeID = @ExtCardTypeID;

	exec(''select '' + @AltIDFieldName + '' from '' + @AltIDTableName + '' where CustomerPK='' + @CustomerPK)
		

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_GetAltID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_GetCustomerFromCardID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_GetCustomerFromCardID.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_GetCustomerFromCardID]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_GetCustomerFromCardID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_GetCustomerFromCardID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_GetCustomerFromCardID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_GetCustomerFromCardID] @ExtCardID nvarchar(400), @CardTypeID int, 
                                              @CustomerPK bigint OUTPUT 
AS 
  SET NOCOUNT ON;
  set @CustomerPK = 0
  
    -- determine if this card already exists
    select Top 1 @CustomerPK = IsNull(CustomerPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_GetCustomerFromCardID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_GetHHIDFromCardID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_GetHHIDFromCardID.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_GetHHIDFromCardID]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_GetHHIDFromCardID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_GetHHIDFromCardID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_GetHHIDFromCardID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_GetHHIDFromCardID] @ExtCardID nvarchar(400), @CardTypeID int,
                                                  @HHID nvarchar(400) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	declare @CustomerPK bigint;
	declare @HHPK bigint;
	
	set @HHID = '''';
	
	-- get the customer pk from the card number
	select @CustomerPK = ISNULL(CustomerPK, 0) from CardIDs with (NoLock) 
	where ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;
	
    If @CustomerPK > 0
      begin
		-- get the HHPK for the customer PK	
		select @HHPK = ISNULL(HHPK, 0) from Customers with (NoLock)
		where CustomerPK = @CustomerPK;
		
		If @HHPK > 0 
		  begin
			select top 1 @HHID = ISNULL(ExtCardID, '''') from CardIDs with (NoLock) 
			where CustomerPK = @HHPK and CardTypeID = 1; 
		  End
      end
		  
END

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_GetHHIDFromCardID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_RemoveAttributeType.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_RemoveAttributeType.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_RemoveAttributeType]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveAttributeType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_RemoveAttributeType]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveAttributeType]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_RemoveAttributeType] @AttributeTypeID int, @RecsDeleted int OUTPUT, @RunAgain bit OUTPUT
as 
  set nocount on
  
  set @RecsDeleted=0;
  set @RunAgain=1;
  
  --set rowcount 1800;
  update TOP (1800) CustomerAttributes set Deleted=1, CPEStoreSendFlag=1, LastUpdate=GETDATE() where AttributeTypeID=@AttributeTypeID and Deleted=0;
  set @RecsDeleted = @@ROWCOUNT;
  --set rowcount 0;
  
  if @RecsDeleted < 1800 
    begin
      set @RunAgain = 0;
    end
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_RemoveAttributeType] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_RemoveAttributeValue.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_RemoveAttributeValue.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_RemoveAttributeValue]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveAttributeValue]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_RemoveAttributeValue]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveAttributeValue]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_RemoveAttributeValue] @AttributeTypeID int, @AttributeValueID int, 
                                                     @RecsDeleted int OUTPUT, @RunAgain bit OUTPUT
as 
  set nocount on
  
  set @RecsDeleted=0;
  set @RunAgain=1;
  
  --set rowcount 1800;
  update TOP (1800) CustomerAttributes set Deleted=1, CPEStoreSendFlag=1, LastUpdate=GETDATE() where AttributeTypeID=@AttributeTypeID and AttributeValueID=@AttributeValueID and Deleted=0;
  set @RecsDeleted = @@ROWCOUNT;
  --set rowcount 0;
  
  if @RecsDeleted < 1800 
    begin
      set @RunAgain = 0;
    end
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_RemoveAttributeValue] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_RemoveCustomerAttribute.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_RemoveCustomerAttribute.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_RemoveCustomerAttribute]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveCustomerAttribute]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_RemoveCustomerAttribute]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveCustomerAttribute]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_RemoveCustomerAttribute] @ExtCardID nvarchar(400), @CardTypeID int, @AttributeTypeID int,
                                                        @StatusCode int OUTPUT
as 
  set nocount on
  declare @CustomerPK bigint;
  declare @NumRecs int;
  
  set @CustomerPK=0;
  set @StatusCode=-99;
  set @NumRecs=0;
  
  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

  if @CustomerPK > 0
    begin
      update CustomerAttributes set Deleted=1, CPEStoreSendFlag=1, AttributeValueID=0, LastUpdate=GETDATE()  where CustomerPK = @CustomerPK and AttributeTypeID=@AttributeTypeID;
      if @@ROWCOUNT > 0
        begin
          -- updated  customer attribute
          set @StatusCode = 1;
        end
      else
        begin 
          -- failed to update customer attribute
          set @StatusCode = -1;
        end
    end
  else
    begin
      -- customer does not exist
      set @StatusCode = -99;
    end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_RemoveCustomerAttribute] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_RemoveCustomerSupplemental.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_RemoveCustomerSupplemental.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_RemoveCustomerSupplemental]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveCustomerSupplemental]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_RemoveCustomerSupplemental]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveCustomerSupplemental]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_RemoveCustomerSupplemental] @ExtCardID nvarchar(400), @CardTypeID int, @FieldID int,
                                                        @StatusCode int OUTPUT
as 
  set nocount on
  declare @CustomerPK bigint;
  declare @NumRecs int;
  
  set @CustomerPK=0;
  set @StatusCode=-99;
  set @NumRecs=0;
  
  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

  if @CustomerPK > 0
    begin
      update CustomerSupplemental set Deleted=1, LastUpdate=GETDATE()  where CustomerPK = @CustomerPK and FieldID=@FieldID;
      if @@ROWCOUNT > 0
        begin
          -- updated  customer supplemental
          set @StatusCode = 1;
        end
      else
        begin 
          -- failed to update customer supplemental
          set @StatusCode = -1;
        end
    end
  else
    begin
      -- customer does not exist
      set @StatusCode = -99;
    end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_RemoveCustomerSupplemental] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_RemoveFromHH.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_RemoveFromHH.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_RemoveFromHH]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveFromHH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_RemoveFromHH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_RemoveFromHH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_RemoveFromHH] @HHID nvarchar(400), @ExtCardID nvarchar(400), @CardTypeID int,
                                            @Result varchar(200) OUTPUT, @Removed bit = 0 OUTPUT
as 
  set nocount on
  declare @CustomerPK bigint;
  declare @HHPK bigint;
  set @CustomerPK=0;
  set @HHPK=0;
  set @Removed=0;

  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
  if @CustomerPK=0 begin
    set @Result=''Customer record not found'';
  end
  else begin
    -- see if the household record exists
    select @HHPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@HHID and CardTypeID=1;
    if @HHPK=0 begin
      set @Result=''HH record not found'';
    end
    else begin
      Update Customers with (RowLock) set HHPK=0, CPEStoreSendFlag=1 where CustomerPK=@CustomerPK and HHPK=@HHPK;
      if @@ROWCOUNT > 0 begin
        set @Removed = 1;
        set @Result=''OK - CustomerPK(''+cast(@CustomerPK as varchar)+'') removed from HHPK(''+cast(@HHPK as varchar)+'')''
      end
      else begin
        set @Removed = 0;
        set @Result= ''Customer is not a member of the household'';
      end
    end
  end 

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_RemoveFromHH] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_ReplaceCard.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_ReplaceCard.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_ReplaceCard]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_ReplaceCard]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_ReplaceCard]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_ReplaceCard]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_ReplaceCard] @ExtCardID nvarchar(400), @CardTypeID int, 
                                            @NewExtCardID nvarchar(400), @NewCardTypeID int,@CardStatusID int, @Status int OUTPUT,@NewExtCardIDOriginal nvarchar(400)

AS 
  SET NOCOUNT ON;
	declare @CardPK bigint;
	declare @CustomerPK bigint;	
	declare @temp bigint;
  
	set @CustomerPK = 0;
	set @CardPK = 0;
	set @Status = 0;
	set @temp = -1;
	  
	-- determine if this card already exists
    select Top 1 @CustomerPK = IsNull(CustomerPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
	select Top 1 @CardPK = ISNULL(CardPK,0) from CardIDs with (NoLock) where CustomerPK = @CustomerPK and CardTypeID= @NewCardTypeID;
	select Top 1 @temp = ISNULL(CustomerPK,-1) from CardIDs where ExtCardID = @NewExtCardID and CardTypeID = @NewCardTypeID
	
	if @temp != @CustomerPK and @temp >-1
	  begin
	    set @Status =-2
	  end
    else if @CardPK > 0 and @CustomerPK >0
	  begin
		update CardIDs with (RowLock) set 
		  ExtCardID = @NewExtCardID,
		  ExtCardIDOriginal =@NewExtCardIDOriginal 	
		where CardPK = @CardPK;
		if @@RowCount > 0 
		  begin
			if @CardStatusID >0 EXEC dbo.pa_CUA_UpdateCard @NewExtCardID, @NewCardTypeID, @CardStatusID, @Status;
			set @Status = 1;
	      end
	  end
    else if @CardPK <=0
	  begin
		-- card not found
		set @Status = -1;
	  end
	else
	  begin
        -- unknown error
        set @Status = -3;
      end
      

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_ReplaceCard] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CUA_UpdateAR_Account.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateAR_Account.StoredProcedure.sql 34882 2011-08-01 17:19:35Z nathan $
-- Build Version: 7.3.1.138972
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateAR_Account]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CUA_UpdateAR_Account]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create procedure [dbo].[pa_CUA_UpdateAR_Account] @CustomerPK bigint, @CompoundCharge tinyint, @FinanceCharge tinyint,
                                                 @CreditLimit numeric(16,2), @APR numeric(5,2)

as 
  set nocount on
  declare @NumRecs int;

  set @NumRecs=0;
 
  -- see if the customer ext record already exists
  select @NumRecs=Count(*) from AR_Account with (NoLock) where CustomerPK = @CustomerPK;

  if (@CompoundCharge is null) begin
    set @CompoundCharge=0;
  end

  if (@FinanceCharge is null) begin
    set @FinanceCharge=0;
  end

  if @NumRecs=0 begin
    Insert into AR_Account with (RowLock) (CustomerPK, CompoundCharge, FinanceCharge, CreditLimit, APR)
       values (@CustomerPK, @CompoundCharge, @FinanceCharge, @CreditLimit, @APR);
  end
  else begin
    Update AR_Account with (RowLock) set
         CompoundCharge = CASE WHEN not(@CompoundCharge is null) THEN @CompoundCharge Else CompoundCharge END, 
         FinanceCharge = CASE WHEN not(@FinanceCharge is null) THEN @FinanceCharge Else FinanceCharge END, 
         CreditLimit = CASE WHEN not(@CreditLimit is null) THEN @CreditLimit Else CreditLimit END, 
         APR = CASE WHEN not(@APR is null) THEN @APR Else APR END
         where CustomerPK=@CustomerPK
  end
GO

GRANT EXECUTE ON [dbo].[pa_CUA_UpdateAR_Account] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateCAMCustomer.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateCAMCustomer.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCAMCustomer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateCAMCustomer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[pa_CUA_UpdateCAMCustomer] @ExtCardID nvarchar(400), @ExtCardTypeID int, @FirstName nvarchar(50), @LastName nvarchar(50), @CustomerStatusID int,
                                                  @DOB nvarchar(25), @PhoneAsEntered nvarchar(100), @PhoneDigitsOnly nvarchar(100), @AltID nvarchar(20), @AltIdVerifier nvarchar(20), 
                                                  @BannerID int, @AltIdOptOut int = -1, @CustomerPK bigint OUTPUT
as 
  set nocount on
  declare @NumRecs int;

  set @CustomerPK=0;
 

  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@ExtCardTypeID;

  if @CustomerPK=0 begin
    -- null out all the unset variables
    if @LastName='<><>' set @LastName = null;
    if @FirstName='<><>' set @FirstName = null;
    if @AltID='<><>' set @AltID = null;
    if @AltIDVerifier='<><>' set @AltIDVerifier = null;
    if @BannerID<=0 set @BannerID = null;
    if @AltIdOptOut = -1 set @AltIdOptOut = 0;

    Insert into Customers with (RowLock) (InitialCardID, FirstName, LastName, Employee, CustomerStatusID, CreatedDate, InitialCardTypeID, CustomerTypeID, AltID, Verifier, BannerID)
      values (@ExtCardID, @FirstName, @LastName, 0, @CustomerStatusID, getdate(), @ExtCardTypeID, 2, @AltID, @AltIdVerifier, @BannerID);
    set @CustomerPK=Scope_Identity();
  end
  else begin
    Update Customers with (RowLock) set 
         FirstName = CASE WHEN not(@FirstName='<><>') THEN @FirstName Else FirstName END, 
         LastName = CASE WHEN not(@LastName='<><>') THEN @LastName Else LastName END, 
         CustomerStatusID = CASE WHEN not(@CustomerStatusID<0) THEN @CustomerStatusID Else CustomerStatusID END,  
         AltID = CASE WHEN not(@AltID='<><>') THEN @AltID Else AltID END, 
         Verifier = CASE WHEN not(@AltIdVerifier='<><>') THEN @AltIdVerifier Else Verifier END, 
         BannerID = CASE WHEN not(@BannerID<=0) THEN @BannerID Else BannerID END, 
         AltIDOptOut = CASE WHEN not(@AltIDOptOut=-1) THEN @AltIDOptOut Else AltIDOptOut END, 
         UpdateCount=UpdateCount+1 
         Where CustomerPK=@CustomerPK;
  end

  select @NumRecs=count(*) from CustomerExt with (NoLock) where CustomerPK=@CustomerPK;
  if @NumRecs=0 begin
    if @DOB='' or @DOB = '<><>' begin
      set @DOB=NULL 
    end
    if @PhoneAsEntered='none' begin
      set @PhoneAsEntered=NULL
      set @PhoneDigitsOnly=NULL
    end 
    Insert into CustomerExt with (RowLock) (CustomerPK, DOB, PhoneAsEntered, PhoneDigitsOnly) values (@CustomerPK, @DOB, @PhoneAsEntered, @PhoneDigitsOnly);
  end
  else begin
    Update CustomerExt with (RowLock) set
         DOB = CASE WHEN not(@DOB='<><>' or @DOB='') THEN @DOB Else DOB END, 
         PhoneAsEntered = CASE WHEN not(@PhoneAsEntered='none') THEN @PhoneAsEntered Else PhoneAsEntered End,
         PhoneDigitsOnly = CASE WHEN not(@PhoneAsEntered='none') THEN @PhoneDigitsOnly Else PhoneDigitsOnly End
         where CustomerPK=@CustomerPK
  end 
GO

GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCAMCustomer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateCard.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateCard.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_UpdateCard]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCard]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateCard]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCard]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_UpdateCard] @ExtCardID nvarchar(400), @CardTypeID int, 
                                           @CardStatusID int, @Status int OUTPUT 
AS 
  SET NOCOUNT ON;
  declare @CardPK bigint;
  
  set @CardPK = 0;
  set @Status = 0;
  
    -- determine if this card already exists
    select Top 1 @CardPK = IsNull(CardPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

    if @CardPK > 0
      begin
        update CardIDs with (RowLock) set 
          CardStatusID = Case when @CardStatusID <> - 1 then @CardStatusID else CardStatusID end
        where CardPK = @CardPK;
        if @@RowCount > 0 set @Status = 1;
      end
    else
      begin
        -- card not found
        set @Status = -1;
      end
      

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCard] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateCustomer.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomer]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CUA_UpdateCustomer]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[pa_CUA_UpdateCustomer] @ExtCardID nvarchar(400), @CardTypeID int, @FirstName nvarchar(50), @LastName nvarchar(50), @Employee bit, @EmployeeSpecified int,
                                               @CardStatus int, @DOB nvarchar(25), @PhoneAsEntered nvarchar(100), @PhoneDigitsOnly nvarchar(100), @AltID nvarchar(20), @AltIdVerifier nvarchar(20), 
                                               @BannerID int, @BannerSpecified bit = 0, @AltIdOptOut int = -1, @EmployeeID nvarchar(26), @MiddleName nvarchar(50), @CustomerStatusID int, 
                                               @Prefix nvarchar(20), @Suffix nvarchar(20), @EnrollmentDate nvarchar(8),@CreatedLocationID bigint,@CustomerPK bigint OUTPUT,@ExtCardIDOriginal nvarchar(400)
as 
    -- $Id: dbo.pa_CUA_UpdateCustomer.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
    -- Build Version: 7.3.1.138972
  set nocount on
  declare @NumRecs int;
  --declare @CardStatusType int;

  set @CustomerPK=0;
 

  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

  if @CustomerPK=0 begin
    -- null out all the unset variables
    if @LastName = '<><>' or @LastName='[NULL]' set @LastName = null;
    if @FirstName = '<><>' or @FirstName='[NULL]' set @FirstName = null;
    if @AltID = '<><>' or @AltID='[NULL]' set @AltID = null;
    if @AltIDVerifier = '<><>' or @AltIDVerifier='[NULL]' set @AltIDVerifier = null;
    if @BannerID <= 0 set @BannerID = null;
    if @AltIdOptOut = -1 set @AltIdOptOut = 0;
    if @EmployeeID = '<><>' set @EmployeeID = null;
    if @MiddleName = '<><>' set @MiddleName = null;
    if @Prefix = '<><>' set @Prefix = null;
    if @Suffix = '<><>' set @Suffix = null;
    if @CreatedLocationID = 0 set @CreatedLocationID = null;
    if @EnrollmentDate = '' or @EnrollmentDate='<><>' or @EnrollmentDate='[NULL]' set @EnrollmentDate=NULL 
    if @CardStatus IS NULL set @CardStatus = 0
    
    -- if the statuses aren't set then default them to active
    if @CustomerStatusID <= -1 set @CustomerStatusID = 1;
    
    Insert into Customers with (RowLock) (InitialCardID, FirstName, LastName, Employee, CreatedDate, 
                                          InitialCardTypeID, AltID, Verifier, BannerID, EmployeeID, MiddleName, 
                                          CustomerStatusID, CustomerTypeID, Prefix, Suffix,EnrollmentDate,CreatedLocationID,InitialCardIDOriginal)
      values (@ExtCardID, @FirstName, @LastName, @Employee, getdate(), 
              @CardTypeID, @AltID, @AltIdVerifier, @BannerID, @EmployeeID, @MiddleName, 
              @CustomerStatusID, 0, @Prefix, @Suffix,@EnrollmentDate,@CreatedLocationID,@ExtCardIDOriginal);
    set @CustomerPK=Scope_Identity();
  end
  else begin
    -- null out all the variables that are set to be nullified.
    if @LastName='[NULL]' set @LastName = null;
    if @FirstName='[NULL]' set @FirstName = null;
    if @AltID='[NULL]' set @AltID = null;
    if @AltIDVerifier='[NULL]' set @AltIDVerifier = null;
    if @BannerID<=0 and @BannerSpecified = 1 set @BannerID = null;
    if @CreatedLocationID=0 set @CreatedLocationID = null;

    Update Customers with (RowLock) set 
         FirstName = CASE WHEN @FirstName is null or not(@FirstName='<><>') THEN @FirstName Else FirstName END, 
         LastName = CASE WHEN @LastName is null or not(@LastName='<><>') THEN @LastName Else LastName END, 
         Employee = CASE WHEN not(@EmployeeSpecified=0) THEN @Employee Else Employee END, 
         AltID = CASE WHEN @AltID is null or not(@AltID='<><>') THEN @AltID Else AltID END, 
         Verifier = CASE WHEN @AltIDVerifier is null or not(@AltIdVerifier='<><>') THEN @AltIdVerifier Else Verifier END, 
         BannerID = CASE WHEN @BannerSpecified=1 and (@BannerID is null or not(@BannerID<=0)) THEN @BannerID Else BannerID END, 
         AltIDOptOut = CASE WHEN not(@AltIDOptOut=-1) THEN @AltIDOptOut Else AltIDOptOut END, 
         EmployeeID = CASE WHEN not(@EmployeeID='<><>') THEN @EmployeeID Else EmployeeID END, 
         MiddleName = CASE WHEN not(@MiddleName='<><>') THEN @MiddleName Else MiddleName END,
         Prefix = CASE WHEN not (@Prefix='<><>') THEN @Prefix Else Prefix END,
         Suffix = CASE WHEN not (@Suffix='<><>') THEN @Suffix Else Suffix END,
         EnrollmentDate = CASE WHEN @EnrollmentDate is null or not(@EnrollmentDate='<><>') THEN @EnrollmentDate Else EnrollmentDate END, 
         CreatedLocationID = CASE WHEN not (@CreatedLocationID=0) THEN @CreatedLocationID Else CreatedLocationID END,
         CustomerStatusID = CASE WHEN not(@CustomerStatusID=-1) THEN @CustomerStatusID Else CustomerStatusID END,
         UpdateCount=UpdateCount+1 
         Where CustomerPK=@CustomerPK;
         
  end

  if @CustomerPK > 0 begin
    select @NumRecs=count(*) from CustomerExt with (NoLock) where CustomerPK=@CustomerPK;
    if @NumRecs=0 begin
      if @DOB='' or @DOB='<><>' or @DOB='[NULL]' begin
        set @DOB=NULL 
      end
      if @PhoneAsEntered='none' or @PhoneAsEntered='[NULL]' begin
        set @PhoneAsEntered=NULL;
        set @PhoneDigitsOnly=NULL;
      end 
      Insert into CustomerExt with (RowLock) (CustomerPK, DOB, PhoneAsEntered, PhoneDigitsOnly) values (@CustomerPK, @DOB, @PhoneAsEntered, @PhoneDigitsOnly);
    end
    else begin
      if @DOB='' or @DOB='[NULL]' set @DOB = null;
      if @PhoneAsEntered='' or @PhoneAsEntered='[NULL]' begin
        set @PhoneAsEntered = NULL;
        set @PhoneDigitsOnly = NULL;
      end
      Update CustomerExt with (RowLock) set
           DOB = CASE WHEN @DOB is null or not(@DOB='<><>') THEN @DOB Else DOB END, 
           PhoneAsEntered = CASE WHEN @PhoneAsEntered is null or not(@PhoneAsEntered='none') THEN @PhoneAsEntered Else PhoneAsEntered End,
           PhoneDigitsOnly = CASE WHEN @PhoneAsEntered is null or not(@PhoneAsEntered='none') THEN @PhoneDigitsOnly Else PhoneDigitsOnly End
           where CustomerPK=@CustomerPK
    end
    
    --Change Card status - Trigger will put record in CardIDs when new customer is created. Defaults to Active(1)
	Update CardIDs with (RowLock) set
		CardStatusID= CASE WHEN @CardStatus is not null or (not @CardStatus<=0) THEN @CardStatus Else ISNULL(CardStatusID,1) END
		where ExtCardID=@ExtCardID;
  
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCustomer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateCustomerAttribute.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateCustomerAttribute.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_UpdateCustomerAttribute]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerAttribute]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateCustomerAttribute]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerAttribute]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_UpdateCustomerAttribute] @ExtCardID nvarchar(400), @CardTypeID int,
                                                        @AttributeTypeID int, @AttributeValueID int, @StatusCode int OUTPUT, @ExtCardIDOriginal nvarchar(400)
as 
  set nocount on
  declare @CustomerPK bigint;
  declare @NumRecs int;
  declare @CustomerTypeID int;
   
  set @CustomerPK=0;
  set @StatusCode=-99;
  set @NumRecs=0;
  set @CustomerTypeID =0;
  
  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

  if @CustomerPK=0 begin
   -- resync the initial card values for any customers with this ExtCardID as its IntialCardID
   exec dbo.pa_CPE_CI_HandleInitialCard @ExtCardID, @CardTypeID, @ExtCardIDOriginal
   
    -- get the customer type assign to this card type
    select @CustomerTypeID = ISNULL(CustTypeID,0) from CardTypes with (NoLock) where CardTypeID=@CardTypeID;
    
     -- customer does not exist - create a new record
    Insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate,InitialCardIDOriginal) values (@ExtCardID, @CardTypeID, @CustomerTypeID, '''', '''', getdate(), @ExtCardIDOriginal);
    set @CustomerPK=Scope_Identity();
  end 
    
  if @CustomerPK > 0
    begin
      -- determine if a customer attribute value already exists for this attribute type
      select @NumRecs=COUNT(*) from  CustomerAttributes with (NoLock) where CustomerPK = @CustomerPK and AttributeTypeID = @AttributeTypeID;
      if @NumRecs = 0 
        begin
          insert into CustomerAttributes (CustomerPK, AttributeTypeID, AttributeValueID, CPEStoreSendFlag, Deleted, LastUpdate)
             values (@CustomerPK, @AttributeTypeID, @AttributeValueID, 1, 0, GETDATE());
          if @@ROWCOUNT > 0
            begin
              -- created new customer attribute
              set @StatusCode = 1;
            end
          else
            begin 
              -- failed to create customer attribute
              set @StatusCode = -1;
            end
        end
      else
        -- a value for this attribute type already exists, so overwrite the current value with this one
        begin
          update CustomerAttributes set AttributeValueID=@AttributeValueID, Deleted=0, CPEStoreSendFlag=1, LastUpdate=GETDATE() where CustomerPK=@CustomerPK and AttributeTypeID=@AttributeTypeID;
          if @@ROWCOUNT > 0
            begin
              -- updated  customer attribute
              set @StatusCode = 2;
            end
          else
            begin 
              -- failed to update customer attribute
              set @StatusCode = -2;
            end
        end
    end
  else
    begin
      -- customer does not exist
      set @StatusCode = -99;
    end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCustomerAttribute] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateCustomerExt.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateCustomerExt.StoredProcedure.sql 115534 2017-08-18 15:25:53Z sb185023 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerExt]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CUA_UpdateCustomerExt]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create procedure [dbo].[pa_CUA_UpdateCustomerExt] @CustomerPK bigint, @Address nvarchar(1000), @City nvarchar(1000),
												  @State nvarchar(1000), @ZIP nvarchar(1000),  @Email nvarchar(1000),
												  @Country nvarchar(1000), @MobilePhoneAsEntered nvarchar(100), @MobilePhoneDigitsOnly nvarchar(100), @AirmileMemberID nvarchar(50),
                                                  @Comments nvarchar(80),@DriverLicenseID nvarchar(50), @TaxExemptID nvarchar(50),
                                                  @DateOpened nvarchar(8), @ARCustomer bit, @DigitalReceipt  nvarchar(20), @PaperReceipt nvarchar(20) 
as 
  set nocount on
  declare @NumRecs int;

  set @NumRecs=0;
 
  -- see if the customer ext record already exists
  select @NumRecs=Count(*) from CustomerExt with (NoLock) where CustomerPK = @CustomerPK;

  if @NumRecs=0 begin
	if @Address='<><>' set @Address = null;
	if @City='<><>' set @City = null;
	if @State='<><>' set @State = null;
	if @ZIP='<><>' set @ZIP = null;
	if @Email='<><>' set @Email = null;
	if @Country='<><>' set @Country = null;
	if @MobilePhoneAsEntered='<><>' set @MobilePhoneAsEntered = null;
	if @MobilePhoneAsEntered='<><>' set @MobilePhoneDigitsOnly = null;
	if @AirmileMemberID='<><>' set @AirmileMemberID = null;
    if @Comments ='<><>' set @Comments = null;
    if @DriverLicenseID ='<><>' set @DriverLicenseID = null;
    if @TaxExemptID ='<><>' set @TaxExemptID = null;
    if @DigitalReceipt ='<><>' set @DigitalReceipt = null;
    if @PaperReceipt ='<><>' set @PaperReceipt = null;
		
    Insert into CustomerExt with (RowLock) (CustomerPK, Address, City, State, ZIP, email, Country, MobilePhoneAsEntered, MobilePhoneDigitsOnly, AirmileMemberID, Comments, DriverLicenseID, TaxExemptID, DateOpened, ARCustomer, DigitalReceipt, PaperReceipt)
       values (@CustomerPK, @Address, @City, @State, @ZIP, @Email, @Country, @MobilePhoneAsEntered, @MobilePhoneDigitsOnly, @AirmileMemberID, @Comments, @DriverLicenseID, @TaxExemptID, @DateOpened, @ARCustomer, @DigitalReceipt, @PaperReceipt);

  end
  else begin
    declare @PaperReceiptBit bit;
    declare @PaperReceiptStr nvarchar(20);
    set @PaperReceiptBit=0;
    set @PaperReceiptStr = LOWER(RTRIM(LTRIM(@PaperReceipt)));
    if (@PaperReceiptStr='1') or (@PaperReceiptStr='true') set @PaperReceiptBit = 1;
    Update CustomerExt with (RowLock) set
         Address = CASE WHEN not(@Address='<><>') THEN @Address Else Address END, 
         City = CASE WHEN not(@City='<><>') THEN @City Else City End,
         State = CASE WHEN not(@State='<><>') THEN @State Else State End,
         ZIP = CASE WHEN not(@ZIP='<><>') THEN @ZIP Else ZIP End,
         email = CASE WHEN not(@Email='<><>') THEN @Email Else email End,
         Country = CASE WHEN not(@Country='<><>') THEN @Country Else Country End,
         MobilePhoneAsEntered = CASE WHEN not (@MobilePhoneAsEntered='<><>') THEN @MobilePhoneAsEntered Else MobilePhoneAsEntered End,
         MobilePhoneDigitsOnly = CASE WHEN not (@MobilePhoneAsEntered='<><>') THEN @MobilePhoneDigitsOnly Else MobilePhoneDigitsOnly End,
         AirmileMemberID = CASE WHEN not (@AirmileMemberID='<><>') THEN @AirmileMemberID else AirmileMemberID End,
         Comments = CASE WHEN not (@Comments='<><>') THEN @Comments else Comments End,
         DriverLicenseID = CASE WHEN not (@DriverLicenseID='<><>') THEN @DriverLicenseID else DriverLicenseID End,
         TaxExemptID = CASE WHEN not (@TaxExemptID='<><>') THEN @TaxExemptID else TaxExemptID End,
         DateOpened = CASE WHEN not (@DateOpened is null) THEN @DateOpened else DateOpened End,
         ARCustomer = CASE WHEN not (@ARCustomer is null) THEN @ARCustomer else ARCustomer End,
         DigitalReceipt = CASE WHEN not(@DigitalReceipt='<><>') THEN @DigitalReceipt Else DigitalReceipt End,
         PaperReceipt = CASE WHEN not(@PaperReceipt='<><>') THEN @PaperReceiptBit Else PaperReceipt End
         where CustomerPK=@CustomerPK
  end


GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCustomerExt] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateCustomerHHSupplemental.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerHHSupplemental]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateCustomerHHSupplemental]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerHHSupplemental]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CUA_UpdateCustomerHHSupplemental] @ExtCardID nvarchar(400), @CardTypeID int,      
                                                        @FieldID int, @FieldValue nvarchar(1000), @CustomerGroupID int,@StatusCode int OUTPUT ,@ExtCardIDOriginal nvarchar(400)     
AS       
  SET NOCOUNT ON      
  DECLARE @CustomerPK BIGINT;      
  DECLARE @NumRecs INT;      
  DECLARE @CustomerTypeID INT;      
  DECLARE @HHPK BIGINT;  
  DECLARE @HHPK_CustomerPK BIGINT;  
  DECLARE @ROWCOUNT  INT;  
         
  SET @CustomerPK=0;      
  SET @StatusCode=-99;      
  SET @NumRecs=0;      
  SET @CustomerTypeID =0;      
        
  -- see if the customer record already exists      
  SELECT @CustomerPK=ISNULL(CustomerPK, 0) FROM CardIDs WITH (NOLOCK) WHERE ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;      
      
  IF @CustomerPK=0 BEGIN      
   -- resync the initial card values for any customers with this ExtCardID as its IntialCardID      
   EXEC dbo.pa_CPE_CI_HandleInitialCard @ExtCardID, @CardTypeID,@ExtCardIDOriginal      
         
    -- get the customer type assign to this card type      
    SELECT @CustomerTypeID = ISNULL(CustTypeID,0) FROM CardTypes WITH (NOLOCK) WHERE CardTypeID=@CardTypeID;      
          
     -- customer does not exist - create a new record      
    INSERT INTO Customers WITH (ROWLOCK) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate,InitialCardIDOriginal) VALUES (@ExtCardID, @CardTypeID, @CustomerTypeID, '''', '''', GETDATE(),@ExtCardIDOriginal);      
    SET @CustomerPK=SCOPE_IDENTITY();      
  END       
          
  IF @CustomerPK > 0      
    BEGIN      
      -- determine if a customer supplemental value already exists for this attribute type      
      SELECT @NumRecs=COUNT(*) FROM  CustomerSupplemental WITH (NOLOCK) WHERE CustomerPK = @CustomerPK and FieldID = @FieldID;      
      IF @NumRecs = 0       
        BEGIN      
       IF @CardTypeID =1   
          BEGIN  
                  --Update HHcard details in CustomerSupplemental table  
                  INSERT INTO CustomerSupplemental (CustomerPK, FieldID, Value, LastUpdate, Deleted)  VALUES (@CustomerPK, @FieldID, @FieldValue, GETDATE(), 0);       
                  SET @ROWCOUNT = @@ROWCOUNT    
         --Update CustomerCards details in CustomerSupplemental table  
         EXEC dbo.pt_CUA_UpdateCustomerHouseholdSupplemental @FieldID, @FieldValue, @CustomerPK  
                            END  
                         ELSE  
                           IF @CardTypeID =0   
                              BEGIN  
                                   --HHcards present. Update HH card and check for customercards  
                                   SELECT  @HHPK = HHPK  FROM Customers WITH (NOLOCK) WHERE  CustomerPK=  @CustomerPK      
                     IF @HHPK>0  
                          BEGIN  
                                --Update HHcard details in CustomerSupplemental table  
                                INSERT INTO CustomerSupplemental (CustomerPK, FieldID, Value, LastUpdate, Deleted)  VALUES (@HHPK, @FieldID, @FieldValue, GETDATE(), 0);       
                                SET @ROWCOUNT = @@ROWCOUNT    
                       --Update CustomerCards details in CustomerSupplemental table  
                      EXEC dbo.pt_CUA_UpdateCustomerHouseholdSupplemental @FieldID, @FieldValue, @HHPK  
                          END  
                     ELSE  
                          ----No HHcards present.Update only CustomerCard  
                          BEGIN  
                                                  INSERT INTO CustomerSupplemental (CustomerPK, FieldID, Value, LastUpdate, Deleted)  VALUES (@CustomerPK, @FieldID, @FieldValue, GETDATE(), 0);    
                                                  SET @ROWCOUNT = @@ROWCOUNT   
                                            END        
                           END  --closing of IF @CardTypeID =0 BEGIN  
  
         IF @ROWCOUNT > 0    
            BEGIN    
              -- created customer supplemental    
              SET @StatusCode = 1;    
              EXEC dbo.pt_Attach_To_PrivacyGroup @CustomerGroupID, @CustomerPK, @FieldID, @FieldValue  
            END    
          ELSE    
              -- failed to create customer supplemental    
              SET @StatusCode = -1;    
        END    
--END --need to remove after debugging          
      ELSE      
        -- a value for this supplemental field already exists, so overwrite the current value with this one      
        BEGIN      
         
       IF @CardTypeID =1   
          BEGIN  
                  --Update HHcard details in CustomerSupplemental table  
                  UPDATE CustomerSupplemental SET Value=@FieldValue, LastUpdate=GETDATE(), Deleted=0 WHERE CustomerPK=@CustomerPK AND FieldID=@FieldID;   
                  SET @ROWCOUNT = @@ROWCOUNT    
         --Update CustomerCards details in CustomerSupplemental table  
         EXEC dbo.pt_CUA_UpdateCustomerHouseholdSupplemental @FieldID, @FieldValue, @CustomerPK  
                            END  
                         ELSE  
                           IF @CardTypeID =0   
                              BEGIN  
                                   --HHcards present. Update HH card and check for customercards  
                                   SELECT  @HHPK = HHPK  FROM Customers WITH (NOLOCK) WHERE  CustomerPK=  @CustomerPK      
                     IF @HHPK>0  
                          BEGIN  
                                --Update HHcard details in CustomerSupplemental table  
                               UPDATE CustomerSupplemental SET Value=@FieldValue, LastUpdate=GETDATE(), Deleted=0 WHERE CustomerPK=@HHPK AND FieldID=@FieldID;    
                                SET @ROWCOUNT = @@ROWCOUNT    
                       --Update CustomerCards details in CustomerSupplemental table  
                      EXEC dbo.pt_CUA_UpdateCustomerHouseholdSupplemental @FieldID, @FieldValue, @HHPK  
                          END  
                     ELSE  
                          ----No HHcards present.Update only CustomerCard  
                          BEGIN  
                                                  UPDATE CustomerSupplemental SET Value=@FieldValue, LastUpdate=GETDATE(), Deleted=0 WHERE CustomerPK=@CustomerPK AND FieldID=@FieldID;   
                                                  SET @ROWCOUNT = @@ROWCOUNT   
                                            END        
                           END  --closing of IF @CardTypeID =0 BEGIN  
               
          IF @ROWCOUNT > 0      
              BEGIN    
              -- updated customer supplemental    
                 SET @StatusCode = 2;    
                 IF  @FieldValue = ''1''  
                       EXEC dbo.pt_Attach_To_PrivacyGroup @CustomerGroupID, @CustomerPK,@FieldID, @FieldValue    
                 ELSE  
                       EXEC dbo.pt_Detach_From_PrivacyGroup @CustomerGroupID, @CustomerPK ,@FieldID   
             END    
         ELSE      
              -- failed to update customer supplemental      
              SET @StatusCode = -2;      
        END      
    END      
  ELSE      
    BEGIN      
      -- customer does not exist      
      SET @StatusCode = -99;      
    END
'
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCustomerHHSupplemental] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CUA_UpdateCustomerInfo.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateCustomerInfo.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_UpdateCustomerInfo]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerInfo]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateCustomerInfo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_UpdateCustomerInfo] @CustomerPK bigint, @ExtCardID nvarchar(400), @CardTypeID int, @Status int OUTPUT

AS 
  SET NOCOUNT ON;
  declare @CardPK bigint;
  
  set @Status = 0;
  
  if @CustomerPK >0
	begin
		if @CardTypeID = 3
			begin 
				select * from CustomerExt where CustomerPK = @CustomerPK
				if @@ROWCOUNT >0
					begin
						--Alternate ID
						update CustomerExt with (RowLock) set
							PhoneAsEntered = @ExtCardID
						where CustomerPK = @CustomerPK;
						if @@RowCount > 0 set @Status =1;
					end
				else
					Begin
						insert into CustomerExt (CustomerPK, PhoneAsEntered) values (@CustomerPK, @ExtCardID)
						set @Status =1;
					end
			end
		else if @CardTypeID = 5
			begin
			
			--Employee ID
				update Customers with (RowLock) set
					EmployeeID = @ExtCardID
				where CustomerPK = @CustomerPK;
				if @@RowCount = 1 set @Status =1;
			end
		else if @CardTypeID = 6
			begin
				select * from CustomerExt where CustomerPK = @CustomerPK
					if @@ROWCOUNT >0
						begin
							--Email
							update CustomerExt with (RowLock) set
								email = @ExtCardID
							where CustomerPK = @CustomerPK;
							if @@RowCount = 1 set @Status=1;
						end
					else
						begin
							insert into CustomerExt (CustomerPK, email) values (@CustomerPK, @ExtCardID)
							set @Status =1
						end
						
			end
		else
			--invalid card type
			set @Status = -2				
	end
 else 
	begin
		--customer not found
		set @Status = -1;
	end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCustomerInfo] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CUA_UpdateCustomerSupplemental.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateCustomerSupplemental.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_UpdateCustomerSupplemental]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerSupplemental]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateCustomerSupplemental]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateCustomerSupplemental]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_UpdateCustomerSupplemental] @ExtCardID nvarchar(400), @CardTypeID int,
                                                        @FieldID int, @FieldValue nvarchar(1000), @StatusCode int OUTPUT,@ExtCardIDOriginal nvarchar(400)
as 
  set nocount on
  declare @CustomerPK bigint;
  declare @NumRecs int;
  declare @CustomerTypeID int;
   
  set @CustomerPK=0;
  set @StatusCode=-99;
  set @NumRecs=0;
  set @CustomerTypeID =0;
  
  -- see if the customer record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

  if @CustomerPK=0 begin
   -- resync the initial card values for any customers with this ExtCardID as its IntialCardID
   exec dbo.pa_CPE_CI_HandleInitialCard @ExtCardID, @CardTypeID,@ExtCardIDOriginal
   
    -- get the customer type assign to this card type
    select @CustomerTypeID = ISNULL(CustTypeID,0) from CardTypes with (NoLock) where CardTypeID=@CardTypeID;
    
     -- customer does not exist - create a new record
    Insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate,InitialCardIDOriginal) values (@ExtCardID, @CardTypeID, @CustomerTypeID, '''', '''', getdate(),@ExtCardIDOriginal);
    set @CustomerPK=Scope_Identity();
  end 
    
  if @CustomerPK > 0
    begin
      -- determine if a customer supplemental value already exists for this attribute type
      select @NumRecs=COUNT(*) from  CustomerSupplemental with (NoLock) where CustomerPK = @CustomerPK and FieldID = @FieldID;
      if @NumRecs = 0 
        begin
          insert into CustomerSupplemental (CustomerPK, FieldID, Value, LastUpdate, Deleted)
             values (@CustomerPK, @FieldID, @FieldValue, GETDATE(), 0);
          if @@ROWCOUNT > 0
            begin
              -- created customer supplemental
              set @StatusCode = 1;
            end
          else
            begin 
              -- failed to create customer supplemental
              set @StatusCode = -1;
            end
        end
      else
        -- a value for this supplemental field already exists, so overwrite the current value with this one
        begin
          update CustomerSupplemental set Value=@FieldValue, LastUpdate=GETDATE(), Deleted=0 where CustomerPK=@CustomerPK and FieldID=@FieldID;
          if @@ROWCOUNT > 0
            begin
              -- updated customer supplemental
              set @StatusCode = 2;
            end
          else
            begin 
              -- failed to update customer supplemental
              set @StatusCode = -2;
            end
        end
    end
  else
    begin
      -- customer does not exist
      set @StatusCode = -99;
    end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateCustomerSupplemental] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateHousehold.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateHousehold.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_UpdateHousehold]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateHousehold]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateHousehold]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateHousehold]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_CUA_UpdateHousehold] @ExtCardID nvarchar(400), @ExtCardTypeID int, 
                                                @LastName nvarchar(50), @CustomerStatusID int =-1, 
                                                @Employee bit, @EmployeeSpecified int,
                                                @CustomerPK bigint OUTPUT,@ExtCardIDOriginal nvarchar(400)
as 
  set nocount on
  set @CustomerPK=0;
 
  -- see if the Household record already exists
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@ExtCardTypeID;

  if @CustomerPK=0 begin
    if @LastName=''<><>'' or @LastName=''[NULL]''set @LastName = null;
	if @CustomerStatusID = -1 set @CustomerStatusID = 1;
    Insert into Customers with (RowLock) (InitialCardID, FirstName, LastName, Employee, CustomerStatusID, CreatedDate, InitialCardTypeID, CustomerTypeID,InitialCardIDOriginal) values (@ExtCardID, '''', @LastName, @Employee, @CustomerStatusID, getdate(), @ExtCardTypeID, 1,@ExtCardIDOriginal);
    set @CustomerPK=Scope_Identity();
  end
  else begin
    Update Customers with (RowLock) set 
         LastName = CASE WHEN not(@LastName=''<><>'') THEN @LastName Else LastName END,
         CustomerStatusID = CASE WHEN not (@CustomerStatusID=-1) THEN @CustomerStatusID ELSE CustomerStatusID END, 
         Employee = CASE WHEN not(@EmployeeSpecified=0) THEN @Employee Else Employee END, 
         UpdateCount=UpdateCount+1 
         Where CustomerPK=@CustomerPK;
  end 


' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateHousehold] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CUA_UpdateSendToStore.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CUA_UpdateSendToStore.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CUA_UpdateSendToStore]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateSendToStore]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CUA_UpdateSendToStore]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CUA_UpdateSendToStore]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CUA_UpdateSendToStore] @CustomerPK bigint, @CPEStoreSendFlag int
AS
  update Customers with (RowLock) set CPEStoreSendFlag = @CPEStoreSendFlag where CustomerPK = @CustomerPK;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CUA_UpdateSendToStore] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CreateUnavailableCustomer.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CreateUnavailableCustomer.StoredProcedure.sql 2016-12-28 12:11:05Z ak250667 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CreateUnavailableCustomer]    Script Date: 12/28/2016 12:12:12 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('[dbo].[pa_CreateUnavailableCustomer]', 'P') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CreateUnavailableCustomer]
GO

CREATE PROCEDURE [dbo].[pa_CreateUnavailableCustomer] @CustomerId nvarchar(MAX), @CAN nvarchar(MAX), @CustomerIdType INT, @FetchCustomerDataBy INT = 0 ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
    ,@IncludePending bit = '0'
    ,@ExtCardIdOriginal nvarchar(MAX)
	,@CANOriginal nvarchar(MAX)
AS
BEGIN TRY
	SET NOCOUNT ON;	
	DECLARE @CUPK INT
		
	-- Start the transaction
	BEGIN TRANSACTION
		EXEC dbo.pa_CPE_CI_HandleInitialCard @ExtCardID=@CustomerId, @CardTypeID=@CustomerIdType, @ExtCardIdOriginal= @ExtCardIdOriginal   			
		DECLARE @CardPK BIGINT
		DECLARE @Created BIT = 0
		DECLARE @CustomerPK BIGINT=0
		IF (@CAN is NULL)
			BEGIN
			SELECT @CustomerPK=CustomerPK from customers where InitialCardId=@CustomerId and InitialCardTypeID=@CustomerIdType
			END
		ELSE
			BEGIN
			SELECT @CustomerPK=CustomerPK from customers where InitialCardId=@CAN and InitialCardTypeID=@CustomerIdType
			END
		IF @CustomerPK = 0
		BEGIN
			EXEC dbo.pt_NewCustomer_Insert @ExtCardID=@CustomerId,@FirstName=N'',@LastName=N'',@CardTypeID=@CustomerIdType,@AutoAddCardOption=0,@CustomerPK=@CustomerPK OUTPUT, @ExtCardIDOriginal=@ExtCardIdOriginal   	
			EXEC dbo.pt_NewCardIDs_Insert @ExtCardID=@CustomerId, @CardTypeID=@CustomerIdType, @CustomerPK=@CustomerPK, @CardStatusID=1, @CardPK = @CardPK OUTPUT, @Created = @Created OUTPUT,@ExtCardIDOriginal=@ExtCardIdOriginal 		
			IF (@CAN is not NULL)
			BEGIN
			EXEC dbo.pt_NewCardIDs_Insert @ExtCardID=@CAN, @CardTypeID=8, @CustomerPK=@CustomerPK, @CardStatusID=1, @CardPK = @CardPK OUTPUT, @Created = @Created OUTPUT,@ExtCardIDOriginal=@CANOriginal 
			END
		END
		ELSE
		BEGIN
		EXEC dbo.pt_NewCardIDs_Insert @ExtCardID=@CustomerId, @CardTypeID=@CustomerIdType, @CustomerPK=@CustomerPK, @CardStatusID=1, @CardPK = @CardPK OUTPUT, @Created = @Created OUTPUT,@ExtCardIDOriginal=@ExtCardIdOriginal 
		END
		
			IF (@CAN is not NULL)
			BEGIN
			--Add created customer record in ExtCustomerMap table so that Real time sync works.
			Update ExtCustomerMap set ConsumerAccountNumber=@CAN Where CustomerPK=@CustomerPK
			END
	-- removing the cross db reference 		
		--IF @CardPK > 0 
		--BEGIN
		--	DECLARE @GetActivityID INT
		--	DECLARE @GetActivityID_Temp INT
		--	SET @GetActivityID_Temp=(SELECT TOP 1 ActivityID FROM LogixRT.dbo.ActivityLog WITH (NoLock) ORDER BY ActivityID DESC)
		--	IF @GetActivityID_Temp IS NULL
		--	BEGIN
		--		SET @GetActivityID=1
		--	END
		--	ELSE
		--		SET @GetActivityID=@GetActivityID_Temp+1
	
		--	EXEC LogixRT.dbo.pt_ActivityLog_Insert @LinkID=@CustomerPK,@ActivityTypeID=25,@AdminID=1,@Description=N'Added new customer',@BuyerID=0,@ActivitySubTypeID=10,@LinkID2=0,@ActivityValue=N'0',@ActivityID=@GetActivityID OUTPUT
		--END
	-- If we reach here, success!
	COMMIT
	-- Fetch customer details based on no lock, lock and forced lock
	IF @FetchCustomerDataBy = 0 -- no lock
	BEGIN
		EXEC [dbo].[pa_UE_handleLookupAutoEnroll] @CustomerId ,@CustomerIdType ,@LocationId ,@TermNum ,@TransNum ,@LockExpireInterval ,@IncludePending
	END
	ELSE IF @FetchCustomerDataBy = 1 -- lock
	BEGIN
		EXEC [dbo].[pa_UE_handleLockingLookupAutoEnroll] @CustomerId ,@CustomerIdType ,@LocationId ,@TermNum ,@TransNum ,@LockExpireInterval ,@IncludePending
	END
	ELSE IF @FetchCustomerDataBy = 2 -- forced lock
	BEGIN
		EXEC [dbo].[pa_UE_handleForcedLookupAutoEnroll] @CustomerId ,@CustomerIdType ,@LocationId ,@TermNum ,@TransNum ,@LockExpireInterval ,@IncludePending
	END
END TRY
BEGIN CATCH
  -- there was an error
  IF @@TRANCOUNT > 0 BEGIN    
        ROLLBACK 
  END 

  -- Raise an error with the details of the exception
  DECLARE @ErrorMessage NVARCHAR(4000)    
  DECLARE @ErrorSeverity INT    
  DECLARE @ErrorState INT    
  SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()    
  RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)  
END CATCH
GO
GRANT EXECUTE ON [dbo].[pa_CreateUnavailableCustomer] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_CustomerData_BatchRecords.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerData_BatchRecords.StoredProcedure.sql 47201 2012-04-10 14:53:19Z mark $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerData_BatchRecords]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerData_BatchRecords]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CustomerData_BatchRecords] @BatchGUID nvarchar(36)
AS
BEGIN
	SET NOCOUNT ON;

    -- return all the rows marked with the batch guid
    select CustEdit.EditPK, CustEdit.AdminUserID, CustEdit.LastUpdate, CustEdit.BatchGUID,
      Cust.CustomerPK, Cust.FirstName, Cust.LastName, Cust.Employee,
      Cust.CurrYearSTD, Cust.LastYearSTD, Cust.Password, Cust.HHPK, Cust.EnrollmentDate,Cust.LastComm,
      Cust.CommFrequency, Cust.CommEmail, Cust.CommPrint, Cust.BannerID, Cust.AltID,
      Cust.Verifier, Cust.AltIDOptOut, Cust.TestCard, Cust.MiddleName, Cust.EmployeeID,
      Cust.CustomerStatusID, Cust.CustomerTypeID, CustExt.Address, CustExt.City,
      CustExt.State, CustExt.Zip, CustExt.PhoneAsEntered as Phone, CustExt.email, CustExt.Country, CustExt.DOB
    from CustomerEdits  as CustEdit with (NoLock)
    inner join Customers as Cust with (NoLock) on Cust.CustomerPK = CustEdit.CustomerPK
    left join CustomerExt as CustExt with (NoLock) on CustExt.CustomerPK = CustEdit.CustomerPK
    where CustEdit.BatchGUID = @BatchGUID
    order by CustEdit.EditPK;
END
GO

GRANT EXECUTE ON [dbo].[pa_CustomerData_BatchRecords] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerData_ChangedRecords.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerData_ChangedRecords.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerData_ChangedRecords]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerData_ChangedRecords]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CustomerData_ChangedRecords] @BatchGUID nvarchar(36), @RecordsToProcess int Output 
AS
BEGIN
	SET NOCOUNT ON;
    set @RecordsToProcess = 0;

    -- find the number of records that need processing, either already marked or new ones.
    select @RecordsToProcess = COUNT(EditPK) from CustomerEdits with (NoLock) where BatchGUID is null;

    if @RecordsToProcess  > 0 
      begin
        -- only mark 1000 for processing, this includes records already marked for processing that weren''t processed.
        --set rowcount 1000;
        update TOP (1000) CustomerEdits with (RowLock) set BatchGUID = @BatchGUID where BatchGUID is null;
        --set rowcount 0;
      end

    -- return all the rows marked as in-process status
    select CustEdit.EditPK, CustEdit.AdminUserID, CustEdit.LastUpdate, CustEdit.BatchGUID, 
      Cust.CustomerPK, Cust.FirstName, Cust.LastName, Cust.Employee,
      Cust.CurrYearSTD, Cust.LastYearSTD, Cust.Password, Cust.HHPK, Cust.EnrollmentDate,Cust.LastComm, 
      Cust.CommFrequency, Cust.CommEmail, Cust.CommPrint, Cust.BannerID, Cust.AltID,
      Cust.Verifier, Cust.AltIDOptOut, Cust.TestCard, Cust.MiddleName, Cust.EmployeeID,
      Cust.CustomerStatusID, Cust.CustomerTypeID, CustExt.Address, CustExt.City, 
      CustExt.State, CustExt.Zip, CustExt.PhoneAsEntered as Phone, CustExt.email, CustExt.Country, CustExt.DOB
    from CustomerEdits  as CustEdit with (NoLock)
    inner join Customers as Cust with (NoLock) on Cust.CustomerPK = CustEdit.CustomerPK
    left join CustomerExt as CustExt with (NoLock) on CustExt.CustomerPK = CustEdit.CustomerPK
    where CustEdit.BatchGUID = @BatchGUID
    order by CustEdit.EditPK;
END
GO

GRANT EXECUTE ON [dbo].[pa_CustomerData_ChangedRecords] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerData_RecordsByDate.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerData_RecordsByDate.StoredProcedure.sql 47201 2012-04-10 14:53:19Z mark $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerData_RecordsByDate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerData_RecordsByDate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CustomerData_RecordsByDate] @StartDate datetime, @EndDate datetime
AS
BEGIN
	SET NOCOUNT ON;

    -- return all the rows marked with the batch guid
    select CustEdit.EditPK, CustEdit.AdminUserID, CustEdit.LastUpdate, CustEdit.BatchGUID,
      Cust.CustomerPK, Cust.FirstName, Cust.LastName, Cust.Employee,
      Cust.CurrYearSTD, Cust.LastYearSTD, Cust.Password, Cust.HHPK, Cust.EnrollmentDate, Cust.LastComm,
      Cust.CommFrequency, Cust.CommEmail, Cust.CommPrint, Cust.BannerID, Cust.AltID,
      Cust.Verifier, Cust.AltIDOptOut, Cust.TestCard, Cust.MiddleName, Cust.EmployeeID,
      Cust.CustomerStatusID, Cust.CustomerTypeID, CustExt.Address, CustExt.City,
      CustExt.State, CustExt.Zip, CustExt.PhoneAsEntered as Phone, CustExt.email, CustExt.Country, CustExt.DOB
    from CustomerEdits  as CustEdit with (NoLock)
    inner join Customers as Cust with (NoLock) on Cust.CustomerPK = CustEdit.CustomerPK
    left join CustomerExt as CustExt with (NoLock) on CustExt.CustomerPK = CustEdit.CustomerPK
    where CustEdit.LastUpdate between @StartDate and @EndDate
    order by CustEdit.EditPK;
END
GO

GRANT EXECUTE ON [dbo].[pa_CustomerData_RecordsByDate] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerGroupMembership.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerGroupMembership.StoredProcedure.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerGroupMembership]') AND TYPE IN (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_CustomerGroupMembership];
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CustomerGroupMembership] @CustomerPK BIGINT
AS 
  -- This stored procedure returns all of the CustomerGroupIDs of which the specified customer is a member
  
  SELECT DISTINCT CustomerGroupID
    FROM GroupMembership WITH (NoLock) WHERE Deleted=0 AND CustomerPK=@CustomerPK
  UNION 
  SELECT 1 AS CustomerGroupID -- include the AnyCustomer group
  UNION 
  SELECT 2 AS CustomerGroupID; -- include the AnyCardholder group

GO

GRANT EXECUTE ON [dbo].[pa_CustomerGroupMembership] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerImport_CreateHouseholds.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerImport_CreateHouseholds.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerImport_CreateHouseholds]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_CreateHouseholds]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerImport_CreateHouseholds]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_CreateHouseholds]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CustomerImport_CreateHouseholds] 
as 
  set nocount on;
  Insert Into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, CreatedDate,InitialCardIDOriginal) 
    select distinct  CIT.HHID as InitialCardID, 1 as InitialCardTypeID, 1 as CustomerTypeID, getdate() as CreatedDate,HHIDOriginal 
    from CustomerImportTemp as CIT with (NoLock) left join Customers as C on CIT.HHID=C.InitialCardIDOriginal and C.InitialCardTypeID=1
    where C.InitialCardIDOriginal is NULL and CIT.HHID is not NULL;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerImport_CreateHouseholds] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerImport_PopulateCustPK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerImport_PopulateCustPK.StoredProcedure.sql 66534 2013-06-06 09:16:25Z kb250147 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerImport_PopulateCustPK]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_PopulateCustPK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerImport_PopulateCustPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_PopulateCustPK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CustomerImport_PopulateCustPK] 
as 
  set nocount on;
  update CustomerImportTemp set CustomerPK=(select CustomerPK from Customers as C with (NoLock) where C.InitialCardID=CustomerImportTemp.InitialCardID and C.InitialCardTypeID=0) where CustomerPK is NULL;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerImport_PopulateCustPK] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerImport_PopulateHHPK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerImport_PopulateHHPK.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerImport_PopulateHHPK]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_PopulateHHPK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerImport_PopulateHHPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_PopulateHHPK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CustomerImport_PopulateHHPK] 
as 
  set nocount on;
  update CustomerImportTemp set HHPK=(select CustomerPK from Customers as C with (NoLock) where C.InitialCardID=CustomerImportTemp.HHID and C.CustomerTypeID=1) where HHID is not NULL;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerImport_PopulateHHPK] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerImport_ProcessImport.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerImport_ProcessImport.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerImport_ProcessImport]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_ProcessImport]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerImport_ProcessImport]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_ProcessImport]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CustomerImport_ProcessImport] @AltIDQuery varchar(1000), @AltIDQuery2 varchar (1000), @AltIDDupQuery varchar (1000), @AltIDUnique int, @RunAgain int Output, @RecsProcessed int Output 
AS  
  SET NOCOUNT ON;  
  declare @NumRecs int;  
  declare @StartTime datetime;  
  declare @CurrentRecs int;  
  set @RunAgain=1;  
  set @StartTime=getdate();  
  set @RecsProcessed=0;
  
SELECT CT.CustomerPK, CT.InitialCardID, CT.FirstName, 
   CT.LastName, CT.Employee, CT.CardStatusID, CT.HHPK, 
   CT.AltID, CT.CardType, NULL AS AltIDDup, NULL AS CPEStoreSendFlag,CT.InitialCardIDOriginal,CT.HHIDOriginal,CT.AltIDOriginal
   INTO #CITemp
FROM CustomerImportTemp As CT
Inner Join Customers As C On CT.CustomerPK = C.CustomerPK
  
  select @NumRecs=count(*) from CustomerImportTemp with (NoLock) where StatusFlag=-5;  
  
  -- run for up to 5 minutes  
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin  
    if @NumRecs=0 begin  
      --set rowcount 3600;   
      update TOP (3600) CustomerImportTemp set StatusFlag=-5 where StatusFlag=0;   
      --set rowcount 0;  
    end  
    set @NumRecs=0;  
    insert into #CITemp (CustomerPK, InitialCardID, FirstName, LastName, Employee, CardStatusID, HHPK, AltID, CardType,InitialCardIDOriginal,HHIDOriginal,AltIDOriginal)  
      select CustomerPK, InitialCardID, FirstName, LastName, Employee, CardStatusID, HHPK, AltID, CardType,InitialCardIDOriginal,HHIDOriginal,AltIDOriginal from CustomerImportTemp with (NoLock) where StatusFlag=-5  
    set @CurrentRecs=@@RowCount;  
    set @RecsProcessed=@RecsProcessed+@CurrentRecs;  
    if (@CurrentRecs=0) begin  
      set @RunAgain=0;  
    end  

    -- mark the records that should be sent to the store  
    update #CITemp set #CITemp.CPEStoreSendFlag = 1  
      from #CITemp as CIT Inner Join Customers  on CIT.InitialCardID=Customers.InitialCardID and Customers.InitialCardTypeID=0  
      where Customers.FirstName <> CIT.FirstName or Customers.LastName <> CIT.LastName or Customers.HHPK <> CIT.HHPK  
           
    -- update any existing customer records  
    -- don''t set the customer status when updating a record
    -- update Customers set Customers.FirstName=CIT.FirstName, Customers.LastName=CIT.LastName, Customers.Employee=CIT.Employee, Customers.CardStatusID=CIT.CardStatusID, Customers.HHPK=CIT.HHPK,  
    update Customers set Customers.FirstName=CIT.FirstName, Customers.LastName=CIT.LastName, Customers.Employee=CIT.Employee, Customers.HHPK=CIT.HHPK,  
      Customers.CPEStoreSendFlag = case when CIT.CPEStoreSendFlag = 1 then 1 else Customers.CPEStoreSendFlag end  
      from Customers Inner Join #CITemp as CIT on Customers.InitialCardID=CIT.InitialCardID and Customers.InitialCardTypeID=0  
      
    -- create any new customer records  
    insert into Customers  (InitialCardID, FirstName, LastName, Employee, CustomerStatusID, HHPK, InitialCardTypeID, CreatedDate,InitialCardIDOriginal)  
      select CIT.InitialCardID, CIT.FirstName, CIT.LastName, CIT.Employee, 1 as CustomerStatusID, CIT.HHPK, 0 as InitialCardTypeID, getdate() as CreatedDate , CIT.InitialCardIDOriginal
      from #CITemp as CIT Left Join Customers as C with (NoLock) on CIT.InitialCardID=C.InitialCardID and C.InitialCardTypeID=0  
      Where C.InitialCardID is NULL  

    -- update CardIDs.CardStatusID
    Update CardIDs with (RowLock) set CardStatusID=CIT.CardStatusID
      from CardIDs Inner Join #CITemp as CIT on CardIDs.ExtCardID=CIT.InitialCardID and CardIDs.CardTypeID=0;
  
    -- populate the CustomerPK''s in the #CITemp table
    UPDATE #CITemp SET CustomerPK= (SELECT C.CustomerPK from Customers as C with (NoLock) where C.InitialCardID=#CITemp.InitialCardID )   
	where CustomerPK is NULL; 
   
    -- Look for AltID Dups here   
    --if @AltIDUnique=1 begin    
      -- If there are any AltID Dups in this 1800 record chunk of the bulk imported data, mark the records as such  
      Update CustomerImportTemp set AltIDDup=1, StatusFlag=-6 where CustomerPK in (  
        Select CustomerPK from #CITemp  
          WHERE CustomerPK NOT IN   
          --(SELECT MAX(CustomerPK) FROM #CITemp as CITCopy with (NoLock) WHERE CITCopy.AltID = CITCopy.AltID)  
          (SELECT CustomerPK FROM ( select max(CUstomerPK) AS CustomerPK,AltID from #CITemp as c GROUP BY AltID ) AS X ) AND Altid is not null
		  
      )  
      -- Delete any AltID Dups in this 1800 record chunk of the bulk imported data  
      delete from #CITemp   
        WHERE CustomerPK NOT IN   
        (SELECT CustomerPK FROM ( select max(CUstomerPK) AS CustomerPK,AltID from #CITemp as c GROUP BY AltID ) AS X)
      -- execute the query to check for Dups between the bulk imported data and the pre-existing data in AltID column   

      exec (@AltIDDupQuery)  
 
      -- Transfer the AltIDDup flags from the temporary table to the bulk insert staging table  
      Update CustomerImportTemp set AltIDDup=1, StatusFlag=-6 where CustomerPK in (select CIT.CustomerPK from #CITemp as CIT where CIT.AltIDDup=1)  
      -- Delete the duplicate AltID records from the temporary table  
      Delete from #CITemp where AltIDDup=1;  
    --end  
  
    -- update the AltID data  
    exec (@AltIDQuery)  
    if not(@AltIDQuery2='''') begin  
      exec (@AltIDQuery2)  
    end   
  
    -- clear things out for the next pass  
    Truncate Table #CITemp
    Delete from CustomerImportTemp where StatusFlag=-5;  
  end -- while  
  
  Drop Table #CITemp
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerImport_ProcessImport] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerImport_RemoveDups.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerImport_RemoveDups.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerImport_RemoveDups]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_RemoveDups]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerImport_RemoveDups]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_RemoveDups]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'Create Procedure [dbo].[pa_CustomerImport_RemoveDups] as 
  delete from CustomerImportTemp with (RowLock)
      WHERE PKID NOT IN 
      ( SELECT MAX(PKID) FROM CustomerImportTemp as CITCopy with (NoLock) WHERE CustomerImportTemp.InitialCardID = CITCopy.InitialCardID);

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerImport_RemoveDups] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerImport_Transfer.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerImport_Transfer.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerImport_Transfer]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_Transfer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerImport_Transfer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerImport_Transfer]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CustomerImport_Transfer]  @CPE_Installed bit, @RunAgain int Output
AS
  set nocount on;

  declare @NumRecs int;
  declare @StartTime datetime;

  set @RunAgain=1;
  set @StartTime=getdate();

  CREATE TABLE #CITemp ([CustomerPK] bigint NULL, [HHPK] bigint NULL);

  select @NumRecs=count(*) from CustomerImportTemp with (NoLock) where ProcessFlag=1;

  -- run for up to 5 minutes
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin
    if @NumRecs=0 begin
      --set rowcount 1800; 
      Update TOP (1800) CustomerImportTemp set ProcessFlag=1 where ProcessFlag=0; 
      --set rowcount 0;
    end
    set @NumRecs=0;
    

	-- get all the customers who are being assigned to a household
	Insert into #CITemp
	select distinct CustomerPK, HHPK 
        from CustomerImportTemp CIT
        where ProcessFlag=1 and IsNull(HHPK, 0) > 0;
    
    if (@@ROWCOUNT=0) begin
      set @RunAgain=0;
    end

	-- SV : swap the cardholder customerPK with the household one
	Update StoredValue set CustomerPK = CIT.HHPK
		from StoredValue SV 
		inner join #CITemp CIT on CIT.CustomerPK = SV.CustomerPK
 
	-- SV : swap the cardholder customerPK with the household one
	Update SVHistory set CustomerPK = CIT.HHPK
		from SVHistory SVH 
		inner join #CITemp CIT on CIT.CustomerPK = SVH.CustomerPK

	if @CPE_Installed = 1 begin
		-- Copy cross shopping records to CPE_SVupdated_Output for existing records
		insert into CPE_SVTransferred_Output with (RowLock) (LocalID, ServerSerial, OldCustomerPK, NewCustomerPK, LastUpdate, WaitingACK, TargetLocationID)
			select SV.LocalID, SV.ServerSerial, CIT.CustomerPK, CIT.HHPK, getdate(), 0 as WaitingACK, CL.LocationID as TargetLocationID
			from StoredValue as SV with (NoLock)
			inner join #CITemp CIT on CIT.HHPK = SV.CustomerPK
			inner join CustomerLocations as CL with (NoLock) on CIT.HHPK=CL.CustomerPK;
	end	
 

	-- POINTS : issue to the household
	insert into CPE_UploadTemp_PA (TableNum, Operation, Col1, Col2, Col3, Col4,
								   ServerSerial, LocationID, WaitingACK)
		select ''4'' as TableNum, ''1'' as Operation, ProgramID as Col1,
			   CIT.HHPK as Col2, IsNull(Amount,0) as Col3, 0 as Col4,
			   -9 as ServerSerial, -9 as LocationID, 0 as WaitingACK
		from Points PT
		inner join #CITemp CIT on CIT.CustomerPK = PT.CustomerPK
		where IsNull(Amount,0) > 0;

	-- POINTS : revoke from cardholders
	insert into CPE_UploadTemp_PA (TableNum, Operation, Col1, Col2, Col3, Col4,
								   ServerSerial, LocationID, WaitingACK)
		select ''4'' as TableNum, ''1'' as Operation, ProgramID as Col1,
			   CIT.CustomerPK as Col2, -1 * IsNull(Amount,0) as Col3, 0 as Col4,
			   -9 as ServerSerial, -9 as LocationID, 0 as WaitingACK
		from Points PT
		inner join #CITemp CIT on CIT.CustomerPK = PT.CustomerPK
		where IsNull(Amount,0) > 0		

	
	-- clean up for the next pass
	truncate table #CITemp

	-- mark these records as processed 
    Update CustomerImportTemp set ProcessFlag=2 where ProcessFlag=1; 

  end -- while

  drop table #CITemp
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerImport_Transfer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerInquiry_FetchCustRecord.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_FetchCustRecord]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerInquiry_FetchCustRecord]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[pa_CustomerInquiry_FetchCustRecord] @CustomerPK bigint
as 
    -- $Id: dbo.pa_CustomerInquiry_FetchCustRecord.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
    -- Build Version: 7.3.1.138972

  set nocount on;
  
  -- first recordset is for customer general information
  select CUST.CustomerPK, '' as CardIDS, CUST.FirstName, CUST.MiddleName, CUST.LastName, CUST.AltID,
    CUST.Verifier, CUST.Employee, CUST.EmployeeID, CUST.TestCard, 
    case CUST.CustomerStatusID when 1 then 'ACTIVE' else 'INACTIVE' end as CustomerStatus,
    case CUST.CustomerTypeID when 2 then 1 else 0 end as Household,CUST.EnrollmentDate,
    CE.Address, CE.City, CE.State, CE.Zip, CE.Country, CE.PhoneAsEntered as Phone, CE.MobilePhoneAsEntered as MobilePhone, 
    CE.email, CE.DOB, CUST.Password, isnull(CE.DriverLicenseID, '') as DriverLicenseID, isnull(CE.TaxExemptID, '') as TaxExemptID,
    CE.DateOpened, isnull(CE.ARCustomer, 0) as ARCustomer, 
    ARA.CompoundCharge, ARA.FinanceCharge, ARA.CreditLimit, ARA.APR
  from Customers as CUST with (NoLock) 
  left join CustomerExt as CE with (NoLock) on CUST.CustomerPK = CE.CustomerPK
  left join AR_Account as ARA with (NoLock) on CUST.CustomerPK=ARA.CustomerPK
  where CUST.CustomerPK=@CustomerPK;

  -- second recordset is for card information for the customer
  select C.CustomerPK, ExtCardIDOriginal as ExtCardID,
    case CardStatusID when 1 then 'ACTIVE'      -- this should be changed to join with the cardstatus table, since these strings are the strings stored there
                    when 2 then 'INACTIVE'
                    when 3 then 'CANCELED'
                    when 4 then 'EXPIRED'
                    when 5 then 'LOST_STOLEN'
                    when 6 then 'DEFAULT_CARD'
                    else 'UNDEFINED'
    end as CardStatus,
    case CardTypeID when 0 then 'CUSTOMER'  -- this should have used the CardTypes table descriptions, but those descriptions don't match these strings.
                  when 1 then 'HOUSEHOLD'
                  when 2 then 'CAM'
                  when 3 then 'Alternate ID'
				  when 4 then 'Username'
				  when 5 then 'Associate ID'
				  when 6 then 'Email Address'
				  when 7 then 'Secondary Member Card'
				  else 'UNDEFINED'
    end as CardType
  from CardIDs as C with (NoLock)
  where CustomerPK = @CustomerPK;
GO

GRANT EXECUTE ON [dbo].[pa_CustomerInquiry_FetchCustRecord] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerInquiry_FetchCustRecordWithCardTypes.StoredProcedure .sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_FetchCustRecordWithCardTypes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerInquiry_FetchCustRecordWithCardTypes]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[pa_CustomerInquiry_FetchCustRecordWithCardTypes] @CustomerPK bigint
as 
    -- $Id: dbo.pa_CustomerInquiry_FetchCustRecordWithCardTypes.StoredProcedure.sql 57480 2012-10-10 19:44:40Z ns185105 $
    -- Build Version: 7.3.1.138972

  set nocount on;
  
  -- first recordset is for customer general information
  select CUST.CustomerPK, '' as CardIDS, CUST.FirstName, CUST.MiddleName, CUST.LastName, CUST.AltID,
    CUST.Verifier, CUST.Employee, CUST.EmployeeID, CUST.TestCard, 
    case CUST.CustomerStatusID when 1 then 'ACTIVE' else 'INACTIVE' end as CustomerStatus,
    case CUST.CustomerTypeID when 2 then 1 else 0 end as Household,CUST.EnrollmentDate,
    CE.Address, CE.City, CE.State, CE.Zip, CE.Country, CE.PhoneAsEntered as Phone, CE.MobilePhoneAsEntered as MobilePhone, 
    CE.email, CE.DOB, CUST.Password, isnull(CE.DriverLicenseID, '') as DriverLicenseID, isnull(CE.TaxExemptID, '') as TaxExemptID,
    CE.DateOpened, isnull(CE.ARCustomer, 0) as ARCustomer, 
    ARA.CompoundCharge, ARA.FinanceCharge, ARA.CreditLimit, ARA.APR
  from Customers as CUST with (NoLock) 
  left join CustomerExt as CE with (NoLock) on CUST.CustomerPK = CE.CustomerPK
  left join AR_Account as ARA with (NoLock) on CUST.CustomerPK=ARA.CustomerPK
  where CUST.CustomerPK=@CustomerPK;

  -- second recordset is for card information for the customer
  select C.CustomerPK, C.ExtCardIDOriginal as ExtCardID, S.Description as CardStatus, T.Description as CardType
  from CardIDs as C with (NoLock)
  INNER JOIN CardStatus as S on S.CardStatusID = C.CardStatusID
  INNER JOIN CardTypes AS T on C.CardTypeID = T.CardTypeID
  where CustomerPK = @CustomerPK
GO

GRANT EXECUTE ON [dbo].[pa_CustomerInquiry_FetchCustRecordWithCardTypes] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerInquiry_FetchCustRecordWithSupplementals.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_FetchCustSupplementals]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerInquiry_FetchCustSupplementals]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[pa_CustomerInquiry_FetchCustSupplementals] @CustomerPK bigint, @sortMethod int
as 
    -- $Id$
    -- Build Version: 7.3.1.138972

  set nocount on;

if (@sortMethod=0) begin
  select csf.FieldID, csf.ExtFieldID, csf.Name, csf.FieldTypeID, case when csf.FieldTypeID = 5 then ISNULL(Value, '') else ISNULL(Value, '0') end as Value 
  from CustomerSupplementalFields as csf with (NoLock) 
  left join CustomerSupplemental as CS on CS.FieldID=csf.FieldID and CustomerPK=@CustomerPK and cs.Deleted=0 
  where csf.Deleted=0 order by CSF.Name
end
else if (@sortMethod=1) begin
  select csf.FieldID, csf.ExtFieldID, csf.Name, csf.FieldTypeID, case when csf.FieldTypeID = 5 then ISNULL(Value, '') else ISNULL(Value, '0') end as Value 
  from CustomerSupplementalFields as csf with (NoLock) 
  left join CustomerSupplemental as CS on CS.FieldID=csf.FieldID and CustomerPK=@CustomerPK and cs.Deleted=0 
  where csf.Deleted=0 order by CSF.ExtFieldID
end
else if (@sortMethod=2) begin
  select csf.FieldID, csf.ExtFieldID, csf.Name, csf.FieldTypeID, case when csf.FieldTypeID = 5 then ISNULL(Value, '') else ISNULL(Value, '0') end as Value 
  from CustomerSupplementalFields as csf with (NoLock) 
  left join CustomerSupplemental as CS on CS.FieldID=csf.FieldID and CustomerPK=@CustomerPK and cs.Deleted=0 
  where csf.Deleted=0 order by cast(ExtFieldID as bigint)
end

GO

GRANT EXECUTE ON [dbo].[pa_CustomerInquiry_FetchCustSupplementals] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerInquiry_InfoChanges.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CustomerInquiry_InfoChanges]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_InfoChanges]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_CustomerInquiry_InfoChanges]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[pa_CustomerInquiry_InfoChanges] @BatchGUID nvarchar(36)
AS 

    -- $Id: dbo.pa_CustomerInquiry_InfoChanges.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
    -- Build Version: 7.3.1.138972

    set nocount on;
    declare @ExtCardIDs varchar(max);

    DECLARE @CustomerInfo TABLE (
        CustomerPK          bigint, 
        CardIDs             varchar(max), 
        FirstName           nvarchar(50),
        MiddleName          nvarchar(50), 
        LastName            nvarchar(50), 
        AltID               nvarchar(20),
        Verifier            nvarchar(20), 
        Employee            bit, 
        EmployeeID          nvarchar(26),
        TestCard            bit, 
        CustomerStatus      nvarchar(20), 
        Household           bit, 
        EnrollmentDate      nvarchar(8),	
        Address             nvarchar(1000), 
        City                nvarchar(1000), 
        State               nvarchar(1000),
        Zip                 nvarchar(1000), 
        Country             nvarchar(50), 
        Phone               nvarchar(100),
        MobilePhone         nvarchar(100), 
        email               nvarchar(1000), 
        DOB                 nvarchar(25),
        Password            nvarchar(256),
	    DriverLicenseID     nvarchar(50) NULL,
	    TaxExemptID         nvarchar(50) NULL,
        DateOpened          nvarchar(8) NULL,
	    ARCustomer          bit NULL,
        CompoundCharge      tinyint NULL,        -- from AR_Account table
        FinanceCharge       tinyint NULL,
        CreditLimit         numeric(16,2) NULL,
        APR                 numeric(5,2) NULL
    	    
    )
    DECLARE @CardInfo TABLE (
        CustomerPK  bigint, 
        ExtCardID   nvarchar(400), 
        CardStatus  nvarchar(50), 
        CardType    nvarchar(100)
    )

    -- store the customer records in a table for joining with the CardIDs table
    insert into @CustomerInfo
        select 
            CUST.CustomerPK, 
            '' as CardIDS, 
            CUST.FirstName, 
            CUST.MiddleName, 
            CUST.LastName, 
            CUST.AltID,
            CUST.Verifier, 
            CUST.Employee, 
            CUST.EmployeeID, 
            CUST.TestCard, 
            case CUST.CustomerStatusID when 1 then 'ACTIVE' else 'INACTIVE' end as CustomerStatus,
            case CUST.CustomerTypeID when 1 then 1 else 0 end as Household,CUST.EnrollmentDate,
            CE.Address, 
            CE.City, 
            CE.State, 
            CE.Zip, 
            CE.Country, 
            CE.PhoneAsEntered as Phone, 
            CE.MobilePhoneAsEntered as MobilePhone, 
            CE.email, 
            CE.DOB, 
            CUST.Password,
            CE.DriverLicenseID,
            CE.TaxExemptID,
            CE.DateOpened,
            CE.ARCustomer,
            AR.CompoundCharge,
            AR.FinanceCharge,
            AR.CreditLimit,
            AR.APR            
            
        from CustomerInfoChanges as CIC with (NoLock)
            inner join Customers as CUST with (NoLock) on CUST.CustomerPK = CIC.CustomerPK
            left join CustomerExt as CE with (NoLock) on CUST.CustomerPK = CE.CustomerPK
            left join AR_Account as AR with ( NoLock ) on CUST.CustomerPK = AR.CustomerPK
        where CIC.ReportStatus = 2 and CIC.BatchGUID = @BatchGUID;


    -- find all the cards for each customer
    insert into @CardInfo  
      select CIDs.CustomerPK, CIDs.ExtCardIDOriginal, isnull(CS.Description, 'UNDEFINED') as CardStatus,
             isnull(CT.Description, 'UNDEFINED') as CardType
      from CardIDs as CIDs with (NoLock)  
        inner join @CustomerInfo as CI on CI.CustomerPK = CIDs.CustomerPK  
        left join CardStatus as CS with (NoLock) on CS.CardStatusID=CIDs.CardStatusID
        left join CardTypes as CT with (NoLock) on CT.CardTypeID=CIDs.CardTypeID
      
      
    -- return the customer information and the associated card info for those customers
    select distinct * from @CustomerInfo order by CustomerPK;
    select distinct * from @CardInfo order by CustomerPK;
  
GO


GRANT EXECUTE ON [dbo].[pa_CustomerInquiry_InfoChanges] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerInquiry_MarkInfoAsReady.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerInquiry_MarkInfoAsReady.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerInquiry_MarkInfoAsReady]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_MarkInfoAsReady]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerInquiry_MarkInfoAsReady]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_MarkInfoAsReady]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CustomerInquiry_MarkInfoAsReady] @BatchGUID nvarchar(36), @RecsRolledback int OUTPUT
as 
  set nocount on;
  declare @NumRecs int;
  declare @StillWorking bit;
  
  set @NumRecs=0;
  set @RecsRolledback=0;
  set @StillWorking=1;
  
  -- clean up any records that might be already in an in-process status to ensure that a
  -- maximum of 1000 records are returned and that all records are processed successfully.
  while @StillWorking=1
    begin
      --set rowcount 1000;
      update TOP (1000) CustomerInfoChanges with (RowLock) set ReportStatus = 1, BatchGUID=null, BatchDate=null 
        where ReportStatus = 2 and (BatchGUID=@BatchGUID or ISNULL(BatchGUID, '''') = '''' or GETDATE() > DateAdd(minute, 2, BatchDate));
      set @NumRecs = @@ROWCOUNT
      if @NumRecs < 1000
        begin
          set @StillWorking=0;
        end
      set @RecsRolledback = @RecsRolledback + @NumRecs
      --set rowcount 0;
    end
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerInquiry_MarkInfoAsReady] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerInquiry_MarkInfoInProcess.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerInquiry_MarkInfoInProcess.StoredProcedure.sql 120246 2018-02-06 02:08:41Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerInquiry_MarkInfoInProcess]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_MarkInfoInProcess]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerInquiry_MarkInfoInProcess]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_MarkInfoInProcess]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CustomerInquiry_MarkInfoInProcess] @BatchGUID nvarchar(36), @RemainingRecs int OUTPUT
as 
  set nocount on;
  declare @NumRecs int;
  
  set @NumRecs=0;
  set @RemainingRecs=0;
  
    -- mark a maximum of 1000 records as in-process
  --set rowcount 1000;
  update TOP (1000) CustomerInfoChanges with (RowLock) set BatchGUID=@BatchGUID, BatchDate=getdate(), ReportStatus = 2 where ReportStatus = 1;
  set @NumRecs = @@ROWCOUNT
  --set rowcount 0;

  -- when the maximum is reached, check the number remaining records left to process
  if @NumRecs >= 1000 
    begin
     select @RemainingRecs = COUNT(customerPK) from CustomerInfoChanges with (NoLock) where ReportStatus=1;
    end       
    
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerInquiry_MarkInfoInProcess] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerInquiry_MarkInfoProcessed.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerInquiry_MarkInfoProcessed.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerInquiry_MarkInfoProcessed]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_MarkInfoProcessed]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerInquiry_MarkInfoProcessed]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerInquiry_MarkInfoProcessed]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_CustomerInquiry_MarkInfoProcessed] @BatchGUID nvarchar(36), @RecordsMarked int OUTPUT
as 
  set nocount on;
  declare @NumRecs int;
  declare @StillWorking bit;
  
  set @NumRecs=0;
  set @StillWorking=1;
  
  -- mark all the inprocess records as processed.
  while @StillWorking=1
    begin
      --set rowcount 1000;
      update TOP (1000) CustomerInfoChanges with (RowLock) set ReportStatus = 0 where ReportStatus = 2 and BatchGUID=@BatchGUID;
      set @NumRecs = @@ROWCOUNT
      if @NumRecs < 1000
        begin
          set @StillWorking=0;
        end
        set @RecordsMarked = @RecordsMarked + @NumRecs;
      --set rowcount 0;
    end
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerInquiry_MarkInfoProcessed] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CustomerPoints_Add.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CustomerPoints_Add.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CustomerPoints_Add]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerPoints_Add]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CustomerPoints_Add]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CustomerPoints_Add]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_CustomerPoints_Add] @PromoVarID bigint, @ProgramID bigint, @ExtCardID nvarchar(400),
                                               @CardTypeID int,  @Amount decimal(12,3), @Status int OUTPUT
AS
	SET NOCOUNT ON;
	declare @CustomerPK bigint;
	declare @NumRecs int;

	set @CustomerPK = 0;
	set @NumRecs = 0;
	set @Status = 0
	
	select @CustomerPK = CustomerPK from CardIDs with (nolock) where ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;
	
	if (@CustomerPK > 0) begin
		select @NumRecs  = count(*) from Points with (nolock) where CustomerPK = @CustomerPK and PromoVarID=@PromoVarID;
		if (@NumRecs > 0) begin
			update points set Amount = @Amount where PromoVarID = @PromoVarID and CustomerPK = @CustomerPK;
			set @Status = 1;
		end
		else begin
			insert into Points
				(PromoVarID, CustomerPK, Amount, ProgramID)
			values
				(@PromoVarID, @CustomerPK, @Amount, @ProgramID);
			set @Status = 2;
		end
	end
	else begin
		set @Status = -1;
	end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_CustomerPoints_Add] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_DeleteExistingCouponsFromTemp.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_Delete.StoredProcedure.sql 70929 2013-10-21 20:37:36Z kb250147 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT
    *
  FROM sys.objects
  WHERE object_id = OBJECT_ID(N'[dbo].[pa_DeleteExistingCouponsFromTemp]')
  AND type IN (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_DeleteExistingCouponsFromTemp]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_DeleteExistingCouponsFromTemp]

AS
BEGIN
    DECLARE	 @CouponLength		 INT           = 20,
			 @Prefix			 NVARCHAR(150) = NULL,
			 @Suffix			 NVARCHAR(150) = NULL,
			 @StartRange		 VARCHAR(150)  = NULL,
			 @MaxCouponCode	 VARCHAR(150)  = NULL,
			 @PrefixLength		 TINYINT		 = 0,
			 @SuffixLength		 TINYINT		 = 0
                       
    SELECT	 @CouponLength	  =	  CouponLength,
			 @Prefix		  =	  ISNULL(Prefix,''),
			 @Suffix		  =	  ISNULL(Suffix,''),
			 @StartRange	  =	  StartRange,
			 @MaxCouponCode  =	  ISNULL(MaxCouponCode,StartRange)
    FROM		 CouponPattern
    
    SELECT	 @PrefixLength	  = LEN(@Prefix),	   
			 @SuffixLength	  = LEN(@Suffix) 
    
    ;WITH DuplicateCoupons
    AS (
    SELECT TCT.CouponCode FROM TrackableCouponsInsertTemp AS TCT
    WHERE	  TCT.CouponCode IN (SELECT CouponCode FROM TrackableCoupons) -- Checking with TrackableCoupons
		  OR	 (LEN(CouponCode) = @CouponLength 
		  AND SUBSTRING(CouponCode,0,@PrefixLength+1) = @Prefix	-- Filtering Prefix
		  AND SUBSTRING(CouponCode,@CouponLength-@SuffixLength+1,@SuffixLength) = @Suffix -- Filtering Suffix
		  AND SUBSTRING(CouponCode, @PrefixLength + 1, (@CouponLength - (@PrefixLength + @SuffixLength))) BETWEEN RIGHT(REPLICATE('0', @CouponLength) + @StartRange, @CouponLength) AND @MaxCouponCode))
		        
    DELETE TCT FROM TrackableCouponsInsertTemp AS TCT
    WHERE TCT.CouponCode IN (SELECT CouponCode FROM DuplicateCoupons)
    
END
GO

GRANT EXECUTE ON [dbo].[pa_DeleteExistingCouponsFromTemp] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_Delete_CustomerLocations_by_date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Delete_CustomerLocations_by_date.StoredProcedure.sql 120247 2018-02-06 02:57:26Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Delete_CustomerLocations_by_date]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Delete_CustomerLocations_by_date]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Delete_CustomerLocations_by_date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Delete_CustomerLocations_by_date]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Delete_CustomerLocations_by_date] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT as
  -- This procedure marks as deleted all the CustomerLocations records that have a LastVisit less than or equal to the DeleteDate provided
  -- invoked by DBPurgeAgent
  set nocount on
  declare @NumRecs as int;
  declare @StartTime as datetime;
  declare @SkipMark as int;
  set @RunAgain=1
  set @NumDeleted=0;
  set @StartTime=getdate();

  CREATE TABLE #CustPurge ([CustomerPK] bigint NULL, [LocationID] bigint NULL);

  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin
    Insert into #CustPurge (CustomerPK, LocationID) 
      select top (1800) CustomerPK, LocationID from CustomerLocations with (NoLock) where LastVisit<=@DeleteDate;
    set @NumRecs=@@ROWCOUNT;
    set @NumDeleted=@NumDeleted+@NumRecs;
    if @NumRecs>100 begin
      set @RunAgain=1
    end
    else begin
      set @RunAgain=0
    end
    --set rowcount 0;

    if @NumRecs>0 begin  -- is there anything to process?
      Insert into CPE_CustomerRemoval_Output with (RowLock) (CustomerPK, WaitingACK, TargetLocationID) 
        select CustomerPK, 0 as WaitingACK, LocationID as TargetLocationID from #CustPurge;

      Delete from CustomerLocations 
        from CustomerLocations Inner Join #CustPurge on CustomerLocations.CustomerPK=#CustPurge.CustomerPK and CustomerLocations.LocationID=#CustPurge.LocationID;
      
      -- Note: Removed the cleanup of CPE queues to prevent extra data from going to the stores.
      --   This should be safe as CPE just ignores this extraneous data. A PhoneHome will
      --   completely restore all user data.
      
      Truncate Table #CustPurge
    end
  end -- while
  Drop Table #CustPurge;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Delete_CustomerLocations_by_date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Delete_Expired_Program_PointsHistory_records.StoredProcedure.sql'; 
--
GO
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
--
--		Purpose			:		Procedure to remove all PointsHistory data related to a ProgramID (after it expires)
--								The goal is to stagger row-deletions from Points table, while minimizing the blocking impact on the other concurrent processes
--
--		Author			:		Key Kyle
--
--		Modifications	:		Author				Date					Comments
--								- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
--								Uday K. Sangepu		06/20/2012				Added loop to purge data for 300 seconds at a time
--																			Limit deletions to 2000 records at a time
--																			Use RowLock for each iteration
--	
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


--
--	Start of Script	:	pa_Delete_Expired_Program_PointsHistory_records.StoredProcedure.sql
--

	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.pa_Delete_Expired_Program_PointsHistory_records') AND type in (N'P', N'PC'))
		DROP PROCEDURE dbo.pa_Delete_Expired_Program_PointsHistory_records
	GO


	CREATE PROCEDURE dbo.pa_Delete_Expired_Program_PointsHistory_records
		  @ProgramID BIGINT	= 0
		, @PointsHistoryRowsDeleted INT OUTPUT
		, @RunAgain INT OUTPUT
	AS

		--
		--	Purpose	:	Procedure to remove all PointsHistory data related to a ProgramID once it expires.
		--				The goal is to stagger row-deletions from PointsHistory table, while minimizing the blocking impact on the other concurrent processes
		--
		SET NOCOUNT ON

		--
		--	Declare necessary variables and assign initial values
		--
		DECLARE   @LoopDuration	DATETIME	=	GETDATE()
				, @RecordCount	INT			=	0
				, @RowCount		INT			=	0

		SELECT @RunAgain = 1

		--
		--	Check for Valid Input Parameters
		--
		IF @ProgramID = 0
			RETURN

		
		--
		--	For 300 seconds (5 mins), delete records from PointsHistory table in 2000 batch.
		--
		WHILE	DATEDIFF(SS, @LoopDuration, GETDATE()) <= 300
				AND @RunAgain = 1
		BEGIN

			--
			--	DELETE pre-defined number of records from PointsHistory table
			--
			DELETE TOP (2000)
			FROM dbo.PointsHistory	--	WITH (ROWLOCK)
			WHERE ProgramID = @ProgramID


			--	capture progress
			SELECT @RowCount = @@ROWCOUNT
				 , @PointsHistoryRowsDeleted = ISNULL(@PointsHistoryRowsDeleted,0) + @@ROWCOUNT

			--	set loop variables	 
			IF @RowCount = 0
				SELECT @RunAgain = 0
		END
	GO

	
--
--	End of Script	:	pa_Delete_Expired_Program_PointsHistory_records.StoredProcedure.sql
--


print 'processing storedprocedures/dbo.pa_Delete_Expired_Program_Points_records.StoredProcedure.sql'; 
--
GO
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
--
--		Purpose			:		Procedure to remove all Points data related to a ProgramID once it expires.
--								The goal is to stagger row-deletions from Points table, while minimizing the blocking impact on the other concurrent processes
--		Author			:		Key Kyle
--		Modifications	:		Author				Date					Comments
--								- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
--								Uday K. Sangepu		06/20/2012				Added loop to purge data for 300 seconds at a time
--																			Limit deletions to 2000 records at a time
--																			Use RowLock for each iteration
--	
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


--
--	Start of Script	:	pa_Delete_Expired_Program_Points_records.StoredProcedure.sql
--

	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.pa_Delete_Expired_Program_Points_records') AND type in (N'P', N'PC'))
		DROP PROCEDURE dbo.pa_Delete_Expired_Program_Points_records
	GO


	CREATE PROCEDURE dbo.pa_Delete_Expired_Program_Points_records
		  @ProgramID BIGINT	= 0
		, @PointsRowsDeleted INT OUTPUT
		, @RunAgain INT OUTPUT
	AS

		--
		--	Purpose	:	Procedure to remove all Points data related to a ProgramID once it expires.
		--				The goal is to stagger row-deletions from Points table, while minimizing the blocking impact on the other concurrent processes
		--
		SET NOCOUNT ON

		--
		--	Declare necessary variables and assign initial values
		--
		DECLARE   @LoopDuration	DATETIME	=	GETDATE()
				, @RecordCount	INT			=	0
				, @RowCount		INT			=	0

		SELECT @RunAgain = 1

		--
		--	Check for Valid Input Parameters
		--
		IF @ProgramID = 0
			RETURN

		
		--
		--	For 300 seconds (5 mins), delete records from Points table in 2000 batch.
		--
		WHILE	DATEDIFF(SS, @LoopDuration, GETDATE()) <= 300
				AND @RunAgain = 1
		BEGIN

			--
			--	DELETE pre-defined number of records from Points table
			--
			DELETE TOP (2000)
			FROM dbo.Points	--	WITH (ROWLOCK)
			WHERE ProgramID = @ProgramID


			--	capture progress
			SELECT @RowCount = @@ROWCOUNT
				 , @PointsRowsDeleted = ISNULL(@PointsRowsDeleted,0) + @@ROWCOUNT

			--	set loop variables	 
			IF @RowCount = 0
				SELECT @RunAgain = 0
		END
	GO

	
--
--	End of Script	:	pa_Delete_Expired_Program_Points_records.StoredProcedure.sql
--
	

print 'processing storedprocedures/dbo.pa_DesignAlphaNumericCoupons.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_DesignAlphaNumericCoupons]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_DesignAlphaNumericCoupons]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_DesignAlphaNumericCoupons]
GO

/****** Object:  StoredProcedure [dbo].[pa_DesignAlphaNumericCoupons]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_DesignAlphaNumericCoupons (@StartRange VARCHAR(150)  = NULL, @NumberOfCoupons INT           = 1)
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @CouponCodes TABLE (
        CouponCode VARCHAR(150)
    )
    DECLARE @CouponCodes_Temp TABLE (
        CouponCode VARCHAR(150)
    )
    DECLARE @CouponCodes_Temp2 TABLE (
        CouponCode VARCHAR(150)
    )

    DECLARE	@CouponLength    INT           = 20,
			@OrderType       VARCHAR(1)    = 'R',
			@Prefix          NVARCHAR(150) = NULL,
			@Suffix          NVARCHAR(150) = NULL,
			@EndRange        VARCHAR(150)  = NULL,
			@CouponDataType  VARCHAR(1)    = 'N'
                       
    SELECT  @CouponLength   =	  CouponLength,
		  @OrderType	   =	  PatternOrder,
		  @Prefix		   =	  Prefix,
		  @Suffix		   =	  Suffix,
		  @EndRange	   =	  EndRange,
		  @CouponDataType =	  PatternDataType		  
    FROM CouponPattern
    
    DECLARE @CouponCode VARCHAR(150) = NULL,
            @TotalNumberOfCouponsRequired INT = @NumberOfCoupons,
            @TotalNumberOfCouponsGenerated INT,
            @PadLength INT = @CouponLength - (LEN(ISNULL(@Prefix, '')) + LEN(ISNULL(@Suffix, ''))),
            @CalculatedLength INT = @CouponLength - (LEN(ISNULL(@Prefix, '')) + LEN(ISNULL(@Suffix, ''))),
            @NewID VARCHAR(150),
            @DefinedLength INT = 30,
            @CouponStockCount BIGINT,
            @RequiredNumberOfCouponsInStock BIGINT

    SELECT
        @StartRange = SUBSTRING(@StartRange, PATINDEX('%[^0 ]%', @StartRange + ' '), LEN(@StartRange))
    SELECT
        @EndRange = SUBSTRING(@EndRange, PATINDEX('%[^0 ]%', @EndRange + ' '), LEN(@EndRange))
    SELECT
        @StartRange =
                     CASE
                         WHEN LEN(@StartRange) = 0 THEN '0'
                         ELSE @StartRange
                     END

    BEGIN

        SET @CouponCode = NULL
        
        BEGIN
            -- Insert first coupon
            SELECT
                @CouponCode = dbo.AppendPrefixSuffixToCouponCode(@Prefix, dbo.StringPadLeft(@StartRange, @PadLength, '0'), @Suffix)
            IF (dbo.CheckIfCouponCodeAvailable(@CouponCode) = 1)
            BEGIN
                INSERT INTO @CouponCodes_Temp
                    SELECT
                        @CouponCode

                SET @NumberOfCoupons = @NumberOfCoupons - 1
            END

            WHILE ((dbo.CompareTwoStrings(@EndRange, @StartRange) = @EndRange)
                AND (@NumberOfCoupons > 0))
            BEGIN
            GenerateSequence:
                -- Insert first coupon
                INSERT INTO @CouponCodes_Temp
                    SELECT
                        dbo.AppendPrefixSuffixToCouponCode(@Prefix, dbo.StringPadLeft(@StartRange, @PadLength, '0'), @Suffix)

                -- Generate and Insert consequent coupons
                SET @CouponCode = dbo.GetNextAlphaNumericValue(@StartRange)
                INSERT INTO @CouponCodes_Temp
                    SELECT
                        dbo.AppendPrefixSuffixToCouponCode(@Prefix, dbo.StringPadLeft(@CouponCode, @PadLength, '0'), @Suffix)

                SET @NumberOfCoupons = @NumberOfCoupons - 1
                SET @StartRange = @CouponCode

            END

        END
        
        ;        
        WITH CTE
        AS (SELECT CouponCode FROM @CouponCodes_Temp
        EXCEPT
        SELECT CouponCode FROM TrackableCoupons
        EXCEPT
        SELECT CouponCode FROM CouponStock
        )
        
        INSERT INTO @CouponCodes_Temp2
            SELECT CouponCode FROM CTE

        DELETE @CouponCodes_Temp

        SELECT @TotalNumberOfCouponsGenerated = COUNT(1)
        FROM @CouponCodes_Temp2

        IF (@TotalNumberOfCouponsGenerated < @TotalNumberOfCouponsRequired)
        BEGIN
            IF (dbo.CompareTwoStrings(@EndRange, @StartRange) = @EndRange)
            BEGIN
                SET @NumberOfCoupons = @TotalNumberOfCouponsRequired
                GOTO GenerateSequence;
            END
        END

        INSERT INTO @CouponCodes
            SELECT CouponCode FROM @CouponCodes_Temp2
            EXCEPT
            SELECT CouponCode FROM TrackableCoupons

        SELECT TOP (@TotalNumberOfCouponsRequired) CouponCode AS CouponCode FROM @CouponCodes

    END

END
GO
GRANT EXEC ON [DBO].[pa_DesignAlphaNumericCoupons] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO

print 'processing storedprocedures/dbo.pa_DesignNumericCoupons.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_DesignNumericCoupons]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_DesignNumericCoupons]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_DesignNumericCoupons]
GO

/****** Object:  StoredProcedure [dbo].[pa_DesignNumericCoupons]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_DesignNumericCoupons (@StartRange	 DECIMAL(38,0) = 0, @NumberOfCoupons BIGINT = 1)
AS
BEGIN
    SET NOCOUNT ON
    DECLARE @CouponCodes TABLE (
        CouponCode VARCHAR(150)
    )
    DECLARE @CouponCodes_Temp TABLE (
        CouponCode VARCHAR(150)
    )
    DECLARE @CouponCodes_Temp2 TABLE (
        CouponCode VARCHAR(150)
    )

    DECLARE	@CouponLength    INT           = 40,
			@OrderType       VARCHAR(1)    = 'R',
			@Prefix          NVARCHAR(150) = NULL,
			@Suffix          NVARCHAR(150) = NULL,
			@EndRange        VARCHAR(150)  = NULL,
			@CouponDataType  VARCHAR(1)    = 'N'
                       
    SELECT  @CouponLength   =	  CouponLength,
		  @OrderType	   =	  PatternOrder,
		  @Prefix		   =	  Prefix,
		  @Suffix		   =	  Suffix,
		  @EndRange	   =	  EndRange,
		  @CouponDataType =	  PatternDataType		  
    FROM CouponPattern
    
    DECLARE @CouponCode VARCHAR(150) = NULL,
            @TotalNumberOfCouponsRequired   BIGINT = @NumberOfCoupons,
            @TotalNumberOfCouponsGenerated  BIGINT,
            @PadLength INT = @CouponLength - (LEN(ISNULL(@Prefix, '')) + LEN(ISNULL(@Suffix, ''))),
            @CalculatedStartRange DECIMAL(38,0) = CAST(@StartRange AS DECIMAL(38,0))

    BEGIN
        SET @CouponCode = NULL
        
        BEGIN
            WHILE ((CAST(@EndRange AS DECIMAL(38,0)) >= CAST(@StartRange AS DECIMAL(38,0)))
                AND @NumberOfCoupons > 0)
            BEGIN
            GenerateSequence:
                SET @CouponCode = @StartRange
                SET @CouponCode = dbo.AppendPrefixSuffixToCouponCode(@Prefix, dbo.StringPadLeft(@CouponCode, @PadLength, '0'), @Suffix)
                -- Insert Coupons into @CouponCodes_Temp
                INSERT INTO @CouponCodes_Temp
                    SELECT @CouponCode

                SET @StartRange = CAST(@StartRange AS DECIMAL(38,0)) + 1
                SET @NumberOfCoupons = @NumberOfCoupons - 1
            END
        END
        
        ;
        WITH CTE
        AS (SELECT CouponCode FROM @CouponCodes_Temp
        EXCEPT
        SELECT CouponCode FROM TrackableCoupons
        EXCEPT
        SELECT CouponCode FROM CouponStock
        )
        
        INSERT INTO @CouponCodes_Temp2
            SELECT CouponCode FROM CTE

        DELETE @CouponCodes_Temp

        SELECT @TotalNumberOfCouponsGenerated = COUNT(1)
        FROM @CouponCodes_Temp2

            
        IF (@TotalNumberOfCouponsGenerated < @TotalNumberOfCouponsRequired)
        BEGIN
            IF (CAST(@EndRange AS DECIMAL(38,0)) >= CAST(@StartRange AS DECIMAL(38,0)))
            BEGIN
                SET @NumberOfCoupons = @TotalNumberOfCouponsRequired - @TotalNumberOfCouponsGenerated
                GOTO GenerateSequence;
            END
        END

        INSERT INTO @CouponCodes
            SELECT CouponCode FROM @CouponCodes_Temp2
            EXCEPT
            SELECT CouponCode FROM TrackableCoupons

    END
    
    SELECT TOP (@TotalNumberOfCouponsRequired) CouponCode AS CouponCode FROM @CouponCodes


END

GO
GRANT EXECUTE ON [DBO].[pa_DesignNumericCoupons] TO [COPIENT_LOGIX_USPROLE] AS [DBO]
GO


print 'processing storedprocedures/dbo.pa_EOC_GetOrCreateCustomer.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_EOC_GetOrCreateCustomer.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_EOC_GetOrCreateCustomer]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_EOC_GetOrCreateCustomer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_EOC_GetOrCreateCustomer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_EOC_GetOrCreateCustomer]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_EOC_GetOrCreateCustomer] @ExtCardID nvarchar(400), @CardTypeID int, @CustomerTypeID int, @CustomerPK bigint OUTPUT,@ExtCardIDOriginal nvarchar(400)
AS 
  SET NOCOUNT ON;
  set @CustomerPK = 0
  
  -- try to get the CustomerPK from the Customers table
  select @CustomerPK=CustomerPK from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
   
  if @CustomerPK=0 begin
    -- customer does not exist - create a new record
    insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate, UpdateCount, InitialCardIDOriginal) values (@ExtCardID, @CardTypeID, @CustomerTypeID, '''', '''', getdate(),0,@ExtCardIDOriginal);
    set @CustomerPK=Scope_Identity();
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_EOC_GetOrCreateCustomer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Expire_StoredValue_By_Date.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_Expire_StoredValue_By_Date]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Expire_StoredValue_By_Date]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_Expire_StoredValue_By_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_Expire_StoredValue_By_Date] @ExpireDate DateTime, @NumExpired int OUTPUT, @RunAgain int OUTPUT AS
    -- $Id: dbo.pa_Expire_StoredValue_By_Date.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
    -- Build Version: 7.3.1.138972
    -- This procedure expires all the StoredValue records that have an ExpireDate less than or equal to the DeleteDate provided
    -- and have QtyUsed<QtyEarned
    -- invoked by DBPurgeAgent
  
  declare @NumRows int
  
  set nocount on  
  BEGIN TRY    
    BEGIN TRAN T1  
  
    set @RunAgain=1;  
    select @NumRows=count(*) from StoredValue where ExpireACK=1;  
    if @NumRows=0 begin  
      --set rowcount 1800;  -- only delete 1800 records at a time  
      

      update TOP (1800) StoredValue with (RowLock) set ExpireACK=1 where ExpireACK=0 and ExpireDate<@ExpireDate and QtyEarned>QtyUsed;  
      set @NumExpired=@@RowCount;  
      --set rowcount 0  
    end  
    else begin  
      set @NumExpired=@NumRows;  
    end  
  
    if @NumExpired=0 begin  -- stop processing when there are no rows left  
      set @RunAgain=0;  
    end  
    else begin  
      Insert into SVHistory (LocalID, ServerSerial, SVProgramID, CustomerPK, QtyUsed, Value, ExternalID, StatusFlag, LastUpdate, LastLocationID, ExpireDate, TotalValueEarned, RedeemedValue, BreakageValue, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID)  
        select SV.LocalID, SV.ServerSerial, SV.SVProgramID, SV.CustomerPK, (SV.QtyEarned-SV.QtyUsed) as QtyUsed, SV.Value, SV.ExternalID, 3 as StatusFlag, getdate() as LastUpdate, -9 as LocationID, SV.ExpireDate, SV.TotalValueEarned, 0 as RedeemedValue, ((SV.QtyEarned-SV.QtyUsed)*SV.Value*isnull(SVUOM.UnitOfMeasureLimit, 1)), PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID   
        from StoredValue as SV with (NoLock) Left Join SVUnitOfMeasureLimits as SVUOM on SV.SVProgramID = SVUOM.SVProgramID  
        where SV.ExpireACK=1  
          
      Delete from StoredValue with (RowLock) where ExpireACK=1;  
    end  
  
    COMMIT TRAN T1;  
  END TRY  
  BEGIN CATCH  
    set @RunAgain=0;  
    IF @@TRANCOUNT > 0 BEGIN  
 ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH

GO

GRANT EXECUTE ON [dbo].[pa_Expire_StoredValue_By_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Expire_StoredValue_By_Date_ExpireCentralServerTZ.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_Expire_StoredValue_By_Date_ExpireCentralServerTZ]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Expire_StoredValue_By_Date_ExpireCentralServerTZ]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_Expire_StoredValue_By_Date_ExpireCentralServerTZ]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_Expire_StoredValue_By_Date_ExpireCentralServerTZ] @ExpireDate DateTime, @ExpireDateCentralServerTZ DateTime, @NumExpired int OUTPUT, @RunAgain int OUTPUT AS
    -- $Id: dbo.pa_Expire_StoredValue_By_Date_ExpireCentralServerTZ.StoredProcedure.sql 65372 2013-05-03 20:33:15Z lf250051 $
    -- Build Version: 7.3.1.138972
    -- This procedure expires all the StoredValue records that have an ExpireDate less than or equal to the DeleteDate provided
    -- and have QtyUsed<QtyEarned
    -- invoked by DBPurgeAgent
  
  declare @NumRows int
  declare @NumExpiredExpireDate int
  declare @NumExpiredExpireDateCentralServerTZ int
  
  set nocount on  
  BEGIN TRY    
    BEGIN TRAN T1  
  
    set @RunAgain=1;  
    select @NumRows=count(*) from StoredValue where ExpireACK=1;  
    if @NumRows=0 begin  
      --set rowcount 1800;  -- only delete 1800 records at a time  
      
    update TOP (1800) StoredValue with (RowLock) set ExpireACK=1, ExpireDate=@ExpireDate where ExpireCentralServerTZ=0 and ExpireDate<@ExpireDate and ExpireACK=0 and QtyEarned>QtyUsed;
	  set @NumExpiredExpireDate=@@RowCount; 

	  update TOP (1800) StoredValue with (RowLock) set ExpireACK=1, ExpireDate=@ExpireDateCentralServerTZ where ExpireCentralServerTZ=1 and ExpireDate<@ExpireDateCentralServerTZ and ExpireACK=0 and QtyEarned>QtyUsed;
    set @NumExpiredExpireDateCentralServerTZ=@@RowCount; 
	  set @NumExpired = @NumExpiredExpireDate + @NumExpiredExpireDateCentralServerTZ;
      --set rowcount 0  
    end  
    else begin  
      set @NumExpired=@NumRows;  
    end  
  
    if @NumExpired=0 begin  -- stop processing when there are no rows left  
      set @RunAgain=0;  
    end  
    else begin  
      Insert into SVHistory (LocalID, ServerSerial, SVProgramID, CustomerPK, QtyUsed, Value, ExternalID, StatusFlag, LastUpdate, LastLocationID, ExpireDate, TotalValueEarned, RedeemedValue, BreakageValue, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID)  
        select SV.LocalID, SV.ServerSerial, SV.SVProgramID, SV.CustomerPK, (SV.QtyEarned-SV.QtyUsed) as QtyUsed, SV.Value, SV.ExternalID, 3 as StatusFlag, getdate() as LastUpdate, -9 as LocationID, SV.ExpireDate, SV.TotalValueEarned, 0 as RedeemedValue, ((SV.QtyEarned-SV.QtyUsed)*SV.Value*isnull(SVUOM.UnitOfMeasureLimit, 1)), PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID   
        from StoredValue as SV with (NoLock) Left Join SVUnitOfMeasureLimits as SVUOM on SV.SVProgramID = SVUOM.SVProgramID  
        where SV.ExpireACK=1  
          
      Delete from StoredValue with (RowLock) where ExpireACK=1;  
    end  
  
    COMMIT TRAN T1;  
  END TRY  
  BEGIN CATCH  
    set @RunAgain=0;  
    IF @@TRANCOUNT > 0 BEGIN  
 ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
  END CATCH

GO

GRANT EXECUTE ON [dbo].[pa_Expire_StoredValue_By_Date_ExpireCentralServerTZ] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ExtendStoredValues.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ExtendStoredValues.StoredProcedure.sql 33583 2016-03-04 16:05:56Z baughdw $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ExtendStoredValues]    Script Date: 03/04/2016 15:13:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ExtendStoredValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ExtendStoredValues]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ExtendStoredValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_ExtendStoredValues] @ProgramID bigint,
                                                                                     @ExpireDate datetime
AS
  SET NOCOUNT ON;

  insert into StoredValueExpirationExtensions (SVProgramID, ExpireDate, Status, LastUpdate)
         values (@ProgramID, @ExpireDate, 0, GetDate());
         
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ExtendStoredValues] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_FillCouponStock.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_FillCouponStock]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_FillCouponStock]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_FillCouponStock]
GO

/****** Object:  StoredProcedure [dbo].[pa_FillCouponStock]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE pa_FillCouponStock (@TruncateStock   BIT = 1,
                                     @NumberOfCoupons INT = 100000)
AS
BEGIN
    SET NOCOUNT ON
    
    FillBuffer: 
    
    DECLARE @TempStock TABLE (
        CouponCode VARCHAR(150)
    )
    
    DECLARE @TempStockBuffer TABLE (
        CouponCode VARCHAR(150)
    )
    
    DECLARE @CouponStock TABLE  (
		CouponCode NVARCHAR(150) 
    )
    DECLARE @TempUnUsedCoupons TABLE (
        CouponCode VARCHAR(150)
    ) 
    
    DECLARE @CouponLength		 INT			  = 20,
            @OrderType			 VARCHAR(1)	  = 'R',
            @Prefix				 NVARCHAR(150)	  = NULL,
            @Suffix				 NVARCHAR(150)	  = NULL,
            @StartRange			 VARCHAR(150)	  = NULL,
            @EndRange			 VARCHAR(150)	  = NULL,
            @CouponDataType		 VARCHAR(1)	  = 'N',
            @PadLength			 INT			  = 0

    SELECT
        @CouponLength   = CouponLength,
        @OrderType	    = PatternOrder,
        @Prefix	    = Prefix,
        @Suffix	    = Suffix,
        @StartRange	    = StartRange,
        @EndRange	    = EndRange,
        @CouponDataType = PatternDataType
    FROM CouponPattern

    DECLARE @CouponStockStrength		    INT = 0,
            @CouponStockBufferStrength	    INT = 0,
            @CouponStockLimit			    INT = @NumberOfCoupons,
            @CouponStockBufferLimit	    INT = @NumberOfCoupons * 10,
            @CouponStockThreshold		    INT = @NumberOfCoupons / 2,
            @Min_CouponID			    DECIMAL(38,0),
            @Max_CouponID			    DECIMAL(38,0),
            @CouponsToBeFilledInBuffer	    BIGINT  = 0,
            @NumberOfCouponsPerBatch	    BIGINT  = 100000,
            @CalculatedStartRange		    VARCHAR(150) = NULL,
            @TempStockBufferCount		    INT	   = 0,
            @PrefixLength			    INT	   = 0,
            @SuffixLength			    INT	   = 0,
            @MaxCouponCode			    VARCHAR (150) = NULL
    
    SET @PrefixLength = CASE WHEN @Prefix IS NULL THEN 0 ELSE LEN(@Prefix) END
    SET @SuffixLength = CASE WHEN @Suffix IS NULL THEN 0 ELSE LEN(@Suffix) END
    
    SELECT  @PadLength = @CouponLength - (@PrefixLength + @SuffixLength)
    
    -- Filling CouponStock initially, soon after setting the Pattern
    IF (@TruncateStock = 1)
    BEGIN
        -- Truncate CouponStock table before you fill based on @TruncateStock
        TRUNCATE TABLE CouponStock
        TRUNCATE TABLE CouponStockBuffer
        TRUNCATE TABLE UnusedCoupons
        
        DELETE @TempStock
        
        IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'n')
        BEGIN
            -- Start Filling Numeric CouponStock using 'pa_DesignNumericCoupons'
            INSERT INTO @TempStock (CouponCode)
            EXEC pa_DesignNumericCoupons @StartRange, @CouponStockLimit
        END
        ELSE
        IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'a')
        BEGIN
            -- Start Filling AlphaNumeric CouponStock using 'pa_DesignAlphaNumericCoupons'
            INSERT INTO @TempStock (CouponCode)
            EXEC pa_DesignAlphaNumericCoupons @StartRange, @CouponStockLimit
        END        
        
        IF (dbo.CheckIfPatternChanged(@CouponLength, @OrderType, @Prefix, @Suffix, @StartRange, @EndRange, @CouponDataType) = 1)
	   BEGIN
		  PRINT 'Pattern has changed'

		  SELECT @TruncateStock = 1, @NumberOfCoupons = @NumberOfCoupons
		  UPDATE CouponPattern SET MaxCouponCode = NULL
		  
		  DELETE @TempStock
		  GOTO FillBuffer;
	   END
	   -- Randomizing the Coupons in case of Random Ordre type
        IF (LTRIM(RTRIM(LOWER(@OrderType))) = 'r')
        BEGIN
		  INSERT INTO CouponStock WITH (HOLDLOCK) (CouponCode)
		  SELECT CouponCode FROM @TempStock ORDER BY NEWID()
        END
        ELSE
        BEGIN
		  INSERT INTO CouponStock WITH (HOLDLOCK) (CouponCode)
		  SELECT CouponCode FROM @TempStock
        END        
        
        -- Get and Update the MaxCouponCode in CouponPattern
        SELECT @MaxCouponCode = ISNULL(MAX(SUBSTRING(CouponCode, @PrefixLength + 1, (@CouponLength - (@PrefixLength + @SuffixLength)))),@StartRange) FROM @TempStock
        UPDATE CouponPattern SET MaxCouponCode = @MaxCouponCode
        
        DELETE @TempStock
        

    END
    
    --CouponStock Trehshold Case : Get Coupons from Buffer and Push them to Stock, then start filling Buffer
    SELECT @CouponStockStrength = COUNT(1) FROM CouponStock WITH (NOLOCK)

    -- Get the Coupons from Buffer and Start Inserting into Stock to its full 
    IF ((@CouponStockStrength < @CouponStockLimit)
        AND @TruncateStock = 0)
    BEGIN
        -- Inserting Unused Coupons into CouponStock
        DELETE UnusedCoupons
			    WITH (HOLDLOCK )
			    OUTPUT
			    DELETED.CouponCode
			    INTO @TempUnUsedCoupons (CouponCode)
        
        INSERT INTO CouponStock WITH (HOLDLOCK) (CouponCode)
                SELECT COUPONCODE FROM @TempUnUsedCoupons
        
        DELETE @TempUnUsedCoupons
        TRUNCATE TABLE UnusedCoupons
        
        FillStock:
        
        DELETE @CouponStock

        SELECT @CouponStockStrength = COUNT(1) FROM CouponStock WITH (NOLOCK)
        
        SELECT
            @Max_CouponID = MAX(COUPONID),
            @Min_CouponID = MIN(CouponID)
        FROM CouponStockBuffer WITH (NOLOCK)

        DELETE CouponStockBuffer WITH (ROWLOCK)
        OUTPUT DELETED.CouponCode
        INTO @CouponStock (CouponCode)
            FROM CouponStockBuffer CSB
        WHERE COUPONID BETWEEN @Min_CouponID AND @Min_CouponID + (@CouponStockLimit - @CouponStockStrength - 1)
        
        -- Check for Pattern change before Inserting Coupons into Stock
        IF (dbo.CheckIfPatternChanged(@CouponLength, @OrderType, @Prefix, @Suffix, @StartRange, @EndRange, @CouponDataType) = 1)
	   BEGIN
		  PRINT 'Pattern has changed'

		  SELECT @TruncateStock = 1, @NumberOfCoupons = @NumberOfCoupons
		  UPDATE CouponPattern SET MaxCouponCode = NULL
		  
		  DELETE @CouponStock
		  GOTO FillBuffer;
	   END
	   
        IF (LTRIM(RTRIM(LOWER(@OrderType))) = 'r')
        BEGIN
            INSERT INTO CouponStock WITH (HOLDLOCK) (CouponCode)
                SELECT COUPONCODE FROM @CouponStock
                ORDER BY NEWID()
        END
        ELSE
        BEGIN
		  INSERT INTO CouponStock WITH (HOLDLOCK) (CouponCode)
                SELECT CouponCode FROM @CouponStock
                ORDER BY CouponCode
                
        END
        
        DELETE @CouponStock
    END

    SELECT @MaxCouponCode = ISNULL(MaxCouponCode,@StartRange) FROM CouponPattern WITH (NOLOCK)
    
    IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'n')
	   SET @MaxCouponCode = (CONVERT(DECIMAL(38,0),@MaxCouponCode)) + 1
			 
    IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'a')
	   SET @MaxCouponCode = dbo.GetNextAlphaNumericValue(@MaxCouponCode)
    
    SELECT @CouponStockBufferStrength = COUNT(1)
    FROM CouponStockBuffer WITH (NOLOCK)
    
    -- Set @NumberOfCouponsPerBatch relative to @CouponStockBufferLimit
    SET @NumberOfCouponsPerBatch = CASE WHEN @NumberOfCouponsPerBatch > @CouponStockBufferLimit THEN @CouponStockBufferLimit
								ELSE @NumberOfCouponsPerBatch END
    
    IF(@MaxCouponCode <> '0')
	   SET @MaxCouponCode = SUBSTRING(@MaxCouponCode, PATINDEX('%[^0]%', @MaxCouponCode+'.'), LEN(@MaxCouponCode))-- Removing Trailing Zeros   
	   
    WHILE ((@CouponStockBufferStrength < @CouponStockBufferLimit) AND (dbo.CompareTwoStrings(@EndRange, @MaxCouponCode) = @EndRange) )
    BEGIN

	   --SELECT @CouponsToBeFilledInBuffer = @CouponStockBufferLimit - @CouponStockBufferStrength
	   IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'n')
	   BEGIN	   
		  INSERT INTO @TempStockBuffer (CouponCode)
		  EXEC pa_DesignNumericCoupons @MaxCouponCode, @NumberOfCouponsPerBatch
	   END
	   ELSE
	   IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'a')
	   BEGIN	   
		  INSERT INTO @TempStockBuffer (CouponCode)
		  EXEC pa_DesignAlphaNumericCoupons @MaxCouponCode, @NumberOfCouponsPerBatch
	   END
	   
	   -- Check for Pattern change before Inserting Coupons into Buffer
	   IF (dbo.CheckIfPatternChanged(@CouponLength, @OrderType, @Prefix, @Suffix, @StartRange, @EndRange, @CouponDataType) = 1)
	   BEGIN
		  PRINT 'Pattern has changed'

		  SELECT @TruncateStock = 1, @NumberOfCoupons = @NumberOfCoupons
		  UPDATE CouponPattern SET MaxCouponCode = NULL
		  
		  DELETE @TempStockBuffer
		  GOTO FillBuffer;
	   END
	   SELECT	 @TempStockBufferCount = COUNT(1), 
			 @MaxCouponCode = ISNULL(MAX(SUBSTRING(CouponCode, @PrefixLength + 1, (@CouponLength - (@PrefixLength + @SuffixLength)))),@StartRange) FROM @TempStockBuffer

	   UPDATE CouponPattern SET MaxCouponCode = @MaxCouponCode
	   
	   IF (@TempStockBufferCount > 0)
	   BEGIN	 
		  INSERT  INTO CouponStockBuffer WITH (ROWLOCK)
		  SELECT CouponCode FROM @TempStockBuffer
		  
		  DELETE @TempStockBuffer
	   END
	   ELSE
	   BEGIN
		  SET @CalculatedStartRange = @EndRange
		  SET @CouponStockBufferStrength = @CouponStockBufferLimit
		  
		  DELETE @TempStockBuffer
		  
		  RETURN
	   END
	   
	   SELECT @CouponStockBufferStrength = COUNT(1)
	   FROM CouponStockBuffer WITH (NOLOCK)
	   
	   SELECT @CouponStockStrength = COUNT(1)
	   FROM CouponStock WITH (NOLOCK)

	   -- Check for Pattern change before Inserting Coupons into Buffer
	   IF (dbo.CheckIfPatternChanged(@CouponLength, @OrderType, @Prefix, @Suffix, @StartRange, @EndRange, @CouponDataType) = 1)
	   BEGIN
		  PRINT 'Pattern has changed'

		  SELECT @TruncateStock = 1, @NumberOfCoupons = @NumberOfCoupons
		  UPDATE CouponPattern SET MaxCouponCode = NULL
		  
		  DELETE @TempStockBuffer
		  GOTO FillBuffer;
	   END
	   ELSE IF (@CouponStockBufferStrength < @CouponStockBufferLimit)
	   BEGIN	   
		  IF ((@CouponStockStrength < @CouponStockThreshold) AND(@CouponStockBufferStrength > @CouponStockThreshold))
		  BEGIN		  			 
			 GOTO FillStock;			 
		  END		  
		  
		  IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'n')
			 SET @MaxCouponCode = (CONVERT(DECIMAL(38,0),@MaxCouponCode)) + 1
			 
		  IF (LTRIM(RTRIM(LOWER(@CouponDataType))) = 'a')
			 SET @MaxCouponCode = dbo.GetNextAlphaNumericValue(@MaxCouponCode)

		  SET @MaxCouponCode = SUBSTRING(@MaxCouponCode, PATINDEX('%[^0]%', @MaxCouponCode + '.'), LEN(@MaxCouponCode))
	   END
    END

END
GO
GRANT ALTER ON [dbo].[CouponStock] TO [Copient_Logix_uspRole] AS [dbo]
GO
GRANT ALTER ON [dbo].[CouponStockBuffer] TO [Copient_Logix_uspRole] AS [dbo]
GO
GRANT ALTER ON [dbo].[UnusedCoupons] TO [Copient_Logix_uspRole] AS [dbo]
GO
GRANT EXECUTE ON [dbo].[pa_FillCouponStock] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_GMA_MoveGroupmembershipData.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GMA_MoveGroupmembershipData.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GMA_MoveGroupmembershipData]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GMA_MoveGroupmembershipData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GMA_MoveGroupmembershipData]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
        
CREATE PROCEDURE [dbo].[pa_GMA_MoveGroupmembershipData] 
	@BatchSize int, 
	@NumDaysToExpire int, 
	@RunAgain bit OUTPUT,
	@LastPKID bigint OUTPUT, 
	@RowsMoved bigint OUTPUT
AS 
	SET NOCOUNT ON;
	
	DECLARE @ErrMsg AS nvarchar(max)
	DECLARE @ErrSev AS INTEGER, @ErrSt AS INTEGER		
	
	SET @LastPKID = 0
	SET @RowsMoved = 0

	--DECLARE @RunAgain integer 
	DECLARE @RowsSelected integer
	DECLARE @LastPurgeDate datetime
	SELECT TOP (1) @LastPKID=ISNULL(LastPKID,0), @LastPurgeDate=ISNULL(LastPurgeDate,'1980-01-01')  FROM GroupmembershipMoveAgent_Vars		

	IF(DATEDIFF(DAY,@LastPurgeDate,GETDATE())>1)	
	BEGIN
		DECLARE @IsPartitioned bit
		EXEC [dbo].pc_IsPartitioned 'Groupmembership_Pending', @IsPartitioned
		BEGIN TRANSACTION
		BEGIN TRY
			IF(@IsPartitioned=1)
				EXEC [dbo].[pc_PartitionMaintenance] 'Groupmembership_Pending', @NumDaysToExpire
			ELSE
				DELETE TOP(@BatchSize) FROM Groupmembership_Pending WITH (ROWLOCK) WHERE PKID<@LastPKID AND DATEDIFF(DAY,LastUpdate,GETDATE())>=@NumDaysToExpire
				
			SET @RowsMoved = @@ROWCOUNT
			IF(@RowsMoved=0 OR @IsPartitioned=1)
				UPDATE GroupmembershipMoveAgent_Vars SET LastPurgeDate=GETDATE()
		COMMIT TRANSACTION
		END TRY
		BEGIN CATCH			
			SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrSt=ERROR_STATE()
			ROLLBACK TRANSACTION
			SET @RowsMoved = 0
			RAISERROR(@ErrMsg, @ErrSev, @ErrSt)	
		END CATCH
	END
	
	DECLARE @gma_tmp as table
	(
		[PKID] [bigint] ,
		[CustomerGroupID] [bigint],
		[CustomerPK] [bigint],
		[Manual] [bit],
		[Deleted] [bit],
		[CPEStatusFlag] [int],
		[ExtInterfaceID] [int],
		[UploadTime] [datetime],
		[LastUpdate] [datetime],
		[ClipFileName] [nvarchar](50),
		[ProcessorID] [nvarchar](50)
	)
	SET @RunAgain = 1
	WHILE(@RunAgain>0)
	BEGIN
		BEGIN TRANSACTION
		BEGIN TRY
			INSERT INTO @gma_tmp (PKID,CustomerGroupID,CustomerPK,manual,Deleted,CPEStatusFlag,ExtInterfaceID,UploadTime,ClipFileName)
				SELECT TOP (@BatchSize) PKID,CustomerGroupID,CustomerPK,manual,Deleted,CPEStatusFlag,ExtInterfaceID,UploadTime,ClipFileName			
				FROM GroupMembership_Pending
				WHERE PKID>@LastPKID
				ORDER BY PKID
			SET @RowsSelected = @@ROWCOUNT

			--print @RowsSelected
			IF(@RowsSelected>0)
			BEGIN
				-- Process delete/unclip
				UPDATE GroupMembership WITH (ROWLOCK) SET Deleted = tmp.Deleted, LastUpdate=GETDATE(), ExtInterfaceID=tmp.ExtInterfaceID, ClipFileName = tmp.ClipFileName FROM GroupMembership GM
						INNER JOIN @gma_tmp tmp ON GM.CustomerPK = tmp.CustomerPK AND GM.CustomerGroupID = tmp.CustomerGroupID AND tmp.Deleted <> GM.Deleted		
					SET @RowsMoved=@RowsMoved+@@ROWCOUNT 
					
				-- Process insert/clip
				INSERT INTO GroupMembership WITH (ROWLOCK) (CustomerGroupID,CustomerPK,manual,Deleted,CPEStatusFlag,ExtInterfaceID,UploadTime,ClipFileName,LastUpdate)
					SELECT tmp.CustomerGroupID,tmp.CustomerPK,tmp.manual,tmp.Deleted,tmp.CPEStatusFlag,tmp.ExtInterfaceID,tmp.UploadTime,tmp.ClipFileName, GETDATE() as LastUpdate FROM @gma_tmp tmp 
					LEFT OUTER JOIN  GroupMembership GM ON GM.CustomerPK = tmp.CustomerPK AND GM.CustomerGroupID = tmp.CustomerGroupID where GM.CustomerPK IS NULL
							
				SET @RowsMoved=@RowsMoved+@@ROWCOUNT 
				
				SELECT @LastPKID = MAX(PKID) FROM @gma_tmp
				UPDATE GroupmembershipMoveagent_Vars SET LastPKID = @LastPKID, LastUpdate=GETDATE()
			END		
			ELSE
				SET @RunAgain = 0
				
			DELETE @gma_tmp 		

			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrSt=ERROR_STATE()
			ROLLBACK TRANSACTION
			SET @RowsMoved = 0
			RAISERROR(@ErrMsg, @ErrSev, @ErrSt)	
		END CATCH
	END -- @RunAgain>0

GO
GRANT EXECUTE ON [dbo].[pa_GMA_MoveGroupmembershipData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetAllNumericCardIDsWithRange.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetAllNumericCardIDsWithRange.StoredProcedure.sql 1077994 2016-12-26 22:56:07Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetAllNumericCardIDsWithRange]    Script Date: 12/26/2016 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetAllNumericCardIDsWithRange]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetAllNumericCardIDsWithRange]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetAllNumericCardIDsWithRange]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetAllNumericCardIDsWithRange]
AS
  SET NOCOUNT ON;
  BEGIN
    SELECT DISTINCT CT.* FROM CardTypes  AS CT
	INNER JOIN CardRange CR ON CT.CardTypeID = CR.CardTypeID
	WHERE CT.NumericOnly = 1 AND CT.CardTypeID <> 2;
	
	Select * from CardRange;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetAllNumericCardIDsWithRange] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetCardIDs_For_CustomerGroup.sql'; 
--
GO
-- $Id: dbo.pa_GetCardIDs_For_CustomerGroup.StoredProcedure.sql 32583 2012-07-08 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetCardIDs_For_CustomerGroup]    Script Date: 07/08/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetCardIDs_For_CustomerGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetCardIDs_For_CustomerGroup]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetCardIDs_For_CustomerGroup]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE Procedure [dbo].[pa_GetCardIDs_For_CustomerGroup]
  @CustomerGroupID bigint,
  @CardTypeID int
as
set nocount on;

  create table #CustomerList (
    [CustomerPK] [bigint] NULL
  );

  insert into #CustomerList (CustomerPK)
    select CustomerPK
    from GroupMembership with (NoLock)
    where CustomerGroupID = @CustomerGroupID and Deleted=0;

  select CL.CustomerPK,CI.ExtCardIDOriginal,CI.CardTypeID
  from #CustomerList as CL with (NoLock)
  inner join CardIDs as CI with (NoLock) on CI.CustomerPk=CL.CustomerPK and (CI.CardTypeId=@CardTypeID or CI.CardTypeId=1)
  order by CardTypeID, ExtCardID;

  drop table #CustomerList;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetCardIDs_For_CustomerGroup] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetCouponConfigurations.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_GetCouponConfigurations]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetCouponConfigurations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetCouponConfigurations]
GO

/****** Object:  StoredProcedure [dbo].[pa_GetCouponConfigurations]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_GetCouponConfigurations
AS
BEGIN
    SET NOCOUNT ON

    SELECT TOP
    1
        MaxNumberOfCouponsPerRequest AS 'MaxNumberOfCouponsPerRequest',
        DefaultNumberOfCouponsPerRequest AS 'DefaultNumberOfCouponsPerRequest',
        Threshold AS 'Threshold'
    FROM CouponConfigurations
END

GO
GRANT EXECUTE ON [dbo].[pa_GetCouponConfigurations] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_GetCouponThresholdStatus.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_GetCouponThresholdStatus]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetCouponThresholdStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetCouponThresholdStatus]
GO

/****** Object:  StoredProcedure [dbo].[pa_GetCouponThresholdStatus]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_GetCouponThresholdStatus]
AS
BEGIN
    SET NOCOUNT ON

    DECLARE @UsedCouponCount	  BIGINT		 =	0
    DECLARE @table as CouponType
    
    INSERT INTO @table  
    SELECT CouponCode, InitialUses FROM TrackableCoupons
                     
    -- Get UsedCouponCount from GetUsedCouponCount
    SELECT  @UsedCouponCount	= dbo.GetUsedCouponCount(@table)
    
    UPDATE CouponPattern 
    SET UsedCouponCount = @UsedCouponCount
    
    -- Return UsedCouponCount and IsMailSent from CouponPattern
    SELECT  UsedCouponCount AS  'UsedCouponCount',
		  IsMailSent	   AS  'IsMailSent'
		  FROM CouponPattern
END

GO
GRANT EXECUTE ON [dbo].[pa_GetCouponThresholdStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_GetCoupons.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_GetCoupons]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetCoupons]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetCoupons]
GO

/****** Object:  StoredProcedure [dbo].[pa_GetCoupons]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_GetCoupons (@NumberOfCoupons INT           = 1)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @CouponCodes TABLE (
        CouponId INT NOT NULL IDENTITY (1, 1),
        CouponCode VARCHAR(150)
    )
    DECLARE @OrderType		  VARCHAR(1)  = 'R',
		  @UsedCouponCount	  BIGINT	    = 0
			        
    SELECT  @OrderType	   =	  PatternOrder
    FROM CouponPattern WITH (NOLOCK)
    
    BEGIN
	   BEGIN TRAN
		  DELETE TOP (@NumberOfCoupons) CouponStock
			    WITH (HOLDLOCK )
			    OUTPUT
			    DELETED.CouponCode
			    INTO @CouponCodes
	   COMMIT TRAN
        
    END
    
    IF (LTRIM(RTRIM(LOWER(@OrderType))) = 's')
    BEGIN
	   SELECT CouponCode FROM @CouponCodes ORDER BY CouponCode
    END
    ELSE IF (LTRIM(RTRIM(LOWER(@OrderType))) = 'r')
    BEGIN
	   SELECT CouponCode FROM @CouponCodes ORDER BY NEWID()
    END
	   
    -- Return CouponStock Balance, which will be used by caller to take decission on Filling CouponStock
    SELECT COUNT(1) AS 'CouponStockBalance'
    FROM CouponStock WITH (NOLOCK)
    
    -- Updating the UsedCouponCount in CouponPattern
    SELECT @UsedCouponCount = COUNT(1) from @CouponCodes
    
    UPDATE CouponPattern WITH (ROWLOCK)
    SET UsedCouponCount = UsedCouponCount + @UsedCouponCount
    
    -- Return UsedCouponCount and IsMailSent from CouponPattern
    SELECT  UsedCouponCount AS  'UsedCouponCount',
		  IsMailSent	   AS  'IsMailSent'
    FROM CouponPattern WITH (NOLOCK)
    
END

GO
GRANT EXECUTE ON [dbo].[pa_GetCoupons] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetCustomerLoyaltyBalance.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_GetCustomerLoyaltyBalance]    Script Date: 09/06/2016 15:13:10 ******/
IF EXISTS (SELECT
        *
    FROM sys.objects
    WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetCustomerLoyaltyBalance]')
    AND type IN (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_GetCustomerLoyaltyBalance]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_GetCustomerLoyaltyBalance] @CustomerIdentifier	 VARCHAR(512),
													  @CustomerType      INT = 0,
                                                      @PageNumber		 TINYINT = 0,
                                                      @PageSize			 SMALLINT = 200,
                                                      @PointProgramIds	 VARCHAR(MAX),
                                                      @SVProgramIds		 VARCHAR(MAX),
                                                      @LastPage			 BIT OUTPUT,
                                                      @Message			 VARCHAR(255) OUTPUT
AS
BEGIN

    -- $Id: dbo.pa_GetCustomerLoyaltyBalance.StoredProcedure.sql 74013 2016-09-16 18:22:30Z hk185070 $
    -- Build Version: 7.3.1.138972

    SET NOCOUNT ON;
    
    -- Get and validate CustomerPK
    DECLARE @CustomerPK INT, @CountOfCustomerPK INT
    
    SELECT CustomerPK INTO #CustomerPK FROM CardIDs WITH (NOLOCK) WHERE ExtCardID = @CustomerIdentifier AND CardStatusID = 1   AND CardTypeID= @CustomerType
    
    SELECT @CountOfCustomerPK = COUNT(CustomerPK) FROM #CustomerPK    
    
    IF @CountOfCustomerPK > 1
    BEGIN	
    SELECT @Message = 'Given customer id is not valid'
    RETURN;
    END
    
    SELECT @CustomerPK = CustomerPK FROM #CustomerPK
    
    IF (@CustomerPK IS NULL)
    BEGIN	
    SELECT @Message = 'Given customer id is not found'
    RETURN;
    END
    
    -- Determine the first record and last record   
    DECLARE @FirstRecord    INT,  
            @LastRecord    INT,  
            @TotalRecords   INT  
  
    SELECT  
        @FirstRecord = (@PageNumber) * @PageSize  
    SELECT  
        @LastRecord = ((@PageNumber+1) * @PageSize + 1);  
  
    DECLARE @LoyaltyBalance TABLE (  
        ProgramId INT,  
        ProgramName VARCHAR(512),  
        ProgramType VARCHAR(20),  
        Units INT,  
        Amount DECIMAL(15,3),  
        UnitsExpiring INT,  
        ExpireDate DATETIME  
    )  
  
    INSERT INTO @LoyaltyBalance (ProgramId, ProgramType,  Units, Amount, UnitsExpiring, ExpireDate)  
        SELECT  
            P.ProgramId AS ProgramId,  
            0 AS ProgramType,  
            P.Amount AS Units,  
            NULL AS Amount,  
            NULL AS UnitsExpiring,  
            NULL AS ExpireDate  
        FROM Points P WITH (NOLOCK)  
        WHERE P.CustomerPK = @CustomerPK AND P.ProgramID IN (SELECT items FROM dbo.Split(@PointProgramIds,','))
        GROUP BY P.ProgramId,Amount  
  
        UNION  
          
        SELECT  
            S.SVProgramID AS ProgramId,  
            1 AS ProgramType,  
            MIN(X.TotalPoints) AS Units,
            MIN(X.Amount) AS Amount,
            --sum((QtyEarned - QtyUsed)*S.Value) AS Amount,  -- Amount calculation is changed so as to get the Amount of total SV programs
            SUM(QtyEarned - QtyUsed) AS UnitsExpiring,  
            S.ExpireDate AS ExpireDate  
        FROM StoredValue S WITH (NOLOCK)  
        INNER JOIN (SELECT
			--@CustomerPK AS CustomerPK,  
            SVProgramId,  
            SUM(QtyEarned - QtyUsed) AS TotalPOINTS,
            SUM((QtyEarned - QtyUsed)* Value) AS Amount,    
            MIN(ExpireDate) AS ExpireDate  
        FROM StoredValue WITH (NOLOCK)  
        WHERE CustomerPK = @CustomerPK AND ExpireDate > GETDATE() AND Deleted = 0  AND SVProgramID IN (SELECT items FROM dbo.Split(@SVProgramIds,','))
        GROUP BY SVProgramId) AS X  
            ON S.CustomerPK = @CustomerPK
            AND S.SVProgramId = X.SVProgramId  
            AND S.ExpireDate = X.ExpireDate              
            Group BY S.SVProgramId,S.ExpireDate  
          
        ORDER BY ExpireDate   
  
  
    ;  
    WITH Pagination  
    AS (SELECT  
        ROW_NUMBER() OVER (ORDER BY ProgramType ASC) AS RowNum,  
        ProgramId, ProgramType, Units, Amount, UnitsExpiring, ExpireDate  
    FROM @LoyaltyBalance)  
    SELECT TOP (@LastRecord - 1)  
        ProgramId, ProgramType, Units, Amount, UnitsExpiring, ExpireDate  
    FROM Pagination  
    WHERE RowNum > @FirstRecord  
    AND RowNum < @LastRecord  
      
    -- Return LastPage  
    SELECT @TotalRecords = COUNT(1) FROM @LoyaltyBalance  
    SELECT @LastPage = CASE WHEN @TotalRecords > (@LastRecord-1) THEN 0 ELSE 1 END  
      
    
END
GO

GRANT EXECUTE ON [dbo].[pa_GetCustomerLoyaltyBalance] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_GetNextAccumAdjustLocalID.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_GetNextAccumAdjustLocalID]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextAccumAdjustLocalID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNextAccumAdjustLocalID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_GetNextAccumAdjustLocalID] @BlockSize int = 1, @LocalID bigint= 0 OUTPUT
AS
    -- $Id: dbo.pa_GetNextAccumAdjustLocalID.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
    -- Build Version: 7.3.1.138972

  declare @CurrentID int;
  set @CurrentID = -1;

  BEGIN TRAN T1
    BEGIN TRY
      select @CurrentID = ISNULL(LocalID,0) from AccumAdjustIDSequence with (tablockx) ;

      update AccumAdjustIDSequence with (tablockx) set LocalID = @CurrentID + @BlockSize;
	  select @LocalID=LocalID from AccumAdjustIDSequence with (NoLock);
  
      COMMIT TRAN T1
    END TRY
  
    BEGIN CATCH
      ROLLBACK TRAN T1
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;

      SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();

      -- Use RAISERROR inside the CATCH block to return 
      -- error information about the original error that 
      -- caused execution to jump to the CATCH block.
      RAISERROR (@ErrorMessage, -- Message text.
             @ErrorSeverity, -- Severity.
             @ErrorState -- State.
             );
    END CATCH

GO

GRANT EXECUTE ON [dbo].[pa_GetNextAccumAdjustLocalID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetNextDistributionLocalID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetNextDistributionLocalID.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetNextDistributionLocalID]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextDistributionLocalID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNextDistributionLocalID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextDistributionLocalID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetNextDistributionLocalID] @BlockSize int = 1
AS
        declare @CurrentID int;
        declare @table as table (localid int);
        declare @counter int;
        declare @NextSequenceID int;
 
        set @CurrentID = -1;
        set @NextSequenceID = -1;
        set @counter = 0;
 
        BEGIN TRAN T1
                BEGIN TRY
                        select @CurrentID = LocalID from RewardDistributionIDSequence with (tablockx) ;
                        
                        -- build the recordset to return
                        Set @NextSequenceID = @CurrentID
                        while (@counter < @BlockSize)
                                begin
                                        set @NextSequenceID = @NextSequenceID + 1;
                                        insert into @table (localid) values (@NextSequenceID);
                                        set @counter = @counter + 1;
                                end
                
                        select localid from @table;
 
                        update RewardDistributionIDSequence with (tablockx) set LocalID = @CurrentID + @BlockSize;
        
                        COMMIT TRAN T1
 
                END TRY
        
                BEGIN CATCH
                        ROLLBACK TRAN T1
                        DECLARE @ErrorMessage NVARCHAR(4000);
                        DECLARE @ErrorSeverity INT;
                        DECLARE @ErrorState INT;
 
                        SELECT @ErrorMessage = ERROR_MESSAGE(),
                                   @ErrorSeverity = ERROR_SEVERITY(),
                                   @ErrorState = ERROR_STATE();
 
                        -- Use RAISERROR inside the CATCH block to return 
                        -- error information about the original error that 
                        -- caused execution to jump to the CATCH block.
                        RAISERROR (@ErrorMessage, -- Message text.
                                           @ErrorSeverity, -- Severity.
                                           @ErrorState -- State.
                                           );
                END CATCH
 
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetNextDistributionLocalID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetNextExtCardIDFromEnd.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetNextExtCardIDFromEnd.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetNextExtCardIDFromEnd]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextExtCardIDFromEnd]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNextExtCardIDFromEnd]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextExtCardIDFromEnd]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetNextExtCardIDFromEnd] @NextCardID Decimal(27,0) OUTPUT
AS
  set @NextCardID = 0;

  
  select @NextCardID = CAST(Max(ExtCardID) as Decimal(27,0))+ 1
  from CardIDs with (NoLock) where IsNumeric(ExtCardID)=1;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetNextExtCardIDFromEnd] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetNextExtCardIDSequence.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetNextExtCardIDSequence.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetNextExtCardIDSequence]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextExtCardIDSequence]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNextExtCardIDSequence]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextExtCardIDSequence]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetNextExtCardIDSequence] @NextSequenceID bigint OUTPUT
AS
	declare @CurrentID int;

	set @CurrentID = -1;
	set @NextSequenceID = -1;

	BEGIN TRAN T1
		BEGIN TRY
			select @CurrentID = SequenceID from ExtCardIDSequence with (tablockx) ;
            set @NextSequenceID = @CurrentID + 1;
			update ExtCardIDSequence with (tablockx) set SequenceID = @NextSequenceID;
	
			COMMIT TRAN T1

		END TRY
	
		BEGIN CATCH
			ROLLBACK TRAN T1
			DECLARE @ErrorMessage NVARCHAR(4000);
			DECLARE @ErrorSeverity INT;
			DECLARE @ErrorState INT;

			SELECT @ErrorMessage = ERROR_MESSAGE(),
				   @ErrorSeverity = ERROR_SEVERITY(),
				   @ErrorState = ERROR_STATE();

			-- Use RAISERROR inside the CATCH block to return 
			-- error information about the original error that 
			-- caused execution to jump to the CATCH block.
			RAISERROR (@ErrorMessage, -- Message text.
					   @ErrorSeverity, -- Severity.
					   @ErrorState -- State.
					   );
		END CATCH

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetNextExtCardIDSequence] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetNextStoredValueLocalID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetNextStoredValueLocalID.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetNextStoredValueLocalID]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextStoredValueLocalID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNextStoredValueLocalID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextStoredValueLocalID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetNextStoredValueLocalID] @BlockSize int = 1, @StartLocalID bigint = -1 OUTPUT
AS
	declare @CurrentID bigint;
	declare @table as table (localid bigint);
	declare @counter int;
	declare @NextSequenceID bigint;

	set @CurrentID = -1;
	set @NextSequenceID = -1;
	set @counter = 0;

	BEGIN TRAN T1
		BEGIN TRY
			if @BlockSize > 0 begin
				select @CurrentID = LocalID from StoredValueIDSequence with (tablockx) ;
				Set @StartLocalID = @CurrentID + 1;
				
				-- build the recordset to return
				Set @NextSequenceID = @CurrentID
				while (@counter < @BlockSize)
					begin
						set @NextSequenceID = @NextSequenceID + 1;
						insert into @table (localid) values (@NextSequenceID);
						set @counter = @counter + 1;
					end
			
				select localid from @table;

				update StoredValueIDSequence with (tablockx) set LocalID = @CurrentID + @BlockSize;
		
				COMMIT TRAN T1
			end
		END TRY
	
		BEGIN CATCH
			ROLLBACK TRAN T1
			DECLARE @ErrorMessage NVARCHAR(4000);
			DECLARE @ErrorSeverity INT;
			DECLARE @ErrorState INT;

			SELECT @ErrorMessage = ERROR_MESSAGE(),
				   @ErrorSeverity = ERROR_SEVERITY(),
				   @ErrorState = ERROR_STATE();

			-- Use RAISERROR inside the CATCH block to return 
			-- error information about the original error that 
			-- caused execution to jump to the CATCH block.
			RAISERROR (@ErrorMessage, -- Message text.
					   @ErrorSeverity, -- Severity.
					   @ErrorState -- State.
					   );
		END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetNextStoredValueLocalID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetNextStoredValueSequence.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetNextStoredValueSequence.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetNextStoredValueSequence]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextStoredValueSequence]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNextStoredValueSequence]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextStoredValueSequence]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetNextStoredValueSequence] @MaxSize int, @BlockSize int = 1
AS
  declare @CurrentID int;
  declare @NewID int;
  declare @table as table (spid int);
  declare @counter int;
  declare @NextSequenceID int;
  set @CurrentID = -1;
  set @NewID = -1;
  set @NextSequenceID = -1;
  set @counter = 0;

  BEGIN TRAN T1
    BEGIN TRY
      select @CurrentID = SequenceID from StoredValueSequence with (tablockx) ;
      If @CurrentID + @BlockSize > = @MaxSize
        begin
          -- must account for the block wrapping around the uppermost limit of 10,000,000
          set @NewID = @CurrentID + @BlockSize - @MaxSize + 1;
        end
      else
        begin
          set @NewID = @CurrentID + @BlockSize
        end
      update StoredValueSequence with (tablockx) set SequenceID = @NewID;
      
      -- build the recordset to return
      set @NextSequenceID = @CurrentID
      while (@counter < @BlockSize)
        begin
          -- account for the wrap around
          if @NextSequenceID + 1 < @MaxSize 
            begin
              set @NextSequenceID = @NextSequenceID + 1;
            end
          else
            begin
              set @NextSequenceID = 1 
            end
          insert into @table (spid) values (@NextSequenceID);
          set @counter = @counter + 1;
        end
    
      select spid from @table;
    COMMIT TRAN T1
  END TRY
  
  BEGIN CATCH
    ROLLBACK TRAN T1
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();

    -- Use RAISERROR inside the CATCH block to return 
    -- error information about the original error that 
    -- caused execution to jump to the CATCH block.
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
              );
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetNextStoredValueSequence] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetSVManualAdjustments.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetSVManualAdjustments.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetSVManualAdjustments]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetSVManualAdjustments]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetSVManualAdjustments]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetSVManualAdjustments]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetSVManualAdjustments] 
AS
BEGIN
	SET NOCOUNT ON;

    declare @NumRecs int;
    declare @RowCt int;
    declare @endTime datetime;
    declare @stillWorking bit;

    set @NumRecs = 0;
    set @endTime = DateAdd(minute, 5, getdate());
    set @stillWorking = 1;

    -- get the next batch of records to include in the report
    set @stillWorking = 1;
    select @NumRecs = count(*) from SVHistory with (NoLock) where DataExportT1S1=3;
    if @NumRecs >= 50000
      begin
        set @stillWorking = 0;
      end

    while @stillWorking = 1
      begin
        --set rowcount 1800;
        update TOP (1800) SVHistory with (RowLock) set DataExportT1S1=3 Where DataExportT1S1=2;
        set @RowCt = @@rowcount;
        set @NumRecs = @NumRecs + @RowCt
        if @RowCt = 0 or @NumRecs >= 50000 or @endTime <= getdate()
          begin
            set @stillWorking = 0;
          end
        --set rowcount 0;
      end  

    -- send back this batch of records
    CREATE TABLE #Adjustments
      (CustomerPK bigint, EarnDate datetime, SVProgramID bigint, 
       ServerSerial int, ExternalID nvarchar(400), LocalID bigint,
       ExpirationDate datetime, StatusFlag int, UnitValue decimal(12,3),
       QtyEarned int, QtyUsed int, TotalValueEarned decimal(12,3), 
       BreakageValue decimal(12,3), RedeemedValue decimal(12,3),
       AdminUserID int, ExtCardID varchar(400))

    insert into #Adjustments
      select SVH.CustomerPK, EarnedDate, SVProgramID, ServerSerial,
        ExternalID, LocalID, ExpireDate, StatusFlag, Value, QtyEarned,
        QtyUsed, TotalValueEarned, BreakageValue, RedeemedValue, AdminUserID, 
        NULL as ExtCardID
      from SVHistory SVH with (NoLock)
	  where DataExportT1S1 = 3

    -- look up and populate one of the customer''s card numbers 
    update #Adjustments set ExtCardID = CARDS.ExtCardIDOriginal
    from #Adjustments as ADJ inner join CardIDs as CARDS on CARDS.CustomerPK = ADJ.CustomerPK
     
    
 	select distinct ExtCardID,
      CONVERT(VARCHAR(30), EarnDate, 120) as EarnDate, 
	  0 as TerminalNum, ''0'' as TransNum, SVProgramID, ServerSerial, ExternalID, LocalID,
	  CONVERT(VARCHAR(30), ExpirationDate, 120) as ExpirationDate, 
	  StatusFlag, 0 as UnitLimit, UnitValue, QtyEarned, QtyUsed,
	  TotalValueEarned, BreakageValue, RedeemedValue, ''Central Update'' as TransactionType, AdminUserID
	from #Adjustments as ADJ with (NoLock)
	order by CONVERT(VARCHAR(30), EarnDate, 120) desc;	

    drop table #Adjustments;

END


' 
END
GO
GRANT EXECUTE ON [dbo].[pa_GetSVManualAdjustments] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Household_GetRecords.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Household_GetRecords.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Household_GetRecords]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_GetRecords]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Household_GetRecords]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_GetRecords]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_Household_GetRecords] @StatusCode int
as 
  set nocount on;
  
  select PKID, CustomerPK, HHPK, ActionTypeID, SourceTypeID, LastUpdate,
         StatusCode, Option5Value, Option6Value, Option6Percent, Option7Value,
         Option8Value, Option9Value, AdminUserID
  from HouseholdQueue with (NoLock) where StatusCode=@StatusCode;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Household_GetRecords] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Household_GetRunSize.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Household_GetRunSize.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Household_GetRunSize]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_GetRunSize]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Household_GetRunSize]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_GetRunSize]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_Household_GetRunSize]  @RunSize int OUTPUT
as 
  set nocount on;
  set @RunSize=0;
  
  -- get all the ready to process and any records that may be in the in-process status from a previous run.
  select @RunSize = COUNT(*) from HouseholdQueue with (NoLock) where StatusCode in (0,1);

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Household_GetRunSize] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Household_MarkStatus.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Household_MarkStatus.StoredProcedure.sql 120379 2018-02-08 18:56:50Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Household_MarkStatus]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_MarkStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Household_MarkStatus]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_MarkStatus]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_Household_MarkStatus] @CurrentStatus int, @NewStatus int, @RunAgain bit OUTPUT, @NumRecs int OUTPUT
as 
  set nocount on;

  set @NumRecs=0;
  set @RunAgain=1;
  
    -- mark a maximum of 1800 in the current status to the new status
  --set rowcount 1800;
  update HouseholdQueue with (RowLock) set StatusCode=@NewStatus where StatusCode=@CurrentStatus
    and PKID in (select TOP (1800) PKID from HouseholdQueue with (NoLock) where StatusCode=@CurrentStatus order by PKID)
  set @NumRecs = @@ROWCOUNT
  --set rowcount 0;

  if @NumRecs < 1800 
    begin 
      set @RunAgain=0;
    end  

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Household_MarkStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Household_RemoveFailedRecs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Household_RemoveFailedRecs.StoredProcedure.sql 120379 2018-02-08 18:56:50Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Household_RemoveFailedRecs]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_RemoveFailedRecs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Household_RemoveFailedRecs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_RemoveFailedRecs]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_Household_RemoveFailedRecs]  @RunAgain bit OUTPUT, @NumRecs int OUTPUT
as 
  set nocount on;
    
  set @RunAgain=1;
  set @NumRecs=0;
  
    -- mark a maximum of 1800 in the current status to the new status
  --set rowcount 1800;
  
  -- remove all the previously failed household offer adds where it is now successfully processed.
  delete from HouseholdQueue with (RowLock) where PKID in 
    (select TOP 1800 HQ1.PKID from HouseholdQueue as HQ1 with (NoLock)
     inner join (select PKID, CustomerPK, HHPK, ActionTypeID from HouseholdQueue with (NoLock)where StatusCode = 1) as HQ2
       on HQ1.CustomerPK = HQ2.CustomerPK and HQ1.HHPK=HQ2.HHPK and HQ1.ActionTypeID=HQ2.ActionTypeID
     where HQ1.StatusCode=-1);
  
  set @NumRecs = @@ROWCOUNT
  --set rowcount 0;

  if @NumRecs < 1800 
    begin
     set @RunAgain = 0;
    end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Household_RemoveFailedRecs] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Household_RemoveInvalidRecs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Household_RemoveInvalidRecs.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Household_RemoveInvalidRecs]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_RemoveInvalidRecs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Household_RemoveInvalidRecs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_RemoveInvalidRecs]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_Household_RemoveInvalidRecs]  @RunAgain bit OUTPUT, @NumRecs int OUTPUT
as 
  set nocount on;
    
  set @RunAgain=1;
  set @NumRecs=0;
  
    -- mark a maximum of 1800 records
  --set rowcount 1800;
  
  -- remove all household requests that contain invalid customer data and failed HUA processing.
  delete TOP (1800) from HouseholdQueue with (RowLock) where StatusCode=-1 and (CustomerPK=0 or HHPK=0);
  
  set @NumRecs = @@ROWCOUNT
  --set rowcount 0;

  if @NumRecs < 1800 
    begin
     set @RunAgain = 0;
    end


' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Household_RemoveInvalidRecs] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Household_RemoveProcessedRecs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Household_RemoveProcessedRecs.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Household_RemoveProcessedRecs]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_RemoveProcessedRecs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Household_RemoveProcessedRecs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Household_RemoveProcessedRecs]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_Household_RemoveProcessedRecs]  @StatusCode int, @RunAgain bit OUTPUT, @NumRecs int OUTPUT
as 
  set nocount on;
    
  set @RunAgain=1;
  set @NumRecs=0;
  
    -- mark a maximum of 1800 in the current status to the new status
  --set rowcount 1800;
  delete TOP (1800) from HouseholdQueue with (RowLock) where StatusCode=@StatusCode;
  set @NumRecs = @@ROWCOUNT
  --set rowcount 0;

  if @NumRecs < 1800 
    begin
     set @RunAgain = 0;
    end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Household_RemoveProcessedRecs] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_InsertCouponCodes.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_InsertCouponCodes]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_InsertCouponCodes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_InsertCouponCodes]
GO

/****** Object:  StoredProcedure [dbo].[pa_InsertCouponCodes]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_InsertCouponCodes (@InsertCouponCodeRequest VARCHAR(MAX)  = NULL,
@NumberOfCoupons         INT           = 1, @CalculateExpDate INT = 0)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @CouponCodes TABLE (
        CouponId INT NOT NULL IDENTITY (1, 1),
        CouponCode VARCHAR(150)
    )
    DECLARE @CouponCodes_Temp TABLE (
        CouponId INT,
        CouponCode VARCHAR(150)
    )

    DECLARE	@CouponLength    INT           = 20,
            @OrderType       VARCHAR(1)    = 'R',
            @Prefix          NVARCHAR(150) = NULL,
            @Suffix          NVARCHAR(150) = NULL,
            @StartRange      VARCHAR(150)  = NULL,
            @EndRange        VARCHAR(150)  = NULL,
            @CouponDataType  VARCHAR(1)    = 'N'
                       
    SELECT  @CouponLength   =	  CouponLength,
          @OrderType	   =	  PatternOrder,
          @Prefix		   =	  Prefix,
          @Suffix		   =	  Suffix,
          @StartRange	   =	  StartRange,
          @EndRange	   =	  EndRange,
          @CouponDataType =	  PatternDataType		  
    FROM CouponPattern
    
    DECLARE @CouponCode VARCHAR(150) = NULL,
            @TotalNumberOfCouponsRequired BIGINT = @NumberOfCoupons,
            @TotalNumberOfCouponsGenerated BIGINT,
            @PadLength INT = @CouponLength - (LEN(ISNULL(@Prefix, '')) + LEN(ISNULL(@Suffix, ''))),
            @CouponStockCount BIGINT,
            @RequiredNumberOfCouponsInStock BIGINT,
            @UsedCouponCount			    BIGINT  =	 0    

    BEGIN
        BEGIN TRANSACTION;

            BEGIN TRY


                DECLARE @ReturnCouponCodes TABLE  (
                    ProgramId INT,
                    CouponCode VARCHAR(150),
                    InitialUses INT
                )
                
                DECLARE @TempCouponCodes TABLE  (
                    ProgramId INT,
                    CouponCode VARCHAR(150),
                    InitialUses INT,
                    ExpDate DATETIME
                )

                BEGIN -- Read input XML and store into temp table        
                    DECLARE @CouponRequestXML AS XML
                    SET @CouponRequestXML = @InsertCouponCodeRequest

                    -- Temp table to store the input xml into table format               
                    DECLARE @CouponRequestTable TABLE (
                        RowNumber INT,
                        ProgramId INT,
                        CouponCount INT,
                        InitialUses INT,
                        ExpDate DATETIME
                    )

                    INSERT INTO @CouponRequestTable (RowNumber,
                            CouponCount,
                            ProgramId,
                            InitialUses,
                            ExpDate)
                        SELECT
                            ROW_NUMBER() OVER (ORDER BY (SELECT
                                1)
                            ) AS [RowNumber],
                            a.b.value('.', 'INT') AS [CouponCount],
                            c.d.value('.', 'INT') AS [ProgramId],
                            e.f.value('.', 'INT') AS [InitialUses],
                            g.h.value('.', 'DATETIME') AS [ExpDate]
                        FROM @CouponRequestXML.nodes('/couponXMLDataRequest/couponsRequest/programRequests')
                        AS
                        [root] ([child])
                        CROSS APPLY child.nodes('noOfCoupons') a (b)
                            CROSS APPLY child.nodes('programId') c (d)
                            CROSS APPLY child.nodes('noOfUsages') e (f)
                            OUTER APPLY child.nodes('expDate') g (h)

                END

                DECLARE @minID INT,
                        @TotalNumberOfCouponsAvailable INT

                SELECT
                    @minID = MIN(RowNumber),
                    @TotalNumberOfCouponsRequired = SUM(CouponCount)
                FROM @CouponRequestTable

                SET @NumberOfCoupons = @TotalNumberOfCouponsRequired
            
                DELETE @CouponCodes_Temp
                
                BEGIN
                    DELETE TOP (@NumberOfCoupons) CouponStock
                       WITH (HOLDLOCK )
                        OUTPUT
                           DELETED.CouponId,
                           DELETED.CouponCode
                           INTO @CouponCodes_Temp
                    
                END
                
                IF (LTRIM(RTRIM(LOWER(@OrderType))) = 's')
                BEGIN
                  INSERT INTO @CouponCodes (CouponCode)
                  SELECT CouponCode FROM @CouponCodes_Temp
                END
                ELSE IF (LTRIM(RTRIM(LOWER(@OrderType))) = 'r')
                BEGIN
                  INSERT INTO @CouponCodes (CouponCode)
                  SELECT CouponCode FROM @CouponCodes_Temp ORDER BY NEWID()                
                END
       
                SELECT @TotalNumberOfCouponsAvailable = COUNT(1)
                FROM @CouponCodes

                WHILE ((@minID IS NOT NULL)
                    AND (@TotalNumberOfCouponsAvailable > 0)) -- Loop through the Input XML (table) and Insert records into TrackableCoupons                        
                BEGIN
                    -- Logic to Insert Coupon Codes into TrackableCoupons from buffer table @CouponCodes                 
                    DECLARE @RowNumber_Temp INT,
                            @ProgramId_Temp INT,
                            @IntialUses_Temp INT,
                            @CouponCount_Temp INT,
                            @ExpDate_Temp DATETIME,
                            @TCExpireType_Temp INT
                             
                    SELECT TOP 1
                        @RowNumber_Temp = RowNumber,
                        @ProgramId_Temp = ProgramId,
                        @CouponCount_Temp = CouponCount,
                        @IntialUses_Temp = InitialUses,
                        @ExpDate_Temp = ExpDate 

                    FROM @CouponRequestTable
                    WHERE RowNumber = @minID
                    
                    SELECT @TCExpireType_Temp = TCExpireType 
                    FROM LogixRT.dbo.TrackableCouponProgram WHERE ProgramID = @ProgramId_Temp

                    DELETE TOP (@CouponCount_Temp) @CouponCodes
                        OUTPUT
                           @ProgramId_Temp,
                           DELETED.CouponCode,
                           @IntialUses_Temp,
                           CASE
                             WHEN (@CalculateExpDate = 1 AND @TCExpireType_Temp > 1 ) THEN @ExpDate_Temp
                             ELSE NULL
                           END
                           INTO @TempCouponCodes (ProgramId,
                                             CouponCode,
                                             InitialUses,
                                             ExpDate)
                    
                    INSERT INTO TrackableCoupons WITH (ROWLOCK) (ProgramID,CouponCode,InitialUses,RemainingUses,ExpireDate) 
                    SELECT ProgramID,CouponCode,InitialUses,InitialUses,ExpDate FROM @TempCouponCodes
                    
                    INSERT INTO @ReturnCouponCodes 
                    SELECT ProgramID,CouponCode,InitialUses FROM @TempCouponCodes
                    
                    SELECT @TotalNumberOfCouponsAvailable = COUNT(1)
                    FROM @CouponCodes

                    DELETE @TempCouponCodes
                    
                    -- get the next record                     
                    SELECT
                        @minID = MIN(RowNumber)
                    FROM @CouponRequestTable
                    WHERE @minID < RowNumber
                END

                -- Return the result        
                SELECT
                    ProgramId,
                    CouponCode,
                    InitialUses
                FROM @ReturnCouponCodes
                
                -- Return CouponStock Balance, which will be used by caller to take decission on Filling CouponStock
                SELECT
                    COUNT(1) AS 'CouponStockBalance'
                FROM CouponStock WITH (NOLOCK) 
                
                -- Updating the UsedCouponCount in CouponPattern
             SELECT @UsedCouponCount = ISNULL(UsedCouponCount,0) FROM CouponPattern
             SELECT @UsedCouponCount = (@UsedCouponCount + COUNT(1)) from @ReturnCouponCodes
                
             UPDATE CouponPattern 
             SET UsedCouponCount = @UsedCouponCount
                
                -- Return UsedCouponCount and IsMailSent from CouponPattern
             SELECT  UsedCouponCount AS  'UsedCouponCount',
                    IsMailSent	   AS  'IsMailSent'
             FROM CouponPattern

            END TRY

            BEGIN CATCH

                -- Return the result        
                SELECT
                    ProgramId,
                    CouponCode,
                    InitialUses
                FROM @ReturnCouponCodes
                
                -- Return CouponStock Balance, which will be used by caller to take decission on Filling CouponStock
                SELECT
                    COUNT(1) AS 'CouponStockBalance'
                FROM CouponStock WITH (NOLOCK)
                
                SELECT
                    ERROR_NUMBER() AS ErrorNumber,
                    ERROR_SEVERITY() AS ErrorSeverity,
                    ERROR_STATE() AS ErrorState,
                    ERROR_PROCEDURE() AS ErrorProcedure,
                    ERROR_LINE() AS ErrorLine,
                    ERROR_MESSAGE() AS ErrorMessage;

                IF @@TRANCOUNT > 0
                    ROLLBACK TRANSACTION;
            END CATCH;

            IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

    END
END
GO
GRANT EXECUTE ON [dbo].[pa_InsertCouponCodes] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_InsertCouponConfigurations.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_InsertCouponConfigurations]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_InsertCouponConfigurations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_InsertCouponConfigurations]
GO

/****** Object:  StoredProcedure [dbo].[pa_InsertCouponConfigurations]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_InsertCouponConfigurations (@MaxNumberOfCouponsPerRequest     INT,
                                           @DefaultNumberOfCouponsPerRequest INT,
                                           @Threshold                        INT)
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRANSACTION;

        BEGIN TRY

            BEGIN
                TRUNCATE TABLE CouponConfigurations

                INSERT INTO CouponConfigurations (MaxNumberOfCouponsPerRequest, DefaultNumberOfCouponsPerRequest, Threshold)
                    VALUES (ISNULL(@MaxNumberOfCouponsPerRequest, 5000), ISNULL(@DefaultNumberOfCouponsPerRequest, 100), ISNULL(@Threshold, 90))
            END

            -- Returning Configuration
            SELECT TOP
            1
                MaxNumberOfCouponsPerRequest AS 'MaxNumberOfCouponsPerRequest',
                DefaultNumberOfCouponsPerRequest AS 'DefaultNumberOfCouponsPerRequest',
                Threshold AS 'Threshold'

            FROM CouponConfigurations

        END TRY

        BEGIN CATCH
            SELECT TOP
            1
                MaxNumberOfCouponsPerRequest AS 'MaxNumberOfCouponsPerRequest',
                DefaultNumberOfCouponsPerRequest AS 'DefaultNumberOfCouponsPerRequest',
                Threshold AS 'Threshold'
            FROM CouponConfigurations


            SELECT
                ERROR_NUMBER() AS ErrorNumber,
                ERROR_SEVERITY() AS ErrorSeverity,
                ERROR_STATE() AS ErrorState,
                ERROR_PROCEDURE() AS ErrorProcedure,
                ERROR_LINE() AS ErrorLine,
                ERROR_MESSAGE() AS ErrorMessage;

            IF @@TRANCOUNT > 0
                ROLLBACK TRANSACTION;
        END CATCH;

        IF @@TRANCOUNT > 0
        COMMIT TRANSACTION;
END

GO
GRANT ALTER ON [dbo].[CouponConfigurations] TO [Copient_Logix_uspRole] AS [dbo]
GO
GRANT EXECUTE ON [dbo].pa_InsertCouponConfigurations TO [Copient_Logix_uspRole] AS [dbo]

print 'processing storedprocedures/dbo.pa_InsertCouponPattern.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_InsertCouponPattern]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_InsertCouponPattern]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_InsertCouponPattern]
GO

/****** Object:  StoredProcedure [dbo].[pa_InsertCouponPattern]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_InsertCouponPattern (@CouponLength    INT,
                                    @PatternOrder    VARCHAR(1), -- R-Random/S-Sequntial  
                                    @PatternDataType VARCHAR(1), -- A-AlphaNumric/N-Numeric  
                                    @Prefix          NVARCHAR(150),
                                    @Suffix          NVARCHAR(150),
                                    @StartRange      VARCHAR(150),
                                    @EndRange        VARCHAR(150))
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRANSACTION;

        BEGIN TRY

            BEGIN
                TRUNCATE TABLE CouponPattern

                INSERT INTO CouponPattern (CouponLength, PatternOrder, PatternDataType, Prefix, Suffix, StartRange, EndRange, CreatedDate)
                    VALUES (ISNULL(@CouponLength, 20), ISNULL(@PatternOrder, 's'), ISNULL(@PatternDataType, 'n'), @Prefix, @Suffix, @StartRange, @EndRange, GETDATE())
            END

            -- Returning Pattern  
            SELECT TOP
            1
                PatternId AS 'PatternId',
                CouponLength AS 'CouponLength',
                PatternOrder AS 'PatternOrder',
                PatternDataType AS 'PatternDataType',
                Prefix AS 'Prefix',
                Suffix AS 'Suffix',
                StartRange AS 'StartRange',
                EndRange AS 'EndRange',
                CreatedDate AS 'CreatedDate'
            FROM CouponPattern
            ORDER BY CreatedDate DESC

        END TRY

        BEGIN CATCH
            SELECT TOP
            1
                PatternId AS 'PatternId',
                CouponLength AS 'CouponLength',
                PatternOrder AS 'PatternOrder',
                PatternDataType AS 'PatternDataType',
                Prefix AS 'Prefix',
                Suffix AS 'Suffix',
                StartRange AS 'StartRange',
                EndRange AS 'EndRange',
                CreatedDate AS 'CreatedDate'
            FROM CouponPattern
            ORDER BY CreatedDate DESC

            SELECT
                ERROR_NUMBER() AS ErrorNumber,
                ERROR_SEVERITY() AS ErrorSeverity,
                ERROR_STATE() AS ErrorState,
                ERROR_PROCEDURE() AS ErrorProcedure,
                ERROR_LINE() AS ErrorLine,
                ERROR_MESSAGE() AS ErrorMessage;

            IF @@TRANCOUNT > 0
                ROLLBACK TRANSACTION;
        END CATCH;

        IF @@TRANCOUNT > 0
        COMMIT TRANSACTION;
END

GO
GRANT ALTER ON [dbo].[CouponPattern] TO [Copient_Logix_uspRole] AS [dbo]
GO
GRANT EXECUTE ON [dbo].[pa_InsertCouponPattern] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_AccumulateStoredValues.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_AccumulateStoredValues]    Script Date: 07/19/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_AccumulateStoredValues]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_LogixServ_AccumulateStoredValues]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[pa_LogixServ_AccumulateStoredValues]
  @StatusFlag       int,
  @ExtCustomerID    nvarchar(400),
  @CardTypeID       int,
  @LocationId       bigint,
  @LocalID          bigint,
  @ServerSerial     int,
  @ExternalID       nvarchar(400),
  @SVProgramID      bigint,
  @OfferID          bigint,
  @QtyEarned        int,
  @QtyUsed          int,
  @Value            decimal(12,3),
  @EarnedDate       datetime,
  @ExpireDate       datetime,
  @TotalValueEarned decimal(12,3),
  @RedeemedValue    decimal(12,3),
  @BreakageValue    decimal(12,3),
  @LogixTransNum    char(36),
  @FirstName        nvarchar(50),
  @LastName         nvarchar(50),
  @UpdateCount      int output
as 

-- $Id: dbo.pa_LogixServ_AccumulateStoredValues.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972


set nocount on;

declare @EarnedLocationID as bigint
declare @Today as datetime
declare @CustomerPK as bigint
declare @HHPK as bigint
declare @AltEarned as bit

set @Today = getdate()
set @UpdateCount = 0
set @CustomerPK = 0;
set @HHPK = 0;
set @AltEarned  =  1
  
-- try to get the CustomerPK from the Customers table
if @ExtCustomerID <> '0' begin
  -- try to get the CustomerPK and HHPK from the card number
  select @CustomerPK = ISNULL(CustomerPK,0) from CardIDs with (NoLock)
    where ExtCardID = @ExtCustomerID and CardTypeID = @CardTypeID;
   
  if @CustomerPK = 0 begin
    -- customer does not exist - create a new record
    insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate) values (@ExtCustomerID, @CardTypeID, 0,@FirstName, @LastName, getdate());
    set @CustomerPK = Scope_Identity();
  end else begin
    select @HHPK = isnull(HHPK, 0) from Customers with (NoLock) where CustomerPK = @CustomerPK;
    if @HHPK<>0 begin
      -- customer is using Household
      set @CustomerPK = @HHPK;
    end
  end 
end

begin
  if @StatusFlag = 1 begin
    -- issued
    update StoredValue with (RowLock)
      set StatusFlag = @StatusFlag, LastUpdate = @Today, LastLocationID = @LocationID, AlteredSinceEarned = @AltEarned,
          QtyEarned = QtyEarned+@QtyEarned,
          TotalValueEarned = TotalValueEarned+@TotalValueEarned
      where CustomerPK = @CustomerPK and SVProgramID = @SVProgramID and ExpireDate = @ExpireDate;
    set @UpdateCount  =  @@rowcount;

    if @UpdateCount  =  0 begin
      set @EarnedLocationID  =  @LocationID
      set @AltEarned  =  0
      insert into StoredValue with (RowLock)
        ([LocalID], [ServerSerial], [SVProgramID], [OfferID], [CustomerPK], [QtyEarned], [QtyUsed], [Value], [EarnedDate], [EarnedLocationID], [ExpireDate], [ExternalID], [StatusFlag], [LastUpdate], [LastLocationID], [AlteredSinceEarned], [TotalValueEarned], [RedeemedValue], [BreakageValue], [LogixTransNum])
      values
        (@LocalID, @ServerSerial, @SVProgramID, @OfferID, @CustomerPK, @QtyEarned, @QtyUsed, @Value, @EarnedDate, @EarnedLocationID, @ExpireDate, @ExternalID, @StatusFlag, @Today, @LocationID, @AltEarned, @TotalValueEarned, @RedeemedValue, @BreakageValue, @LogixTransNum);

      set @UpdateCount = @@rowcount;

    end

  end else if @StatusFlag = 4 begin

    -- redeemed
    update StoredValue with (RowLock)
      set StatusFlag = 1, LastUpdate = @Today, LastLocationID = @LocationID, AlteredSinceEarned = @AltEarned,
        QtyUsed = QtyUsed+@QtyUsed,
        RedeemedValue = RedeemedValue+@RedeemedValue,
        BreakageValue = BreakageValue+@BreakageValue
      where CustomerPK = @CustomerPK and SVProgramID = @SVProgramID and ExpireDate = @ExpireDate;
    set @UpdateCount  =  @@rowcount;

  end else if @StatusFlag  =  10 begin

    -- reissued
    update StoredValue with (RowLock)
      set StatusFlag = 1,QtyEarned = @QtyEarned,QtyUsed = @QtyUsed, EarnedDate = @EarnedDate,
        EarnedLocationID = @EarnedLocationID, LastUpdate = @Today, LastLocationID = @LocationID,
        TotalValueEarned = @TotalValueEarned, RedeemedValue = @RedeemedValue, BreakageValue = @BreakageValue,
        AlteredSinceEarned = @AltEarned
      where CustomerPK = @CustomerPK and SVProgramID = @SVProgramID and ExpireDate = @ExpireDate;
    set @UpdateCount = @@rowcount;

  end else begin

    update StoredValue with (RowLock)
      set StatusFlag = 1, LastUpdate = @Today, LastLocationID = @LocationID, AlteredSinceEarned = @AltEarned
      where CustomerPK = @CustomerPK and SVProgramID = @SVProgramID and ExpireDate = @ExpireDate;
    set @UpdateCount = @@rowcount;

  end

  if @UpdateCount > 0 begin
    insert into SVHistory with (RowLock)
      ([LocalID], [ServerSerial] ,[SVProgramID] ,[OfferID] ,[CustomerPK] ,[QtyEarned] ,[QtyUsed] ,[Value] ,[EarnedDate] ,[EarnedLocationID] ,[ExpireDate] ,[ExternalID] ,[StatusFlag] ,[LastUpdate] ,[LastLocationID] ,[TotalValueEarned] ,[RedeemedValue] ,[BreakageValue] ,[LogixTransNum])
    values
      (@LocalID, @ServerSerial, @SVProgramID, @OfferID, @CustomerPK, @QtyEarned, @QtyUsed, @Value, @EarnedDate, @EarnedLocationID, @ExpireDate, @ExternalID, @StatusFlag, @Today, @LocationID, @TotalValueEarned, @RedeemedValue, @BreakageValue, @LogixTransNum );
  end

end

GO

GRANT EXECUTE ON [dbo].[pa_LogixServ_AccumulateStoredValues] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_CustCountUpdate.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_CustCountUpdate.StoredProcedure.sql 53876 2012-09-27 01:38:20Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_CustCountUpdate]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustCountUpdate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_CustCountUpdate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustCountUpdate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_LogixServ_CustCountUpdate]
 @CardID nvarchar(400),
 @CardTypeID int,
 @Status int OUTPUT
as 
  set nocount on;
  declare @CustomerPK bigint;
  declare @HHPK bigint;
  
  set @Status=0;
  set @CustomerPK=0;
  set @HHPK=0;
  
  -- try to get the CustomerPK and HHPK from the card number
  select @CustomerPK = ISNULL(CustomerPK,0) from CardIDs with (NoLock)
    where ExtCardID=@CardID and CardTypeID=@CardTypeID;

  select @HHPK=isnull(HHPK, 0) from Customers with (NoLock)
    where CustomerPK = @CustomerPK;

  if @CustomerPK=0 begin
    -- customer does not exist - create a new record
    insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate) values (@CardID, @CardTypeID, 0, ''New'', ''UpdateCount'', getdate());
    set @CustomerPK=Scope_Identity();
  end else begin
    if @HHPK<>0 begin
      -- customer is using Household
      set @CustomerPK=@HHPK;
   end
  end 
   
  update Customers with (RowLock) set UpdateCount=UpdateCount+1 where CustomerPK=@CustomerPK;
  if @@rowcount = 0 begin
    set @Status=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_CustCountUpdate] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_CustGM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_CustGM.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_CustGM]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustGM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_CustGM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustGM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_CustGM] @CustomerPK BigInt
AS 
  select CustomerGroupID from GroupMembership with (NoLock) where Deleted=0 and CustomerPK=@CustomerPK
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_CustGM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_CustInfo.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_CustInfo.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_CustInfo]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustInfo]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_CustInfo]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_LogixServ_CustInfo]
  @ExtCardID nvarchar(400),
  @CardTypeID int = 0
as 
  set nocount on;
  declare @CustomerPK bigint;
  declare @CardStatusDesc nvarchar(50);
  declare @FirstName nvarchar(50);
  declare @LastName nvarchar(50);
  declare @Employee bit;
  declare @UpdateCount bigint;
  declare @HHPK bigint;
  DECLARE @TaxExemptID NVARCHAR(50)
  DECLARE @DriversLicenseID NVARCHAR(50)
  DECLARE @Address NVARCHAR(1000)
  DECLARE @City NVARCHAR(1000)
  DECLARE @State NVARCHAR(1000)
  DECLARE @Zip NVARCHAR(1000)
  DECLARE @Phone NVARCHAR(100)
  DECLARE @ARCustomer BIT
  DECLARE @DateAccountOpened DATETIME
  DECLARE @Comments NVARCHAR(80)
  DECLARE @CompoundCharge TINYINT
  DECLARE @FinanceCharge TINYINT
  DECLARE @CreditLimit NUMERIC(16,2)
  DECLARE @APR NUMERIC(5,2)
  declare @InitialDateOpened nvarchar(50)
  declare @FormattedDateOpened nvarchar(50)
  declare @CardStatusID int;
  declare @CustomerStatusID int;
  declare @DigitalReceipt nvarchar(20)
  declare @PaperReceipt bit
  declare @LinkedID bigint;

  set @CustomerPK = 0;
  set @CardStatusDesc = '''';

  select @CustomerPK = CustomerPK, @CardStatusID = CardStatusID
    from CardIDs with (NoLock)
    where ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;

  select @CardStatusDesc = Description
    from CardStatus with (NoLock)
    where CardStatusID = @CardStatusID;

  -- retrieve the customer information
  select @FirstName=FirstName, @LastName=LastName, @Employee=Employee, 
         @UpdateCount=UpdateCount, @HHPK=ISNULL(HHPK,0), @CustomerStatusID=CustomerStatusID
    from Customers with (NoLock)
    where CustomerPK=@CustomerPK;
           
  if @HHPK > 0 begin
    -- get update count from Household
    select @UpdateCount=UpdateCount from Customers with (NoLock) where CustomerPK=@HHPK;
  end
  
  SELECT  @TaxExemptID = TaxExemptID,
          @DriversLicenseID = DriverLicenseID,
          @Address = Address,
          @City=City,
          @State = State,
          @Zip = Zip,
          @Phone=PhoneAsEntered,
          @ARCustomer = ARCustomer,
          @Comments = Comments,
          @DigitalReceipt = DigitalReceipt,
          @PaperReceipt = PaperReceipt,
          @LinkedID = LinkedCard
         FROM CustomerExt WITH (NOLOCK) 
   WHERE CustomerPK=@CustomerPK;


  select @InitialDateOpened = DateOpened FROM CustomerExt where CustomerPK = @CustomerPK;
  set @FormattedDateOpened =  substring(@InitialDateOpened, 1,2) + ''/'' + substring(@InitialDateOpened, 3,2) + ''/'' + substring(@InitialDateOpened, 5,4);
  set @DateAccountOpened = cast(@FormattedDateOpened as datetime);
   
  SELECT @CompoundCharge = CompoundCharge,
         @FinanceCharge  = FinanceCharge,
         @CreditLimit    = CreditLimit,
         @APR = APR FROM AR_Account WHERE CustomerPK=@CustomerPK;

  select @ExtCardID as ID, ISNULL(@FirstName,'''') as FirstName, ISNULL(@LastName,'''') as LastName,
         @Employee as Employee, @UpdateCount as UpdateCount, @CardStatusDesc as CardStatus, @TaxExemptID AS TaxID,
         @DriversLicenseID AS DriverLicense, @ARCustomer AS ARFlag, @DateAccountOpened AS DateOpened, 
         @Comments AS Comment,@CompoundCharge AS CompoundFlag,@FinanceCharge AS FinanceFlag, @CreditLimit AS CreditLimit,
         @APR AS APRPercent, @Address AS Address,@City AS City, @State AS State,@Zip AS Zip,@Phone AS Phone, @DigitalReceipt AS DigitalReceipt, @PaperReceipt AS PaperReceipt,
         @CustomerStatusID as CustomerStatusID, @LinkedID AS LinkedID; 
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_CustInfo] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pa_LogixServ_CustPromoVars.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_CustPromoVars.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_CustPromoVars]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustPromoVars]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_CustPromoVars]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustPromoVars]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_CustPromoVars] @CustomerPK BigInt
AS 
  SET NOCOUNT ON;

  select AV.PromoVarID as ID, AV.Amount as Val, PV.ExternalID 
    from AccumulationVariables as AV with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=AV.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where AV.CustomerPK=@CustomerPK 

  union
  select DV.PromoVarID as ID, DV.Amount as Val, PV.ExternalID 
    from DistributionVariables as DV with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=DV.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where DV.CustomerPK=@CustomerPK

  union
  select RLV.PromoVarID as ID, RLV.Amount as Val, PV.ExternalID 
    from RewardLimitVariables as RLV with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=RLV.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where RLV.CustomerPK=@CustomerPK 

  union
  select AL.PromoVarID as ID, AL.Amount as Val, PV.ExternalID
    from CM_AdvancedLimitVariables as AL with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=AL.PromoVarID 
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where AL.CustomerPK=@CustomerPK

  union
  select P.PromoVarID as ID, P.Amount as Val, PV.ExternalID
    from Points as P with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=P.PromoVarID 
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where P.CustomerPK=@CustomerPK and PV.ExternalID is null;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_CustPromoVars] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_CustPromoVars_Lifetime.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_CustPromoVars_Lifetime.StoredProcedure.sql 25980 2011-01-13 21:05:41Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_CustPromoVars_Lifetime]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustPromoVars_Lifetime]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_CustPromoVars_Lifetime]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustPromoVars_Lifetime]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_CustPromoVars_Lifetime] @CustomerPK BigInt
AS 
  SET NOCOUNT ON;

  select AV.PromoVarID as ID, AV.Amount as Val, PV.ExternalID, null as Lifetime
    from AccumulationVariables as AV with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=AV.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where AV.CustomerPK=@CustomerPK 

  union
  select DV.PromoVarID as ID, DV.Amount as Val, PV.ExternalID, null as Lifetime 
    from DistributionVariables as DV with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=DV.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where DV.CustomerPK=@CustomerPK

  union
  select RLV.PromoVarID as ID, RLV.Amount as Val, PV.ExternalID, null as Lifetime 
    from RewardLimitVariables as RLV with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=RLV.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where RLV.CustomerPK=@CustomerPK 

  union
  select AL.PromoVarID as ID, AL.Amount as Val, PV.ExternalID, null as Lifetime
    from CM_AdvancedLimitVariables as AL with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=AL.PromoVarID 
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where AL.CustomerPK=@CustomerPK

  union
  select P.PromoVarID as ID, P.Amount as Val, PV.ExternalID, LT.Amount as Lifetime
    from Points as P with (NoLock)
    left Join CM_Points_Lifetime as LT with (NoLock) on LT.PromoVarID=P.PromoVarID and LT.CustomerPK=P.CustomerPK
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=P.PromoVarID 
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where P.CustomerPK=@CustomerPK and PV.ExternalID is null;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_CustPromoVars_Lifetime] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_CustPromoVars_Pending.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_CustPromoVars_Pending.StoredProcedure.sql 25980 2015-01-10 21:05:41Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_CustPromoVars_Pending]    Script Date: 01/10/2015 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustPromoVars_Pending]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_CustPromoVars_Pending]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustPromoVars_Pending]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_CustPromoVars_Pending] @CustomerPK BigInt, @PendingFlagTable PointsProgramPendingFlagTableType READONLY
AS 
  SET NOCOUNT ON;
  
  -- Get the set of PendingPoint rows that pertain to this customer
  -- Send EarnedAmount or negative RedeemedAmount as the amount, based on the ApplyEarnedPendingPoints flag in the PointsProgram table
  select PP.PromoVarID as ID, case PFT.ApplyEarnedPendingPoints when 1 then PP.EarnedAmount else -PP.RedeemedAmount end as Val, PV.ExternalID, PP.CartID
     from PointsPending as PP left join @PendingFlagTable as PFT on PP.ProgramID=PFT.ProgramID
     inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=PP.PromoVarID
     inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
     where PP.CustomerPK=@CustomerPK and PP.Deleted=0

  union all
  -- Get the set of DistributionVariablePending rows that pertain to this customer
  select DVP.PromoVarID as ID, DVP.Amount as Val, PV.ExternalID, DVP.CartID
    from DistributionVariablesPending as DVP with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=DVP.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where DVP.CustomerPK=@CustomerPK and DVP.Deleted=0
    
  union all
  -- Get the set of RewardLimitVariablesPending rows that pertain to this customer
  select RLV.PromoVarID as ID, RLV.Amount as Val, PV.ExternalID, RLV.CartID
    from RewardLimitVariablesPending as RLV with (NoLock)
    inner Join PromoVariables as PV with (NoLock) on PV.PromoVarID=RLV.PromoVarID
    inner Join PromoVarTypes as PVT with (NoLock) on PVT.TypeID=PV.VarTypeID
    where RLV.CustomerPK=@CustomerPK and RLV.Deleted=0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_CustPromoVars_Pending] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_CustStoredValues.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_CustStoredValues.StoredProcedure.sql 114817 2017-07-24 15:13:09Z yr185011 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_CustStoredValues]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustStoredValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_CustStoredValues]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_CustStoredValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_CustStoredValues] @CustomerPK BigInt, @MaxRows int
AS 
  set nocount on;
  select top (@MaxRows) [StoredValueID]
        ,[LocalID]
        ,[ServerSerial]
        ,[SVProgramID]
        ,[OfferID]
        ,[CustomerPK]
        ,[QtyEarned]
        ,[QtyUsed]
        ,[Value]
        ,[EarnedDate]
        ,[EarnedLocationID]
        ,[ExpireDate]
        ,[ExternalID]
        ,[StatusFlag]
        ,[LastLocationID]
        ,[ExpireACK]
        ,[AlteredSinceEarned]
        ,[TotalValueEarned]
        ,[RedeemedValue]
        ,[BreakageValue]
  from StoredValue SV with (NoLock)
  where StatusFlag=1 and deleted=0 and (QtyUsed < QtyEarned) and CustomerPK=@CustomerPK order by ExpireDate asc, TotalValueEarned desc;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_CustStoredValues] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_FetchCardID.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCardID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_FetchCardID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCardID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_FetchCardID]
  @CustomerPK bigint,
  @CardTypeID int
AS
  set nocount on;

  declare @ExtCardID nvarchar(400);
  declare @CardStatusID int;

  select @ExtCardID = ExtCardID, @CardStatusID = CardStatusID
    from CardIDs with (NoLock)
    where customerPK = @CustomerPK and CardTypeID = @CardTypeID;

  select @ExtCardID as CardID, Description as CardStatus
    from CardStatus with (NoLock)
    where CardStatusID = @CardStatusID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_FetchCardID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_FetchCustGroups.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_FetchCustGroups]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustGroups]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups] @CustomerPK bigint, @HHPK bigint
AS 
    -- $Id: dbo.pa_LogixServ_FetchCustGroups.StoredProcedure.sql 35959 2011-08-22 17:27:59Z rob $
    -- Build Version: 7.3.1.138972
  if @HHPK = 0 begin
    select distinct CustomerGroupID from GroupMembership with (NoLock)
     where Deleted=0 and CustomerPK=@CustomerPK;
  end 
  else begin
    select distinct CustomerGroupID from GroupMembership with (NoLock)
    where Deleted=0 and (CustomerPK=@CustomerPK or CustomerPK=@HHPK);
  end

GO


GRANT EXECUTE ON [dbo].[pa_LogixServ_FetchCustGroups] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_FetchCustGroups_MemberOrHousehold.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold] @CustomerPK bigint, @HHPK bigint
AS 
    -- $Id: dbo.pa_LogixServ_FetchCustGroups_MemberOrHousehold.StoredProcedure.sql 35959 2011-08-22 17:27:59Z rob $
    -- Build Version: 7.3.1.138972
  set nocount on;
  if @HHPK = 0 begin
    select distinct CustomerGroupID from GroupMembership with (NoLock)
    where Deleted=0 and CustomerPK=@CustomerPK;
  end 
  else begin
    create table #CustomerList ([CustomerPK] bigint NULL);
    insert into #CustomerList (CustomerPK)
      select CustomerPK from Customers with (NoLock) where CustomerPK=@HHPK or HHPK=@HHPK;
    select distinct CustomerGroupID from GroupMembership with (NoLock)
      where Deleted=0 and CustomerPK in (select CustomerPK from #CustomerList with (NoLock));
    drop table #CustomerList;
  end
GO

GRANT EXECUTE ON [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_FetchCustGroups_MemberOrHousehold_asXML.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold_asXML]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold_asXML]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold_asXML] @CustomerPK bigint, @HHPK bigint
AS 
    -- $Id: dbo.pa_LogixServ_FetchCustGroups_MemberOrHousehold_asXML.StoredProcedure.sql 37118 2011-09-13 17:47:55Z th185078 $
    -- Build Version: 7.3.1.138972
set nocount on;

CREATE table #CustomerList ([CustomerPK] bigint NULL);

IF @HHPK = 0 
BEGIN
  SELECT distinct CustomerGroupID 
  FROM GroupMembership with (NoLock)
  WHERE Deleted=0 and CustomerPK=@CustomerPK
  FOR XML AUTO, ROOT ('LXSsp_select'),ELEMENTS;
END 
ELSE 
BEGIN
	INSERT into #CustomerList (CustomerPK)
   SELECT CustomerPK 
   FROM Customers with (NoLock) 
   WHERE CustomerPK=@HHPK or HHPK=@HHPK;
  
	SELECT DISTINCT CustomerGroupID 
	FROM GroupMembership with (NoLock)
   WHERE Deleted=0 
     AND CustomerPK in (select CustomerPK from #CustomerList)
	FOR XML AUTO, ROOT ('LXSsp_select'),ELEMENTS;
END
  
/*
Example of XML Output based on the above code
<LXSsp_select>
  <GroupMembership>
    <CustomerGroupID>40</CustomerGroupID>
  </GroupMembership>
  <GroupMembership>
    <CustomerGroupID>70</CustomerGroupID>
  </GroupMembership>
</LXSsp_select>
*/
GO

GRANT EXECUTE ON [dbo].[pa_LogixServ_FetchCustGroups_MemberOrHousehold] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_FetchCustGroups_asXML.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_FetchCustGroups]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustGroups_asXML]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups_asXML]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_LogixServ_FetchCustGroups_asXML] @CustomerPK bigint, @HHPK bigint
AS 
    -- $Id: dbo.pa_LogixServ_FetchCustGroups_asXML.StoredProcedure.sql 41018 2011-12-06 21:46:30Z rob $
    -- Build Version: 7.3.1.138972
IF @HHPK = 0 
BEGIN
	SELECT DISTINCT CustomerGroupID 
	FROM GroupMembership with (NoLock)
   WHERE Deleted=0 and CustomerPK=@CustomerPK
   FOR XML AUTO, ROOT ('LXSsp_select'),ELEMENTS;
END 
ELSE 
BEGIN
	SELECT DISTINCT  CustomerGroupID 
	FROM GroupMembership with (NoLock)
   WHERE Deleted=0 and (CustomerPK=@CustomerPK or CustomerPK=@HHPK)
	FOR XML AUTO, ROOT ('LXSsp_select'),ELEMENTS;
END

/*
Example of XML Output based on the above code
<LXSsp_select>
  <GroupMembership>
    <CustomerGroupID>40</CustomerGroupID>
  </GroupMembership>
  <GroupMembership>
    <CustomerGroupID>70</CustomerGroupID>
  </GroupMembership>
</LXSsp_select>
*/
GO


GRANT EXECUTE ON [dbo].[pa_LogixServ_FetchCustGroups] TO [Copient_Logix_uspRole] AS [dbo]
GO


/*

EXEC [dbo].[pa_LogixServ_FetchCustGroups_asXML] @CustomerPK = 3, @HHPK = 0


*/

print 'processing storedprocedures/dbo.pa_LogixServ_FetchCustPK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_FetchCustPK.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_FetchCustPK]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustPK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_FetchCustPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustPK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_FetchCustPK]
  @ExtCardID nvarchar(400),
  @CardTypeID int = 0
AS
  set nocount on;
  declare @CustomerPK bigint;
  
  set @CustomerPK = 0;
  select @CustomerPK = CustomerPK from CardIDs with (NoLock)
    where ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;
  
  select CustomerPK, CustomerTypeID, HHPK, TestCard from Customers with (NoLock)
    where CustomerPK = ISNULL(@CustomerPK,0); 

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_FetchCustPK] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_FetchCustPK_CardIdOnly.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_FetchCustPK_CardIdOnly.StoredProcedure.sql 53869 2012-08-15 01:37:15Z mp250205 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_FetchCustPK_CardIdOnly]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustPK_CardIdOnly]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_FetchCustPK_CardIdOnly]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_FetchCustPK_CardIdOnly]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LogixServ_FetchCustPK_CardIdOnly]
  @ExtCardID nvarchar(400)
AS
  set nocount on;
  declare @CustomerPK bigint;
  declare @CardTypeID int;
  
  set @CustomerPK = 0;
  select @CustomerPK = CustomerPK, @CardTypeID = CardTypeID from CardIDs with (NoLock)
    where ExtCardID = @ExtCardID;
  
  select CustomerPK, CustomerTypeID, HHPK, TestCard, @CardTypeID as CardTypeID from Customers with (NoLock)
    where CustomerPK = ISNULL(@CustomerPK,0); 
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_FetchCustPK_CardIdOnly] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_GroupMembership_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_GroupMembership_Delete.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_GroupMembership_Delete]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_GroupMembership_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_GroupMembership_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_GroupMembership_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_LogixServ_GroupMembership_Delete]
  @ExtCustomerID nvarchar(400),
  @CardTypeID int,
  @CustomerGroupID bigint,
  @Status int OUTPUT
as
set nocount on;
  declare @NumRows int;
  declare @CustomerPK bigint;
  declare @HHPK bigint;

  set @NumRows=0;
  set @Status=0;
  set @CustomerPK=0;
  set @HHPK=0;
  
  -- try to get the CustomerPK from the card number
  select @CustomerPK = ISNULL(CustomerPK,0) from CardIDs with (NoLock)
    where ExtCardID=@ExtCustomerID and CardTypeID=@CardTypeID;
   
  if @CustomerPK>0 begin
    select @NumRows=count(*) from GroupMembership with (NoLock)
      where CustomerPK=@CustomerPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
    if @NumRows>0 begin
      delete from GroupMembership with (RowLock)
        where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=1;
      update GroupMembership with (RowLock) set Deleted=1, [Manual]=1, CMOAStatusFlag=2, TCRMAStatusFlag=2, CPEStatusFlag=0, UEStatusFlag=0
        where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=0;
      set @Status=0;
    end
    else begin
      set @Status=-1; -- not found
    end
  end
  else begin
    set @Status=-1; -- not found
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_GroupMembership_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_GroupMembership_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_GroupMembership_Insert.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_GroupMembership_Insert]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_GroupMembership_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_GroupMembership_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_GroupMembership_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_LogixServ_GroupMembership_Insert]
  @ExtCustomerID nvarchar(400),
  @CardTypeID int,
  @CustomerGroupID bigint,
  @LogixTransNum char(36),
  @FirstName nvarchar(50),
  @LastName nvarchar(50),
  @Status int OUTPUT,
  @ExtCustomerIDOriginal nvarchar(400)
as 
  set nocount on;
  declare @NumRows int;
  declare @CustomerPK bigint;

  set @NumRows=0;
  set @Status=0;
  set @CustomerPK=0;
  
  -- try to get the CustomerPK from the card number
  select @CustomerPK = ISNULL(CustomerPK,0) from CardIDs with (NoLock)
    where ExtCardID=@ExtCustomerID and CardTypeID=@CardTypeID;
   
  if @CustomerPK=0 begin
    -- customer does not exist - create a new record
    insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate,InitialCardIDOriginal) values (@ExtCustomerID, @CardTypeID, 0,@FirstName, @LastName, getdate(),@ExtCustomerIDOriginal);
    set @CustomerPK=Scope_Identity();
  end 

  select @NumRows=count(*) from GroupMembership with (NoLock)
    where CustomerPK=@CustomerPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
  if @NumRows=0 begin
    insert into GroupMembership with (RowLock) (CustomerGroupID, CustomerPK, [Manual], Deleted, CMOAStatusFlag, TCRMAStatusFlag, LogixTransNum, LastUpdate) values (@CustomerGroupID, @CustomerPK, 1, 0, 2, 2, @LogixTransNum, getdate());
    set @Status=0;
  end
  else begin
    set @Status=-1; -- could not insert - record already exists
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_GroupMembership_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_UpdateStoredValues.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_UpdateStoredValues.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_UpdateStoredValues]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_UpdateStoredValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_UpdateStoredValues]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_UpdateStoredValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_LogixServ_UpdateStoredValues]
  @StatusFlag int,
  @ExtCustomerID nvarchar(400),
  @CardTypeID int,
  @LocationId bigint,
  @LocalID bigint,
  @ServerSerial int,
  @ExternalID nvarchar(400),
  @SVProgramID bigint,
  @OfferID bigint,
  @QtyEarned int,
  @QtyUsed int,
  @Value decimal(12,3),
  @EarnedDate datetime,
  @ExpireDate datetime,
  @TotalValueEarned decimal(12,3),
  @RedeemedValue decimal(12,3),
  @BreakageValue decimal(12,3),
  @LogixTransNum char(36),
  @FirstName nvarchar(50),
  @LastName nvarchar(50),
  @UpdateCount int output
as 
set nocount on;

declare @EarnedLocationID as bigint
declare @Today as datetime
declare @CustomerPK as bigint
declare @HHPK as bigint
declare @AltEarned as bit

set @Today = getdate()
set @UpdateCount = 0
set @CustomerPK=0;
set @HHPK=0;
  
-- try to get the CustomerPK from the Customers table
if @ExtCustomerID <> ''0'' begin
  -- try to get the CustomerPK and HHPK from the card number
  select @CustomerPK = ISNULL(CustomerPK,0) from CardIDs with (NoLock)
    where ExtCardID=@ExtCustomerID and CardTypeID=@CardTypeID;
   
  if @CustomerPK=0 begin
    -- customer does not exist - create a new record
    insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate) values (@ExtCustomerID, @CardTypeID, 0,@FirstName, @LastName, getdate());
    set @CustomerPK=Scope_Identity();
  end else begin
    select @HHPK=isnull(HHPK, 0) from Customers with (NoLock) where CustomerPK = @CustomerPK;
    if @HHPK<>0 begin
      -- customer is using Household
      set @CustomerPK=@HHPK;
    end
  end 
end

begin
  if @StatusFlag = 1
    -- issued
    begin
      set @EarnedLocationID = @LocationID
      set @AltEarned = 0

      insert into StoredValue with (RowLock)
        ([LocalID]
        ,[ServerSerial]
        ,[SVProgramID]
        ,[OfferID]
        ,[CustomerPK]
        ,[QtyEarned]
        ,[QtyUsed]
        ,[Value]
        ,[EarnedDate]
        ,[EarnedLocationID]
        ,[ExpireDate]
        ,[ExternalID]
        ,[StatusFlag]
        ,[LastUpdate]
        ,[LastLocationID]
        ,[AlteredSinceEarned]
        ,[TotalValueEarned]
        ,[RedeemedValue]
        ,[BreakageValue]
        ,[LogixTransNum])
      values
        (@LocalID
        ,@ServerSerial
        ,@SVProgramID
        ,@OfferID
        ,@CustomerPK
        ,@QtyEarned
        ,@QtyUsed
        ,@Value
        ,@EarnedDate
        ,@EarnedLocationID
        ,@ExpireDate
        ,@ExternalID
        ,@StatusFlag
        ,@Today
        ,@LocationID
        ,@AltEarned
        ,@TotalValueEarned
        ,@RedeemedValue
        ,@BreakageValue
        ,@LogixTransNum);
    end
  else if @StatusFlag = 10
    -- reissued
    begin
      set @StatusFlag = 1
      set @AltEarned = 1
      set @RedeemedValue=0.00
      set @BreakageValue=0.00
      set @QtyUsed = 0
      set @EarnedLocationID = @LocationID

      update StoredValue
      set StatusFlag=@StatusFlag,QtyEarned=@QtyEarned,QtyUsed=@QtyUsed, EarnedDate=@EarnedDate,
          EarnedLocationID=@EarnedLocationID, LastUpdate=@Today, LastLocationID=@LocationID,
          TotalValueEarned=@TotalValueEarned, RedeemedValue=@RedeemedValue, BreakageValue=@BreakageValue,
          AlteredSinceEarned=@AltEarned
      where LocalId=@LocalID and ServerSerial=@ServerSerial;
    end
  else if (@StatusFlag = 4 or @StatusFlag = -4)
    -- redeemed
    begin
      if @Statusflag = -4
      -- point program type
      begin
        set @StatusFlag = 1
      end

      set @AltEarned = 1
      update StoredValue
      set StatusFlag=@StatusFlag, LastUpdate=@Today, LastLocationID=@LocationID, AlteredSinceEarned=@AltEarned,
          QtyUsed=QtyUsed+@QtyUsed,RedeemedValue=RedeemedValue+@RedeemedValue,BreakageValue=BreakageValue+@BreakageValue
      where LocalId=@LocalID and ServerSerial=@ServerSerial;
    end
  else if @StatusFlag = 2
    -- revoked
    begin
      set @AltEarned = 1
      update StoredValue
        set StatusFlag=2, LastUpdate=@Today, LastLocationID=@LocationID, AlteredSinceEarned=@AltEarned, BreakageValue=@BreakageValue
      where LocalId=@LocalID and ServerSerial=@ServerSerial;
    end
  else
    begin
      set @StatusFlag = 0
    end

  set @UpdateCount = @@rowcount
  if @UpdateCount > 0
    begin
      insert into SVHistory with (RowLock)
        ([LocalID]
        ,[ServerSerial]
        ,[SVProgramID]
        ,[OfferID]
        ,[CustomerPK]
        ,[QtyEarned]
        ,[QtyUsed]
        ,[Value]
        ,[EarnedDate]
        ,[EarnedLocationID]
        ,[ExpireDate]
        ,[ExternalID]
        ,[StatusFlag]
        ,[LastUpdate]
        ,[LastLocationID]
        ,[TotalValueEarned]
        ,[RedeemedValue]
        ,[BreakageValue]
        ,[LogixTransNum])
      values
        (@LocalID
        ,@ServerSerial
        ,@SVProgramID
        ,@OfferID
        ,@CustomerPK
        ,@QtyEarned
        ,@QtyUsed
        ,@Value
        ,@EarnedDate
        ,@EarnedLocationID
        ,@ExpireDate
        ,@ExternalID
        ,@StatusFlag
        ,@Today
        ,@LocationID
        ,@TotalValueEarned
        ,@RedeemedValue
        ,@BreakageValue
        ,@LogixTransNum);
    end
end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_UpdateStoredValues] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Mark_SV_Expired.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Mark_SV_Expired.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Mark_SV_Expired]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Mark_SV_Expired]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Mark_SV_Expired]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Mark_SV_Expired]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Mark_SV_Expired] @CurrentStatus int, @NewStatus int, @RecsProcessed int OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

    set @RecsProcessed=0;

	--set rowcount 1800; 
	Update TOP (1800) SVHistory with (RowLock) set DataExportT1S1= @NewStatus
	  where StatusFlag=3 and Deleted=0 and DataExportT1S1 = @CurrentStatus;
    set @RecsProcessed=@@RowCount;
	--set rowcount 0;
END
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Mark_SV_Expired] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Mark_SV_Manual_Adjustments.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Mark_SV_Manual_Adjustments.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Mark_SV_Manual_Adjustments]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Mark_SV_Manual_Adjustments]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Mark_SV_Manual_Adjustments]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Mark_SV_Manual_Adjustments]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Mark_SV_Manual_Adjustments] @CurrentStatus int, @NewStatus int, @RecsProcessed int OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

    set @RecsProcessed=0;

	--set rowcount 1800; 
	Update TOP (1800) SVHistory with (RowLock) set DataExportT1S1= @NewStatus
	  where LastLocationID = -9 and StatusFlag <> 3 
			and Deleted=0 and DataExportT1S1 = @CurrentStatus;
    set @RecsProcessed=@@RowCount;
	--set rowcount 0;

END
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Mark_SV_Manual_Adjustments] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Mark_SV_ReportStatus.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Mark_SV_ReportStatus.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Mark_SV_ReportStatus]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Mark_SV_ReportStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Mark_SV_ReportStatus]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Mark_SV_ReportStatus]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Mark_SV_ReportStatus] @CurrentStatus int, @NewStatus int, @RecsProcessed int OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

    set @RecsProcessed=0;

	--set rowcount 1800; 
	Update TOP (1800) SVHistory with (RowLock) set DataExportT1S1= @NewStatus
	  where DataExportT1S1 = @CurrentStatus;
    set @RecsProcessed=@@RowCount;
	--set rowcount 0;
END
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Mark_SV_ReportStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_MigrateCmOfferDistributionToUeRuntime.sql'; 
--
GO
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
--
--		Purpose			:		Perform migration of 'Customer Redemption' from CM tables to UE tables
--		Author			:		Joe Johnson for NCR's customer Meijer on March 2nd, 2015
--		Modifications	:		Date			Author						Comments
--								- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
--								03/05/2015		Uday K. Sangepu				Code Review.
--								05/11/2015		Doug Baughman				Update to run during translation, inserting Amount rows.
--
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 


--
--	Start of Script	:	Meijer_CM_to_UE_CustRedemption_Migration_LogixXS_Runtime.sql
--

	/*
		Summary	:	
				To perform the data migration, we create the following objects in LogixXS database:
				
					Seq.	Name										Type
					- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
					1)		pa_MigrateCmOfferDistributionToUeRuntime			Stored Procedure

		Brief comments: For more details please refer to the well written word document (Thanks Joe!)
		
					pa_MigrateCmOfferDistributionToUeRuntime		:		This procedure is called from UEOfferAgent to migrate existing distribution
					                                                        data from CM to UE after offer translation, but before deployment
																	
	*/


	
	-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	--	Procedure 	: 	pa_MigrateCmOfferDistributionToUeRuntime
	--	Purpose		:	Tracks the offers that are already processed
	-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
	IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.pa_MigrateCmOfferDistributionToUeRuntime') AND type in (N'P', N'PC'))
		DROP PROCEDURE dbo.pa_MigrateCmOfferDistributionToUeRuntime
	GO
	CREATE PROCEDURE dbo.pa_MigrateCmOfferDistributionToUeRuntime	  	  @OfferID			BIGINT
										        						, @IncentiveID		BIGINT
												         				, @RewardOptionID	BIGINT
														        		, @NumUpdated		INT		OUTPUT
	AS 
		--
		--	For the given Offer, we need to pull out all the "Customer Redemption" data. This data comes from 'DistributionVariables' & 'Csutomers' tables
		--	We use 'CPE_RewardDistribution' to exclude (LEFT OUTER JOIN) and data that we already migrated.
		--		
		
        WITH migrates AS
        (
           SELECT DV.PromoVarID, DV.CustomerPK, DV.Amount FROM [dbo].[DistributionVariables] DV
	    	INNER JOIN dbo.PromoVariables AS PV WITH (NoLock) 
			ON DV.PromoVarID = PV.PromoVarID
			AND PV.LinkID = @OfferID
			AND PV.deleted=0 
			AND PV.VarTypeID = 1 
        ),
        recurs AS 
        (
           SELECT *, 1 as Level FROM migrates t0
           UNION ALL
           SELECT t1.*, Level + 1 FROM migrates t1
            INNER JOIN
            recurs t2 ON t1.CustomerPK = t2.CustomerPK
            AND t2.Amount > t2.Level 
        )
   
		INSERT INTO dbo.CPE_UploadTemp_RD with (RowLock) (TableNum
														, Operation
														, Col1
														, Col2
														, Col3
														, Col4
														, Col5
														, Col6
														, Col7
														, Col8
														, Col9
														, Col10
														, Col11
														, Col12
														, Col13
														, ServerSerial
														, LocationID
														, WaitingACK
														, POSTimeStamp
														, IPLSeqNum)
		SELECT	  1					AS TableNum
				, 1					AS Operation
				, 1					AS Col1
				, -9				AS Col2
				, @IncentiveID		AS Col3
				, @RewardOptionID	AS Col4
				, 3					AS Col5
				, DV.CustomerPK		AS Col6
				, GETDATE()			AS Col7
				, '99991'			AS Col8
				, -9				AS Col9
				, C.InitialCardID	AS Col10
				, 0					AS Col11
				, C.InitialCardID	AS Col12
				, 0					AS Col13
				, -9				AS ServerSerial
				, -9				AS LocationID
				, 0 				AS WaitingACK
				, NULL				AS POSTimeStamp
				, 0					AS IPLSeqNum
		FROM recurs AS DV WITH (NoLock)
		INNER JOIN Customers AS C with (NoLock) 
			ON C.CustomerPK=DV.CustomerPK
		LEFT OUTER JOIN CPE_RewardDistribution AS RD WITH (NoLock) 
			ON RD.IncentiveID = @IncentiveID 
			AND RD.RewardOptionID=@RewardOptionID 
			AND RD.CustomerPK = DV.CustomerPK
		WHERE RD.CustomerPK IS NULL
				  
		SELECT @NumUpdated = @@ROWCOUNT
	GO

	GRANT EXECUTE ON dbo.pa_MigrateCmOfferDistributionToUeRuntime TO Copient_Logix_uspRole AS dbo
	GO
	
	
--
--	End of Script	:	Meijer_CM_to_UE_CustRedemption_Migration_LogixXS_Runtime.sql
--


print 'processing storedprocedures/dbo.pa_OCAMT_CustomerGroup_UpdateIDs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_CustomerGroup_UpdateIDs.StoredProcedure.sql 78571 2014-05-16 17:53:01Z ss250690 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_CustomerGroup_UpdateIDs]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_CustomerGroup_UpdateIDs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_CustomerGroup_UpdateIDs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_CustomerGroup_UpdateIDs]') AND type in (N'P', N'PC'))
BEGIN
	EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_OCAMT_CustomerGroup_UpdateIDs]  @InputXML xml, @TableName varchar(50)
as 
  set nocount on
  
  create table #OfferList  (ExtInterfaceID int, 
                            ExtSourceID nvarchar(50), 
                            ClientOfferID nvarchar(20), 
                            OfferID bigint, 
                            CustomerGroupID bigint);
  declare @cmd as nvarchar(500);
  
  insert into #OfferList (ExtInterfaceID, ExtSourceID, ClientOfferID, OfferID, CustomerGroupID) 
    select 0 as ExtInterfaceID, 
		   NULL as ExtSourceID, 		   
		   0 as ClientOfferID, 		   
           ParamValues.ID.value(''OfferID[1]'',''bigint'') as OfferID,
           ParamValues.ID.value(''CustomerGroupID[1]'',''bigint'') as CustomerGroupID
    from @InputXML.nodes(''//Offers/Offer'') as ParamValues(ID)

	
 --updating  customergroupid=0  to rows which doesnot exist in AMS
  set @cmd = ''set nocount on; update ''+ @TableName+'' set  CustomerGroupID=0 '' +  
        ''from ''+ @TableName+'' a WHERE NOT EXISTS (SELECT b.CustomerGroupID FROM #OfferList b where b.CustomerGroupID=a.CustomerGroupID )''
		
	exec sp_executesql @cmd
'
End
GO

GRANT EXECUTE ON [dbo].[pa_OCAMT_CustomerGroup_UpdateIDs] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_OCAMT_Delete_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_Delete_GM.StoredProcedure.sql 120247 2018-02-06 02:57:26Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_Delete_GM]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_Delete_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_Delete_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_Delete_GM]') AND type in (N'P', N'PC'))
BEGIN
	EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_OCAMT_Delete_GM]  @ExtInterfaceID int = null, @RunAgain int output,@TableName nvarchar(100),@UpdateTime varchar(100)
as 
  -- This procedure deletes group membership records found in OfferCustomerInsertTemp from GroupMembership
  -- Invoked by OfferCustomer Agent
 
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRows int;
  declare @cmd nvarchar(1000)
  
  set @MinutesElapsed=0;
  set @ProcessRows=1;
  set @RunAgain=0;
  select @StartTime=getdate();

  while @ProcessRows=1 begin
    set @cmd =N''Update TOP (4800) ''+ @TableName +'' set ProcessFlag=1 where ProcessFlag=0''
    exec sp_executesql @cmd
    set @NumRows=@@Rowcount;
    if @NumRows=0 begin
      set @ProcessRows=0;
    end

    if @ProcessRows=1 begin 
      -- remove any group membership records that are already marked as deleted
      set @cmd =''set nocount on; delete GroupMembership with (RowLock) from GroupMembership as GM inner join Customers as CUST on CUST.CustomerPK = GM.CustomerPK '' +
				''inner join ''+ @TableName +'' as OCIT on OCIT.CustomerPK = CUST.CustomerPK '' +
				''where GM.CustomerGroupID=OCIT.CustomerGroupID and GM.Deleted=1 and OCIT.ProcessFlag=1;''
      exec sp_executesql @cmd
      
      if(@ExtInterfaceID IS NULL)
		  begin
			  -- mark group membership records as deleted 
			  set @cmd =''set nocount on; update GroupMembership with (RowLock) set Deleted=1, LastUpdate=getdate() '' + '' ''+
						''from GroupMembership as GM '' +
						''inner join ''+ @TableName +'' as OCIT on OCIT.CustomerPK = GM.CustomerPK '' +
						''where GM.UploadTime<''''''+@UpdateTime+'''''' or GM.UploadTime IS NULL and GM.CustomerGroupID=OCIT.CustomerGroupID and GM.Deleted=0 and OCIT.ProcessFlag=1;'' 
			  
			  exec sp_executesql @cmd
		      
			  set @cmd =''set nocount on; Update ''+ @TableName +'' set ProcessFlag=2 where ProcessFlag=1;''
			  exec sp_executesql @cmd
		  end
	  else
		   begin
		   
          -- mark group membership records as deleted 
          set @cmd =''set nocount on; update GroupMembership with (RowLock) set Deleted=1, LastUpdate=getdate(), ExtInterfaceID=''+ CAST(@ExtInterfaceID as varchar) + '' ''+
    				''from GroupMembership as GM '' +
    				''inner join ''+ @TableName +'' as OCIT on OCIT.CustomerPK = GM.CustomerPK '' +
    				''where GM.UploadTime<''''''+@UpdateTime+'''''' or GM.UploadTime IS NULL and GM.CustomerGroupID=OCIT.CustomerGroupID and GM.Deleted=0 and OCIT.ProcessFlag=1;'' 
          exec sp_executesql @cmd
          
          set @cmd =''set nocount on; Update ''+ @TableName +'' set ProcessFlag=2 where ProcessFlag=1;''
          exec sp_executesql @cmd
        end
    end

    select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
    if @MinutesElapsed>=5 begin
      set @ProcessRows=0; 
      if @NumRows>0 begin 
        set @RunAgain=1;      
      end
    end

  end --while ProcessRows=1

'
End
GO

GRANT EXECUTE ON [dbo].[pa_OCAMT_Delete_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_OCAMT_InsertUsers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_InsertUsers.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_InsertUsers]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_InsertUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_InsertUsers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_InsertUsers]') AND type in (N'P', N'PC'))
BEGIN
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_OCAMT_InsertUsers] @TableName nvarchar(100)
as 
  Declare @cmd nvarchar(1000)
  set @cmd = N''set nocount on; 
  ;WITH CTE AS(
		SELECT ExternalID, CardTypeID,
		RN = ROW_NUMBER()OVER(PARTITION BY ExternalID,CardTypeID ORDER BY ExternalID)
		FROM ''+ @TableName +'' 
	)
	DELETE FROM CTE WHERE RN > 1
  Insert Into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, CreatedDate,InitialCardIDOriginal) '' +
    ''select distinct  OCIT.ExternalID as InitialCardID,  OCIT.CardTypeID as InitialCardTypeID, OCIT.CardTypeID, getdate() as CreatedDate, OCIT.ExternalIDOriginal '' +
    ''from ''+ @TableName +'' as OCIT with (NoLock) left join CardIDs as C on OCIT.ExternalID=C.ExtCardID and C.CardTypeID=OCIT.CardTypeID ''+
    ''where C.ExtCardID is NULL'';
exec sp_executesql @cmd    
'
End
GO

GRANT EXECUTE ON [dbo].[pa_OCAMT_InsertUsers] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_OCAMT_Insert_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_Insert_GM.StoredProcedure.sql 120247 2018-02-06 02:57:26Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_Insert_GM]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_Insert_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_Insert_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_Insert_GM]') AND type in (N'P', N'PC'))
BEGIN
	EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_OCAMT_Insert_GM] @ExtInterfaceID int = null, @RunAgain int output, @SendingMethod int, @TableName nvarchar(100), @UpdateTime varchar(100)
as 
  -- This procedure moves group membership records from OfferCustomerInsertTemp to GroupMembership
  -- Invoked by Offer Customer Agent
 
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRows int;
  declare @cmd nvarchar(1000);
  
  set @MinutesElapsed=0;
  set @ProcessRows=1;
  set @RunAgain=0;
  select @StartTime=getdate();

  while @ProcessRows=1 begin
    set @cmd =N''Update TOP (4800) ''+@TableName +'' set ProcessFlag=1 where ProcessFlag=0''
    exec sp_executesql @cmd
    set @NumRows=@@Rowcount;
    if @NumRows=0 begin
      set @ProcessRows=0;
    end
	
	if @SendingMethod > 1 or @SendingMethod < 0 
	begin
		raiserror (''Invalid value for argument SendingMethod. '',15,255);
		return
	end
	
    if @SendingMethod = 0
    begin
      if @ProcessRows=1 begin  
      	if(@ExtInterfaceID IS NULL)
    		  begin
    			set @cmd =''set nocount on; insert into GroupMembership with (rowlock) (CustomerPK, CustomerGroupID, Manual, UploadTime, Deleted, CMOAStatusFlag,TCRMAStatusFlag, LastUpdate) ''+
    			  ''select CustomerPK, CustomerGroupID, 0 as Manual, ''''''+ @UpdateTime +'''''' as UploadTime, ''+
    				''0 as Deleted,  0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, GetDate() as LastUpdate ''+
    			  ''from ''+@TableName +
    			  '' where ProcessFlag=1'';
    		  end
  		   else
    		    begin
              set @cmd =''set nocount on; insert into GroupMembership with (rowlock) (CustomerPK, CustomerGroupID, Manual, UploadTime, Deleted, CMOAStatusFlag,TCRMAStatusFlag, LastUpdate, ExtInterfaceID) ''+
                ''select CustomerPK, CustomerGroupID, 0 as Manual, ''''''+ @UpdateTime +'''''' as UploadTime, ''+
                  ''0 as Deleted,  0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, GetDate() as LastUpdate, ''+CAST(@ExtInterfaceID AS varchar)+'' as ExtInterfaceID ''+
                ''from ''+@TableName +
                '' where ProcessFlag=1'';
            end
          end    
        end    
    
    if @SendingMethod = 1
    begin
     if @ProcessRows=1 begin  
       if(@ExtInterfaceID IS NULL)
    			begin
    				set @cmd =''set nocount on; insert into GroupMembership with (rowlock) (CustomerPK, CustomerGroupID, Manual, UploadTime, Deleted, CMOAStatusFlag,TCRMAStatusFlag, LastUpdate) ''+
    				''select CustomerPK, CustomerGroupID, 1 as Manual, ''''''+@UpdateTime+'''''' as UploadTime, 0 as Deleted, 0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, GetDate() as LastUpdate ''+
    				''from ''+@TableName +
    				'' where ProcessFlag=1'';
    			end
  		  else
        	begin
		    set @cmd =''set nocount on; insert into GroupMembership with (rowlock) (CustomerPK, CustomerGroupID, Manual, UploadTime, Deleted, CMOAStatusFlag,TCRMAStatusFlag, LastUpdate, ExtInterfaceID) ''+
          	''select CustomerPK, CustomerGroupID, 1 as Manual, ''''''+@UpdateTime+'''''' as UploadTime, 0 as Deleted ,  0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, GetDate() as LastUpdate, ''+CAST(@ExtInterfaceID AS varchar)+'' as ExtInterfaceID ''+
              	''from ''+@TableName +
              	'' where ProcessFlag=1'';
    	    end
  			
  	    end
      end    		
	
    exec sp_executesql @cmd
    set @NumRows=@@Rowcount;
    set @cmd =''set nocount on; Update ''+@TableName +'' set ProcessFlag=2 where ProcessFlag=1'';
    exec sp_executesql @cmd 
    
    
    select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
    if @MinutesElapsed>=5 begin
      set @ProcessRows=0; 
      if @NumRows>0 begin 
        set @RunAgain=1;      
      end
    end

  end --while ProcessRows=1
'
End
GO

GRANT EXECUTE ON [dbo].[pa_OCAMT_Insert_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO






print 'processing storedprocedures/dbo.pa_OCAMT_Insert_GM_Clips.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_Insert_GM_Clips.StoredProcedure.sql 60523 2012-12-24 18:34:03Z by185006 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_Insert_GM]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_Insert_GM_Clips]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_Insert_GM_Clips]
GO

CREATE Procedure [dbo].[pa_OCAMT_Insert_GM_Clips] 
	@ExtInterfaceID int, 
	@TableName nvarchar(100), 
	@UpdateTime varchar(100), 
	@OfferCustomerLocationXML nvarchar(max), 
	@OperationType int, 
	@ProcessorID nvarchar(50),
	@ClipFileName nvarchar(50),
	@RowsInserted int Output
as 
	declare @cmd nvarchar(max)
	declare @gm_operation_cmd nvarchar(max)
	declare @deleted as nvarchar
	
	if(@OperationType = 0)
		set @deleted = '0'	
	else if(@OperationType = 1)
		set @deleted = '1'
	else
	begin
		raiserror ('Invalid value for argument @OperationType. ',15,255);
		return
	end	
		
	-- insert into groupmembership_pending.
	set @gm_operation_cmd = ' insert into GroupMembership_Pending with (rowlock) (CustomerPK, CustomerGroupID, Manual, UploadTime, Deleted, CPEStatusFlag, LastUpdate, ExtInterfaceID, ProcessorID, ClipFileName) '+
					'select CustomerPK, CustomerGroupID, 0 as Manual, '''+ @UpdateTime +''' as UploadTime, '+
					@deleted + ' as Deleted,  -5 as CPEStatusFlag, GetDate() as LastUpdate, '+CAST(@ExtInterfaceID AS varchar)+' as ExtInterfaceID, '+ 
					'''' + @ProcessorID +''' as ProcessorID, ' + '''' + @ClipFileName +''' as ClipFileName ' +
					'from '+@TableName + ' where ProcessFlag=1; '	
	
	set @cmd =N'set nocount on; ' +
		'declare @idoc int ' +
		'EXEC sp_xml_preparedocument @idoc OUTPUT, N''' + @OfferCustomerLocationXML  + '''; ' +
		'Create Table #ClipInsertTemp ( ' +
                            'UserID  bigint, ' +
                            'UserGroupID bigint, ' +
                            'TargetLocationID  bigint, ' +
                            'Deleted int ' +
                           '); ' +                           
		'insert into #ClipInsertTemp (UserGroupID, UserID, TargetLocationID, Deleted)  ' +
		'select CustomerGroupID, CustomerPK, TargetLocationID, Deleted ' +
		'from OPENXML(@idoc,''/Offers/OfferCustomerLocation'')  ' +
		'with  ' +
		'( ' +
			'CustomerGroupID int ''./CustomerGroupID'', ' +
			'CustomerPK int ''./CustomerPK'', ' +
			'TargetLocationID int ''./TargetLocationID'', ' +			
			'Deleted int ''./Deleted'' ' +			
		'); ' +	
		' exec sp_xml_removedocument @idoc;' +
		'begin tran ' +			
		  	' begin try ' +
		  		 @gm_operation_cmd +
		  		' set @RowInserted = @@RowCount '+
				' insert into OCAMT_GM_Output with (rowlock) (CustomerPK, CustomerGroupID,  TargetLocationID, UploadTime, Deleted, InsertTime, ClipFileName) '+
					'select UserID as CustomerPK, UserGroupID as CustomerGroupID, TargetLocationID, '''+ @UpdateTime +''' as UploadTime, '+
					@deleted +' as Deleted, GetDate() as InsertTime, '+ '''' + @ClipFileName +''' as ClipFileName ' +
					'from #ClipInsertTemp where Deleted=0; ' +
					'update '+@TableName +' set ProcessFlag=2 where ProcessFlag=1 ' +
		     'end try ' +
		     'begin catch ' +
				'if @@trancount > 0 ' +
				' begin ' +
					'	declare @errormessage nvarchar(4000); ' +
					'	declare @errorseverity int; ' +
					'	declare @errorstate int; ' +
					'	select @errormessage = error_message(), @errorseverity = error_severity(), @errorstate = error_state(); ' +	     
					'	rollback tran; ' +	      
					'	raiserror (@errormessage, @errorseverity, @errorstate); ' +
				' end ' +
			 'end catch ' +
			 'if @@trancount > 0 ' +
			 ' begin ' +
				'commit tran; ' +					
			 ' end; ' +
			 ' drop table #ClipInsertTemp; ';
			 --print @cmd
		declare @ParmDefinition nvarchar(500);			 
		set @ParmDefinition = N'@OfferCustomerLocationXML nvarchar(max), @TableName nvarchar(100), @RowInserted int Output';
		
	    exec sp_executesql @cmd, @ParmDefinition, @OfferCustomerLocationXML, @TableName, @RowsInserted Output
Go

GRANT EXECUTE ON [dbo].[pa_OCAMT_Insert_GM_Clips] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_OCAMT_LockInsertFile.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_LockInsertFile.StoredProcedure.sql 46702 2012-03-27 23:22:23Z bin $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_LockInsertFile]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_LockInsertFile]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_LockInsertFile]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[pa_OCAMT_LockInsertFile] 	
	@PKID bigint output,
	@FileName nvarchar(100) output,
	@ReturnCode integer = 0 output,
	@ProcessorID nvarchar(50),
	@OptOutDelay integer,
	@StaleAge integer
	-- 0  not locked
	-- 1  locked
	-- -1 error
as 
  -- This procedure locks an bulk file to a processor
  -- Invoked by Offer Customer MT Agent

SET nocount on
 
If( @ProcessorID is NULL or len(@ProcessorID)=0 )
begin
	set @ReturnCode = -1
	return
end

DECLARE @UpdateRowcount as integer
DECLARE @LastUpdate as datetime

SET @ReturnCode = 1
SET @UpdateRowcount = 0

WHILE @UpdateRowcount = 0
BEGIN
	SELECT top 1 @pkid=pkid, @FileName=FileName, @LastUpdate=LastUpdate FROM OfferCustomerInsertQueue WITH (NoLock)
		WHERE (processorid IS NULL AND (OperationType <> 2 OR ( DATEADD(ms,@OptOutDelay,UploadTime) < GETDATE() ) ) )
			OR (processorid IS NOT NULL AND ( DATEADD(ms, @StaleAge, LastUpdate) < GETDATE() ) )
		ORDER BY PKID ASC;
	
	if @@ROWCOUNT = 0
	begin
		set @ReturnCode = 0
		set @PKID = -1
		set @FileName = ''
		break
	end
	
	update OfferCustomerInsertQueue set processorid=@ProcessorID, lastupdate=GETDATE() 
		WHERE PKID = @pkid AND 
		((LastUpdate is NULL AND @LastUpdate is NULL) or LastUpdate = @LastUpdate);
	set @UpdateRowcount = @@ROWCOUNT
END

GO

GRANT EXECUTE ON [dbo].[pa_OCAMT_LockInsertFile] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_OCAMT_UpdateIDs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_UpdateIDs.StoredProcedure.sql 78558 2014-05-16 14:22:58Z ss250690 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_UpdateIDs]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_UpdateIDs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_UpdateIDs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_UpdateIDs]') AND type in (N'P', N'PC'))
BEGIN
	EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_OCAMT_UpdateIDs]  @OfferXML xml, @TableName varchar(50)
as 
  set nocount on
  
  create table #OfferList  (ExtInterfaceID int, 
                            ExtSourceID nvarchar(50), 
                            ClientOfferID nvarchar(20), 
                            OfferID bigint, 
                            CustomerGroupID bigint);
  declare @cmd as nvarchar(500);
  -- Store the Offer XML document into a table variable
  insert into #OfferList (ExtInterfaceID, ExtSourceID, ClientOfferID, OfferID, CustomerGroupID) 
    select isnull(ParamValues.ID.value(''ExtInterfaceID[1]'',''int''),0) as ExtInterfaceID, 
		   ParamValues.ID.value(''ExtSourceID[1]'',''nvarchar(50)'') as ExtSourceID, 		   
		   ParamValues.ID.value(''ClientOfferID[1]'',''nvarchar(20)'') as ClientOfferID, 		   
           ParamValues.ID.value(''OfferID[1]'',''bigint'') as OfferID,
           ParamValues.ID.value(''CustomerGroupID[1]'',''bigint'') as CustomerGroupID
    from @OfferXML.nodes(''//Offers/Offer'') as ParamValues(ID)

set @cmd = ''set nocount on; update ''+ @TableName+'' set ExtInterfaceID=OL.ExtInterfaceID, OfferID= OL.OfferID, CustomerGroupID=OL.CustomerGroupID '' +
    '' from ''+@TableName+'' as OCIT '' +
    '' inner join #OfferList as OL on OL.ClientOfferID = OCIT.ClientOfferID and OL.ExtSourceID=OCIT.ExtSourceID and OCIT.ExtSourceID is not NULL''
    
exec sp_executesql @cmd
'
End
GO

GRANT EXECUTE ON [dbo].[pa_OCAMT_UpdateIDs] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_OCAMT_Update_InternalIDs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCAMT_Internal_UpdateIDs.StoredProcedure.sql 78571 2014-05-16 17:53:01Z ss250690 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCAMT_Internal_UpdateIDs]    Script Date: 04/27/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_Internal_UpdateIDs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCAMT_Internal_UpdateIDs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCAMT_Internal_UpdateIDs]') AND type in (N'P', N'PC'))
BEGIN
	EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_OCAMT_Internal_UpdateIDs]  @OfferXML xml, @TableName varchar(50)
as 
  set nocount on
  
  create table #OfferList  (ExtInterfaceID int, 
                            ExtSourceID nvarchar(50), 
                            ClientOfferID nvarchar(20), 
                            OfferID bigint, 
                            CustomerGroupID bigint);
  declare @cmd as nvarchar(500);
  
  insert into #OfferList (ExtInterfaceID, ExtSourceID, ClientOfferID, OfferID, CustomerGroupID) 
    select 0 as ExtInterfaceID, 
		   NULL as ExtSourceID, 		   
		   0 as ClientOfferID, 		   
           ParamValues.ID.value(''OfferID[1]'',''bigint'') as OfferID,
           ParamValues.ID.value(''CustomerGroupID[1]'',''bigint'') as CustomerGroupID
    from @OfferXML.nodes(''//Offers/Offer'') as ParamValues(ID)

	 --updating the customergroupid for existing offers in AMS
	set @cmd = ''set nocount on; update ''+ @TableName+'' set  OfferID= OL.OfferID, CustomerGroupID=OL.CustomerGroupID '' +
		'' from ''+@TableName+'' as OCIT '' +
		'' inner join #OfferList as OL on OL.OfferID = OCIT.OfferID ''
		
	exec sp_executesql @cmd
 --updating offerid and customergroupid=0  to offers which doesnot exist in AMS
  set @cmd = ''set nocount on; update ''+ @TableName+'' set OfferID=0, CustomerGroupID=0 '' +  
        ''from ''+ @TableName+'' a WHERE NOT EXISTS (SELECT b.OfferID FROM #OfferList b where b.offerid=a.offerid )''
		
	exec sp_executesql @cmd
'
End
GO

GRANT EXECUTE ON [dbo].[pa_OCAMT_Internal_UpdateIDs] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_OCA_ClientOfferID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCA_ClientOfferID.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCA_ClientOfferID]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_ClientOfferID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCA_ClientOfferID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_ClientOfferID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_OCA_ClientOfferID]  @OfferXML xml OUTPUT
as 
  set nocount on
  
  set @OfferXML =
    (select distinct ClientOfferID, 0 as OfferID, 0 as CustomerGroupID
     from OfferCustomerInsertTemp as Offer with (NoLock)
     for xml auto, root(''Offers''), elements)
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_OCA_ClientOfferID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_OCA_Delete_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCA_Delete_GM.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCA_Delete_GM]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_Delete_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCA_Delete_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_Delete_GM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_OCA_Delete_GM]  @ExtInterfaceID int = null, @RunAgain int output
as 
  -- This procedure deletes group membership records found in OfferCustomerInsertTemp from GroupMembership
  -- Invoked by OfferCustomer Agent
 
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRows int;
  set @MinutesElapsed=0;
  set @ProcessRows=1;
  set @RunAgain=0;
  select @StartTime=getdate();

  while @ProcessRows=1 begin
    --set rowcount 4800
    Update TOP (4800) OfferCustomerInsertTemp set ProcessFlag=1 where ProcessFlag=0
    set @NumRows=@@Rowcount;
    if @NumRows=0 begin
      set @ProcessRows=0;
    end
    --set rowcount 0 

    if @ProcessRows=1 begin 
      -- remove any group membership records that are already marked as deleted
      delete GroupMembership with (RowLock) from GroupMembership as GM inner join Customers as CUST on CUST.CustomerPK = GM.CustomerPK
      inner join OfferCustomerInsertTemp as OCIT on OCIT.CustomerPK = CUST.CustomerPK
      where GM.CustomerGroupID=OCIT.CustomerGroupID and GM.Deleted=1 and OCIT.ProcessFlag=1;
      
      -- mark group membership records as deleted 
      update GroupMembership with (RowLock) set Deleted=1, LastUpdate=getdate(), ExtInterfaceID=@ExtInterfaceID
      from GroupMembership as GM 
      inner join OfferCustomerInsertTemp as OCIT on OCIT.CustomerPK = GM.CustomerPK
      where GM.CustomerGroupID=OCIT.CustomerGroupID and GM.Deleted=0 and OCIT.ProcessFlag=1; 
      
      Update GMInsertTemp set ProcessFlag=2 where ProcessFlag=1;
    end

    select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
    if @MinutesElapsed>=5 begin
      set @ProcessRows=0; 
      if @NumRows>0 begin 
        set @RunAgain=1;      
      end
    end

  end --while ProcessRows=1

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_OCA_Delete_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_OCA_InsertUsers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCA_InsertUsers.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCA_InsertUsers]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_InsertUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCA_InsertUsers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_InsertUsers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_OCA_InsertUsers]
AS 
  SET NOCOUNT ON;
  Insert Into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, CreatedDate) 
    select distinct  OCIT.ExternalID as InitialCardID,  OCIT.CardTypeID as InitialCardTypeID, OCIT.CardTypeID, getdate() as CreatedDate 
    from OfferCustomerInsertTemp as OCIT with (NoLock) left join CardIDs as C on OCIT.ExternalID=C.ExtCardID and C.CardTypeID=OCIT.CardTypeID
    where C.ExtCardID is NULL;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_OCA_InsertUsers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_OCA_Insert_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCA_Insert_GM.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCA_Insert_GM]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_Insert_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCA_Insert_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_Insert_GM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_OCA_Insert_GM] @ExtInterfaceID int = null, @RunAgain int output, @SendToTransDownload bit = 0
as 
  -- This procedure moves group membership records from OfferCustomerInsertTemp to GroupMembership
  -- Invoked by Offer Customer Agent
 
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRows int;
  set @MinutesElapsed=0;
  set @ProcessRows=1;
  set @RunAgain=0;
  select @StartTime=getdate();

  while @ProcessRows=1 begin
    --set rowcount 4800
    Update TOP (4800) OfferCustomerInsertTemp set ProcessFlag=1 where ProcessFlag=0
    set @NumRows=@@Rowcount;
    if @NumRows=0 begin
      set @ProcessRows=0;
    end
    --set rowcount 0 

    if @SendToTransDownload = 0
    begin
      if @ProcessRows=1 begin  
        insert into GroupMembership (CustomerPK, CustomerGroupID, Manual, LastUpdate, Deleted, CMOAStatusFlag,TCRMAStatusFlag, ExtInterfaceID) 
          select CustomerPK, CustomerGroupID, 0 as Manual, getdate() as LastUpdate,
            0 as Deleted,  0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, @ExtInterfaceID as ExtInterfaceID 
          from OfferCustomerInsertTemp
          where ProcessFlag=1;
        
        Update OfferCustomerInsertTemp set ProcessFlag=2 where ProcessFlag=1;
      end
    end
    else
    begin
      if @ProcessRows=1 begin  
        insert into GroupMembership (CustomerPK, CustomerGroupID, Manual, LastUpdate, Deleted, CMOAStatusFlag,TCRMAStatusFlag, ExtInterfaceID) 
          select CustomerPK, CustomerGroupID, 1 as Manual, getdate() as LastUpdate, 0 as Deleted,  0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, @ExtInterfaceID as ExtInterfaceID 
          from OfferCustomerInsertTemp
          where ProcessFlag=1;
        
        Update OfferCustomerInsertTemp set ProcessFlag=2 where ProcessFlag=1;
      end
    end
    
    select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
    if @MinutesElapsed>=5 begin
      set @ProcessRows=0; 
      if @NumRows>0 begin 
        set @RunAgain=1;      
      end
    end

  end --while ProcessRows=1


' 
END
GO
GRANT EXECUTE ON [dbo].[pa_OCA_Insert_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_OCA_UpdateIDs.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_OCA_UpdateIDs.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_OCA_UpdateIDs]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_UpdateIDs]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_OCA_UpdateIDs]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_OCA_UpdateIDs]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pa_OCA_UpdateIDs]  @OfferXML xml
as 
  set nocount on
  
  DECLARE @OfferList TABLE (ClientOfferID nvarchar(20), OfferID bigint, CustomerGroupID bigint);

  -- Store the Offer XML document into a table variable
  Insert into @OfferList (ClientOfferID, OfferID, CustomerGroupID) 
    SELECT ParamValues.ID.value(''ClientOfferID[1]'',''nvarchar(20)'') as ClientOfferID, 
           ParamValues.ID.value(''OfferID[1]'',''bigint'') as OfferID,
           ParamValues.ID.value(''CustomerGroupID[1]'',''bigint'') as CustomerGroupID
    FROM @OfferXML.nodes(''//Offers/Offer'') as ParamValues(ID)

  update OfferCustomerInsertTemp set OfferID= OL.OfferID, CustomerGroupID=OL.CustomerGroupID
    from OfferCustomerInsertTemp as OCIT
    inner join @OfferList as OL on OL.ClientOfferID = OCIT.ClientOfferID
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_OCA_UpdateIDs] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PHMA_MovePointsHistory.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PHMA_MovePointsHistory.StoredProcedure.sql 113916 2017-06-28 09:52:18Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_PHMA_MovePointsHistory]    Script Date: 11/20/2011 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PHMA_MovePointsHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_PHMA_MovePointsHistory]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_PHMA_MovePointsHistory] @ChunkSize int, @RunAgain int Output, @RowsInserted int output 
AS          
  -- This procedure moves PointsHistory records from CPE_UploadTemp_PA
  declare @NumRecs int;
  declare @cmd nvarchar(1000);
  set nocount on;
  declare @StartTime datetime;
  set @RunAgain = 1;
  set @StartTime = getdate();

  IF @ChunkSize <= 0
  BEGIN
	RAISERROR('ChunkSize must be greater than zero', 18, 1)
	RETURN
  END
  
  SET @RowsInserted = 0
  
  -- declare @thread_WaitingACK int  
  -- About waitingACK values in this procedure.
  -- 1. TransUpload uses WaitingACK [0,+inf)
  -- 2. pa_CPE_TUA_PointsAdj uses WaitingACK (-inf, -100]
  -- 3. This procedure looks in table CPE_UploadTemp_PA for waitingACK=-33
  -- 4. It set up to @ChunkSize (=1800 in the FIS) rows with waitingACK = -33 to @thread_WaitingACK (=-90)
  -- 5. After processing those rows, it deletes rows with ith waitingACK = @thread_WaitingACK
  -- set @thread_WaitingACK = -90
  
  CREATE TABLE #PointsHistoryMovementTemp (
	[PKID]					bigint NOT NULL,
    [ProgramID]             bigint NULL, 
    [CustomerPK]            bigint NULL, 
    [Amount]                decimal(12,3) NULL, 
    [EarnedUnderROID]       int NULL, 
    [EarnedUnderCMOfferID]  bigint NULL, 
    [CustomerTypeID]        int NULL, 
    [LogixTransNum]         char(36) NULL, 
    [ServerSerial]          int NULL, 
    [SourceTypeID]          int NULL, 
    [EarnedLocationID]      bigint NULL, 
    [PresentedCustomerID]   nvarchar(400) NULL, 
    [PresentedCardTypeID]   int NULL, 
    [ResolvedCustomerID]    nvarchar(400) NULL, 
    [HHID]                  nvarchar(400) NULL,
    [Replayed]              bit NULL,
    [ReplayedDate]          datetime NULL,
    [POSTimeStamp]			datetime NULL,
    [AdjustmentSourceID]	int NULL,
    [AdjustmentTypeID]		smallint NULL,
    [AdjustmentReasonID]	int NULL,
    [AdjustmentReasonText]	nvarchar(50) NULL
    );       
  TRUNCATE TABLE #PointsHistoryMovementTemp
  
  -- run for up to 5 minutes 
  WHILE @RunAgain=1 AND @StartTime>dateadd(mi, -5, getdate()) 
  BEGIN

	Insert into #PointsHistoryMovementTemp 
        (PKID, ProgramID, CustomerPK, Amount, EarnedUnderROID, CustomerTypeID, LogixTransNum, ServerSerial, SourceTypeID, EarnedLocationID, PresentedCustomerID, PresentedCardTypeID, 
            ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText )    
      select top (@ChunkSize)
			PKID,
            ProgramID, 
            CustomerPK, 
            Amount, 
            EarnedUnderROID, 
            CustomerTypeID, 
            LogixTransNum,             
            ServerSerial,   
            SourceTypeID, 
            EarnedLocationID,                                             
            PresentedCustomerID, 
            PresentedCardTypeID, 
            ResolvedCustomerID, 
            HHID , 
			Replayed,
            ReplayedDate,
            POSTimeStamp,
            AdjustmentSourceID,
            AdjustmentTypeID,
            AdjustmentReasonID,
            AdjustmentReasonText
      from CPE_PointHistoryMovementTemp 
      -- where WaitingACK = @thread_WaitingACK;
	  IF ( @@ROWCOUNT < @ChunkSize ) BEGIN
		set @RunAgain = 0;    
	  END
	  ELSE BEGIN      
		SET @RunAgain = 1;    
	  END
	
	DECLARE @MaxPKID bigint
	SELECT @MaxPKID=Max(PKID) FROM #PointsHistoryMovementTemp;
	
	BEGIN TRAN T_MovePointHistory
	BEGIN TRY
		
		DECLARE @InsertCount int
		DECLARE @DeleteCount int
		
		-- Update Points history
		insert into PointsHistory with (RowLock) 
		  (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, LogixTransNum, LastUpdate, LastServerID, LocationID, SourceTypeID, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText )     
		  select ProgramID, PHMT.CustomerPK, Amount, EarnedUnderROID, LogixTransNum, getdate() as LastUpdate, ServerSerial as LastServerID, EarnedLocationID as LocationID, SourceTypeID, 
			PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID, ISNULL(CID.CardPK, 0), Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText 
			from #PointsHistoryMovementTemp As PHMT with (NoLock)
			LEFT JOIN CardIDs As CID with (NoLock) ON PHMT.HHID = CID.ExtCardID AND CID.CardTypeID = 1;
		SET @InsertCount = @@ROWCOUNT
		SET @RowsInserted = @RowsInserted + @InsertCount
		
		-- remove data from CPE_UploadTemp_PA
		DELETE From [dbo].[CPE_PointHistoryMovementTemp] WHERE PKID<=@MaxPKID;
		SET @DeleteCount = @@ROWCOUNT
		
		IF @DeleteCount=@InsertCount
		BEGIN
			COMMIT Tran T_MovePointHistory;
		END
		ELSE
		BEGIN
			ROLLBACK TRAN T_MovePointHistory;
		END

    END TRY
    BEGIN CATCH 
		set @RowsInserted = -1
		-- We handle any errors that are caught, so there's no need to raise the message
		-- alarming the sysadmins. Leaving the code for possible debugging use.
		DECLARE @ErrorMessage NVARCHAR(4000);
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;
		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();    

		ROLLBACK TRAN T_MovePointHistory;

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);        
    END CATCH
	TRUNCATE TABLE #PointsHistoryMovementTemp
  END  -- end of while loop @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) 
GO

GRANT EXECUTE ON [dbo].[pa_PHMA_MovePointsHistory] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PPP_BackFill.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PPP_BackFill.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PPP_BackFill]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_PPP_BackFill]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_PPP_BackFill] @RunAgain int OUTPUT
AS 
  -- This procedure moves back-fills CustomerPK's and CardTypeID's into the PointsInsertTemp table (called by the ProcessPointsPrograms Agent)
  SET NOCOUNT ON;
  declare @StartTime as datetime;
  set @RunAgain=1;

  CREATE TABLE #PtsImportTemp ([ExternalID] nvarchar(400) , 
                               [ExtCardTypeID] nvarchar(26) , 
                               [CustomerPK] bigint, 
                               [CardTypeID] int, 
                               [CustomerTypeID] int NULL, 
                               [HHPK] bigint NULL, 
                               [ExtHHID] nvarchar(400) ,
                               [ResolvedCustomerID] nvarchar(400) );

  select @StartTime=getdate();
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin
    if not exists(select 1 from PointsInsertTemp where ProcessFlag=1) begin
      --set rowcount 2000;
      -- flag up to 2000 records as being in process
      Update TOP (2000) PointsInsertTemp set ProcessFlag=1 where ProcessFlag=0;
      --set rowcount 0;
    end
    Insert into #PtsImportTemp (ExternalID, ExtCardTypeID) select ExternalID, ExtCardTypeID from PointsInsertTemp where ProcessFlag=1;
    if @@Rowcount=0 begin
      -- There are no records to process, so we are all done
      set @RunAgain=0; 
    end
    else begin  -- there are some rows in the temp table that need to be processed

      -- Get the CustomerPK's and CardTypeID's
      Update #PtsImportTemp set CustomerPK=CID.CustomerPK, CardTypeID=CID.CardTypeID 
        from CardIDs as CID with (NoLock) Inner Join CardTypes as CT with (NoLock) on CID.CardTypeID=CT.CardTypeID 
        Inner Join #PtsImportTemp as Temp with (NoLock) on Temp.ExternalID=CID.ExtCardID and Temp.ExtCardTypeID=CT.ExtCardTypeID;

      -- Get the CustomerTypeID's and HHPK's
      Update #PtsImportTemp set CustomerTypeID=C.CustomerTypeID, HHPK=C.HHPK 
        from Customers as C with (NoLock) Inner Join #PtsImportTemp on #PtsImportTemp.CustomerPK=C.CustomerPK;

      -- Get the external household ID's
      Update #PtsImportTemp set ExtHHID=CID.ExtCardID  
        from CardIDs as CID with (NoLock) Inner Join #PtsImportTemp on #PtsImportTemp.CustomerPK=CID.CustomerPK and CID.CardTypeID=1;
        
      -- Get the ResolvedCustomerID's
      Update #PtsImportTemp set ResolvedCustomerID=CID.ExtCardID  
        from CardIDs as CID with (NoLock) Inner Join #PtsImportTemp on #PtsImportTemp.CustomerPK=CID.CustomerPK and CID.CardTypeID=0;

      -- Now back-fill the PointsInsertTemp table
      Update PointsInsertTemp set CustomerPK=Temp.CustomerPK, CardTypeID=Temp.CardTypeID, CustomerTypeID=Temp.CustomerTypeID, HHPK=Temp.HHPK, 
                                  ExtHHID=isnull(Temp.ExtHHID, ''), ResolvedCustomerID=isnull(Temp.ResolvedCustomerID, '')
        from #PtsImportTemp as Temp with (NoLock) Inner Join PointsInsertTemp with (NoLock) 
               on PointsInsertTemp.ExternalID=Temp.ExternalID and PointsInsertTemp.ExtCardTypeID=Temp.ExtCardTypeID 
              where PointsInsertTemp.ProcessFlag=1;

      Truncate table #PtsImportTemp
      Update PointsInsertTemp set ProcessFlag=2 where ProcessFlag=1;
    end

  end -- while
  drop table #PtsImportTemp

GO

GRANT EXECUTE ON [dbo].[pa_PPP_BackFill] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PointsAdj_CrossShop.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PointsAdj_CrossShop.StoredProcedure.sql 108207 2017-01-11 12:08:30Z gs250217 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PointsAdj_CrossShop]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_PointsAdj_CrossShop]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Expects that #PointsAdjTemp has already been defined and filled. See below
-- for details.
-- 
CREATE PROCEDURE [dbo].[pa_PointsAdj_CrossShop] @CmInstalled bit, @CleanupQuery nvarchar(1000)
AS          

  -- This stored procedure processes points adjustments for cross shopping.  
  -- 
  -- This stored procedure is called by the pa_PointsProgImport and 
  -- pa_CPE_TUA_PointsAdj stored procedures
  -- 
  -- Before calling this stored procedure, a temporary table with the following structure 
  -- should be created and populated with the data to be cross shopped:
  --   CREATE TABLE #PointsAdjTemp (
  --     [ProgramID]             bigint NULL, 
  --     [CustomerPK]            bigint NULL, 
  --     [Amount]                decimal(12,3) NULL, 
  --     [EarnedUnderROID]       int NULL, 
  --     [EarnedUnderCMOfferID]  bigint NULL, 
  --     [CustomerTypeID]        int NULL, 
  --     [LogixTransNum]         char(36) NULL, 
  --     [ServerSerial]          int NULL, 
  --     [LocationID]            bigint NULL, 
  --     [SourceTypeID]          int NULL, 
  --     [EarnedLocationID]      bigint NULL, 
  --     [PresentedCustomerID]   nvarchar(26) NULL, 
  --     [PresentedCardTypeID]   int NULL, 
  --     [ResolvedCustomerID]    nvarchar(26) NULL, 
  --     [HHID]                  nvarchar(26) NULL,
  --     [Replayed]              bit NULL,
  --     [ReplayedDate]          datetime NULL,
  --     [POSTimeStamp]          datetime NULL,
  --     [IPLSeqNum]             int NULL
  --     );  

  CREATE TABLE #NewPointsRows (
   [PromoVarID] bigint NULL, 
   [CustomerPK] bigint NULL,
   [ProgramID]  bigint NULL,
   [Amount]     decimal(12,3) NULL
  );  

  CREATE TABLE #PointsSum (
   [ProgramID]  bigint NULL, 
   [CustomerPK] bigint NULL, 
   [Amount]     decimal(12,3) NULL
  );  

  -- Populate #NewPointsRows table outside of Transaction
  INSERT INTO #NewPointsRows (PromoVarID, CustomerPK, ProgramID, Amount)
  SELECT DISTINCT PV.PromoVarID, PA.CustomerPK, PA.ProgramID, 0 
  FROM #PointsAdjTemp as PA with (NoLock) 
    LEFT JOIN PromoVariables as PV with (NoLock) on PA.ProgramID=PV.LinkID and PV.VarTypeID=3
    LEFT JOIN Points as P with (NoLock) on PA.ProgramID=P.ProgramID and P.CustomerPK=PA.CustomerPK
    WHERE P.CustomerPK is Null 

  -- Populate #PointsSum table outside of the transaction 
  INSERT INTO #PointsSum (ProgramID, CustomerPK, Amount) 
    SELECT ProgramID, CustomerPK, sum(Amount) 
      FROM #PointsAdjTemp 
      GROUP BY ProgramID, CustomerPK
  
  BEGIN TRAN T1
  BEGIN TRY

    -- create any necessary Points records
    INSERT INTO Points( PromoVarID, CustomerPK, ProgramID, Amount ) 
      SELECT PromoVarID, CustomerPK, ProgramID, Amount
        FROM #NewPointsRows
    
    -- update the balance in the Points table    
    UPDATE P with (RowLock) 
      SET P.Amount = P.Amount + PS.Amount, P.Version = IsNull(P.Version, 0) + 1
      FROM Points P
      INNER JOIN #PointsSum PS on PS.ProgramID=P.ProgramID and PS.CustomerPK = P.CustomerPK

    -- Updating PointsHistory is now the responsibiltiy of the caller.
    -- PointsHistory processing has been de-coupled from cross-shopping.
    
    -- Update customers "UpdateCount" if CM installed    
    if @CmInstalled = 1 begin    
      update Customers with (RowLocK) set UpdateCount = UpdateCount + 1 where CustomerPK in     
        (select distinct CustomerPK from #PointsAdjTemp with (NoLock));    
    end    
    
    -- Move PointsAdjTemp records to CPE_PointsAdj_Output    
    Insert into CPE_PointsAdj_Output with (RowLock) ( ProgramID, CustomerPK, AdjAmount, LastUpdate, WaitingACK, TargetLocationID, Replayed, ReplayedDate, POSTimeStamp, Version ) 
      select 
        BT.ProgramID, BT.CustomerPK, BT.Amount, getdate() as LastUpdate, 0 as WaitingACK, CL.LocationID as TargetLocationID, BT.Replayed, BT.ReplayedDate, BT.POSTimeStamp, P.Version
        from #PointsAdjTemp as BT with(NoLock) 
          Inner Join Points as P with (NoLock) 
            on P.ProgramID=BT.ProgramID and P.CustomerPK=BT.CustomerPK
          Inner Join CustomerLocations as CL with (NoLock) 
            on BT.CustomerPK=CL.CustomerPK and (BT.CustomerTypeID=0 or BT.CustomerTypeID=1)  -- only cross-shop Card and Household type points    
			 where ((BT.LocationID<>CL.LocationID) )
    -- Run a caller-defined cleanup query.
    EXEC dbo.sp_executesql @statement = @CleanupQuery
    
  END TRY
  BEGIN CATCH 
    IF @@TRANCOUNT > 0 
    BEGIN
      -- We handle any errors that are caught, so there's no need to raise the message
      -- alarming the sysadmins. Leaving the code for possible debugging use.
      --DECLARE @ErrorMessage NVARCHAR(4000);
      --DECLARE @ErrorSeverity INT;
      --DECLARE @ErrorState INT;
      --SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();    
      --RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
      ROLLBACK TRAN T1
    END
  END CATCH

  IF @@TRANCOUNT > 0 
    COMMIT TRAN T1;

  DROP TABLE #NewPointsRows
  DROP TABLE #PointsSum

GO    

GRANT EXECUTE ON [dbo].[pa_PointsAdj_CrossShop] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pa_PointsProgImport.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PointsProgImport.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PointsProgImport]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_PointsProgImport]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_PointsProgImport] @ProgramID bigint, @CmInstalled bit, @RunAgain int Output, @TotalAffected int Output
AS      
  -- This procedure moves PointsAdj records from CPE_UploadTemp_PA    
  declare @NumRecs int;    
  set nocount on;    
  declare @StartTime datetime;    
  declare @NumRows as int;
  set @RunAgain = 1;    
  set @StartTime = getdate();    
  set @TotalAffected=0;
    
  CREATE TABLE #PointsAdjTemp (
    [ProgramID]             bigint NULL, 
    [CustomerPK]            bigint NULL, 
    [Amount]                decimal(12,3) NULL, 
    [EarnedUnderROID]       int NULL, 
    [EarnedUnderCMOfferID]  bigint NULL, 
    [CustomerTypeID]        int NULL, 
    [LogixTransNum]         char(36) NULL, 
    [ServerSerial]          int NULL, 
    [LocationID]            bigint NULL, 
    [SourceTypeID]          int NULL, 
    [EarnedLocationID]      bigint NULL, 
    [PresentedCustomerID]   nvarchar(400) NULL, 
    [PresentedCustomerIDOriginal]   nvarchar(400) NULL, 
    [PresentedCardTypeID]   int NULL, 
    [ResolvedCustomerID]    nvarchar(400) NULL, 
    [HHID]                  nvarchar(400) NULL,
    [Replayed]              bit NULL,
    [ReplayedDate]          datetime NULL,
    [POSTimeStamp]          datetime NULL,
    [IPLSeqNum]             int NULL,
    [AdjustmentSourceID]    [int] NULL,
    [AdjustmentTypeID]      [smallint] NULL,
    [AdjustmentReasonID]    [int] NULL,
    [AdjustmentReasonText]  [nvarchar](20) NULL
    );

  -- RunStates
  -- ID | Temp table | Action
  ----------------------------
  --  0 | Empty      | Fill Temp Table
  --  1 | Filled     | Cross-shop
  --  2 | Filled     | Points History Processing
  --  3 | Filled     | Clear Temp Table
  declare @RunState as int;
  set @RunState = 0

  -- Determine the start state
  select @NumRecs = count(*) from PointsInsertTemp with (NoLock) where ProcessFlag=1;
  if @NumRecs > 0 begin
    set @RunState = 1
  end
  else begin
    select @NumRecs = count(*) from PointsInsertTemp with (NoLock) where ProcessFlag=2;
    if @NumRecs > 0 begin
      set @RunState = 2
    end
    else
    begin
      set @RunState = 0
    end
  end

  If @RunState > 0 Begin
    -- There are partially processed records.
      Insert into #PointsAdjTemp 
          (ProgramID, CustomerPK, Amount, EarnedUnderROID, CustomerTypeID, LogixTransNum, ServerSerial, LocationID, SourceTypeID, EarnedLocationID, PresentedCustomerID, PresentedCustomerIDOriginal, PresentedCardTypeID, 
              ResolvedCustomerID, HHID, Replayed, ReplayedDate, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText )
        select 
              @ProgramID as ProgramID, CustomerPK, AdjAmount as Amount, 0 as EarnedUnderROID, CustomerTypeID, '' as LogixTransNum, -13 as ServerSerial, 
              -13 LocationID, 0 as SourceTypeID, -13 as EarnedLocationID, ExternalID as PresentedCustomerID, ExternalIDOriginal as PresentedCustomerIDOriginal, ExtCardTypeID as PresentedCardTypeID, ResolvedCustomerID, 
              ExtHHID as HHID, 0 as  Replayed, NULL as ReplayedDate, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText
        from PointsInsertTemp where ProcessFlag = @RunState;  
  End

  
  -- run for up to 5 minutes    
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin    
    
    declare @BatchComplete as bit
    set @BatchComplete = 0

    -- State 0 (prep)
    If @RunState = 0 Begin
      -- Insert records into the temp table (ProcessFlag = 1)

      --set rowcount 1800;
      Update TOP (1800) PointsInsertTemp with (RowLock) set ProcessFlag=1 where ProcessFlag=0;
      --set rowcount 0;

      Insert into #PointsAdjTemp 
          (ProgramID, CustomerPK, Amount, EarnedUnderROID, CustomerTypeID, LogixTransNum, ServerSerial, LocationID, SourceTypeID, EarnedLocationID, PresentedCustomerID, PresentedCustomerIDOriginal, PresentedCardTypeID, 
              ResolvedCustomerID, HHID, Replayed, ReplayedDate, IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText )
        select 
              @ProgramID as ProgramID, CustomerPK, AdjAmount as Amount, 0 as EarnedUnderROID, CustomerTypeID, '' as LogixTransNum, -13 as ServerSerial, 
              -13 LocationID, 0 as SourceTypeID, -13 as EarnedLocationID, ExternalID as PresentedCustomerID, ExternalIDOriginal as PresentedCustomerIDOriginal, ExtCardTypeID as PresentedCardTypeID, ResolvedCustomerID, 
              ExtHHID as HHID, 0 as  Replayed, NULL as ReplayedDate, 0 as IPLSeqNum, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText
        from PointsInsertTemp where ProcessFlag=1;
      set @NumRows=@@RowCount;
      set @TotalAffected=@TotalAffected+@NumRows;
      if ( @NumRows=0 ) begin
        -- No need to continue. No rows to process.
        set @RunAgain = 0;
      end    

      set @RunState = 1
    End
    -- State 1
    Else If @RunState = 1 Begin
      -- Process points cross-shopping, all-or-nothing (ProcessFlag = 2)
      exec pa_PointsAdj_CrossShop @CMInstalled, 'Update PointsInsertTemp set ProcessFlag=2 where ProcessFlag=1'
      --exec pa_PointsAdj_CrossShop @CMInstalled, 'RAISERROR(''Test error'', 18, 1)'
      -- Do not advance the state if there is an error.
      IF NOT EXISTS (SELECT 1 FROM PointsInsertTemp WHERE ProcessFlag=1)
        set @RunState = 2
    End
    -- State 2
    Else If @RunState = 2 Begin
      -- Process points history, all-or-nothing (ProcessFlag = 3)
      -- When PointsHistory is separated from LogixXS, this will need to be an entirely separate stored proc.

      BEGIN TRAN T1
      Begin Try
        insert into PointsHistory with (RowLock) 
          (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, LogixTransNum, LastUpdate, LastServerID, LocationID, SourceTypeID, PresentedCustomerID, PresentedCustomerIDOriginal, PresentedCardTypeID, ResolvedCustomerID, HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText )     
          select ProgramID, PAT.CustomerPK, Amount, EarnedUnderROID, LogixTransNum, getdate() as LastUpdate, ServerSerial as LastServerID, EarnedLocationID, SourceTypeID, 
            PresentedCustomerID, PresentedCustomerIDOriginal, PresentedCardTypeID, ResolvedCustomerID, ISNULL(CID.CardPK, 0), Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText 
            from #PointsAdjTemp As PAT with (NoLock)
            LEFT JOIN CardIDs As CID with (NoLock) ON PAT.HHID = CID.ExtCardID AND CID.CardTypeID = 1;
        UPDATE PointsInsertTemp SET ProcessFlag=3 WHERE ProcessFlag=2
        COMMIT TRAN T1
        -- Only advance the state if the commit happened.
        set @RunState = 3
      End Try
      Begin Catch
        ROLLBACK TRAN T1
      End Catch
    End
    -- State 3 (cleanup)
    Else If @RunState = 3 Begin
        TRUNCATE TABLE #PointsAdjTemp;
        set @RunState = 0
    End

  end  -- while    
  drop table #PointsAdjTemp;
GO

GRANT EXECUTE ON [dbo].[pa_PointsProgImport] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PointsSVExport.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PointsSVExport.StoredProcedure.sql 136920 2019-05-06 18:07:50Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_PointsSVExport]    Script Date: 12/27/2010 15:13:12 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.pa_PointsSVExport') AND type in (N'P', N'PC'))
	DROP PROCEDURE dbo.pa_PointsSVExport
GO

CREATE PROCEDURE dbo.pa_PointsSVExport  				
														@StepNumber		SMALLINT 		
														, @Message 		VARCHAR(8000) 	OUTPUT
														, @Status 		BIT				OUTPUT
AS

	/*
		Purpose		:	For given NodeID & ProductGroupID, if there are any changes in the product associations, make sure ProdGroupItems table is updated with them.
		
		Process		:	Since anything touching PGI tables needs to e efficient, we redesigned this SP to be light & repeatable incrementablly.
						Each step is designed to be able to re-run it. If it is a valid execution, then work is performed. If not, then safely exists with appropriate OUTPUT variables.
						Step1 & Step2 are primary sections. Each section has its comments, please read and understand thoroughly before making any code changes.
		
	*/
BEGIN TRY	

    SET NOCOUNT ON
		
    SELECT 	  @Message	= '', @Status = 0
	 

	-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	--
	--	This is Step 1	:		Create Temp Table to hold Every Card IN passed range Range
	--							
	-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
    IF @StepNumber = 1
	BEGIN  
		
		IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsSvExportAgentTemp]') AND type in (N'U'))
		
			BEGIN
				Create Table PointsSvExportAgentTemp
				(
					   ExtCardID NVarChar(400) 
					   -- , CardTypeID Int 
					 , Constraint PK_PointsSvExportAgentTemp Primary Key Clustered(ExtCardID
					   --,CardTypeID
					   ) With(Pad_Index = Off, Statistics_NoRecompute = Off, Ignore_Dup_Key = Off, Allow_Row_Locks = On, Allow_Page_Locks = On) On [PRIMARY]
				)
				On [PRIMARY];
			        
				SELECT @Message = 'Step 1 Complete: Created temp table.';
				Select @Status = 1
			END
		Else
			BEGIN
				TRUNCATE TABLE PointsSvExportAgentTemp
				SELECT @Message = 'Step 1 Complete: Truncated temp table.';
				Select @Status = 1
			END
	END     


	-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	--
	--	This is Step 2	:		In this step, the data from global temporary table are INSERTED INTo ProdGroupItems table in 2000 sized chunks in a WHILE loop.
	--							
	--							The seemingly complicated logic below is to make sure that the process "picks-up-from-where-it-left-off" when different exception disaster situations happen.
	--							As long as the data in the temp table exists, then contine the work from previous successful step (based on 'Procesed' flag)
	--							
	-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	IF @StepNumber = 2
	BEGIN

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		--
		--	Exporting the Points balance for customers
		--	
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
		Select P.ProgramID, Sum(p.Amount) As Balance
		From Points As P With(NoLock)
		Where Exists (Select 1
									 From dbo.CardIDs As Cd With (NoLock)
								   Inner Join dbo.PointsSvExportAgentTemp As pt
									   On (pt.ExtCardID = cd.ExtCardID)
								   Where P.CustomerPK = Cd.CustomerPK)
		Group By P.ProgramID;

		
		SELECT @Message = 'Step 2 Complete: Points balance for customers - Returned ' + CAST(@@ROWCOUNT as varchar(10)) +' rows.';
		Select @Status = 1
	
	END
	
	IF @StepNumber = 3
	BEGIN
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		--
		--	Exporting the Stored Value balance for customers
		--	
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
		Select S.SVProgramID, S.ExpireDate, IsNull(Sum(S.QtyEarned), 0) - IsNull(Sum(S.QtyUsed), 0) As SVBalance
		From StoredValue As S
		Where Exists 
							 (Select 1
								   From dbo.CardIDs As Cd With(NoLock)
								Inner Join PointsSvExportAgentTemp As pt
								   On (pt.ExtCardID = cd.ExtCardID)
								Where  S.CustomerPK = Cd.CustomerPK)
		   And s.ExpireDate >= Getdate()       
		   And s.Deleted = 0
		Group By S.SVProgramID, S.ExpireDate;

		
		SELECT @Message = 'Step 3 Complete: Stored Value balance for customers - Returned ' + CAST(@@ROWCOUNT as varchar(10)) +' rows.';
		Select @Status = 1
	
	END

	IF @StepNumber = 4
	BEGIN
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
		--
		--	Delete Temp Table once data is returned. 
		--	
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
		IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PointsSvExportAgentTemp]') AND type in (N'U'))		
		BEGIN			
			DROP TABLE PointsSvExportAgentTemp			
		END
		SELECT @Message = 'Step 4 Complete: Dropped Table PointsSvExportAgentTemp.';		
		Select @Status = 1
	
	END

	
END TRY
BEGIN CATCH


	SELECT @Message = 	'Error Occured in step : ' + CONVERT(VARCHAR, @StepNumber) + CHAR(9) + 
						'Error Number : ' + CONVERT(VARCHAR, ERROR_NUMBER()) + CHAR(13) + CHAR(10) + 
						'Error Message: ' + CONVERT(VARCHAR, ERROR_MESSAGE())
			,@Status = 0
						
			 

END CATCH
GO




print 'processing storedprocedures/dbo.pa_Points_Migrate.sql'; 
--
GO
-- $Id: dbo.pa_Points_Migrate.StoredProcedure.sql 32583 2013-09-05 20:22:15Z jj250009 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Points_Migrate]    Script Date: 09/05/2013 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Points_Migrate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Points_Migrate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Points_Migrate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Points_Migrate]
 @FromProgramID bigint,
 @ToProgramID bigint,
 @ToPromoVarID bigint,
 @UpdateCount int output,
 @HistUpdateCount int output,
 @RunAgain int output
AS 
  set nocount on;

  declare @HistrunAgain int;
  declare @TempUpdateCount int;

  set @RunAgain = 1;
  set @UpdateCount = 0;
  set @HistUpdateCount = 0;

  CREATE TABLE #PointsTemp ([CustomerPK] bigint NULL, [Amount] decimal(15,3) NULL);

  --set rowcount 20;
  delete TOP (20) Points
      output DELETED.CustomerPK,
             DELETED.Amount
      into #PointsTemp
    from Points with(RowLock)
    where ProgramID = @FromProgramID;

  set @UpdateCount = @@ROWCOUNT;
  --set rowcount 0;
  if (@UpdateCount < 20) begin
    set @RunAgain=0;
  end

  if (@UpdateCount > 0) begin

    insert into Points with (RowLock)([PromoVarId], [CustomerPK], [Amount], [ProgramID])
      select @ToPromoVarID, CustomerPK, 0.0, @ToProgramID from #PointsTemp as PT with (NoLock)
      where not exists (select PKID from Points as P with (NoLock) where P.CustomerPK = PT.CustomerPK and P.ProgramID = @ToProgramID);

    update Points with (RowLock) set Amount = P.Amount + PT.Amount
      from Points as P
      inner join #PointsTemp as PT with (NoLock) on PT.CustomerPK = P.CustomerPK
      where P.ProgramID = @ToProgramID;

    set @HistRunAgain = 1;
    while @HistRunAgain = 1 begin
      --set rowcount 1800;
      update TOP (1800) PointsHistory with (RowLock) set ProgramId = @ToProgramID, SourceTypeID = 999
        from PointsHIstory as PH
        inner join #PointsTemp as PT with (NoLock) on PT.CustomerPK = PH.CustomerPK
        where PH.ProgramID = @FromProgramID;
      set @TempUpdateCount = @@ROWCOUNT;
      --set rowcount 0;
      set @HistUpdateCount = @HistUpdateCount + @TempUpdateCount;
      if (@TempUpdateCount < 1800) begin
        set @HistRunAgain = 0;
      end
    end -- while
  end else begin
    set @RunAgain=0;
  end
  drop table #PointsTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Points_Migrate] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProcCustGroups_Delete_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ProcCustGroups_Delete_GM.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ProcCustGroups_Delete_GM]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcCustGroups_Delete_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProcCustGroups_Delete_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcCustGroups_Delete_GM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_ProcCustGroups_Delete_GM] @CustomerGroupID bigint, @ExtInterfaceID int = null, @RunAgain int output
as 
  -- This procedure deletes group membership records found in GMInsertTemp from GroupMembership
  -- Invoked by ProcessCustomerGroups Agent
 
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRows int;
  set @MinutesElapsed=0;
  set @ProcessRows=1;
  set @RunAgain=0;
  select @StartTime=getdate();

  while @ProcessRows=1 begin
    --set rowcount 4800
    Update TOP (4800) GMInsertTemp set ProcessFlag=1 where ProcessFlag=0
    set @NumRows=@@Rowcount;
    if @NumRows=0 begin
      set @ProcessRows=0;
    end
    --set rowcount 0 

    if @ProcessRows=1 begin 
      -- remove any group membership records that are already marked as deleted
      delete GroupMembership with (RowLock) from GroupMembership as GM inner join Customers as CUST on CUST.CustomerPK = GM.CustomerPK
      inner join GMInsertTemp as GMT on GMT.CustomerPK = CUST.CustomerPK
      where GM.CustomerGroupID=@CustomerGroupID and GM.Deleted=1 and GMT.ProcessFlag=1;
      
      -- mark group membership records as deleted 
      update GroupMembership with (RowLock) set Deleted=1, LastUpdate=getdate(), ExtInterfaceID=@ExtInterfaceID
      from GroupMembership as GM 
      inner join Customers as CUST on CUST.CustomerPK = GM.CustomerPK
      inner join GMInsertTemp as GMT on GMT.CustomerPK = CUST.CustomerPK
      where GM.CustomerGroupID=@CustomerGroupID and GM.Deleted=0 and GMT.ProcessFlag=1; 
      
      Update GMInsertTemp set ProcessFlag=2 where ProcessFlag=1;
    end

    select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
    if @MinutesElapsed>=5 begin
      set @ProcessRows=0; 
      if @NumRows>0 begin 
        set @RunAgain=1;      
      end
    end

  end --while ProcessRows=1

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ProcCustGroups_Delete_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProcCustGroups_Insert_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ProcCustGroups_Insert_GM.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ProcCustGroups_Insert_GM]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcCustGroups_Insert_GM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProcCustGroups_Insert_GM]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcCustGroups_Insert_GM]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_ProcCustGroups_Insert_GM] @CustomerGroupID bigint, @ExtInterfaceID int = null, @RunAgain int output, @SendToTransDownload bit = 0
as 
  -- This procedure moves group membership records from GMInsertTemp to GroupMembership
  -- Invoked by ProcessCustomerGroups Agent
 
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRows int;
  set @MinutesElapsed=0;
  set @ProcessRows=1;
  set @RunAgain=0;
  select @StartTime=getdate();

  while @ProcessRows=1 begin
    --set rowcount 4800
    Update TOP (4800) GMInsertTemp set ProcessFlag=1 where ProcessFlag=0
    set @NumRows=@@Rowcount;
    if @NumRows=0 begin
      set @ProcessRows=0;
    end
    --set rowcount 0 

    if @SendToTransDownload = 0
    begin
      if @ProcessRows=1 begin  
        insert into GroupMembership (CustomerPK, CustomerGroupID, Manual, LastUpdate, Deleted, CMOAStatusFlag,TCRMAStatusFlag, ExtInterfaceID) 
          select CustomerPK, @CustomerGroupID as CustomerGroupID, 0 as Manual, getdate() as LastUpdate,
            0 as Deleted,  0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, @ExtInterfaceID as ExtInterfaceID 
          from GMInsertTemp
          where ProcessFlag=1;
        
        Update GMInsertTemp set ProcessFlag=2 where ProcessFlag=1;
      end
    end
    else
    begin
      if @ProcessRows=1 begin  
        insert into GroupMembership (CustomerPK, CustomerGroupID, Manual, LastUpdate, Deleted, CMOAStatusFlag,TCRMAStatusFlag, ExtInterfaceID) 
          select CustomerPK, @CustomerGroupID as CustomerGroupID, 1 as Manual, getdate() as LastUpdate, 0 as Deleted,  0 as CMOAStatusFlag,  0 as TCRMAStatusFlag, @ExtInterfaceID as ExtInterfaceID 
          from GMInsertTemp
          where ProcessFlag=1;
        
        Update GMInsertTemp set ProcessFlag=2 where ProcessFlag=1;
      end
    end
    
    select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
    if @MinutesElapsed>=5 begin
      set @ProcessRows=0; 
      if @NumRows>0 begin 
        set @RunAgain=1;      
      end
    end

  end --while ProcessRows=1

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ProcCustGroups_Insert_GM] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProcessCustGroups_InsertUser.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessCustGroups_InsertUser]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProcessCustGroups_InsertUser]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessCustGroups_InsertUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_ProcessCustGroups_InsertUser]  @ExtCardID nVARCHAR (400), @CardTypeID int
AS   
BEGIN
    DECLARE @CustTypeId INT
    SELECT @CustTypeId = CustTypeID FROM CardTypes WHERE CardTypeID = @CardTypeID
    INSERT INTO Customers WITH (ROWLOCK) (InitialCardID, InitialCardTypeID, CustomerTypeID, CreatedDate) 
                                  VALUES (@ExtCardID, @CardTypeID,@CustTypeId,GETDATE())  
END  
    
'
END
GO
GRANT EXECUTE ON [dbo].[pa_ProcessCustGroups_InsertUser] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_ProcessCustGroups_InsertUsers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ProcessCustGroups_InsertUsers.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessCustGroups_InsertUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProcessCustGroups_InsertUsers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_ProcessCustGroups_InsertUsers] @RowsProcessed int OUTPUT, @RunAgain int OUTPUT
AS 
  SET NOCOUNT ON;
  DECLARE @ROWS_TO_PROCESS int
  SET     @ROWS_TO_PROCESS = 1800
  SET     @RowsProcessed = 0
  SET	  @RunAgain=1  
    
    -- Delete duplicate card if any
	;WITH CTE AS(
		SELECT ExternalID, CardTypeID,
		RN = ROW_NUMBER()OVER(PARTITION BY ExternalID,CardTypeID ORDER BY ExternalID)
		FROM dbo.GMInsertTemp
	)
	DELETE FROM CTE WHERE RN > 1
	--End Duplicate delete
    Insert Into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, CreatedDate,InitialCardIDOriginal) 
    select distinct top( @ROWS_TO_PROCESS ) GMIT.ExternalID as InitialCardID,  GMIT.CardTypeID as InitialCardTypeID, CT.CustTypeID, getdate() as CreatedDate,GMIT.ExternalIDOriginal  
    from GMInsertTemp as GMIT with (NoLock) left join CardIDs as C with (NoLock) on GMIT.ExternalID=C.ExtCardID and C.CardTypeID=GMIT.CardTypeID  
    Inner Join CardTypes as CT with (NoLock) on CT.CardTypeID=GMIT.CardTypeID
    where C.ExtCardID is NULL; 
    
    set @RowsProcessed = @@RowCount
    
    if @RowsProcessed < 1800   
    begin  
      set @RunAgain = 0;  
    end
GO

GRANT EXECUTE ON [dbo].[pa_ProcessCustGroups_InsertUsers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProcessPointsPrograms_InsertUsers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ProcessPointsPrograms_InsertUsers.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessPointsPrograms_InsertUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProcessPointsPrograms_InsertUsers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_ProcessPointsPrograms_InsertUsers] @RunAgain int OUTPUT, @TotalAffected int OUTPUT
AS 
  SET NOCOUNT ON;
  declare @StartTime as datetime;
  set @RunAgain=1;
  set @TotalAffected=0;

  CREATE TABLE #PtsImportTemp ([ExternalID] nvarchar(400) NULL, [ExtCardTypeID] nvarchar(26) NULL, [ExternalIDOriginal] nvarchar(400) NULL);

  select @StartTime=getdate();  
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin  
    if not exists(select 1 from PointsInsertTemp where ProcessFlag=1) begin  
      --set rowcount 2000;  
      -- flag up to 2000 records as being in process  
      Update TOP (2000) PointsInsertTemp set ProcessFlag=1 where ProcessFlag=0;  
      --set rowcount 0;  
    end  
    Insert into #PtsImportTemp (ExternalID, ExtCardTypeID, ExternalIDOriginal) select distinct ExternalID, ExtCardTypeID, ExternalIDOriginal from PointsInsertTemp where ProcessFlag=1;  
    if @@Rowcount=0 begin  
      -- There are no records to process, so we are all done  
      set @RunAgain=0;   
    end  
    else begin  -- there are some rows in the temp table that we need to make sure exist in Customers and CardIDs  
      -- Create records in the CardID's table where the ExtCardID/CardTypeID don't exist, but DO exist as InitialCardID/CardTypeID in Customers  
      Insert Into CardIDs with (RowLock) (CustomerPK, ExtCardID, CardStatusID, CardTypeID, ExtCardIDOriginal)     
      select C.CustomerPK, PIT.ExternalID, 1 as CardStatusID, CT.CardTypeID, PIT.ExternalIDOriginal AS ExtCardIDOriginal
        from #PtsImportTemp as PIT Inner Join Customers as C with (NoLock) on PIT.ExternalID=C.InitialCardID and PIT.ExtCardTypeID=C.InitialCardTypeID  
        Inner Join CardTypes as CT on PIT.ExtCardTypeID=CT.ExtCardTypeID  
        where not exists(select 1 from CardIDs as CID with(NoLock) where CID.ExtCardID=PIT.ExternalID and CID.CardTypeID=CT.CardTypeID)    
      set @TotalAffected=@TotalAffected+@@RowCount;  
         
      -- Create records in the Customers (and subsequently CardID's via the trigger) where the ExtCardID/CardTypeID don't exist in the CardID's table  
      Insert Into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, CreatedDate, InitialCardIDOriginal)     
      select PIT.ExternalID as InitialCardID, CT.CardTypeID as InitialCardTypeID, CT.CustTypeID as CustomerTypeID, GetDate() as CreatedDate, PIT.ExternalIDOriginal AS InitialCardIDOriginal
        from #PtsImportTemp as PIT Inner Join CardTypes as CT with (NoLock) on PIT.ExtCardTypeID=CT.ExtCardTypeID  
        Left Join CardIDs as CID with (NoLock) on CID.ExtCardID=PIT.ExternalID and CID.CardTypeID=CT.CardTypeID  
        where CID.CardPK is NULL  
      set @TotalAffected=@TotalAffected+@@RowCount;  
    end  -- Inserted rowcount=0  
      
    -- Update the flag on the records we've been working with so that we know processing on these has been completed  
    Update PointsInsertTemp set ProcessFlag=2 where ProcessFlag=1;  
    Truncate table #PtsImportTemp  
    
  end -- while loop
  drop table #PtsImportTemp

GO

GRANT EXECUTE ON [dbo].[pa_ProcessPointsPrograms_InsertUsers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProcessPoints_InsertLMG.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ProcessPoints_InsertLMG.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ProcessPoints_InsertLMG]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessPoints_InsertLMG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProcessPoints_InsertLMG]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessPoints_InsertLMG]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_ProcessPoints_InsertLMG] @RunAgain int Output
AS 
  set nocount on;
  declare @StartTime datetime;
  set @RunAgain=1;
  set @StartTime=getdate();


  CREATE TABLE #CAMPtsTemp ([ROID] bigint NULL, [RewardQty] int NULL, [ProgramID] bigint NULL, [SourceTypeID] int NULL, [LocationID] int NULL, 
                            [LogixTransNum] char (36) NULL, [CustomerPK] bigint NULL, [ActionTypeID] tinyint NULL);

  -- run for up to 5 minutes
  WHILE @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) BEGIN
    BEGIN TRY 
      BEGIN TRANSACTION T1
      --set rowcount 1800;
      update TOP (1800) LMGImportTempForPoints set ProcessFlag=1 where ProcessFlag=0;  
      --set rowcount 0;
      Insert into #CAMPtsTemp (ROID, RewardQty, ProgramID, SourceTypeID, LocationID, LogixTransNum, CustomerPK, ActionTypeID)
        select ROID, RewardQty, ProgramID, SourceTypeID, LocationID, LogixTransNum, CustomerPK, ActionTypeID from LMGImportTempForPoints where ProcessFlag=1;
      IF (@@ROWCOUNT=0) BEGIN -- if no record left to process, set @RunAgain to 0.
        set @RunAgain=0; 
      END
      ELSE BEGIN -- otherwise, insert or update Points and insert to PointsHistory where ActionTypeID=1

        --- If PrimaryExtID not matched, report failure.
        insert into Points with (RowLock) (PromoVarID, CustomerPK, Amount, ProgramID)
         select distinct LMG.ProgramID as PromoVarID, LMG.CustomerPK, 0 as Amount, LMG.ProgramID
           from #CAMPtsTemp LMG 
           left join Points P on LMG.CustomerPK=P.CustomerPK and LMG.ProgramID=P.ProgramID
          where P.ProgramID IS NULL;

        -- update the balance in the Points table
        update Points set Amount=Amount+LMG.LMGAmount 
          from Points as P with (NoLock)
         inner join (select CustomerPK, ProgramID, CASE WHEN ActionTypeID=1 THEN sum(RewardQty) ELSE case when ActionTypeID=2 then sum(RewardQty*-1) end END as LMGAmount 
                       from #CAMPtsTemp as L with (NoLock) group by CustomerPK, ProgramID, ActionTypeID) LMG 
               on P.CustomerPK=LMG.CustomerPK and P.ProgramID=LMG.ProgramID; -- Update Points Table

        -- Track in Points history
        insert into PointsHistory with (RowLock) (CustomerPK, AdjAmount, EarnedUnderROID, ProgramID, LastUpdate, LastServerID, LocationID, LogixTransNum, SourceTypeID)
               select CustomerPK, CASE WHEN ActionTypeID=1 THEN RewardQty ELSE case when ActionTypeID=2 then (RewardQty*-1) end END as AdjAmount, 
                      ROID, ProgramID, getDate() as LastUpdate, -10 as LastServerID, -10 as LocationID, LogixTransNum, SourceTypeID
                 from #CAMPtsTemp; -- Insert into to PointsHistory Table

      END -- End If
      update LMGImportTempForPoints set ProcessFlag=2 where ProcessFlag=1; 
      Truncate Table #CAMPtsTemp; 

      COMMIT TRANSACTION  T1;
    END TRY
    BEGIN CATCH
      set @RunAgain=0;
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRANSACTION T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  END -- while
  drop table #CAMPtsTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ProcessPoints_InsertLMG] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProcessStoredValuesPrograms_InsertUsers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ProcessStoredValuesPrograms_InsertUsers.StoredProcedure.sql 6244 2012-11-09 17:35:15 JN185015 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessStoredValuesPrograms_InsertUsers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProcessStoredValuesPrograms_InsertUsers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_ProcessStoredValuesPrograms_InsertUsers] @RunAgain int OUTPUT, @TotalAffected int OUTPUT
AS 
  SET NOCOUNT ON;
  declare @StartTime as datetime;
  set @RunAgain=1;
  set @TotalAffected=0;

  CREATE TABLE #PtsImportTemp ([ExternalID] nvarchar(400) NULL, [ExtCardTypeID] nvarchar(26) NULL, [ExternalIDOriginal] nvarchar(400) NULL);

  select @StartTime=getdate();  
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin  
    if not exists(select 1 from StoredValuesInsertTemp where ProcessFlag=1) begin  
      --set rowcount 2000;  
      -- flag up to 2000 records as being in process  
      Update TOP (2000) StoredValuesInsertTemp set ProcessFlag=1 where ProcessFlag=0;  
      --set rowcount 0;  
    end  
    Insert into #PtsImportTemp (ExternalID, ExtCardTypeID, ExternalIDOriginal) select distinct ExternalID, ExtCardTypeID, ExternalIDOriginal from StoredValuesInsertTemp where ProcessFlag=1;  
    if @@Rowcount=0 begin  
      -- There are no records to process, so we are all done  
      set @RunAgain=0;   
    end  
    else begin  -- there are some rows in the temp table that we need to make sure exist in Customers and CardIDs  
      -- Create records in the CardID's table where the ExtCardID/CardTypeID don't exist, but DO exist as InitialCardID/CardTypeID in Customers  
      Insert Into CardIDs with (RowLock) (CustomerPK, ExtCardID, CardStatusID, CardTypeID, ExtCardIDOriginal)     
      select C.CustomerPK, PIT.ExternalID, 1 as CardStatusID, CT.CardTypeID, PIT.ExternalIDOriginal  
        from #PtsImportTemp as PIT Inner Join Customers as C with (NoLock) on PIT.ExternalID=C.InitialCardID and PIT.ExtCardTypeID=C.InitialCardTypeID  
        Inner Join CardTypes as CT on PIT.ExtCardTypeID=CT.ExtCardTypeID  
        where not exists(select 1 from CardIDs as CID with(NoLock) where CID.ExtCardID=PIT.ExternalID and CID.CardTypeID=CT.CardTypeID)    
      set @TotalAffected=@TotalAffected+@@RowCount;  
         
      -- Create records in the Customers (and subsequently CardID's via the trigger) where the ExtCardID/CardTypeID don't exist in the CardID's table  
      Insert Into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, CreatedDate, InitialCardIDOriginal)     
      select PIT.ExternalID as InitialCardID, CT.CardTypeID as InitialCardTypeID, CT.CustTypeID as CustomerTypeID, GetDate() as CreatedDate, PIT.ExternalIDOriginal  
        from #PtsImportTemp as PIT Inner Join CardTypes as CT with (NoLock) on PIT.ExtCardTypeID=CT.ExtCardTypeID  
        Left Join CardIDs as CID with (NoLock) on CID.ExtCardID=PIT.ExternalID and CID.CardTypeID=CT.CardTypeID  
        where CID.CardPK is NULL  
      set @TotalAffected=@TotalAffected+@@RowCount;  
    end  -- Inserted rowcount=0  
      
    -- Update the flag on the records we've been working with so that we know processing on these has been completed  
    Update StoredValuesInsertTemp set ProcessFlag=2 where ProcessFlag=1;  
    Truncate table #PtsImportTemp  
    
  end -- while loop
  drop table #PtsImportTemp

GO

GRANT EXECUTE ON [dbo].[pa_ProcessStoredValuesPrograms_InsertUsers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProgramBalances_Transfer.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ProgramBalances_Transfer.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ProgramBalances_Transfer]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProgramBalances_Transfer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ProgramBalances_Transfer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProgramBalances_Transfer]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_ProgramBalances_Transfer] @FromPK bigint, @ToPK bigint, @CPE_Installed bit
AS
  SET NOCOUNT ON;
  -- SV : swap the cardholder customerPK with the household one
  Update StoredValue with (RowLock) set CustomerPK = @ToPK
    where CustomerPK = @FromPK;
 
  -- SV : swap the cardholder customerPK with the household one
  Update SVHistory with (RowLock) set CustomerPK = @ToPK
        where CustomerPK = @FromPK;

  if @CPE_Installed = 1 begin
    -- Copy cross shopping records to CPE_SVupdated_Output for existing records
    insert into CPE_SVTransferred_Output with (RowLock) (LocalID, ServerSerial, OldCustomerPK, NewCustomerPK, LastUpdate, WaitingACK, TargetLocationID)
      select SV.LocalID, SV.ServerSerial, @FromPK, @ToPK, getdate(), 0 as WaitingACK, CL.LocationID as TargetLocationID
      from StoredValue as SV with (NoLock)
      inner join CustomerLocations as CL with (NoLock) on SV.CustomerPK=CL.CustomerPK
      where SV.CustomerPK = @ToPK
  end  
 
  -- POINTS : issue to the household
  insert into CPE_UploadTemp_PA (TableNum, Operation, Col1, Col2, Col3, Col4,
                   ServerSerial, LocationID, WaitingACK)
    select ''4'' as TableNum, ''1'' as Operation, ProgramID as Col1,
         @ToPK as Col2, IsNull(Amount,0) as Col3, 0 as Col4,
         -9 as ServerSerial, -9 as LocationID, 0 as WaitingACK
    from Points PT
    where PT.CustomerPK = @FromPK and IsNull(Amount,0) > 0;

  -- POINTS : revoke from cardholders
  insert into CPE_UploadTemp_PA (TableNum, Operation, Col1, Col2, Col3, Col4,
                   ServerSerial, LocationID, WaitingACK)
    select ''4'' as TableNum, ''1'' as Operation, ProgramID as Col1,
         @FromPK as Col2, -1 * IsNull(Amount,0) as Col3, 0 as Col4,
         -9 as ServerSerial, -9 as LocationID, 0 as WaitingACK
    from Points PT
    where PT.CustomerPK = @FromPK and IsNull(Amount,0) > 0    
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ProgramBalances_Transfer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PromoVarAgent_ResetAdvancedLimitVars.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PromoVarAgent_ResetAdvancedLimitVars.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_PromoVarAgent_ResetAdvancedLimitVars]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PromoVarAgent_ResetAdvancedLimitVars]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_PromoVarAgent_ResetAdvancedLimitVars]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PromoVarAgent_ResetAdvancedLimitVars]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_PromoVarAgent_ResetAdvancedLimitVars] @PromoVarID bigint, @RunAgain int OUTPUT
AS 
  SET NOCOUNT ON;
  DECLARE @NumRows as int;
  SET @NumRows=1;
  SET @RunAgain = 0;
  
  BEGIN TRY		
    BEGIN TRAN T1
      IF @NumRows>0
      BEGIN
        --set rowcount 1800; 
        update TOP (1800) CM_AdvancedLimitVariables set Amount=0 where PromoVarID=@PromoVarID and Amount>0;
        --set rowcount 0;
      END
    COMMIT TRAN T1;

    select @NumRows=count(*) from CM_AdvancedLimitVariables with (NoLock) where PromoVarID=@PromoVarID and Amount>0;
    
    IF @NumRows >= 1 SET @RunAgain = 1;
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 BEGIN
      ROLLBACK TRAN T1;
    END
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
      
    SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_PromoVarAgent_ResetAdvancedLimitVars] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PromoVarAgent_ResetDistVars.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PromoVarAgent_ResetDistVars.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_PromoVarAgent_ResetDistVars]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PromoVarAgent_ResetDistVars]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_PromoVarAgent_ResetDistVars]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PromoVarAgent_ResetDistVars]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_PromoVarAgent_ResetDistVars] @PromoVarID bigint, @RunAgain int OUTPUT
AS 
  SET NOCOUNT ON;
  declare @NumRows as int;
  set @NumRows=1;
  SET @RunAgain = 0;
  
  BEGIN TRY		
    BEGIN TRAN T1
      if @NumRows>0 begin
        --set rowcount 1800; 
        update TOP (1800) DistributionVariables set Amount=0 where PromoVarID=@PromoVarID and Amount>0;
        --set rowcount 0;
      end
    COMMIT TRAN T1;
    
    select @NumRows=count(*) from DistributionVariables with (NoLock) where PromoVarID=@PromoVarID and Amount>0;
          
    IF @NumRows >= 1 SET @RunAgain = 1;

  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 BEGIN
      ROLLBACK TRAN T1;
    END
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
      
    SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_PromoVarAgent_ResetDistVars] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PromoVarAgent_ResetRewardVars.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_PromoVarAgent_ResetRewardVars.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_PromoVarAgent_ResetRewardVars]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PromoVarAgent_ResetRewardVars]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_PromoVarAgent_ResetRewardVars]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PromoVarAgent_ResetRewardVars]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_PromoVarAgent_ResetRewardVars] @PromoVarID bigint, @RunAgain int OUTPUT
AS 
  SET NOCOUNT ON;
  DECLARE @NumRows as int;
  SET @NumRows=1;
  SET @RunAgain = 0;
  
  BEGIN TRY		
    BEGIN TRAN T1
      IF @NumRows>0
      BEGIN
        --SET ROWCOUNT 1800; 
        UPDATE TOP (1800) RewardLimitVariables SET Amount=0 WHERE PromoVarID=@PromoVarID AND Amount>0;
        --SET ROWCOUNT 0;
      END
    COMMIT TRAN T1;
    
    SELECT @NumRows=count(*) FROM RewardLimitVariables WITH (NoLock) WHERE PromoVarID=@PromoVarID AND Amount>0;
          
    IF @NumRows >= 1 SET @RunAgain = 1;
    
  END TRY
  BEGIN CATCH
    IF @@TRANCOUNT > 0 BEGIN
      ROLLBACK TRAN T1;
    END
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
      
    SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_PromoVarAgent_ResetRewardVars] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_CPE_CustomerLocks.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_CPE_CustomerLocks.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_CPE_CustomerLocks]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CPE_CustomerLocks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_CPE_CustomerLocks]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CPE_CustomerLocks]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_CPE_CustomerLocks] @DelMinutes int, @NumDeleted int output, @RunAgain int output
AS
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  delete TOP (1800) from CustomerLock with (RowLock) where LockedDate<dateadd(mi, @DelMinutes, getdate());

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_CPE_CustomerLocks] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_CustomerAttributes.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_CustomerAttributes.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_CustomerAttributes]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerAttributes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_CustomerAttributes]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerAttributes]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'create procedure  [dbo].[pa_Purge_CustomerAttributes] @NumDeleted int OUTPUT, @RunAgain int OUTPUT as

  set nocount on
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from CustomerAttributes with (RowLock) where LastUpdate>=(GETDATE() - 10) and Deleted=1;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_CustomerAttributes] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_CustomerEdits.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_CustomerEdits.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_CustomerEdits]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerEdits]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_CustomerEdits]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerEdits]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_CustomerEdits] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- This procedure removes all the CustomerEdit records that have a RunDate older than the DeleteDate provided
  -- invoked by DBPurgeAgent
  set nocount on
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  delete TOP (1800) from CustomerEdits with (RowLock) where LastUpdate<@DeleteDate;
  set @NumDeleted=@@RowCount;
  --set rowcount 0;
  if @NumDeleted=0 begin
    set @RunAgain=0;
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_CustomerEdits] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_CustomerInfoChanges.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_CustomerInfoChanges.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_CustomerInfoChanges]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerInfoChanges]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_CustomerInfoChanges]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerInfoChanges]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_CustomerInfoChanges] @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- This procedure removes all the CustomerInfoChanges records that have already been reported
  -- invoked by DBPurgeAgent
  set nocount on
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  delete TOP (1800) from CustomerInfoChanges with (RowLock) where ReportStatus=0;
  set @NumDeleted=@@RowCount;
  --set rowcount 0;
  if @NumDeleted=0 begin
    set @RunAgain=0;
  end


' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_CustomerInfoChanges] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_CustomerLocks.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_CustomerLocks.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_CustomerLocks]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerLocks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_CustomerLocks]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_CustomerLocks]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_CustomerLocks] @DelMinutes int, @NumDeleted int output, @RunAgain int output
AS
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  delete TOP (1800) from CustomerLock with (RowLock) where LockedDate<dateadd(mi, @DelMinutes, getdate());

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_CustomerLocks] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_InActivePointsHistory_by_Date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_InActivePointsHistory_by_Date.StoredProcedure.sql 27378 2011-03-14 17:56:18Z Lakshmi Y. $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_InActiveInActivePointsHistory_by_Date]    Script Date: 03/14/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_InActivePointsHistory_by_Date]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_InActivePointsHistory_by_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_InActivePointsHistory_by_Date]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_InActivePointsHistory_by_Date] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- This procedure deletes all the InActivePointsHistory records that have a LastUpdate less than or equal to the DeleteDate provided
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from InActivePointsHistory with (RowLock) where LastUpdate<=@DeleteDate;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_InActivePointsHistory_by_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_OCAMT_GM_Output_by_Date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_OCAMT_GM_Output_by_Date.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_OCAMT_GM_Output_by_Date]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_OCAMT_GM_Output_by_Date]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[pa_Purge_OCAMT_GM_Output_by_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_Purge_OCAMT_GM_Output_by_Date] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  SET NOCOUNT ON;
  set @RunAgain=1;
  
  DECLARE @IsPartitioned bit
  exec [dbo].[pc_IsPartitioned] 'OCAMT_GM_Output', @IsPartitioned OUTPUT
  -- If using partitioning
  IF @IsPartitioned = 1
  BEGIN
	SET @RunAgain = 0
	-- The partitioning version doesn't provide good compatibility with this option.
	-- It takes time to count up the records.
	SET @NumDeleted = 0
	
	DECLARE @HistoryWidth int
	DECLARE @Now datetime
	select @Now=getdate()
	SELECT @HistoryWidth=DATEDIFF(d, @DeleteDate, @Now)
	
	exec [dbo].[pc_PartitionMaintenance] 'OCAMT_GM_Output', @HistoryWidth
	RETURN
  END
  
  -- No partitioning
  
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from [dbo].[OCAMT_GM_Output] with (RowLock) where InsertTime<=@DeleteDate;

  set @NumDeleted=@@RowCount;
  if @NumDeleted<1800 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
GO
GRANT EXECUTE ON [dbo].[pa_Purge_OCAMT_GM_Output_by_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_OCAMT_GM_Sent_by_Date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_OCAMT_GM_Sent_by_Date.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_OCAMT_GM_Sent_by_Date]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_OCAMT_GM_Sent_by_Date]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_OCAMT_GM_Sent_by_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_Purge_OCAMT_GM_Sent_by_Date] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  SET NOCOUNT ON;
  set @RunAgain=1;
  
  DECLARE @IsPartitioned bit
  exec [dbo].[pc_IsPartitioned] 'OCAMT_GM_Sent', @IsPartitioned OUTPUT
  -- If using partitioning
  IF @IsPartitioned = 1
  BEGIN
	SET @RunAgain = 0
	-- The partitioning version doesn't provide good compatibility with this option.
	-- It takes time to count up the records.
	SET @NumDeleted = 0
	
	DECLARE @HistoryWidth int
	DECLARE @Now datetime
	select @Now=getdate()
	SELECT @HistoryWidth=DATEDIFF(d, @DeleteDate, @Now)
	
	exec [dbo].[pc_PartitionMaintenance] 'OCAMT_GM_Sent', @HistoryWidth
	RETURN
  END
  
  -- No partitioning

  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from OCAMT_GM_Sent with (RowLock) where InsertTime<=@DeleteDate;

  set @NumDeleted=@@RowCount;
  if @NumDeleted<1800 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
GO
GRANT EXECUTE ON [dbo].[pa_Purge_OCAMT_GM_Sent_by_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_PointsHistory_by_Date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_PointsHistory_by_Date.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_PointsHistory_by_Date]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_PointsHistory_by_Date]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_PointsHistory_by_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_Purge_PointsHistory_by_Date] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- This procedure deletes all the PointsHistory records that have a LastUpdate less than or equal to the DeleteDate provided
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  set @RunAgain=1;
  
  DECLARE @IsPartitioned bit
  exec [dbo].[pc_IsPartitioned] 'PointsHistory', @IsPartitioned OUTPUT
  -- If using partitioning
  IF @IsPartitioned = 1
  BEGIN
	SET @RunAgain = 0
	-- The partitioning version doesn't provide good compatibility with this option.
	-- It takes time to count up the records.
	SET @NumDeleted = 0
	
	DECLARE @HistoryWidth int
	DECLARE @Now datetime
	select @Now=getdate()
	SELECT @HistoryWidth=DATEDIFF(d, @DeleteDate, @Now)
	
	Declare @CountBeforeDeletion int
	Declare @CountAfterDeletion int
	Set @CountBeforeDeletion = (select COUNT(*) from PointsHistory)
	
	exec [dbo].[pc_PartitionMaintenance] 'PointsHistory', @HistoryWidth
	
	Set @CountAfterDeletion = (select COUNT(*) from PointsHistory)
	
	set @NumDeleted=@CountBeforeDeletion-@CountAfterDeletion; 
	
	RETURN
  END
  
  -- No partitioning
  
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from PointsHistory with (RowLock) where LastUpdate<=@DeleteDate;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
GO
GRANT EXECUTE ON [dbo].[pa_Purge_PointsHistory_by_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_SVFuelPartnerXref.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_SVFuelPartnerXref.StoredProcedure.sql 32583 2012-07-20 13:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_SVFuelPartnerXref]    Script Date: 07/20/2012 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_SVFuelPartnerXref]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_SVFuelPartnerXref]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_SVFuelPartnerXref]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_SVFuelPartnerXref] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- This procedure removes all the CM SV Fuel Partner Cross Reference records that have an ExpireDate older than the DeleteDate provided
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  declare @NumRows int
  BEGIN TRY    
    BEGIN TRAN T1

    set @RunAgain=1;
    --set rowcount 1800;  -- only delete 1800 records at a time
    Delete TOP (1800) from CM_FuelPartner_SV_Xref with (RowLock) where ExpireDate<@DeleteDate;
    set @NumDeleted=@@RowCount;
    --set rowcount 0;
    if @NumDeleted < 1800 begin
      set @RunAgain=0;
    end

    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    set @RunAgain=0;
    IF @@TRANCOUNT > 0 BEGIN
  ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;

      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_SVFuelPartnerXref] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_SVHistory.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_SVHistory.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_SVHistory]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_SVHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_SVHistory]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_SVHistory]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_SVHistory] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- This procedure removes all the SVHistory records that have an ExpiredDate older than the DeleteDate provided
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  declare @NumRows int
  BEGIN TRY    
    BEGIN TRAN T1

    set @RunAgain=1;
    --set rowcount 1800;  -- only delete 1800 records at a time
    Delete TOP (1800) from SVHistory with (RowLock) where ExpireDate<@DeleteDate;
    set @NumDeleted=@@RowCount;
    --set rowcount 0;
    if @NumDeleted=0 begin
      set @RunAgain=0;
    end

    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    set @RunAgain=0;
    IF @@TRANCOUNT > 0 BEGIN
  ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;

      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_SVHistory] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_StoredValue.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_StoredValue.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_StoredValue]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_StoredValue]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_StoredValue]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_StoredValue]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_StoredValue] @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- This procedure removes all the StoredValue records that have a status of Revoked, Expired, or Used, or the QtyUsed>=QtyEarned
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  declare @NumRows int
  BEGIN TRY    
    BEGIN TRAN T1

    set @RunAgain=1;
    --set rowcount 1800;  -- only delete 1800 records at a time
    Delete TOP (1800) from StoredValue with (RowLock) where StatusFlag in (2,3,4);
    set @NumDeleted=@@RowCount;
    Delete TOP (1800) from StoredValue with (RowLock) where QtyUsed>=QtyEarned;
    set @NumDeleted=@NumDeleted+@@RowCount;
    --set rowcount 0;
    if @NumDeleted=0 begin
      set @RunAgain=0;
    end

    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    set @RunAgain=0;
    IF @@TRANCOUNT > 0 BEGIN
  ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;

      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_StoredValue] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_StoredValueLocks.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_StoredValueLocks.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_StoredValueLocks]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_StoredValueLocks]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_StoredValueLocks]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_StoredValueLocks]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_StoredValueLocks]  @DelMinutes int, @NumDeleted int output, @RunAgain int output
AS
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  delete TOP (1800) from StoredValueLocks with (RowLock) where LockedDate<dateadd(mi, @DelMinutes, getdate());

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_StoredValueLocks] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_TrackableCoupons.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_TrackableCoupons.StoredProcedure.sql 32583 2013-11-07 20:22:15Z dp185082 $
-- Build Version: 7.3.1.138972

/****** Object:  StoredProcedure [dbo].[pa_Purge_TrackableCoupons]    Script Date: 10/30/2013 16:44:19 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_TrackableCoupons]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_TrackableCoupons]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_Purge_TrackableCoupons] 
  @TCPTable     TrackableCouponProgramTableType READONLY, 
  @NumDeleted   INT OUTPUT, 
  @RunAgain     INT OUTPUT
AS
  -- This stored procedure deletes trackabel coupon records from LogixXS.TrackableCoupons and LogixXS.TrackableCouponsCache.
  -- Coupons are deleted if they are orphans with no program determined by ProgramID.
  -- invoked by DBPurgeAgent

  SET NOCOUNT ON;
  SET @RunAgain = 1;
  --SET ROWCOUNT 1800;  -- only delete 1800 records at a time
  
  -- Delete coupons due to deleted programs from LogixXS.TrackableCouponsCache
  DELETE TOP (1800)
    TrackableCouponsCache WITH (ROWLOCK)
  FROM 
    TrackableCouponsCache TC
  LEFT JOIN 
    @TCPTable TCP 
  ON 
    TCP.ProgramID = TC.ProgramID
  WHERE 
    TCP.ProgramID IS NULL;

  SET @NumDeleted = @@RowCount;
  
  -- Delete coupons due to deleted programs from LogixXS.TrackableCoupons
  DELETE TOP (1800)
    TrackableCoupons WITH (ROWLOCK)
  FROM 
    TrackableCoupons TC
  LEFT JOIN 
    @TCPTable TCP 
  ON 
    TCP.ProgramID = TC.ProgramID
  WHERE 
    TCP.ProgramID IS NULL;

  SET @NumDeleted = @NumDeleted + @@RowCount;
  
  -- Stop processing when there are no rows left
  IF @NumDeleted = 0
	  SET @RunAgain = 0;
  
  --SET ROWCOUNT 0;

GO
GRANT EXECUTE ON [dbo].[pa_Purge_TrackableCoupons] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_TrackableCoupons_By_ExpireDate.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_TrackableCoupons_By_ExpireDate.StoredProcedure.sql 32583 2018-04-09 20:22:15Z db123627 $
-- Build Version: 7.3.1.138972

/****** Object:  StoredProcedure [dbo].[pa_Purge_TrackableCoupons_By_ExpireDate]    Script Date: 04/09/2018 16:44:19 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_TrackableCoupons_By_ExpireDate]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_TrackableCoupons_By_ExpireDate]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_Purge_TrackableCoupons_By_ExpireDate] 
  @ExpireDate   DateTime, 
  @NumDeleted   INT OUTPUT, 
  @RunAgain     INT OUTPUT
AS
  -- This stored procedure deletes trackabel coupon records from LogixXS.TrackableCoupons and LogixXS.TrackableCouponsCache.
  -- Coupons are deleted if the coupon expire date is older than the passed expire date.
  -- invoked by DBPurgeAgent

  SET NOCOUNT ON;
  SET @RunAgain = 1;
  
  -- Delete coupons due to deleted programs from LogixXS.TrackableCoupons
  DELETE TOP (1800)
    TrackableCoupons WITH (ROWLOCK)
  FROM 
    TrackableCoupons TC
  WHERE 
    TC.ExpireDate < @ExpireDate;

  SET @NumDeleted = @@RowCount;
  
  -- Delete coupons due to deleted programs from LogixXS.TrackableCouponsCache
  DELETE TOP (1800)
    TrackableCouponsCache WITH (ROWLOCK)
  FROM 
    TrackableCouponsCache TCC
  WHERE 
    TCC.ExpireDate < @ExpireDate;

  SET @NumDeleted = @NumDeleted + @@RowCount;
  
  -- Stop processing when there are no rows left
  IF @NumDeleted = 0
	  SET @RunAgain = 0;
  
GO
GRANT EXECUTE ON [dbo].[pa_Purge_TrackableCoupons_By_ExpireDate] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_SVAdjust_AccumulateByExpiration.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_SVAdjust_AccumulateByExpiration.StoredProcedure.sql 32583 2011-08-02 20:22:15Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_SVAdjust_AccumulateByExpiration]    Script Date: 08/02/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_SVAdjust_AccumulateByExpiration]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_SVAdjust_AccumulateByExpiration]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_SVAdjust_AccumulateByExpiration]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_SVAdjust_AccumulateByExpiration]
  @StatusFlag int,
  @CustomerPK bigint,
  @LocationId bigint,
  @LocalID bigint,
  @ServerSerial int,
  @ExternalID nvarchar(400),
  @SVProgramID bigint,
  @QtyEarned int,
  @QtyUsed int,
  @Value decimal(12,3),
  @EarnedDate datetime,
  @ExpireDate datetime,
  @TotalValueEarned decimal(12,3),
  @RedeemedValue decimal(12,3),
  @BreakageValue decimal(12,3),
  @UpdateCount int output
as 
set nocount on;

declare @EarnedLocationID as bigint
declare @OfferID as bigint
declare @Today as datetime
declare @HHPK as bigint
declare @AltEarned as bit

set @Today = getdate()
set @UpdateCount = 0
set @HHPK=0;
set @AltEarned = 1
set @OfferID = 0
  
begin
  if @StatusFlag = 1 begin
    -- issued
    update StoredValue with (RowLock)
      set StatusFlag=1, LastUpdate=@Today, LastLocationID=@LocationID, AlteredSinceEarned=@AltEarned,
          QtyEarned=QtyEarned+@QtyEarned,
          TotalValueEarned=TotalValueEarned+@TotalValueEarned
      where CustomerPK=@CustomerPK and SVProgramID=@SVProgramID and ExpireDate=@ExpireDate;
    set @UpdateCount = @@rowcount;
    if @UpdateCount = 0 begin
      set @EarnedLocationID = @LocationID
      set @AltEarned = 0
      insert into StoredValue with (RowLock)
        ([LocalID]
        ,[ServerSerial]
        ,[SVProgramID]
        ,[OfferID]
        ,[CustomerPK]
        ,[QtyEarned]
        ,[QtyUsed]
        ,[Value]
        ,[EarnedDate]
        ,[EarnedLocationID]
        ,[ExpireDate]
        ,[ExternalID]
        ,[StatusFlag]
        ,[LastUpdate]
        ,[LastLocationID]
        ,[AlteredSinceEarned]
        ,[TotalValueEarned]
        ,[RedeemedValue]
        ,[BreakageValue])
      values
        (@LocalID
        ,@ServerSerial
        ,@SVProgramID
        ,@OfferID
        ,@CustomerPK
        ,@QtyEarned
        ,@QtyUsed
        ,@Value
        ,@EarnedDate
        ,@EarnedLocationID
        ,@ExpireDate
        ,@ExternalID
        ,@StatusFlag
        ,@Today
        ,@LocationID
        ,@AltEarned
        ,@TotalValueEarned
        ,@RedeemedValue
        ,@BreakageValue);
      set @UpdateCount = @@rowcount;
    end
  end else if @StatusFlag = 4 begin
    -- redeemed
    update StoredValue with (RowLock)
      set StatusFlag=1, LastUpdate=@Today, LastLocationID=@LocationID, AlteredSinceEarned=@AltEarned,
        QtyUsed=QtyUsed+@QtyUsed,
        RedeemedValue=RedeemedValue+@RedeemedValue,
        BreakageValue=BreakageValue+@BreakageValue
      where CustomerPK=@CustomerPK and SVProgramID=@SVProgramID and ExpireDate=@ExpireDate;
    set @UpdateCount = @@rowcount;
  end

  if @UpdateCount > 0 begin
    insert into SVHistory with (RowLock)
      ([LocalID]
      ,[ServerSerial]
      ,[SVProgramID]
      ,[OfferID]
      ,[CustomerPK]
      ,[QtyEarned]
      ,[QtyUsed]
      ,[Value]
      ,[EarnedDate]
      ,[EarnedLocationID]
      ,[ExpireDate]
      ,[ExternalID]
      ,[StatusFlag]
      ,[LastUpdate]
      ,[LastLocationID]
      ,[TotalValueEarned]
      ,[RedeemedValue]
      ,[BreakageValue])
    values
      (@LocalID
      ,@ServerSerial
      ,@SVProgramID
      ,@OfferID
      ,@CustomerPK
      ,@QtyEarned
      ,@QtyUsed
      ,@Value
      ,@EarnedDate
      ,@EarnedLocationID
      ,@ExpireDate
      ,@ExternalID
      ,@StatusFlag
      ,@Today
      ,@LocationID
      ,@TotalValueEarned
      ,@RedeemedValue
      ,@BreakageValue);
  end
end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_SVAdjust_AccumulateByExpiration] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_SVP_BackFill.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_SVP200_BackFill.StoredProcedure.sql 6244 2012-11-09 17:35:15 JN185015 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_SVP_BackFill]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_SVP_BackFill]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_SVP_BackFill] @RunAgain int OUTPUT
AS 
  -- This procedure moves back-fills CustomerPK's and CardTypeID's into the StoredValuesInsertTemp table (called by the ProcessStoredValuesPrograms Agent)
  SET NOCOUNT ON;
  declare @StartTime as datetime;
  set @RunAgain=1;

  CREATE TABLE #PtsImportTemp ([ExternalID] nvarchar(400) NULL, 
                               [ExtCardTypeID] nvarchar(26) NULL, 
                               [CustomerPK] bigint, 
                               [CardTypeID] int, 
                               [CustomerTypeID] int NULL, 
                               [HHPK] bigint NULL, 
                               [ExtHHID] nvarchar(400) NULL,
                               [ResolvedCustomerID] nvarchar(400) NULL);

  select @StartTime=getdate();
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin
    if not exists(select 1 from StoredValuesInsertTemp where ProcessFlag=1) begin
      --set rowcount 2000;
      -- flag up to 2000 records as being in process
      Update TOP (2000) StoredValuesInsertTemp set ProcessFlag=1 where ProcessFlag=0;
      --set rowcount 0;
    end
    Insert into #PtsImportTemp (ExternalID, ExtCardTypeID) select ExternalID, ExtCardTypeID from StoredValuesInsertTemp where ProcessFlag=1;
    if @@Rowcount=0 begin
      -- There are no records to process, so we are all done
      set @RunAgain=0; 
    end
    else begin  -- there are some rows in the temp table that need to be processed

      -- Get the CustomerPK's and CardTypeID's
      Update #PtsImportTemp set CustomerPK=CID.CustomerPK, CardTypeID=CID.CardTypeID 
        from CardIDs as CID with (NoLock) Inner Join CardTypes as CT with (NoLock) on CID.CardTypeID=CT.CardTypeID 
        Inner Join #PtsImportTemp as Temp with (NoLock) on Temp.ExternalID=CID.ExtCardID and Temp.ExtCardTypeID=CT.ExtCardTypeID;

      -- Get the CustomerTypeID's and HHPK's
      Update #PtsImportTemp set CustomerTypeID=C.CustomerTypeID, HHPK=C.HHPK 
        from Customers as C with (NoLock) Inner Join #PtsImportTemp on #PtsImportTemp.CustomerPK=C.CustomerPK;

      -- Get the external household ID's
      Update #PtsImportTemp set ExtHHID=CID.ExtCardID  
        from CardIDs as CID with (NoLock) Inner Join #PtsImportTemp on #PtsImportTemp.CustomerPK=CID.CustomerPK and CID.CardTypeID=1;
        
      -- Get the ResolvedCustomerID's
      Update #PtsImportTemp set ResolvedCustomerID=CID.ExtCardID  
        from CardIDs as CID with (NoLock) Inner Join #PtsImportTemp on #PtsImportTemp.CustomerPK=CID.CustomerPK and CID.CardTypeID=0;

      -- Now back-fill the StoredValuesInsertTemp table
      Update StoredValuesInsertTemp set CustomerPK=Temp.CustomerPK, CardTypeID=Temp.CardTypeID, CustomerTypeID=Temp.CustomerTypeID, HHPK=Temp.HHPK, 
                                  ExtHHID=isnull(Temp.ExtHHID, ''), ResolvedCustomerID=isnull(Temp.ResolvedCustomerID, '')
        from #PtsImportTemp as Temp with (NoLock) Inner Join StoredValuesInsertTemp with (NoLock) 
               on StoredValuesInsertTemp.ExternalID=Temp.ExternalID and StoredValuesInsertTemp.ExtCardTypeID=Temp.ExtCardTypeID 
              where StoredValuesInsertTemp.ProcessFlag=1;

      Truncate table #PtsImportTemp
      Update StoredValuesInsertTemp set ProcessFlag=2 where ProcessFlag=1;
    end

  end -- while
  drop table #PtsImportTemp

GO

GRANT EXECUTE ON [dbo].[pa_SVP_BackFill] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ServiceCustCount_Update.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ServiceCustCount_Update.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ServiceCustCount_Update]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServiceCustCount_Update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ServiceCustCount_Update]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServiceCustCount_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_ServiceCustCount_Update] @ExtCustomerID nvarchar(400), @Status int OUTPUT
as 
  set nocount on;
  declare @CustomerPK bigint;
  declare @HHPK bigint;
  
  set @Status=0;
  set @CustomerPK=0;
  set @HHPK=0;
  
  -- try to get the CustomerPK and HHPK from the card number
  select top 1 @CustomerPK = ISNULL(CustomerPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCustomerID;
  select @HHPK=isnull(HHPK, 0) from Customers with (NoLock) where CustomerPK = @CustomerPK;

  if @CustomerPK=0 begin
    -- customer does not exist - create a new record
    Insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate) values (@ExtCustomerID, 0, 0, '''', '''', getdate());
    set @CustomerPK=Scope_Identity();
  end else begin
    if @HHPK<>0 begin
      -- customer is using Household
      set @CustomerPK=@HHPK;
   end
  end 
   
  Update Customers with (RowLock) set UpdateCount=UpdateCount+1 where CustomerPK=@CustomerPK;
  Set @Status=0;

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ServiceCustCount_Update] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ServiceCustomers_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ServiceCustomers_Insert.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ServiceCustomers_Insert]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServiceCustomers_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ServiceCustomers_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServiceCustomers_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pa_ServiceCustomers_Insert]
  @ExtCardID nvarchar(400),
  @CardTypeID int,
  @CustomerTypeID int,
  @FirstName nvarchar(50),
  @LastName nvarchar(50),
  @CustomerPK bigint OUTPUT
as 
  set nocount on;
  set @CustomerPK = 0
  
  -- try to get the CustomerPK from the Cards table
  select @CustomerPK=CustomerPK from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

  if @CustomerPK=0 begin
    -- customer does not exist - create a new record
    Insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate, UpdateCount)
     values (@ExtCardID, @CardTypeID, @CustomerTypeID, @FirstName, @LastName, getdate(),0);
    
    set @CustomerPK=Scope_Identity();
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ServiceCustomers_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ServicePromoVarAmt_Update.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ServicePromoVarAmt_Update.StoredProcedure.sql 87669 2015-03-06 05:43:10Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ServicePromoVarAmt_Update]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServicePromoVarAmt_Update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ServicePromoVarAmt_Update]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServicePromoVarAmt_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_ServicePromoVarAmt_Update]
  @UseCustomerPK bigint,
  @PromoVarID bigint,
  @Amount decimal(12,3),
  @LocalServerID int,
  @LocationID bigint,
  @LogixTransNum char(36),
  @Status int OUTPUT
AS 
  SET NOCOUNT ON;
  declare @NumRows int;
  declare @VarTypeId int;
  declare @LinkID bigint;
  
  set @NumRows=0;
  set @Status=0;
  
  select @VarTypeId=VarTypeID, @LinkID=isnull(LinkID, 0) from PromoVariables where PromoVarId = @PromoVarID
  
  if @VarTypeId is null begin
    set @Status=-1 -- Variable does not exist
  end
  else if @VarTypeId=1 begin -- Distribution Limits
    select @NumRows=count(*) from DistributionVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
    if @NumRows=0 begin
      Insert into DistributionVariables with (RowLock) (PromoVarID, CustomerPK, Amount) values (@PromoVarID, @UseCustomerPK, @Amount);
      set @Status=0;
    end
    else begin
      Update DistributionVariables with (RowLock) set Amount = Amount + @Amount where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
      set @Status=0;
    end
  end
  else if @VarTypeId=2 begin -- Accumulation
    select @NumRows=count(*) from AccumulationVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
    if @NumRows=0 begin
      Insert into AccumulationVariables with (RowLock) (PromoVarID, CustomerPK, Amount) values (@PromoVarID, @UseCustomerPK, @Amount);
      set @Status=0;
    end
    else begin
      Update AccumulationVariables with (RowLock) set Amount = Amount + @Amount where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
      set @Status=0;
    end
  end
  else if @VarTypeId=3 begin -- Points
    select @NumRows=count(*) from Points with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
    if @NumRows=0 begin
      Insert into Points with (RowLock) (PromoVarID, CustomerPK, Amount, ProgramID) values (@PromoVarID, @UseCustomerPK, @Amount, @LinkID);
      set @Status=0;
    end
    else begin
      Update Points with (RowLock) set Amount = Amount + @Amount where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
      set @Status=0;
    end
    insert into PointsHistory with (RowLock)
      (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID, EarnedUnderCMOfferID, LastUpdate, LastServerID, LocationID, LogixTransNum)
      values (@LinkID, @UseCustomerPK, @Amount, 0, 0, getdate(), @LocalServerID, @LocationID, @LogixTransNum);	
  end
  else if @VarTypeId=4 begin -- Reward Limit
    select @NumRows=count(*) from RewardLimitVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
    if @NumRows=0 begin
      Insert into RewardLimitVariables with (RowLock) (PromoVarID, CustomerPK, Amount) values (@PromoVarID, @UseCustomerPK, @Amount);
      set @Status=0;
    end
    else begin
      Update RewardLimitVariables with (RowLock) set Amount = Amount + @Amount where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
      set @Status=0;
    end
  end
  else if @VarTypeId=5 begin -- AdvancedLimits
    select @NumRows=count(*) from CM_AdvancedLimitVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
    if @NumRows=0 begin
      Insert into CM_AdvancedLimitVariables with (RowLock) (PromoVarID, CustomerPK, Amount, LimitID) values (@PromoVarID, @UseCustomerPK, @Amount, @LinkID);
      set @Status=0;
    end
    else begin
      Update CM_AdvancedLimitVariables with (RowLock) set Amount = Amount + @Amount where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
      set @Status=0;
    end
  end
  else begin
    set @Status=-1 -- Invalid variable type
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ServicePromoVarAmt_Update] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ServicePromoVarAndRewardDistribution.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServicePromoVarAndRewardDistribution]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ServicePromoVarAndRewardDistribution]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ServicePromoVarAndRewardDistribution]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_ServicePromoVarAndRewardDistribution]
   @UseCustomerPK bigint,
   @PromoVarID bigint,
   @Amount decimal(12,3),
   @LocalServerID int,
   @LocationID bigint,
   @LogixTransNum char(30),
   @TransDate datetime,
   @ExtCustomerID nvarchar(400),
   @IncentiveID bigint,
   @RewardOptionID bigint,
   @Status int OUTPUT
AS 
   SET NOCOUNT ON;
   declare @NumRows int;
   declare @I int;
   declare @dt table (TableNum nvarchar(4), Operation nvarchar(2), Col1 nvarchar(255), Col2 nvarchar(255), Col3 nvarchar(255), Col4 nvarchar(255), Col5 nvarchar(255), Col6 nvarchar(255), Col7 nvarchar(255), Col8 nvarchar(255), Col9 nvarchar(255), Col10 nvarchar(400), Col11 nvarchar(255), Col12 nvarchar(400), Col13 nvarchar(400), ServerSerial int, LocationID bigint, WaitingACK int, POSTimeStamp datetime, IPLSeqNum int);
  
   set @NumRows=0;
   set @Status=0;
  
   select @NumRows=count(*) from DistributionVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
   if @NumRows=0
   begin
      Insert into DistributionVariables with (RowLock) (PromoVarID, CustomerPK, Amount) values (@PromoVarID, @UseCustomerPK, @Amount);
      set @Status=0;
   end
   else
   begin
      Update DistributionVariables with (RowLock) set Amount = Amount + @Amount where PromoVarID=@PromoVarID and CustomerPK=@UseCustomerPK;
      set @Status=0;
   end
	
   -- We need one entry in the table for each redemption
   -- Put it into a local table so we can do a single insert into the real table
   set @I = 0;
   while @I < @Amount
   begin 
      set @I = @I + 1;
      insert into @dt (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, ServerSerial, LocationID, WaitingACK, POSTimeStamp, IPLSeqNum)  
                  values (1, 1, 1, @LocalServerID, @IncentiveID, @RewardOptionID, 3, @UseCustomerPK, @TransDate, @LogixTransNum, @LocationID, @ExtCustomerID, 0, @ExtCustomerID, 0, @LocalServerID, @LocationID, 0, NULL, 0);
   end	
   
   insert into CPE_UploadTemp_RD with (RowLock) (TableNum, Operation, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9, Col10, Col11, Col12, Col13, ServerSerial, LocationID, WaitingACK, POSTimeStamp, IPLSeqNum) select * from @dt;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ServicePromoVarAndRewardDistribution] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_SubscribePromotion.StoredProcedure.sql'; 
--
GO
/****** Object:  Procedure [dbo].[pa_SubscribePromotion]    Script Date: 10/13/2016 ******/
/****** Purpose: To get all the offers ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('[dbo].[pa_SubscribePromotion]', 'P') AND type in ('P'))
    DROP PROCEDURE [dbo].[pa_SubscribePromotion]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_SubscribePromotion] @CustomerGroupID bigint, @CustomerID nvarchar(max), @cardType bigint
AS
  SET NOCOUNT ON;
  Declare @CustomerPK int
  
  select @CustomerPK = CustomerPK from [dbo].[Customers] with (NoLock) where InitialCardID = @CustomerID and InitialCardTypeId=@cardType
  
  Insert into [dbo].[GroupMembership] with (RowLock) (CustomerGroupID, CustomerPK, Manual, LastUpdate, Deleted, CMOAStatusFlag, TCRMAStatusFlag)
  values (@CustomerGroupID, @CustomerPK, 1, getdate(), 0, 2, 2)
GO
GRANT EXECUTE ON [dbo].[pa_SubscribePromotion] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_SvExtensionAgent_Extend.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_SvExtensionAgent_Extend]    Script Date: 03/07/2016 21:37:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_SvExtensionAgent_Extend]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_SvExtensionAgent_Extend]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_SvExtensionAgent_Extend] @UpdateCountSV int output, @UpdateCountSVH int output, @RunAgain int Output  
AS      
   -- $Id: dbo.pa_SvExtensionAgent_Extend.StoredProcedure.sql 79265 2016-03-07 13:52:11Z db123627 $
   -- Build Version: 6.0.1.90493
   -- This procedure updates customer stored value records with a new expiration date
   declare @NumAffected int;  
   declare @NumAffectedSV int;  
   declare @NumAffectedSVH int;
   SET NOCOUNT ON;  
   set @RunAgain=1;  
   set @UpdateCountSV=0;
   set @UpdateCountSVH=0;
  
   select @NumAffected=count(*) from StoredValueExpirationExtensions with (NoLock) where Status=3;  
   if @NumAffected=0 begin  
      --set rowcount 1800;   
      Update TOP (1800) StoredValueExpirationExtensions with (RowLock) set Status=3 where Status=2;   
      set @NumAffected=@@RowCount;  
      if @NumAffected=0 begin  
         set @RunAgain=0;  
      end  
      --set rowcount 0;  
   end

   set @NumAffectedSV = @NumAffected;
   set @NumAffectedSVH = @NumAffected;
   
   while @NumAffectedSV > 0
   begin
      --set rowcount 1800;
      
      update TOP (1800) SV set SV.ExpireDate=SVEE.ExpireDate, SV.LastUpdate=GetDate()
         from StoredValue as SV 
         inner join StoredValueExpirationExtensions as SVEE on SV.SVProgramID=SVEE.SVProgramID
         where SVEE.Status=3 and SV.Deleted=0 and (SV.ExpireDate < SVEE.ExpireDate);
         
      set @NumAffectedSV = @@RowCount;
      set @UpdateCountSV = @UpdateCountSV + @NumAffectedSV;
      --set rowcount 0;
   end;
  
   while @NumAffectedSVH > 0
   begin
      --set rowcount 1800;
      
      update TOP (1800) SVH set SVH.ExpireDate=SVEE.ExpireDate, SVH.LastUpdate=GetDate()
         from SVHistory as SVH 
         inner join StoredValueExpirationExtensions as SVEE on SVH.SVProgramID=SVEE.SVProgramID
         where SVEE.Status=3 and SVH.Deleted=0 and (SVH.ExpireDate < SVEE.ExpireDate);
         
      set @NumAffectedSVH = @@RowCount;
      set @UpdateCountSVH = @UpdateCountSVH + @NumAffectedSVH;
      --set rowcount 0;
   end;

   delete from StoredValueExpirationExtensions where Status=3;
   
GO

GRANT EXECUTE ON [dbo].[pa_SvExtensionAgent_Extend] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_SvExtensionAgent_Reverse.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_SvExtensionAgent_Reverse]    Script Date: 03/07/2016 21:37:56 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_SvExtensionAgent_Reverse]') AND type in (N'P', N'PC'))
   DROP PROCEDURE [dbo].[pa_SvExtensionAgent_Reverse]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_SvExtensionAgent_Reverse] @UpdateCount int output, @RunAgain int Output  
AS      
   -- $Id: dbo.pa_SvExtensionAgent_Reverse.StoredProcedure.sql 79265 2016-03-07 13:52:11Z db123627 $
   -- Build Version: 6.0.1.90493
   -- This procedure updates customer stored value records with a new expiration date
   declare @NumAffected int;
   declare @NumAffectedSVH int;
   SET NOCOUNT ON;  
   set @RunAgain=1;  
   set @NumAffected=0; 
   set @UpdateCount=0   
  
   select @NumAffected=count(*) from StoredValueExpirationExtensions with (NoLock) where Status=1;  
   if @NumAffected=0 begin  
      --set rowcount 1800;   
      Update TOP (1800) StoredValueExpirationExtensions with (RowLock) set Status=1 where Status=0;   
      set @NumAffected=@@RowCount;  
      if @NumAffected=0 begin  
         set @RunAgain=0;  
      end  
      --set rowcount 0;  
   end

   set @NumAffectedSVH = @NumAffected;
   
   while @NumAffectedSVH > 0
   begin
      select @NumAffectedSVH=count(*) from SVHistory with (NoLock) where StatusFlag=-3 and Deleted=0;  
      if @NumAffectedSVH=0 begin  
         --set rowcount 1800;   
         
         Update TOP (1800) SVH with (RowLock) set StatusFlag=-3 
            from SVHistory as SVH
            inner join StoredValueExpirationExtensions as SVEE on SVH.SVProgramID=SVEE.SVProgramID
            where SVEE.Status=1 and SVH.StatusFlag=3 and SVH.Deleted=0;
            
         set @NumAffectedSVH=@@RowCount;  
         if @NumAffectedSVH=0 begin  
            set @RunAgain=0;  
         end  
         --set rowcount 0;  
      end

      insert into StoredValue with (RowLock) (LocalID, ServerSerial, SVProgramID, OfferID, CustomerPK, QtyEarned, QtyUsed, Value,
                  EarnedDate, EarnedLocationID, ExpireDate, ExternalID, StatusFlag, LastUpdate, LastLocationID, AlteredSinceEarned, 
                  TotalValueEarned, RedeemedValue, BreakageValue, LogixTransNum, PresentedCustomerID, PresentedCardTypeID, ResolvedCustomerID,
                  HHID, Replayed, ReplayedDate, POSTimeStamp, AdjustmentSourceID, AdjustmentTypeID, AdjustmentReasonID, AdjustmentReasonText)
             select SVH.LocalID, SVH.ServerSerial, SVH.SVProgramID, SVH.OfferID, SVH.CustomerPK, SVH.QtyUsed as QtyEarned, 0 as QtyUsed, SVH.Value,
                  SVH.EarnedDate, SVH.EarnedLocationID, SVH.ExpireDate, SVH.ExternalID, 1 as StatusFlag, GetDate(), SVH.LastLocationID, 1 as AlteredSinceEarned, 
                  SVH.TotalValueEarned, SVH.RedeemedValue, SVH.BreakageValue, SVH.LogixTransNum, SVH.PresentedCustomerID, SVH.PresentedCardTypeID, SVH.ResolvedCustomerID,
                  SVH.HHID, SVH.Replayed, SVH.ReplayedDate, SVH.POSTimeStamp, SVH.AdjustmentSourceID, SVH.AdjustmentTypeID, SVH.AdjustmentReasonID,SVH. AdjustmentReasonText
             from SVHistory as SVH with (NoLock) where StatusFlag=-3;

      set @UpdateCount = @UpdateCount + @@rowcount;

      delete from SVHistory with (RowLock) where StatusFlag=-3;
   end
   
   update StoredValueExpirationExtensions with (RowLock) set Status=2 where Status=1;
GO

GRANT EXECUTE ON [dbo].[pa_SvExtensionAgent_Reverse] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TCRMA_Cust_Out_Complete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TCRMA_Cust_Out_Complete.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TCRMA_Cust_Out_Complete]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMA_Cust_Out_Complete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TCRMA_Cust_Out_Complete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMA_Cust_Out_Complete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TCRMA_Cust_Out_Complete] @ExtOfferID int, @ConditionNumber int, 
	@Excluded bit, @TransID decimal, @CustomerTypeID int, @CustomerGroupID bigint, 
	@PrevPK bigint, @LastPK bigint Output, @NumRecs bigint Output, @RunAgain int Output
AS 
  -- This procedure moves GroupMembership records for the specified CustomerGroup to TC_Customers  
  -- Called by: TCRMAgent
  -- @PrevPK should be set to zero when first calling this stored procedure. 
  --   On subsequent calls (if @RunAgain=1), @PrevPK should be set to @LastPK from the previous execution.

  DECLARE @StartTime datetime;
  SET NOCOUNT ON;
  SET @RunAgain=1;
  SET @StartTime=getdate();
  SET @LastPK=@PrevPK;
  SET @NumRecs=0;

  CREATE TABLE #GMTemp ([MembershipID] bigint NULL, [CustomerPK] bigint NULL);

  -- run for up to 5 minutes
  -- everything processed here should be Operation=1 (newly created records)
  WHILE @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate())
  BEGIN
    --SET ROWCOUNT 1800; 
    INSERT INTO #GMTemp (MembershipID, CustomerPK)
      SELECT TOP (1800) MembershipID, CustomerPK FROM GroupMembership WITH (NOLOCK INDEX(ix_unique_GM)) WHERE CustomerGroupID=@CustomerGroupID AND Deleted=0 AND MembershipID>@LastPK 
      ORDER BY MembershipID;
    IF (@@ROWCOUNT=0)
    BEGIN
      SET @RunAgain=0;
    END
    --SET ROWCOUNT 0;
    SELECT @LastPK=isnull(max(MembershipID), @PrevPK) FROM #GMTemp;

    INSERT INTO TC_Customers WITH (ROWLOCK) (OfferID, ConditionNumber, CustomerID, Excluded, Action, TransID) 
      SELECT @ExtOfferID AS OfferID, @ConditionNumber AS ConditionNumber, C.ExtCardID AS CustomerID, @Excluded AS Excluded, ''A'' AS Action, @TransID AS TransID 
      FROM #GMTemp AS GM INNER JOIN CardIDs AS C WITH (NOLOCK INDEX(PK_CardIDs)) ON GM.CustomerPK=C.CustomerPK 
      INNER JOIN CardTypes AS T WITH (NOLOCK) ON T.CardTypeID = C.CardTypeID and T.CustTypeID=@CustomerTypeID 
      OPTION (MAXDOP 1);
      
    SET @NumRecs=@NumRecs+@@ROWCOUNT;

    TRUNCATE TABLE #GMTemp;
  END -- while
  DROP TABLE #GMTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TCRMA_Cust_Out_Complete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TCRMA_Cust_Out_Incremental.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TCRMA_Cust_Out_Incremental.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TCRMA_Cust_Out_Incremental]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMA_Cust_Out_Incremental]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TCRMA_Cust_Out_Incremental]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMA_Cust_Out_Incremental]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TCRMA_Cust_Out_Incremental] @ExtOfferID int, @ConditionNumber int, 
	@Excluded bit, @TransID decimal, @CustomerTypeID int, @CustomerGroupID bigint, 
	@NumRecs bigint Output, @RunAgain int Output
AS 
  -- This procedure moves GroupMembership records for the specified CustomerGroup to TC_Customers  
  -- Called by: TCRMAgent
  -- @PrevPK should be set to zero when first calling this stored procedure. 
  --   On subsequent calls (if @RunAgain=1), @PrevPK should be set to @LastPK from the previous execution.

  DECLARE @StartTime datetime;
  SET NOCOUNT ON;
  SET @RunAgain=1;
  SET @StartTime=getdate();
  SET @NumRecs=0;

  CREATE TABLE #GMTemp ([CustomerPK] bigint NULL, [Deleted] bit NULL);

  -- run for up to 5 minutes
  -- everything processed here should be Operation=1 (newly created records)
  WHILE @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate())
  BEGIN
    --SET ROWCOUNT 1800; 
    UPDATE TOP (1800) GroupMembership WITH (ROWLOCK) SET TCRMAStatusFlag=-5 WHERE CustomerGroupID=@CustomerGroupID AND Manual=1 AND TCRMAStatusFlag>=2;
    
    INSERT INTO #GMTemp (CustomerPK, Deleted)
      SELECT TOP 1800 CustomerPK, Deleted FROM GroupMembership WITH (NOLOCK) WHERE TCRMAStatusFlag=-5 AND CustomerGroupID=@CustomerGroupID AND Manual=1;
    IF (@@ROWCOUNT=0)
    BEGIN
      SET @RunAgain=0;
    END
    --SET ROWCOUNT 0;

    INSERT INTO TC_Customers WITH (ROWLOCK) (OfferID, ConditionNumber, CustomerID, Excluded, Action, TransID) 
      SELECT @ExtOfferID AS OfferID, @ConditionNumber AS ConditionNumber, C.ExtCardID AS CustomerID, @Excluded AS Excluded, ''A'' AS Action, @TransID AS TransID 
      FROM #GMTemp AS GM INNER JOIN CardIDs AS C WITH (NOLOCK INDEX(PK_CardIDs)) ON GM.CustomerPK=C.CustomerPK AND GM.Deleted=0
      INNER JOIN CardTypes AS T WITH (NOLOCK) ON T.CardTypeID = C.CardTypeID and T.CustTypeID=@CustomerTypeID 
      OPTION (MAXDOP 1);
    SET @NumRecs=@NumRecs+@@ROWCOUNT;

    INSERT INTO TC_Customers with (RowLock) (OfferID, ConditionNumber, CustomerID, Excluded, Action, TransID) 
      SELECT @ExtOfferID AS OfferID, @ConditionNumber AS ConditionNumber, C.ExtCardID AS CustomerID, @Excluded AS Excluded, ''D'' AS Action, @TransID AS TransID 
      FROM #GMTemp AS GM INNER JOIN CardIDs AS C WITH (NOLOCK INDEX(PK_CardIDs)) ON GM.CustomerPK=C.CustomerPK AND GM.Deleted=1
      INNER JOIN CardTypes AS T WITH (NOLOCK) ON T.CardTypeID = C.CardTypeID and T.CustTypeID=@CustomerTypeID 
      OPTION (MAXDOP 1);
    SET @NumRecs=@NumRecs+@@ROWCOUNT;

    UPDATE GroupMembership WITH (ROWLOCK) SET TCRMAStatusFlag=0 WHERE TCRMAStatusFlag=-5 AND CustomerGroupID=@CustomerGroupID AND Manual=1;

    TRUNCATE TABLE #GMTemp;
  END -- while
  DROP TABLE #GMTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TCRMA_Cust_Out_Incremental] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TCRMA_GroupMembership_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TCRMA_GroupMembership_Delete.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TCRMA_GroupMembership_Delete]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMA_GroupMembership_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TCRMA_GroupMembership_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMA_GroupMembership_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'Create Procedure [dbo].[pa_TCRMA_GroupMembership_Delete]  @ExtCustomerID nvarchar(400), @CustomerGroupID bigint
as 
  set nocount on;
  declare @NumRows int;
  declare @CustomerPK bigint;

  set @NumRows=0;
  set @CustomerPK=0;

  select top 1 @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCustomerID;
  if @CustomerPK>0 begin
    select @NumRows=count(*) from GroupMembership with (NoLock) where CustomerPK=@CustomerPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
    if @NumRows>0 begin
      Delete from GroupMembership with (RowLock) where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=1;
      -- we don''t want to update the TCRMAStatusFlag, otherwise we''ll end up bouncing the databack to TCRM
      Update GroupMembership with (RowLock) set Deleted=1, Manual=1, CMOAStatusFlag=2 where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=0;
    end
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TCRMA_GroupMembership_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TCRMAgent_InsertCustomers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TCRMAgent_InsertCustomers.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TCRMAgent_InsertCustomers]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMAgent_InsertCustomers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TCRMAgent_InsertCustomers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMAgent_InsertCustomers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TCRMAgent_InsertCustomers] @TransID decimal(13,0), @ExtOfferID bigint, 
	@ConditionNumber bigint, @Excluded bit, @CustomerGroupID bigint, @Manual bit, 
	@CustomerTypeID int, @TotalRecs int OUTPUT, @RunAgain int OUTPUT
AS 
  SET NOCOUNT ON;
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRecs int;
  declare @CardTypeID int;
  
  set @ProcessRows=1
  set @RunAgain=1;
  set @MinutesElapsed=0;
  set @TotalRecs=0;
  
  SELECT @CardTypeID = CardTypeID FROM CardTypes WHERE CustTypeID = @CustomerTypeID AND CardTypeID IN (0,1,2);
  select @StartTime=getdate();
  
  CREATE TABLE #ProcessTemp ([CustomerID] nvarchar(400) NULL, [CustomerPK] bigint NULL);

  while @RunAgain=1 and @MinutesElapsed<5 begin
      BEGIN TRY    
        BEGIN TRAN T1
        set @RunAgain=0;
        -- copy rows over to the temporary table so we have some data to work with
        --set rowcount 1800; 
        update TOP (1800) TC_Customers with (RowLock) set TCRMAgentStatusFlag=1 where TCRMAgentStatusFlag=0 and TransID=@TransID and OfferID=@ExtOfferID and ConditionNumber=@ConditionNumber and Excluded=@Excluded and Action=''A''; 
        --set rowcount 0;
        insert into #ProcessTemp (CustomerID) select CustomerID from TC_Customers with (NoLock) where TCRMAgentStatusFlag=1;
        set @NumRecs=@@RowCount;
        if @NumRecs=1800 begin
          set @RunAgain=1;
        end
        set @TotalRecs=@TotalRecs+@NumRecs;
        update TC_Customers with (RowLock) set TCRMAgentStatusFlag=2 where TCRMAgentStatusFlag=1;

        -- Populate the temporary table with CustomerPK''s
        update #ProcessTemp set CustomerPK=C.CustomerPK
          from #ProcessTemp as PT Inner Join CardIDs as C with (NoLock) on PT.CustomerID=C.ExtCardID and C.CardTypeID=@CardTypeID;

        -- Create any new customer recrods
        insert into Customers with (RowLock) (InitialCardID, FirstName, LastName, CreatedDate, InitialCardTypeID) 
          select TCC.CustomerID, '''', '''', getdate(), @CardTypeID
          from #ProcessTemp as TCC with (NoLock) left join CardIDs as C with (NoLock) on C.ExtCardID=TCC.CustomerID and C.CardTypeID=@CardTypeID
          where C.ExtCardID is NULL;

        -- Populate the temporary table with CustomerPK''s
        update #ProcessTemp set CustomerPK=C.CustomerPK
          from #ProcessTemp as PT Inner Join CardIDs as C with (NoLock) on PT.CustomerID=C.ExtCardID and C.CardTypeID=@CardTypeID;

        -- move data into GroupMembership
        insert into GroupMembership (CustomerPK, CustomerGroupID, Manual, Deleted, CMOAStatusFlag) 
          select PT.CustomerPK, @CustomerGroupID as CustomerGroupID, @Manual as Manual, 0 as Deleted, 2 as CMOAStatusFlag 
          from #ProcessTemp as PT with (NoLock) left join GroupMembership as GM with (NoLock) on PT.CustomerPK=GM.CustomerPK and GM.CustomerGroupID=@CustomerGroupID and GM.Deleted=0
          where GM.CustomerPK is NULL;

        Truncate Table #ProcessTemp

        COMMIT TRAN T1;
      END TRY
      BEGIN CATCH
          set @RunAgain=0;
          IF @@TRANCOUNT > 0 BEGIN
      ROLLBACK TRAN T1;
          END
          DECLARE @ErrorMessage NVARCHAR(4000);
          DECLARE @ErrorSeverity INT;
          DECLARE @ErrorState INT;

          SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
          RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
      END CATCH

      select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
  end  
  drop table #ProcessTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TCRMAgent_InsertCustomers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TCRMAgent_RemoveCustomers.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TCRMAgent_RemoveCustomers.StoredProcedure.sql 120379 2018-02-08 18:56:50Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TCRMAgent_RemoveCustomers]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMAgent_RemoveCustomers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TCRMAgent_RemoveCustomers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TCRMAgent_RemoveCustomers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TCRMAgent_RemoveCustomers] @TransID decimal(13,0), @ExtOfferID bigint, 
	@ConditionNumber bigint, @Excluded bit, @CustomerGroupID bigint, @CustomerTypeID int, 
	@TotalRecs int OUTPUT, @RunAgain int OUTPUT 
AS 
  SET NOCOUNT ON;
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @ProcessRows int;
  declare @NumRecs int;
  declare @CardTypeID int;
  
  set @ProcessRows=1
  set @RunAgain=1;
  set @MinutesElapsed=0;
  set @TotalRecs=0;
  
  select @CardTypeID = CardTypeID FROM CardTypes WHERE CustTypeID = @CustomerTypeID AND CardTypeID IN (0,1,2);
  select @StartTime=getdate();
  CREATE TABLE #ProcessTemp ([CustomerID] nvarchar(400) NULL, CustomerPK bigint NULL);

  while @RunAgain=1 and @MinutesElapsed<5 begin
      BEGIN TRY    
        BEGIN TRAN T1
        set @RunAgain=0;
        -- copy rows over to the temporary table so we have some data to work with
        --set rowcount 1800; 
        update TOP (1800) TC_Customers with (RowLock) set TCRMAgentStatusFlag=1 where TCRMAgentStatusFlag=0 and TransID=@TransID and OfferID=@ExtOfferID and ConditionNumber=@ConditionNumber and Excluded=@Excluded and Action=''D''; 
        --set rowcount 0;
        insert into #ProcessTemp (CustomerID) select CustomerID from TC_Customers with (NoLock) where TCRMAgentStatusFlag=1;
        set @NumRecs=@@RowCount;
        if @NumRecs=1800 begin
          set @RunAgain=1;
        end
        set @TotalRecs=@TotalRecs+@NumRecs;
        update TC_Customers with (RowLock) set TCRMAgentStatusFlag=2 where TCRMAgentStatusFlag=1;

        -- Populate the temporary table with CustomerPK''s
        update #ProcessTemp set CustomerPK=C.CustomerPK
          from #ProcessTemp as PT Inner Join CardIDs as C with (NoLock) on PT.CustomerID=C.ExtCardID and C.CardTypeID=@CardtypeID;

        -- Delete any records that are already marked as deleted AND are in the #ProcessTemp table
        Delete from GroupMembership with (RowLock) where CustomerGroupID=@CustomerGroupID and Deleted=1 
          and CustomerPK in (select CustomerPK from #ProcessTemp);

        -- Mark GroupMembership records as deleted
        -- we don''t want to update the TCRMAStatusFlag, otherwise we''ll end up bouncing the data back to TCRM
        -- CPEStatusFlag set to zero and manual set to 1 causes TrafficCop to stage these records for TransDownload
        update GroupMembership with (RowLock) set Deleted=1, Manual=1, CMOAStatusFlag=2, CPEStatusFlag=0, UEStatusFlag=0 where CustomerGroupID=@CustomerGroupID and Deleted=0 and CustomerPK in 
          (select CustomerPK from #ProcessTemp);

        insert into GroupMembership with (RowLock) (CustomerGroupID, CustomerPK, Manual, LastUpdate, Deleted, CMOAStatusFlag) 
          select distinct @CustomerGroupID as CustomerGroupID, PT.CustomerPK, 1 as Manual, getdate() as LastUpdate, 1 as Deleted, 2 as CMOAStatusFlag 
          from #ProcessTemp as PT with (NoLock) Left Join GroupMembership as GM with (NoLock) on GM.customerPK=PT.CustomerPK and GM.CustomerGroupID=@CustomerGroupID
          where GM.CustomerPK is NULL;

        Truncate Table #ProcessTemp

        COMMIT TRAN T1;
      END TRY
      BEGIN CATCH
          set @RunAgain=0;
          IF @@TRANCOUNT > 0 BEGIN
      ROLLBACK TRAN T1;
          END
          DECLARE @ErrorMessage NVARCHAR(4000);
          DECLARE @ErrorSeverity INT;
          DECLARE @ErrorState INT;

          SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
          RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
      END CATCH

      select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
  end  
  drop table #ProcessTemp;
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TCRMAgent_RemoveCustomers] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TUA_PREF.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_PREF]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TUA_PREF]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TUA_PREF]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_TUA_PREF] @RunAgain int OUTPUT,
									 @BatchId int
AS   
  -- $Id: dbo.pa_CPE_TUA_PREF.StoredProcedure.sql 77197 2014-04-14 02:12:01Z VB185060 $
  -- Build Version: 5.99.1.77327
  -- This procedure moves Preference records from UploadTemp_PREF  tp CustomerPreference table

  declare @NumRecs int;  
  declare @NumAffected int;  
  SET NOCOUNT ON;  
  set @RunAgain = 0;  
  set @NumAffected = 0;  
  

  CREATE TABLE #PREFULTemp (
    [PKID]           [bigint] NULL,
    [CustmPk]           [varchar](255)  NULL, --CustmPk
    [PreferenceID]           [varchar](255)  NULL, --PreferenceID
    [Value]           [nvarchar](250)  NULL, --Value
    LocationID     [bigint] NULL, 
    IPLSeqNum      [int] NULL,
    );

  insert into #PREFULTemp 
    (PKID, [CustmPk], [PreferenceID], [Value],LocationID,IPLSeqNum )
    select top 1800 PKID, Col1, Col2, Col3,LocationID,IPLSeqNum  from CPE_UploadTemp_PREF  with (NoLock) where WaitingACK=0 order by PKID;

  set @NumAffected = @@RowCount;
  
  if @NumAffected = 1800 
    set @RunAgain = 1
  

  if @NumAffected > 0 begin

    BEGIN TRY    
      BEGIN TRAN T1  
      
      
      -- insert data in output table for cross shopping  which going to update in next query
        insert into CPE_Prefs_Output with (RowLock) (PreferenceID, CustomerPK, Value, WaitingACK, TargetLocationID)   
        select UTPREF1.PreferenceID,UTPREF1.CustmPk,UTPREF1.Value, 0 as WaitingACK, CL.LocationID  FROM 
        (
		Select UTPREF.PreferenceID,UTPREF.CustmPk,UTPREF.Value,UTPREF.LocationID,UTPREF.IPLSeqNum  FROM   CustomerPreferences CF 
		INNER JOIN 
		(Select A.* From #PREFULTemp A 
         inner join ( Select MAX(PKID) as PKID FROM #PREFULTemp B  Group BY CustmPk , PreferenceID ) As Temp on A.PKID =Temp.PKID 
		 )as UTPREF 
	    ON CustomerPK=[CustmPk] AND CF.PreferenceID=UTPREF.[PreferenceID]  AND CF.Value<>UTPREF.[Value]
        ) UTPREF1
        Inner Join CustomerLocations as CL with (NoLock, index(PK_CustomerLocations))on CustmPk = CL.CustomerPK
          where ((UTPREF1.LocationID<>CL.LocationID) )       
      
      --update existing 
      UPDATE CF  with (RowLock)
      SET  Value = UTPREF.[Value], LastUpdate=getdate(), LastChannelID=1
      FROM   CustomerPreferences CF 
      INNER JOIN 
      (
      Select A.* From #PREFULTemp A 
      inner join ( Select MAX(PKID) as PKID FROM #PREFULTemp B  Group BY CustmPk , PreferenceID ) As Temp on A.PKID =Temp.PKID 
      )as UTPREF  ON CustomerPK=[CustmPk] AND CF.PreferenceID=UTPREF.[PreferenceID] 
      AND CF.Value<>UTPREF.[Value]
      
        -- insert data in output table for cross shopping which is going to insert into next query 
        insert into CPE_Prefs_Output with (RowLock) (PreferenceID, CustomerPK, Value, WaitingACK, TargetLocationID)   
        select DISTINCT UTPREF1.PreferenceID, CustmPk, UTPREF1.Value, 0 as WaitingACK, CL.LocationID 
        from 
        (select [CustmPk],UTPREF.[PreferenceID],UTPREF.[Value],LocationID,IPLSeqNum   from #PREFULTemp as UTPREF 
        inner join        
        (select max(UTPREF.pkid) as pk from  #PREFULTemp as UTPREF 
        LEFT JOIN CustomerPreferences CF with (NoLock)  ON [CustmPk]=CustomerPK AND UTPREF.[PreferenceID]=CF.PreferenceID
        WHERE CustomerPK IS NULL AND CF.PreferenceID IS NULL 
        group by CustmPk,UTPREF.PreferenceID)a
        on UTPREF.PKID = a.pk) as UTPREF1
        Inner Join CustomerLocations as CL with (NoLock, index(PK_CustomerLocations))on CustmPk = CL.CustomerPK
        Left Join LocationSeqNum as LSN with (NoLock)   on LSN.LocationID=UTPREF1.LocationID   
         where 
          ((UTPREF1.LocationID<>CL.LocationID)   
                 or   
                 (UTPREF1.LocationID=CL.LocationID   
                   and UTPREF1.IPLSeqNum<isnull(LSN.IPLSequenceNum, 0)   
                   and isnull(LSN.IPLSequenceNum, 0)>0  
                 )  
                );  
      
       
      -- Insert new records into CustomerPreferences
      insert into CustomerPreferences with (RowLock) 
        (CustomerPK, PreferenceID, Value, LastUpdate, LastChannelID)  
        select [CustmPk],[PreferenceID],[Value],GETDATE(),1 from #PREFULTemp 
        inner join        
        (select max(UTPREF.pkid) as pk from  #PREFULTemp as UTPREF 
        LEFT JOIN CustomerPreferences CF with (NoLock)  ON [CustmPk]=CustomerPK AND UTPREF.[PreferenceID]=CF.PreferenceID
        WHERE CustomerPK IS NULL AND CF.PreferenceID IS NULL 
        group by CustmPk,UTPREF.PreferenceID)a
        on PKID = a.pk

        
        Delete from CPE_UploadTemp_PREF with (RowLock)  
            from CPE_UploadTemp_PREF Inner Join #PREFULTemp on CPE_UploadTemp_PREF.PKID=#PREFULTemp.PKID;  

        COMMIT TRAN T1;  
    END TRY  

  
    BEGIN CATCH  
      IF @@TRANCOUNT > 0 BEGIN  
        ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  

  END -- if @NumAffected>0

  DROP TABLE #PREFULTemp

GO

GRANT EXECUTE ON [dbo].[pa_TUA_PREF] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TUA_PREF_MV.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_CPE_TUA_PREF_MV]    Script Date: 12/27/2010 16:44:18 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TUA_PREF_MV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TUA_PREF_MV]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_TUA_PREF_MV] @BatchId int,@RunAgain int OUTPUT
									
AS   
  -- $Id: dbo.pa_CPE_TUA_PREF_MV.StoredProcedure.sql 77197 2014-04-14 02:12:01Z VB185060 $
  -- Build Version: 5.99.1.77327
  -- This procedure moves Preference records from UploadTemp_PREF  
  declare @NumRecs int;  
  declare @NumAffected int;  
  SET NOCOUNT ON;  
  set @RunAgain = 0;  
  set @NumAffected = 0;  
  

  CREATE TABLE #PREF_MVULTemp (
    [PKID]           [bigint] NULL,
    CustmPk          [varchar](255)  NULL, --CustmPk
    PreferenceID     [varchar](255)  NULL, --PreferenceID
    Value            [nvarchar](250)  NULL, --Value
    LocationID     [bigint] NULL, 
    IPLSeqNum      [int] NULL,
    );

  insert into #PREF_MVULTemp 
    (PKID, CustmPk, PreferenceID, Value,LocationID,IPLSeqNum )
    select top 1800 PKID, Col1, Col2, Col3,LocationID,IPLSeqNum from CPE_UploadTemp_PREF_MV with (NoLock) where WaitingACK=0  order by PKID;

  set @NumAffected = @@RowCount;
  if @NumAffected = 1800 begin
    set @RunAgain = 1
  end

  if @NumAffected > 0 begin

    BEGIN TRY    
      BEGIN TRAN T1  
	 
	         -- copy the records from the temporary table into the CPE_PrefsMV_Output table  
        insert into CPE_PrefsMV_Output with (RowLock) (PreferenceID, CustomerPK, Value, Deleted, WaitingACK, TargetLocationID)   
        select DISTINCT UTPREF.PreferenceID, CustmPk, UTPREF.Value, 0 as Deleted, 0 as WaitingACK, CL.LocationID 
        from #PREF_MVULTemp as UTPREF
        LEFT JOIN CustomerPreferencesMV CPMV with (NoLock) ON UTPREF.CustmPk =CPMV.CustomerPK 
                  AND  UTPREF.PreferenceID =CPMV.PreferenceID AND UTPREF.Value =CPMV.Value  AND Deleted =0
        Inner Join CustomerLocations as CL with (NoLock, index(PK_CustomerLocations))on CustmPk = CL.CustomerPK
		 where ((UTPREF.LocationID<>CL.LocationID) )
	 
      -- Insert new records into CustomerPreferences
      insert into CustomerPreferencesMV with (RowLock) 
        (CustomerPK, PreferenceID, Value, LastUpdate, LastChannelID)  
        select 
          DISTINCT  CustmPk,UTPREF.PreferenceID,UTPREF.Value,GETDATE(),1                
        from #PREF_MVULTemp as UTPREF 
        LEFT JOIN CustomerPreferencesMV CPMV with (NoLock) ON UTPREF.CustmPk =CPMV.CustomerPK AND  
        UTPREF.PreferenceID =CPMV.CustomerPK AND UTPREF.Value =CPMV.Value    AND Deleted =0
        where CPMV.CustomerPK IS NULL AND CPMV.PreferenceID IS NULL AND CPMV .Value IS NULL 

        
        Delete from CPE_UploadTemp_PREF_MV with (RowLock)  
            from CPE_UploadTemp_PREF_MV Inner Join #PREF_MVULTemp on CPE_UploadTemp_PREF_MV.PKID=#PREF_MVULTemp.PKID;  

        COMMIT TRAN T1;  
    END TRY  

  
    BEGIN CATCH  
      IF @@TRANCOUNT > 0 BEGIN  
        ROLLBACK TRAN T1;  
      END  
      DECLARE @ErrorMessage NVARCHAR(4000);  
      DECLARE @ErrorSeverity INT;  
      DECLARE @ErrorState INT;  
  
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();  
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);  
    END CATCH  

  END -- if @NumAffected>0

  DROP TABLE #PREF_MVULTemp

GO

GRANT EXECUTE ON [dbo].[pa_TUA_PREF_MV] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TrackableCouponsInsertFromEOC.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TrackableCouponsInsertFromEOC]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TrackableCouponsInsertFromEOC]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TrackableCouponsInsertFromEOC]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE pa_TrackableCouponsInsertFromEOC
(
@TrackableCouponsData CouponType ReadOnly,
@ProgramID Int

)
AS

Begin
INSERT INTO 
    dbo.TrackableCoupons (CouponCode, ProgramID, RemainingUses, InitialUses)
    SELECT 
        CouponCode,
        @ProgramID,
        InitialUses,
        InitialUses       
    FROM
        @TrackableCouponsData
 End
'
END
Go
GRANT EXECUTE ON [dbo].[pa_TrackableCouponsInsertFromEOC] TO [Copient_Logix_uspRole] AS [dbo]
GO
        

print 'processing storedprocedures/dbo.pa_TrackableCouponsInsertQueue_Insert.sql'; 
--
GO
-- $Id: dbo.pa_TrackableCouponsInsertQueue_Insert.StoredProcedure.sql 71721 2013-11-06 21:24:05Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TrackableCouponsInsertQueue_Insert]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TrackableCouponsInsertQueue_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_TrackableCouponsInsertQueue_Insert] @FileName as nvarchar(255), @ExternalID as nvarchar(400), @FileVersion as varchar(10)
AS
  SET NOCOUNT ON;
  BEGIN
    INSERT INTO [dbo].[TrackableCouponsInsertQueue] ([FileName],[ExternalId],[FileVersion])
         VALUES (@FileName, @ExternalID,@FileVersion);
  END

GO

GRANT EXECUTE ON [dbo].[pa_TrackableCouponsInsertQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TrackableCouponsProcess_Insert.sql'; 
--
GO
-- $Id: dbo.pa_TrackableCouponsProcess_Insert.StoredProcedure.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TrackableCouponsProcess_Insert]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TrackableCouponsProcess_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--Imports trackable coupons from temporary table to main table--
CREATE PROCEDURE [dbo].[pa_TrackableCouponsProcess_Insert] 
  @ProgramId        INT, 
  @maxRedeemCount   TINYINT,
  @Range			BIGINT, 
  @ExpireDate       DateTime,
  @RunAgain         INT OUTPUT, 
  @TotalAffected    INT OUTPUT,
  @MINROW           BIGINT OUTPUT  
AS 

  SET NOCOUNT ON;

  DECLARE @ROWS_TO_PROCESS int   
  DECLARE @MAXROWS BIGINT
  declare @StartTime datetime;
  
  SET @ROWS_TO_PROCESS = 3000
  SET @TotalAffected=0;
  SET @RunAgain=1;
  SET @StartTime=getdate();
  SET @MINROW=@Range;
 
  IF @MINROW = 0
	SET @MINROW =(SELECT MIN(PKID) FROM TrackableCouponsInsertTemp);

  
  SET @MAXROWS=(SELECT MAX(PKID) FROM TrackableCouponsInsertTemp)
  
  WHILE ( @MINROW < = @MAXROWS) and @StartTime>dateadd(MI, -5, getdate())
  BEGIN
  
	INSERT INTO TrackableCoupons with(RowLock)(CouponCode,ProgramID,InitialUses,RemainingUses,ExpireDate)
			 SELECT TCT.CouponCode,@ProgramId,
			  CASE
				 WHEN ISNULL(TCT.Uses,0)=0 THEN @maxRedeemCount
				 WHEN cast(TCT.Uses AS smallint) < @maxRedeemCount THEN cast(TCT.Uses AS smallint)
				 WHEN cast(TCT.Uses AS smallint) >=@maxRedeemCount THEN  @maxRedeemCount
        	END	AS InitialUses,
        	CASE
				 WHEN ISNULL(TCT.Uses,0)=0 THEN @maxRedeemCount
				 WHEN cast(TCT.Uses AS smallint) < @maxRedeemCount THEN  cast(TCT.Uses AS smallint)
				 WHEN cast(TCT.Uses AS smallint) >= @maxRedeemCount THEN  @maxRedeemCount
        	END	AS 	RemainingUses,
            @ExpireDate			
			 FROM TrackableCouponsInsertTemp AS TCT WITH(NOLOCK) where TCT.PKID BETWEEN @MINROW AND @MINROW + @ROWS_TO_PROCESS 
	SET @TotalAffected=@TotalAffected+ @@rowcount
    SET @MINROW = @MINROW + @ROWS_TO_PROCESS + 1 	
	
  END

  IF (@MINROW>@MAXROWS)
	SET @RunAgain=0;
GO

GRANT EXECUTE ON [dbo].[pa_TrackableCouponsProcess_Insert] TO [Copient_Logix_uspRole] AS [dbo];
GO

print 'processing storedprocedures/dbo.pa_TripletAcctBalRptSelect.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TripletAcctBalRptSelect.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TripletAcctBalRptSelect]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletAcctBalRptSelect]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TripletAcctBalRptSelect]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletAcctBalRptSelect]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TripletAcctBalRptSelect] @ProgramCode nvarchar(50), @Offer1 bigint, @Offer3 bigint, @EarnProgramID int,
												   @Offer1CondQty float, @Offer2CondQty int, @ReportStartDate datetime, @ReportEndDate datetime 
AS
BEGIN
	SET NOCOUNT ON;

	select distinct @ProgramCode as programcode, REPLICATE(''0'', 26 - Len(C.InitialCardID)) + C.InitialCardID as memberid,
		(select IsNull(Sum(QtyEarned) - Sum(QtyUsed), 0)
			from StoredValue with (NoLock)
			where OfferID = @Offer1 and CustomerPK=C.CustomerPK and Deleted=0 and ExpireDate >= @ReportEndDate and EarnedDate between @ReportStartDate and @ReportEndDate) as standingcount,
		(select IsNull(Sum(QtyEarned) - Sum(QtyUsed), 0) as RewardCount 
			from StoredValue with (NoLock)
			where OfferID = @Offer3 and CustomerPK=C.CustomerPK and Deleted=0 and ExpireDate >= @ReportEndDate and EarnedDate between @ReportStartDate and @ReportEndDate) as rewardcount,
		(select IsNull(Sum(QtyEarned * Value) - Sum(QtyUsed * Value), 0) as CurrentCredit 
			from StoredValue with (NoLock)
			where OfferID = @Offer3 and CustomerPK=C.CustomerPK and Deleted=0 and ExpireDate >= @ReportEndDate and EarnedDate between @ReportStartDate and @ReportEndDate) as currentcredit,
		(select (@Offer2CondQty - IsNull(sum(QtyEarned) - sum(QtyUsed),0))
			from StoredValue with (NoLock)
			where SVProgramID = @EarnProgramID and CustomerPK = C.CustomerPK and Deleted=0 and EarnedDate between @ReportStartDate and @ReportEndDate) as valuetoearn
	from Customers C with (NoLock)
	inner join StoredValue SV with (NoLock) on SV.CustomerPK = C.CustomerPK and SV.Deleted=0;
	
END

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TripletAcctBalRptSelect] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TripletAdjustSelect.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TripletAdjustSelect.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TripletAdjustSelect]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletAdjustSelect]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TripletAdjustSelect]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletAdjustSelect]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TripletAdjustSelect] @ProgramCode nvarchar(50), @RewardProgramID int,
											   @ReportStartDate datetime, @ReportEndDate datetime

AS
BEGIN
	SET NOCOUNT ON;

	select distinct @ProgramCode as programcode, REPLICATE(''0'', 26 - Len(C.InitialCardID)) + C.InitialCardID as memberid,
		'''' as adjustmenttype,
		Sum(IsNull(SV.QtyEarned,0)) - Sum(IsNull(SV.QtyUsed,0)) as pointsadjusted,
		CONVERT(VARCHAR(10), SV.EarnedDate, 120) as adjustmenttime
	from Customers C with (NoLock)
	inner join SVHistory SV with (NoLock) on SV.CustomerPK = C.CustomerPK
	where SV.Deleted=0 and SV.StatusFlag <> 3 and SV.LastLocationID = -9
		and SV.EarnedDate between @ReportStartDate and @ReportEndDate and SV.SVProgramID = @RewardProgramID
	GROUP BY C.InitialCardID, SV.EarnedDate
	ORDER BY AdjustmentTime;
END

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TripletAdjustSelect] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TripletAgingRptSelect.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TripletAgingRptSelect.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TripletAgingRptSelect]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletAgingRptSelect]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TripletAgingRptSelect]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletAgingRptSelect]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TripletAgingRptSelect] @ProgramCode nvarchar(50), @EarnProgramID int, 
	@RewardProgramID int, @ReportStartDate datetime, @ReportEndDate datetime
AS
  SET NOCOUNT ON;
  BEGIN
  select distinct @ProgramCode as programcode, 
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and ExpireDate >= @ReportEndDate) as outstandingpointsvalue,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0) 
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and ExpireDate >= @ReportEndDate) as outstandingrewardsvalue,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -30, @ReportEndDate) and @ReportEndDate) as p0to30value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -60, @ReportEndDate) and DATEADD(day, -31, @ReportEndDate)) as p31to60value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -90, @ReportEndDate) and DATEADD(day, -61, @ReportEndDate)) as p61to90value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -180, @ReportEndDate) and DATEADD(day, -91, @ReportEndDate)) as p91to180value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -365, @ReportEndDate) and DATEADD(day, -181, @ReportEndDate)) as p181to365value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1 and EarnedDate < DATEADD(day, -365, @ReportEndDate)) as poutsidevalue,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @EarnProgramID and Deleted=0 and StatusFlag=1) as pallvalue,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @RewardProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -30, @ReportEndDate) and @ReportEndDate) as r0to30value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @RewardProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -60, @ReportEndDate) and DATEADD(day, -31, @ReportEndDate)) as r31to60value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @RewardProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -90, @ReportEndDate) and DATEADD(day, -61, @ReportEndDate)) as r61to90value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @RewardProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -180, @ReportEndDate) and DATEADD(day, -91, @ReportEndDate)) as r91to180value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @RewardProgramID and Deleted=0 and StatusFlag=1 and EarnedDate between DATEADD(day, -365, @ReportEndDate) and DATEADD(day, -181, @ReportEndDate)) as r181to365value,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @RewardProgramID and Deleted=0 and StatusFlag=1 and EarnedDate < DATEADD(day, -365, @ReportEndDate)) as routsidevalue,
    (select IsNull( (Sum(QtyEarned) - Sum(QtyUsed)) * Avg(Value), 0)
      from StoredValue with (NoLock)
      where SVProgramID = @RewardProgramID and Deleted=0 and StatusFlag=1) as rallvalue,
    (select IsNull( Sum(QtyUsed) * Avg(Value), 0)
      from SVHistory with (NoLock)
      where SVProgramID in (@EarnProgramID, @RewardProgramID) and Deleted=0 and StatusFlag=3) as expiredliability
    from StoredValue SV with (NoLock) 
   where SV.Deleted = 0 and SV.SVProgramID IN (@EarnProgramID, @RewardProgramID);
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TripletAgingRptSelect] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TripletExpRptSelect.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TripletExpRptSelect.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TripletExpRptSelect]    Script Date: 12/27/2010 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletExpRptSelect]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TripletExpRptSelect]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletExpRptSelect]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TripletExpRptSelect] @ProgramCode nvarchar(50), @RewardProgramID int,
											   @ReportStartDate datetime, @ReportEndDate datetime

AS
BEGIN
	SET NOCOUNT ON;

	select distinct @ProgramCode as programcode, REPLICATE(''0'', 26 - Len(C.InitialCardID)) + C.InitialCardID as memberid,
		SV.LocalID as rewardid, CONVERT(VARCHAR(30), MAX(SV.ExpireDate), 126) as expirationdate,
		IsNull(Sum(SV.Value) * Sum(SV.QtyUsed),0) as rewardvalue
	from Customers C with (NoLock)
	inner join SVHistory SV with (NoLock) on SV.CustomerPK = C.CustomerPK
	where SV.Deleted=0 and SV.StatusFlag=3
		and SV.EarnedDate between @ReportStartDate and @ReportEndDate and SV.SVProgramID = @RewardProgramID
	GROUP BY SV.LocalID, C.InitialCardID
	ORDER BY expirationdate;
END

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TripletExpRptSelect] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_TripletPtExpRptSelect.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_TripletPtExpRptSelect.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_TripletPtExpRptSelect]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletPtExpRptSelect]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_TripletPtExpRptSelect]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_TripletPtExpRptSelect]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_TripletPtExpRptSelect] @ProgramCode nvarchar(50), @EarnProgramID int,
												 @ReportStartDate datetime, @ReportEndDate datetime
AS
BEGIN
	SET NOCOUNT ON;

	select distinct @ProgramCode as programcode, REPLICATE(''0'', 26 - Len(C.InitialCardID)) + C.InitialCardID as memberid,
		IsNull(Sum(SVH.QtyUsed), 0) as pointsexpired, CONVERT(VARCHAR(30), Max(SVH.ExpireDate), 126) as expirationdate,
		(Select IsNull(Sum(SVH.QtyUsed),0)
			from SVHistory SVH with (NoLock)
			where SVProgramID = @EarnProgramID and CustomerPK = C.CustomerPK and Deleted=0 and StatusFlag=3 and EarnedDate between @ReportStartDate and @ReportEndDate)
	     +
		(Select IsNull(Sum(SV.QtyEarned) - Sum(SV.QtyUsed), 0)
			from StoredValue SV with (NoLock)
			where SVProgramID = @EarnProgramID and CustomerPK = C.CustomerPK and Deleted=0 and StatusFlag=1 and EarnedDate between @ReportStartDate and @ReportEndDate) as before,
		(Select IsNull(Sum(SV.QtyEarned) - Sum(SV.QtyUsed), 0)
			from StoredValue SV with (NoLock)
			where SVProgramID = @EarnProgramID and CustomerPK = C.CustomerPK and Deleted=0 and StatusFlag=1 and EarnedDate between @ReportStartDate and @ReportEndDate) as after
	from SVHistory SVH with (NoLock) 
	inner join Customers C with (NoLock) on C.CustomerPK = SVH.CustomerPK
	where SVH.SVProgramID = @EarnProgramID and SVH.Deleted=0
		and SVH.StatusFlag=3 and EarnedDate between @ReportStartDate and @ReportEndDate
	group by C.CustomerPK, C.InitialCardID;

END

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_TripletPtExpRptSelect] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_CustomerLockDelete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_CustomerLockDelete.StoredProcedure.sql 38623 2011-10-13 19:40:01Z mark $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockDelete]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_CustomerLockDelete]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_CustomerLockDelete]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_UE_CustomerLockDelete] @CustomerPK bigint, @LockingGroupID bigint, @Count int output
AS 
  declare @CUPK bigint
  declare @HHPK bigint

  delete from CPE_CustomerLocks with (RowLock) where CustomerPK=@CustomerPK and LockingGroupID=@LockingGroupID;
  set @Count = @@rowcount;
  
  select @CUPK=CustomerPk,@HHPK=isnull(HHPK,0) from Customers with (NoLock) where CustomerPK=@CustomerPK;
  if @CUPK is not null begin
    if @HHPK > 0 begin
      delete from CPE_CustomerLocks with (RowLock) where CustomerPK=@HHPK and LockingGroupID=@LockingGroupID;
    end
    set @Count = @Count + @@rowcount;
  end
GO

GRANT EXECUTE ON [dbo].[pa_UE_CustomerLockDelete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_CustomerLockFetch.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_CustomerLockFetch.StoredProcedure.sql 92937 2015-09-15 06:45:27Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockFetch]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_CustomerLockFetch]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_CustomerLockFetch]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_CustomerLockFetch] @CustomerPK bigint, @LockingGroupID bigint
AS 
  select LockID, UE_LockExpireDate, isnull(LocationID, 0) as LocationID from CustomerLock with (NoLock)
   where CustomerPK=@CustomerPK and LockingGroupID=@LockingGroupID;
GO

GRANT EXECUTE ON [dbo].[pa_UE_CustomerLockFetch] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_CustomerLockInsert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_CustomerLockInsert.StoredProcedure.sql 92937 2015-09-15 06:45:27Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockInsert]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_CustomerLockInsert]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_CustomerLockInsert]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_CustomerLockInsert] @CustomerPK bigint, @LockingGroupID bigint, @LocationID bigint, @UE_LockExpireDate datetime, @TerminalNumber int = 0, @TransactionNumber nvarchar(128) = '0', @LockID bigint OUTPUT  
AS 
  insert into CustomerLock (CustomerPK,LockingGroupID,LocationID,TerminalNumber,TransactionNumber,LockedDate, UE_LockExpireDate)
  values (@CustomerPK,@LockingGroupID,@LocationID,@TerminalNumber,@TransactionNumber,getdate(), @UE_LockExpireDate);
  set @LockID=Scope_Identity();
GO

GRANT EXECUTE ON [dbo].[pa_UE_CustomerLockInsert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_CustomerLockSetUnlockDelay.sql'; 
--
GO
-- $Id: dbo.pa_UE_CustomerLockSetUnlockDelay.sql 92937 2015-09-15 06:45:27Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockDelete]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_CustomerLockSetUnlockDelay]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_CustomerLockSetUnlockDelay]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_UE_CustomerLockSetUnlockDelay] @CustomerPK bigint, @LockingGroupID bigint, @UE_LockExpireDate datetime, @Count int output
AS 
  declare @CUPK bigint
  declare @HHPK bigint

  update CustomerLock with (RowLock) set UE_LockExpireDate=@UE_LockExpireDate where CustomerPK=@CustomerPK and LockingGroupID=@LockingGroupID;
  set @Count = @@rowcount;
  
  select @CUPK=CustomerPk,@HHPK=isnull(HHPK,0) from Customers with (NoLock) where CustomerPK=@CustomerPK;
  if @CUPK is not null begin
    if @HHPK > 0 begin
      update CustomerLock with (RowLock) set UE_LockExpireDate=@UE_LockExpireDate where CustomerPK=@HHPK and LockingGroupID=@LockingGroupID;
    end
    set @Count = @Count + @@rowcount;
  end
GO

GRANT EXECUTE ON [dbo].[pa_UE_CustomerLockSetUnlockDelay] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_CustomerLockStatus.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_CustomerLockStatus.StoredProcedure.sql 38623 2011-10-13 19:40:01Z mark $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockStatus]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_CustomerLockStatus]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_CustomerLockStatus]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_UE_CustomerLockStatus] @CustomerPK bigint, @LockingGroupID bigint, @LockStatus int
AS 
  declare @CUPK bigint  
  declare @HHPK bigint  
  declare @LockID bigint
  set @LockID=0;
  
  select @CUPK=CustomerPk,@HHPK=isnull(HHPK,0) from Customers with (NoLock) where CustomerPK=@CustomerPK;  
  if @CUPK is null begin  
    -- The customer record is not found, so return the status as 2 (not found)
    select 0 as LockID, @CustomerPK as UserID, 0 as HHPrimaryID, 2 as LockStatus, @LockingGroupID as LockingGroupID,getdate() as LockedTime;  
  end else begin  
    if @HHPK = 0 begin  
     set @CUPK = @CustomerPK;  
    end else begin  
     set @CUPK = @HHPK;  
    end  
    select @LockID=LockID from CPE_CustomerLocks with (NoLock) where CustomerPK=@CUPK and LockingGroupID=@LockingGroupID and getdate()<UE_LockExpireDate;  
    if @LockID>0 begin
      if @LockStatus=-1 begin
        -- we didn't set a lock during the request, so since there is a non-expired lock, we have to change the lock status to 1 (already locked)
        set @LockStatus=1 
      end
        select LockID, @CustomerPK as UserID, @HHPK as HHPrimaryID, @LockStatus as LockStatus, LockingGroupID as LockingGroupID, LockedDate as LockedTime  
          from CPE_CustomerLocks with (NoLock) where CustomerPK=@CUPK and LockingGroupID=@LockingGroupID;  
    end 
    else begin
      -- The customer record is not locked, so return the status as 3 (not locked)
      select 0 as LockID, @CustomerPK as UserID,0 as HHPrimaryID, 3 as LockStatus,@LockingGroupID as LockingGroupID,getdate() as LockedTime;  
    end 
  end  
GO

GRANT EXECUTE ON [dbo].[pa_UE_CustomerLockStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_CustomerLockUpdate.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_CustomerLockUpdate.StoredProcedure.sql 92937 2015-09-15 06:45:27Z vb185060 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CPE_CustomerLockUpdate]    Script Date: 12/27/2010 16:44:17 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_CustomerLockUpdate]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_CustomerLockUpdate]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_CustomerLockUpdate] @CustomerPK bigint, @LockingGroupID bigint, @LocationID bigint, @UE_LockExpireDate datetime, @TerminalNumber int = 0, @TransactionNumber nvarchar(128) = '0'
AS 
  update CustomerLock with (RowLock) 
     set LockedDate=getdate(),LocationId=@LocationID,TerminalNumber=@TerminalNumber,TransactionNumber=@TransactionNumber, UE_LockExpireDate=@UE_LockExpireDate 
   where CustomerPK=@CustomerPK and LockingGroupID=@LockingGroupID;
GO

GRANT EXECUTE ON [dbo].[pa_UE_CustomerLockUpdate] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_GCI_CR.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_CR.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972

-- 20101028.MM: Created new pa_UE_GCI_CR stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_CR]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_CR]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_CR] @CustomerPK bigint, @HHPK bigint
AS 
  if not(@HHPK=0) 
    select CustomerResponseID as UserResponseID, CustomerPK as UserID, IncentiveID, OnScreenAdID, RewardOptionID, Response 
      from CustomerResponses with (NoLock) 
      where (CustomerPK=@CustomerPK or CustomerPK=@HHPK) and Deleted=0;
  else
    select CustomerResponseID as UserResponseID, CustomerPK as UserID, IncentiveID, OnScreenAdID, RewardOptionID, Response 
    from CustomerResponses with (NoLock) 
    where CustomerPK=@CustomerPK and Deleted=0;
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_CR] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_GCI_GM.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_GM.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972

-- 20101028.MM: Created new pa_UE_GCI_GM stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_GM]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_GM]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_GM] @CustomerPK bigint, @HHPK bigint
AS 
  if not(@HHPK=0) 
    select isnull(CustomerPK, 0) as UserID, isnull(CustomerGroupID, 0) as UserGroupID 
      from GroupMembership with (NoLock) 
      where (CustomerPK=@CustomerPK or CustomerPK=@HHPK) and Deleted=0;
  else
    select isnull(CustomerPK, 0) as UserID, isnull(CustomerGroupID, 0) as UserGroupID 
      from GroupMembership with (NoLock) 
      where CustomerPK=@CustomerPK and Deleted=0;
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_GM] TO [Copient_Logix] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_UE_GCI_Points.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_Points.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972

-- 20101028.MM: Created new pa_UE_GCI_Points stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_Points]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_Points]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_Points] @CustomerPK bigint, @HHPK bigint
AS 
  if not(@HHPK=0) 
    select ProgramID, CustomerPK as UserID, convert(int, round(Amount,0)) as PointsAmt 
      from Points with (NoLock) 
      where (CustomerPK=@CustomerPK or CustomerPK=@HHPK) and ProgramID is not NULL;
  else
    select ProgramID, CustomerPK as UserID, convert(int, round(Amount,0)) as PointsAmt 
      from Points with (NoLock) 
      where CustomerPK=@CustomerPK and ProgramID is not NULL;
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_Points] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_GCI_PointsPending.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_PointsPending.StoredProcedure.sql 1 2015-01-07 12:48:40Z db123627 $
-- Build Version: 7.3.1.138972

-- 20150107.MM: Created new pa_UE_GCI_PointsPending stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_PointsPending]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_PointsPending]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_PointsPending] @CustomerPK bigint, @HHPK bigint
AS 
  set nocount on;
  
  if not(@HHPK=0) 
    select ProgramID, CustomerPK as UserID, convert(int, round(EarnedAmount,0)) as EarnedAmount, convert(int, round(RedeemedAmount,0)) as RedeemedAmount, CartID 
      from PointsPending with (NoLock) 
      where (CustomerPK=@CustomerPK or CustomerPK=@HHPK) and ProgramID is not NULL and (Deleted=0);
  else
    select ProgramID, CustomerPK as UserID, convert(int, round(EarnedAmount,0)) as EarnedAmount, convert(int, round(RedeemedAmount,0)) as RedeemedAmount, CartID 
      from PointsPending with (NoLock) 
      where CustomerPK=@CustomerPK and ProgramID is not NULL and (Deleted=0);
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_PointsPending] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_GCI_RA.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_RA.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972

-- 20101028.MM: Created new pa_UE_GCI_RA stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_RA]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_RA]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_RA] @CustomerPK bigint, @HHPK bigint
AS 
  if not(@HHPK=0) 
    select LocalID, ServerSerial, RewardAccumulationID, RewardOptionID, CustomerPK as UserID, QtyPurchased, 
           TotalPrice, convert(varchar, AccumulationDate, 120) as AccumulationDate, OverThreshold, 2 as WaitingACK
      from CPE_RewardAccumulation with (NoLock) 
      where (CustomerPK=@CustomerPK or CustomerPK=@HHPK) and Deleted=0;
  else
    select LocalID, ServerSerial, RewardAccumulationID, RewardOptionID, CustomerPK as UserID, QtyPurchased, 
           TotalPrice, convert(varchar, AccumulationDate, 120) as AccumulationDate, OverThreshold, 2 as WaitingACK
      from CPE_RewardAccumulation with (NoLock) 
      where CustomerPK=@CustomerPK and Deleted=0;
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_RA] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_GCI_RD.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_RD.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972

-- 20101028.MM: Created new pa_UE_GCI_RD stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_RD]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_RD]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_RD] @CustomerPK bigint, @HHPK bigint
AS 
  if not(@HHPK=0) 
    select RD.DistributionID, RD.IncentiveID, RD.RewardOptionID, RD.Phase, RD.CustomerPK as UserID, 
           convert(varchar, RD.DistributionDate, 120) as DistributionDate 
      from CPE_RewardDistribution as RD with (NoLock) 
      where (RD.CustomerPK=@CustomerPK or RD.CustomerPK=@HHPK) and RD.deleted=0;
  else
    select RD.DistributionID, RD.IncentiveID, RD.RewardOptionID, RD.Phase, RD.CustomerPK as UserID, 
           convert(varchar, RD.DistributionDate, 120) as DistributionDate 
      from CPE_RewardDistribution as RD with (NoLock) 
      where RD.CustomerPK=@CustomerPK and RD.deleted=0;
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_RD] TO [Copient_Logix] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_UE_GCI_RewardDistributionPending.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_RewardDistributionPending.StoredProcedure.sql 1 2015-01-07 12:48:40Z db123627 $
-- Build Version: 7.3.1.138972

-- 20150107.MM: Created new pa_UE_GCI_RewardDistributionPending stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_RewardDistributionPending]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_RewardDistributionPending]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_RewardDistributionPending] @CustomerPK bigint, @HHPK bigint
AS 
  set nocount on;
  
  if not(@HHPK=0) 
    select RDP.PKID as DistributionID, RDP.IncentiveID, RDP.RewardOptionID, RDP.CustomerPK as UserID, 
           convert(varchar, RDP.POSTimeStamp, 120) as DistributionDate, RDP.CartID
      from CPE_RewardDistributionPending as RDP with (NoLock) 
      where (RDP.CustomerPK=@CustomerPK or RDP.CustomerPK=@HHPK) and RDP.deleted=0;
  else
    select RDP.PKID as DistributionID, RDP.IncentiveID, RDP.RewardOptionID, RDP.CustomerPK as UserID, 
           convert(varchar, RDP.POSTimeStamp, 120) as DistributionDate, RDP.CartID
      from CPE_RewardDistributionPending as RDP with (NoLock) 
      where RDP.CustomerPK=@CustomerPK and RDP.deleted=0;
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_RewardDistributionPending] TO [Copient_Logix] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_UE_GCI_RewardLimitVariablesPending.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_RewardLimitVariablesPending.StoredProcedure.sql 1 2015-01-07 12:48:40Z db123627 $
-- Build Version: 7.3.1.138972

-- 20150107.MM: Created new pa_UE_GCI_RewardLimitVariablesPending stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_RewardLimitVariablesPending]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_RewardLimitVariablesPending]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_RewardLimitVariablesPending] @CustomerPK bigint, @HHPK bigint
AS 
  set nocount on;
  
  if not(@HHPK=0) 
    select CustomerPK as UserID, PromoVarID, convert(int, round(Amount,0)) as Amount, CartID 
      from RewardLimitVariablesPending with (NoLock) 
      where (CustomerPK=@CustomerPK or CustomerPK=@HHPK) and (Deleted=0);
  else
    select CustomerPK as UserID, PromoVarID, convert(int, round(Amount,0)) as Amount, CartID 
      from RewardLimitVariablesPending with (NoLock) 
      where CustomerPK=@CustomerPK and (Deleted=0);
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_RewardLimitVariablesPending] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_GCI_StoredValue.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_UE_GCI_StoredValue.StoredProcedure.sql 79308 2014-06-01 23:10:05Z mv250132 $
-- Build Version: 7.3.1.138972

-- 20101028.MM: Created new pa_UE_GCI_StoredValue stored procedure
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_GCI_StoredValue]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pa_UE_GCI_StoredValue]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_UE_GCI_StoredValue] @CustomerPK bigint, @HHPK bigint
AS 
  if not(@HHPK=0) 
    select isnull(LocalID, 0) as LocalID, isnull(ServerSerial, 0) as ServerSerial, isnull(SVProgramID, 0) as SVProgramID, 
           isnull(OfferID, 0) as IncentiveID, isnull(SV.CustomerPK, 0) as CustomerPK, isnull(QtyEarned, 0) as QtyEarned, 
           isnull(QtyUsed, 0) as QtyUsed, isnull(Value, 0) as Value, convert(varchar, isnull(EarnedDate, '1/1/1980'), 120) as EarnedDate, 
           isnull(EarnedLocationID, 0) as EarnedLocationID, convert(varchar, isnull(ExpireDate, '1/1/1980'), 120) as ExpireDate, 
           Case ExternalID When NULL Then '0' When '' Then '0' Else ExternalID end as ExternalID
      from StoredValue as SV with (NoLock) 
      where (SV.CustomerPK=@CustomerPK or SV.CustomerPK=@HHPK) and SV.StatusFlag=1;
  else
    select isnull(LocalID, 0) as LocalID, isnull(ServerSerial, 0) as ServerSerial, isnull(SVProgramID, 0) as SVProgramID, 
           isnull(OfferID, 0) as IncentiveID, isnull(SV.CustomerPK, 0) as CustomerPK, isnull(QtyEarned, 0) as QtyEarned, 
           isnull(QtyUsed, 0) as QtyUsed, isnull(Value, 0) as Value, convert(varchar, isnull(EarnedDate, '1/1/1980'), 120) as EarnedDate, 
           isnull(EarnedLocationID, 0) as EarnedLocationID, convert(varchar, isnull(ExpireDate, '1/1/1980'), 120) as ExpireDate, 
           Case ExternalID When NULL Then '0' When '' Then '0' Else ExternalID end as ExternalID
      from StoredValue as SV with (NoLock) 
      where SV.CustomerPK=@CustomerPK and SV.StatusFlag=1;
GO

GRANT EXECUTE ON [dbo].[pa_UE_GCI_StoredValue] TO [Copient_Logix] AS [dbo]
GO



print 'processing storedprocedures/dbo.pa_UE_InsertData_PointsPending.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_InsertData_PointsPending]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_InsertData_PointsPending]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_UE_InsertData_PointsPending]
  @TableNum varchar(4),
  @Operation varchar(2),   
  @Col1 varchar(255),     -- CustomerPK  
  @Col2 varchar(255),     -- ProgramID
  @Col3 varchar(255),     -- EarnedAmount  
  @Col4 varchar(255),     -- RedeemedAmount
  @Col5 varchar(255),     -- CartID  
  @Col6 varchar(255),     -- ExtLocationCode  
  @Col7 varchar(255)='0', -- LogixTransNum  
  @Col8 varchar(255)=NULL, -- POSTimeStamp datetime 
  @PromoVarID bigint=0,        -- The PromoVar for the Program
  @LocalServerID int, @LocationID bigint, @WaitingACK int  
AS   
  -- $Id: dbo.pa_UE_InsertData_PointsPending.StoredProcedure.sql 1 2014-12-4 07:25:06Z db123627 $
  -- Build Version: 7.3.1.138972
  set nocount on;
  
  insert into PointsPending with (RowLock) (CustomerPK, ProgramID, PromoVarID, EarnedAmount, RedeemedAmount, CartID, ExtLocationCode, Deleted, LastUpdate, LogixTransNum, POSTimeStamp, ServerSerial, LocationID, WaitingACK)  
  values (@Col1, @Col2, @PromoVarID, @Col3, @Col4, @Col5, @Col6, 0, GetDate(), @Col7, @Col8, @LocalServerID, @LocationID, @WaitingACK); 
  
  -- Increment customer's UpdateCount column
  update Customers with (RowLock) set UpdateCount=UpdateCount+1 where CustomerPK=@Col1;
GO

GRANT EXECUTE ON [dbo].[pa_UE_InsertData_PointsPending] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_InsertData_RewardDistributionPending.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_InsertData_RewardDistributionPending]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_InsertData_RewardDistributionPending]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_UE_InsertData_RewardDistributionPending] @TableNum varchar(4), @Operation varchar(2),   
  @Col1 varchar(255),     -- CustomerPK  
  @Col2 varchar(255),     -- IncentiveID
  @Col3 varchar(255),     -- RewardOptionID  
  @Col4 varchar(255),     -- CartID  
  @Col5 varchar(255),     -- ExtLocationCode  
  @Col6 varchar(255)='0', -- LogixTransNum  
  @Col7 varchar(255)=NULL, -- POSTimeStamp datetime 
  @PromoVarID bigint=0,        -- The PromoVar for the Program
  @LocalServerID int,
  @LocationID bigint,
  @WaitingACK int  
AS   
  -- $Id: dbo.pa_UE_InsertData_RewardDistributionPending.StoredProcedure.sql 1 2014-12-4 07:25:06Z db123627 $
  -- Build Version: 7.3.1.138972
  set nocount on;
  declare @CurrentAmount decimal;

  insert into CPE_RewardDistributionPending with (RowLock) (CustomerPK, IncentiveID, RewardOptionID, CartID, ExtLocationCode, Deleted, LastUpdate, LogixTransNum, POSTimeStamp, ServerSerial, LocationID, WaitingACK)  
  values (@Col1, @Col2, @Col3, @Col4, @Col5, 0, GetDate(), @Col6, @Col7, @LocalServerID, @LocationID, @WaitingACK); 

  select @CurrentAmount=Amount from DistributionVariablesPending with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@col1 and Deleted=0;
  if (@CurrentAmount > 0)
  begin
    update DistributionVariablesPending with (RowLock) set Amount=@CurrentAmount+1 where PromoVarID=@PromoVarID and CustomerPK=@col1 and Deleted=0;
  end
  else
  begin
    insert into DistributionVariablesPending with (RowLock) (CustomerPK, PromoVarID, Amount, CartID, ExtLocationCode, Deleted, LastUpdate, LogixTransNum, POSTimeStamp, ServerSerial, LocationID, WaitingACK)  
    values (@Col1, @PromoVarID, 1, @Col4, @Col5, 0, GetDate(), @Col6, @Col7, @LocalServerID, @LocationID, @WaitingACK); 
  end

  -- Increment customer's UpdateCount column
  update Customers with (RowLock) set UpdateCount=UpdateCount+1 where CustomerPK=@Col1;
GO

GRANT EXECUTE ON [dbo].[pa_UE_InsertData_RewardDistributionPending] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_InsertData_RewardLimitVariablesPending.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_InsertData_RewardLimitVariablesPending]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_InsertData_RewardLimitVariablesPending]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_UE_InsertData_RewardLimitVariablesPending] @TableNum varchar(4), @Operation varchar(2),   
  @Col1 varchar(255),     -- CustomerPK  
  @Col2 varchar(255),     -- PromoVarID
  @Col3 varchar(255),     -- Amount  
  @Col4 varchar(255),     -- CartID
  @Col5 varchar(255),     -- ExtLocationCode  
  @Col6 varchar(255)='0', -- LogixTransNum  
  @Col7 varchar(255)=NULL, -- POSTimeStamp datetime 
  @LocalServerID int, @LocationID bigint, @WaitingACK int  
AS   
  -- $Id: dbo.pa_UE_InsertData_RewardLimitVariablesPending.StoredProcedure.sql 1 2014-12-4 07:25:06Z db123627 $
  -- Build Version: 7.3.1.138972
  set nocount on;
  
  insert into RewardLimitVariablesPending with (RowLock) (CustomerPK, PromoVarID, Amount, CartID, ExtLocationCode, Deleted, LastUpdate, LogixTransNum, POSTimeStamp, ServerSerial, LocationID, WaitingACK)  
  values (@Col1, @Col2, @Col3, @Col4, @Col5, 0, GetDate(), @Col6, @Col7, @LocalServerID, @LocationID, @WaitingACK); 
  
  -- Increment customer's UpdateCount column
  update Customers with (RowLock) set UpdateCount=UpdateCount+1 where CustomerPK=@Col1;
GO

GRANT EXECUTE ON [dbo].[pa_UE_InsertData_RewardLimitVariablesPending] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_clearLookupData.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_clearLookupData]   Script Date 21/08/2015 164418 ******/
--stored procedure to handle customer locking. will be called from Customer Service 
IF EXISTS (
        SELECT *
        FROM sys.objects
        WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_clearLookupData]')
            AND type IN (
                N'P'
                ,N'PC'
                )
        )
DROP PROCEDURE [dbo].[pa_UE_clearLookupData]
GO

CREATE PROCEDURE [dbo].[pa_UE_clearLookupData] @LockID bigint
AS 
BEGIN
declare @cupk bigint

select @cupk = lockedby from CustomerLock with (nolock) where LockID=@LockID

delete from CustomerLock with (rowlock) where LockID=@LockID
delete from Points_Locked with (rowlock) WHERE CustomerPK = @CUPK
delete FROM StoredValue_Locked with (rowlock) WHERE CustomerPK = @CUPK
delete FROM CPE_RewardDistribution_Locked with (rowlock) WHERE CustomerPK = @CUPK

END
GO
GRANT EXECUTE ON [dbo].[pa_UE_clearLookupData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_fetchCustomerLookupData.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_fetchCustomerLookupData]   Script Date 21/08/2015 164418 ******/
--stored procedure to fetch customer lookup data, will be called from customer service
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_fetchCustomerLookupData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_fetchCustomerLookupData]
GO

CREATE PROCEDURE [dbo].[pa_UE_fetchCustomerLookupData] @CustomerId nvarchar(400),@CustomerIdType int, @IncludePending bit = '0'
AS
BEGIN
DECLARE @CustomerPK BIGINT

SELECT @CustomerPK=CardIDs.CustomerPK FROM CardIDs WITH (NOLOCK) 
WHERE CardIDs.ExtCardID = @CustomerId AND CardIDs.CardTypeID= @CustomerIdType

--getCardIDFromRawData
SELECT ci.CardPK
,ci.CustomerPK AS UserID
,ci.ExtCardIDOriginal AS ExtCardID
,ci.CardStatusID
,ci.CardTypeID
FROM CardIDs ci WITH (NOLOCK)
WHERE ci.CustomerPK = @CustomerPK
    
--getUserFromRawData
SELECT C.CustomerPK AS UserID
,isnull(C.InitialCardIDOriginal, '') AS ClientUserID1
,isnull(C.HHPK, 0) AS HHPrimaryID
,isnull(C.FirstName, '') AS FirstName
,isnull(C.LastName, '') AS LastName
,CASE c.CustomerTypeID
    WHEN 2 THEN 0
    ELSE c.CustomerTypeID
    END AS HHRec
    ,c.CustomerTypeID
    ,C.Employee
    ,C.CurrYearSTD
    ,C.LastYearSTD
    ,isnull(C.CustomerStatusID, 0) AS CustomerStatusID
    ,c.AltIDOptOut
    ,isnull(C.EmployeeID, '') AS EmployeeID
    ,isnull(Ce.AirmileMemberID, '') AS AirmileMemberID
    ,isnull(C.Prefix, '') AS Prefix
    ,isnull(C.Suffix, '') AS Suffix
    ,C.CreatedDate
    ,HH.InitialCardID as HouseholdID
    ,HH.InitialCardTypeID as Householdtype
FROM Customers c WITH (NOLOCK)
LEFT JOIN Customers HH WITH (NOLOCK) ON HH.CustomerPK = C.HHPK 
LEFT JOIN CustomerExt ce WITH (NOLOCK) ON C.CustomerPK = CE.CustomerPK
WHERE C.CustomerPK=@CustomerPK
    

--getUserGroupFromRawData
SELECT isnull(CustomerPK, 0) AS UserID
        ,isnull(CustomerGroupID, 0) AS UserGroupID
    FROM GroupMembership WITH (NOLOCK)
    WHERE CustomerPK = @CustomerPK
        AND Deleted = 0

--getUserPointsFromRawData
SELECT ProgramID
        ,CustomerPK AS UserID
        ,convert(INT, round(Amount, 0)) AS PointsAmt
    FROM Points WITH (NOLOCK)
    WHERE CustomerPK = @CustomerPK
        AND ProgramID IS NOT NULL

--If caller wants pending table data
IF @IncludePending = '1' 
BEGIN
    --getUserPendingPointsFromRawData
    SELECT ProgramID
          ,PromoVarID
          ,CustomerPK AS UserID
          ,convert(INT, round(EarnedAmount, 0)) AS EarnedAmount
          ,convert(INT, round(RedeemedAmount, 0)) AS RedeemedAmount
          ,CartID AS ShoppingCartId
          ,ExtLocationCode
          ,POSTimeStamp
        FROM PointsPending WITH (NOLOCK)
        WHERE CustomerPK = @CustomerPK
            AND ProgramID IS NOT NULL
            AND Deleted = 0
END

--getUserSVFromRawData
SELECT  isnull(SVProgramID, 0) AS SVProgramID
        ,max(isnull(OfferID, 0) )AS IncentiveID
        ,max(isnull(SV.CustomerPK, 0)) AS CustomerPK
        ,sum(isnull(QtyEarned, 0)) AS QtyEarned
        ,sum(isnull(QtyUsed, 0)) AS QtyUsed
        ,max(isnull(Value, 0)) AS Value
        ,min(EarnedDate) AS EarnedDate
        ,max(isnull(EarnedLocationID, 0) )AS EarnedLocationID
        ,min(ExpireDate) AS ExpireDate
        ,min(CASE ExternalID
            WHEN NULL
                THEN '0'
            WHEN ''
                THEN '0'
            ELSE ExternalID
            END) AS ExternalID
    FROM StoredValue AS SV WITH (NOLOCK)
    where ExpireDate > GETDATE() and SV.CustomerPK = @CustomerPK
        AND SV.StatusFlag = 1
    group by SVProgramID

--getUserRDFromRawData 
SELECT RD.DistributionID
        ,RD.IncentiveID
        ,RD.RewardOptionID
        ,RD.Phase
        ,RD.CustomerPK AS UserID
        ,RD.DistributionDate AS DistributionDate
    FROM CPE_RewardDistribution AS RD WITH (NOLOCK)
    WHERE RD.CustomerPK = @CustomerPK
        AND RD.deleted = 0 

--If caller wants pending table data
IF @IncludePending = '1' 
BEGIN
    --getUserPendingRewardDistributionFromRawData 
    SELECT IncentiveID
          ,RewardOptionID
          ,CustomerPK AS UserID
          ,CartID AS ShoppingCartId
          ,ExtLocationCode
          ,POSTimeStamp
        FROM CPE_RewardDistributionPending WITH (NOLOCK)
        WHERE CustomerPK = @CustomerPK
            AND Deleted = 0 
END

--getUserPrefFromRawData
SELECT CustomerPK
    ,PreferenceID
    ,isnull(Value, '') AS Value
FROM CustomerPreferences WITH (NOLOCK)
WHERE CustomerPK = @CustomerPK

--getUserPrefFromRawDataMV
SELECT CustomerPK
    ,PreferenceID
    ,isnull(Value, '') AS Value
FROM CustomerPreferencesMV WITH (NOLOCK)
WHERE CustomerPK = @CustomerPK
    AND Deleted = 0
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_fetchCustomerLookupData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_fetchLockStatus.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_fetchLockStatus]   Script Date 21/08/2015 164418 ******/
--stored procedure to handle customer locking. will be called from Customer Service 
IF EXISTS (
        SELECT *
        FROM sys.objects
        WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_fetchLockStatus]')
            AND type IN (
                N'P'
                ,N'PC'
                )
        )
DROP PROCEDURE [dbo].[pa_UE_fetchLockStatus]
GO 


CREATE PROCEDURE [dbo].[pa_UE_fetchLockStatus] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LockExpireInterval INT
AS
BEGIN
DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @CustomerLockPK BIGINT
DECLARE @lockedbycardid NVARCHAR(400)
Declare @lockedbycardtype int
declare @lockedByPk bigint

SET @CustomerLockPK = 0
SET @LockID = 0

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci
INNER JOIN Customers c ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId

ORDER BY ci.CardPK ASC

IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
END
ELSE
BEGIN
    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
    END

    IF @LockExpireInterval = 0
    BEGIN
        SELECT TOP 1 @LockID = LockID, @lockedbypk = lockedby
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
        ORDER BY UE_LockExpireDate DESC
    END
    ELSE
    BEGIN
        SELECT TOP 1 @LockID = LockID, @lockedbypk = lockedby
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
            AND getdate() < UE_LockExpireDate
        ORDER BY UE_LockExpireDate DESC
    END

    IF @LockID > 0
    BEGIN
        --customer record is locked, return lockstatus 1(already locked)
                
        SELECT TOP 1 cl.LockID
            ,CASE WHEN cl.LockedByIdentifier IS NULL THEN @CustomerId ELSE cl.LockedByIdentifier END AS UserID
            ,CASE WHEN cl.CardTypeID IS NULL THEN @CustomerIdType ELSE cl.CardTypeID END AS UserIDType
            ,c.HHPK AS HHPrimaryID
            ,1 AS LockStatus
            ,cl.LockedDate AS LockedTime
            ,cl.LocationID
            ,cl.TerminalNumber
            ,cl.TransactionNumber
        FROM customerlock cl
        INNER JOIN customers c WITH (NOLOCK) ON c.customerpk = cl.lockedby
        WHERE cl.CustomerPK = @CustomerLockPK
        ORDER BY UE_LockExpireDate DESC
    END
    ELSE
    BEGIN
        -- The customer record is not locked, return lockstatus as 3(available for locking)
        SELECT 0 AS LockID
            ,@CustomerId AS UserID
            ,@CustomerIdType AS UserIDType
            ,@HHPK AS HHPrimaryID
            ,3 AS LockStatus
            ,getdate() AS LockedTime
            ,0 AS LocationID
            ,0 AS TerminalNumber
            ,'' AS TransactionNumber
    END
END
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_fetchLockStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_fetchLockedData.sql'; 
--
GO
IF EXISTS (
        SELECT *
        FROM sys.objects
        WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_fetchLockedData]')
            AND type IN (
                N'P'
                ,N'PC'
                )
        )
    DROP PROCEDURE [dbo].[pa_UE_fetchLockedData]
GO


CREATE PROCEDURE [dbo].[pa_UE_fetchLockedData] @CustomerPK bigint, @IncludePending bit = '0'

AS
BEGIN
--getCardIDFromRawData
SELECT ci.CardPK
,ci.CustomerPK AS UserID
,ci.ExtCardIDOriginal AS ExtCardID
,ci.CardStatusID
,ci.CardTypeID
FROM CardIDs ci WITH (NOLOCK)
WHERE ci.CustomerPK = @CustomerPK
    
--getUserFromRawData
SELECT C.CustomerPK AS UserID
,isnull(C.InitialCardIDOriginal, '') AS ClientUserID1
,isnull(C.HHPK, 0) AS HHPrimaryID
,isnull(C.FirstName, '') AS FirstName
,isnull(C.LastName, '') AS LastName
,CASE c.CustomerTypeID
    WHEN 2 THEN 0
    ELSE c.CustomerTypeID
    END AS HHRec
    ,c.CustomerTypeID
    ,C.Employee
    ,C.CurrYearSTD
    ,C.LastYearSTD
    ,isnull(C.CustomerStatusID, 0) AS CustomerStatusID
    ,c.AltIDOptOut
    ,isnull(C.EmployeeID, '') AS EmployeeID
    ,isnull(Ce.AirmileMemberID, '') AS AirmileMemberID
    ,isnull(C.Prefix, '') AS Prefix
    ,isnull(C.Suffix, '') AS Suffix
    ,C.CreatedDate
    ,HH.InitialCardID as HouseholdID
    ,HH.InitialCardTypeID as Householdtype
FROM Customers c WITH (NOLOCK)
LEFT JOIN Customers HH WITH (NOLOCK) ON HH.CustomerPK = C.HHPK
LEFT JOIN CustomerExt ce WITH (NOLOCK) ON C.CustomerPK = CE.CustomerPK
WHERE C.CustomerPK=@CustomerPK
    

--getUserGroupFromRawData
SELECT isnull(CustomerPK, 0) AS UserID
        ,isnull(CustomerGroupID, 0) AS UserGroupID
    FROM GroupMembership WITH (NOLOCK)
    WHERE CustomerPK = @CustomerPK
        AND Deleted = 0

--getUserPointsFromRawData
SELECT ProgramID
        ,CustomerPK AS UserID
        ,convert(INT, round(Amount, 0)) AS PointsAmt
    FROM Points_Locked WITH (NOLOCK)
    WHERE CustomerPK = @CustomerPK
        AND ProgramID IS NOT NULL

--If caller wants pending table data
IF @IncludePending = '1' 
BEGIN
    --getUserPendingPointsFromRawData
    SELECT ProgramID
          ,PromoVarID
          ,CustomerPK AS UserID
          ,convert(INT, round(EarnedAmount, 0)) AS EarnedAmount
          ,convert(INT, round(RedeemedAmount, 0)) AS RedeemedAmount
          ,CartID AS ShoppingCartId
          ,ExtLocationCode
          ,POSTimeStamp
        FROM PointsPending WITH (NOLOCK)
        WHERE CustomerPK = @CustomerPK
            AND ProgramID IS NOT NULL
            AND Deleted = 0
END

--getUserSVFromRawData
SELECT  isnull(SVProgramID, 0) AS SVProgramID
        ,isnull(OfferID, 0) AS IncentiveID
        ,isnull(SV.CustomerPK, 0) AS CustomerPK
        ,isnull(QtyEarned, 0) AS QtyEarned
        ,isnull(QtyUsed, 0) AS QtyUsed
        ,isnull(Value, 0) AS Value
        ,EarnedDate AS EarnedDate
        ,isnull(EarnedLocationID, 0) AS EarnedLocationID
        ,ExpireDate AS ExpireDate
        ,CASE ExternalID
            WHEN NULL
                THEN '0'
            WHEN ''
                THEN '0'
            ELSE ExternalID
            END AS ExternalID
    FROM StoredValue_Locked AS SV WITH (NOLOCK)
    WHERE SV.CustomerPK = @CustomerPK


--getUserRDFromRawData 
SELECT 0 AS DistributionID
        ,RD.IncentiveID
        ,RD.RewardOptionID
        ,RD.Phase
        ,RD.CustomerPK AS UserID
        ,RD.DistributionDate AS DistributionDate
    FROM CPE_RewardDistribution_Locked AS RD WITH (NOLOCK)
    WHERE RD.CustomerPK = @CustomerPK
        AND RD.deleted = 0 

--If caller wants pending table data
IF @IncludePending = '1' 
BEGIN
    --getUserPendingRewardDistributionFromRawData 
    SELECT IncentiveID
          ,RewardOptionID
          ,CustomerPK AS UserID
          ,CartID AS ShoppingCartId
          ,ExtLocationCode
          ,POSTimeStamp
        FROM CPE_RewardDistributionPending WITH (NOLOCK)
        WHERE CustomerPK = @CustomerPK
            AND Deleted = 0 
END

--getUserPrefFromRawData
SELECT CustomerPK
    ,PreferenceID
    ,isnull(Value, '') AS Value
FROM CustomerPreferences WITH (NOLOCK)
WHERE CustomerPK = @CustomerPK

--getUserPrefFromRawDataMV
SELECT CustomerPK
    ,PreferenceID
    ,isnull(Value, '') AS Value
FROM CustomerPreferencesMV WITH (NOLOCK)
WHERE CustomerPK = @CustomerPK
    AND Deleted = 0
    
END 
GO
GRANT EXECUTE ON [dbo].[pa_UE_fetchLockedData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_fetchLookupData.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_fetchLookupData]   Script Date 21/08/2015 164418 ******/
--stored procedure to handle customer locking. will be called from Customer Service 
IF EXISTS (
        SELECT *
        FROM sys.objects
        WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_fetchLookupData]')
            AND type IN (
                N'P'
                ,N'PC'
                )
        )
DROP PROCEDURE [dbo].[pa_UE_fetchLookupData]
GO

CREATE PROCEDURE [dbo].[pa_UE_fetchLookupData] @CustomerPK bigint, @IncludePending bit = '0'
AS
BEGIN
--getCardIDFromRawData
SELECT ci.CardPK
,ci.CustomerPK AS UserID
,ci.ExtCardIDOriginal AS ExtCardID
,ci.CardStatusID
,ci.CardTypeID
FROM CardIDs ci WITH (NOLOCK)
WHERE ci.CustomerPK = @CustomerPK
    
--getUserFromRawData
SELECT C.CustomerPK AS UserID
,isnull(C.InitialCardIDOriginal, '') AS ClientUserID1
,isnull(C.HHPK, 0) AS HHPrimaryID
,isnull(C.FirstName, '') AS FirstName
,isnull(C.LastName, '') AS LastName
,CASE c.CustomerTypeID
    WHEN 2 THEN 0
    ELSE c.CustomerTypeID
    END AS HHRec
    ,c.CustomerTypeID
    ,C.Employee
    ,C.CurrYearSTD
    ,C.LastYearSTD
    ,isnull(C.CustomerStatusID, 0) AS CustomerStatusID
    ,c.AltIDOptOut
    ,isnull(C.EmployeeID, '') AS EmployeeID
    ,isnull(Ce.AirmileMemberID, '') AS AirmileMemberID
    ,isnull(C.Prefix, '') AS Prefix
    ,isnull(C.Suffix, '') AS Suffix
    ,C.CreatedDate
    ,HH.InitialCardID as HouseholdID
    ,HH.InitialCardTypeID as Householdtype
FROM Customers c WITH (NOLOCK)
LEFT JOIN Customers HH ON HH.CustomerPK = C.HHPK
LEFT JOIN CustomerExt ce WITH (NOLOCK) ON C.CustomerPK = CE.CustomerPK
WHERE C.CustomerPK=@CustomerPK
    

--getUserGroupFromRawData
SELECT isnull(CustomerPK, 0) AS UserID
        ,isnull(CustomerGroupID, 0) AS UserGroupID
    FROM GroupMembership WITH (NOLOCK)
    WHERE CustomerPK = @CustomerPK
        AND Deleted = 0

--getUserPointsFromRawData
SELECT ProgramID
        ,CustomerPK AS UserID
        ,convert(INT, round(Amount, 0)) AS PointsAmt
    FROM Points WITH (NOLOCK)
    WHERE CustomerPK = @CustomerPK
        AND ProgramID IS NOT NULL

--If caller wants pending table data
IF @IncludePending = '1' 
BEGIN
    --getUserPendingPointsFromRawData
    SELECT ProgramID
          ,PromoVarID
          ,CustomerPK AS UserID
          ,convert(INT, round(EarnedAmount, 0)) AS EarnedAmount
          ,convert(INT, round(RedeemedAmount, 0)) AS RedeemedAmount
          ,CartID AS ShoppingCartId
          ,ExtLocationCode
          ,POSTimeStamp
        FROM PointsPending WITH (NOLOCK)
        WHERE CustomerPK = @CustomerPK
            AND ProgramID IS NOT NULL
            AND Deleted = 0
END

--getUserSVFromRawData
SELECT  isnull(SVProgramID, 0) AS SVProgramID
        ,max(isnull(OfferID, 0) )AS IncentiveID
        ,max(isnull(SV.CustomerPK, 0)) AS CustomerPK
        ,sum(isnull(QtyEarned, 0)) AS QtyEarned
        ,sum(isnull(QtyUsed, 0)) AS QtyUsed
        ,max(isnull(Value, 0)) AS Value
        ,min(EarnedDate) AS EarnedDate
        ,max(isnull(EarnedLocationID, 0) )AS EarnedLocationID
        ,min(ExpireDate) AS ExpireDate
        ,min(CASE ExternalID
            WHEN NULL
                THEN '0'
            WHEN ''
                THEN '0'
            ELSE ExternalID
            END) AS ExternalID
    FROM StoredValue AS SV WITH (NOLOCK)
    where ExpireDate > GETDATE() and SV.CustomerPK = @CustomerPK
        AND SV.StatusFlag = 1
    group by SVProgramID


--getUserRDFromRawData 
SELECT RD.DistributionID
        ,RD.IncentiveID
        ,RD.RewardOptionID
        ,RD.Phase
        ,RD.CustomerPK AS UserID
        ,RD.DistributionDate AS DistributionDate
    FROM CPE_RewardDistribution AS RD WITH (NOLOCK)
    WHERE RD.CustomerPK = @CustomerPK
        AND RD.deleted = 0 

--If caller wants pending table data
IF @IncludePending = '1' 
BEGIN
    --getUserPendingRewardDistributionFromRawData 
    SELECT IncentiveID
          ,RewardOptionID
          ,CustomerPK AS UserID
          ,CartID AS ShoppingCartId
          ,ExtLocationCode
          ,POSTimeStamp
        FROM CPE_RewardDistributionPending WITH (NOLOCK)
        WHERE CustomerPK = @CustomerPK
            AND Deleted = 0 
END

--getUserPrefFromRawData
SELECT CustomerPK
    ,PreferenceID
    ,isnull(Value, '') AS Value
FROM CustomerPreferences WITH (NOLOCK)
WHERE CustomerPK = @CustomerPK

--getUserPrefFromRawDataMV
SELECT CustomerPK
    ,PreferenceID
    ,isnull(Value, '') AS Value
FROM CustomerPreferencesMV WITH (NOLOCK)
WHERE CustomerPK = @CustomerPK
    AND Deleted = 0
    
 END   
GO
GRANT EXECUTE ON [dbo].[pa_UE_fetchLookupData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_forceCustomerLock.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_forceCustomerLock]   Script Date 21/08/2015 164418 ******/
--stored procedure to handle customer locking. will be called from Customer Service 
IF EXISTS (
		SELECT *
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_forceCustomerLock]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[pa_UE_forceCustomerLock]
GO

CREATE PROCEDURE [dbo].[pa_UE_forceCustomerLock] @CustomerId NVARCHAR(400)
	,@CustomerIdType INT
	,@LocationId BIGINT
	,@TermNum INT
	,@TransNum NVARCHAR(128)
	,@LockExpireInterval INT
AS
BEGIN
	DECLARE @CUPK BIGINT
	DECLARE @HHPK BIGINT
	DECLARE @LockID BIGINT
	DECLARE @LockStatus INT
	DECLARE @CustomerLockPK BIGINT

	SET @CustomerLockPK = 0
	SET @LockID = 0
	SET @LockStatus = - 1

	SELECT TOP 1 @CUPK = c.CustomerPK
		,@HHPK = isnull(HHPK, 0)
	FROM CardIDs ci
	INNER JOIN Customers c ON c.CustomerPK = ci.CustomerPK
	WHERE ci.CardTypeID = @CustomerIdType
		AND ci.ExtCardID = @CustomerId

	ORDER BY ci.CardPK ASC

	IF @CUPK IS NULL
	BEGIN
		-- The customer record is not found, so return the status as 2 (not found)
		SELECT 0 AS LockID
			,@CustomerId AS UserID
			,@CustomerIdType AS UserIDType
			,0 AS HHPrimaryID
			,2 AS LockStatus
			,getdate() AS LockedTime
			,0 AS LocationID
			,0 AS TerminalNumber
			,'' AS TransactionNumber
	END
	ELSE
	BEGIN
		IF @HHPK = 0
		BEGIN
			SET @CustomerLockPK = @CUPK
		END
		ELSE
		BEGIN
			SET @CustomerLockPK = @HHPK
		END

		-- delete existing lock forcefully
		DELETE
		FROM customerlock
		WHERE CustomerPK = @CustomerLockPK

		DELETE
		FROM Points_Locked
		WHERE CustomerPK = @CUPK

		DELETE
		FROM StoredValue_Locked
		WHERE CustomerPK = @CUPK

		DELETE
		FROM CPE_RewardDistribution_Locked
		WHERE CustomerPK = @CUPK

		-- insert a new lock
		INSERT INTO customerlock (
			CustomerPK
			,LockingGroupID
			,LocationID
			,TerminalNumber
			,TransactionNumber
			,LockedDate
			,UE_LockExpireDate
			,lockedby
			,LockedByIdentifier
            ,CardTypeID
			)
		VALUES (
			@CustomerLockPK
			,0
			,@LocationId
			,@TermNum
			,@TransNum
			,getDate()
			,DATEADD(MI, @LockExpireInterval, GETDATE())
			,@CUPK
			,@CustomerId
            ,@CustomerIdType
			)

		EXEC pa_UE_saveLookupData @CUPK

		SELECT LockID AS LockID
			,customerpk AS UserID
			,@CustomerIdType AS UserIDType
			,@HHPK AS HHPrimaryID
			,0 AS LockStatus
			,getdate() AS LockedTime
			,LocationID
			,TerminalNumber
			,TransactionNumber
		FROM customerlock
		WHERE customerpk = @CustomerLockPK
	END
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_forceCustomerLock] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_handleCustomerLock.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleCustomerLock]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleCustomerLock]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleCustomerLock] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
AS
BEGIN
DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @LockStatus INT
DECLARE @CustomerLockPK BIGINT
DECLARE @LOCKEDBY BIGINT
DECLARE @LOCKEDLOCATION BIGINT
DECLARE @LOCKEDTERMINAL INT
DECLARE @LOCKEDTRANSNUM NVARCHAR(128)

SET @CustomerLockPK = 0
SET @LockID = 0
SET @LockStatus = - 1

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci
INNER JOIN Customers c ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId

ORDER BY ci.CardPK ASC

IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
END
ELSE
BEGIN
    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
    END

    IF @LockExpireInterval = 0
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
        ORDER BY UE_LockExpireDate DESC
    END
    ELSE
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
            AND getdate() < UE_LockExpireDate
        ORDER BY UE_LockExpireDate DESC
    END

    IF @LockID > 0
    BEGIN
        --if we get a request from the same customer id and same transaction id, return the status as lock acquired
        IF @CUPK = @LOCKEDBY
            AND @LocationId = @LOCKEDLOCATION
            AND @TermNum = @LOCKEDTERMINAL
            AND @TransNum = @LOCKEDTRANSNUM
        BEGIN
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,0 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            ORDER BY UE_LockExpireDate DESC
        END
        ELSE
        BEGIN
            -- we didn't set a lock during the request, so since there is a non-expired lock, we have to change the lock status to 1 (already locked)
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,1 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            ORDER BY UE_LockExpireDate DESC
        END
    END
    ELSE
    BEGIN
        -- The customer record is not locked, insert a new lock
        
        delete from Points_Locked WHERE CustomerPK = @CUPK
        delete FROM StoredValue_Locked WHERE CustomerPK = @CUPK
        delete FROM CPE_RewardDistribution_Locked WHERE CustomerPK = @CUPK
                
        INSERT INTO customerlock (
            CustomerPK
            ,LockingGroupID
            ,LocationID
            ,TerminalNumber
            ,TransactionNumber
            ,LockedDate
            ,UE_LockExpireDate
            ,lockedby
			,LockedByIdentifier
            ,CardTypeID
            )
        VALUES (
            @CustomerLockPK
            ,0
            ,@LocationId
            ,@TermNum
            ,@TransNum
            ,getDate()
            ,DATEADD(MI, @LockExpireInterval, GETDATE())
            ,@CUPK
			,@CustomerId
            ,@CustomerIdType
            )
            
        exec pa_UE_saveLookupData @CUPK

        SELECT TOP 1 LockID AS LockID
            ,@CustomerId AS UserID
            ,@CustomerIdType AS UserIDType
            ,@HHPK AS HHPrimaryID
            ,0 AS LockStatus
            ,getdate() AS LockedTime
            ,LocationID
            ,TerminalNumber
            ,TransactionNumber
        FROM customerlock WITH (NOLOCK)
        WHERE customerpk = @CustomerLockPK
        ORDER BY UE_LockExpireDate DESC
    END
END
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleCustomerLock] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_handleForcedLookup.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleForcedLookup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleForcedLookup]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleForcedLookup] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
    ,@IncludePending bit = '0'    
AS
BEGIN
DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @LockStatus INT
DECLARE @CustomerLockPK BIGINT

SET @CustomerLockPK = 0
SET @LockID = 0
SET @LockStatus = - 1

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci WITH (NOLOCK) 
INNER JOIN Customers c WITH (NOLOCK)  ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId
	
IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber

    EXEC dbo.pa_UE_fetchCustomerLookupData @CustomerId
        ,@CustomerIdType
        ,@IncludePending
END
ELSE
BEGIN
    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
    END

    -- delete existing lock forcefully
    DELETE
    FROM customerlock
    WHERE CustomerPK = @CustomerLockPK

    -- insert a new lock
    INSERT INTO customerlock (
        CustomerPK
        ,LockingGroupID
        ,LocationID
        ,TerminalNumber
        ,TransactionNumber
        ,LockedDate
        ,UE_LockExpireDate
        ,lockedby
        )
    VALUES (
        @CustomerLockPK
        ,0
        ,@LocationId
        ,@TermNum
        ,@TransNum
        ,getDate()
        ,DATEADD(MI, @LockExpireInterval, GETDATE())
        ,@CUPK
        )

    SELECT LockID AS LockID
        ,customerpk AS UserID
        ,@CustomerIdType AS UserIDType
        ,@HHPK AS HHPrimaryID
        ,0 AS LockStatus
        ,getdate() AS LockedTime
        ,LocationID
        ,TerminalNumber
        ,TransactionNumber
    FROM customerlock
    WHERE customerpk = @CustomerLockPK

    EXEC dbo.pa_UE_saveLookupData @CustomerLockPK
    EXEC dbo.pa_UE_fetchCustomerLookupData @CustomerId
        ,@CustomerIdType
        ,@IncludePending
END

END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleForcedLookup] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_handleForcedLookupAutoEnroll.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleForcedLookupAutoEnroll]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleForcedLookupAutoEnroll]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleForcedLookupAutoEnroll] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
    ,@IncludePending bit = '0'
AS
BEGIN
DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @LockStatus INT
DECLARE @CustomerLockPK BIGINT

SET @CustomerLockPK = 0
SET @LockID = 0
SET @LockStatus = - 1

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci
INNER JOIN Customers c ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId
	
IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber

    EXEC dbo.pa_UE_fetchCustomerLookupData @CustomerId
        ,@CustomerIdType
        ,@IncludePending
END
ELSE
BEGIN
	-- if customer is found then make sure customer is associated with this location.
	exec pa_CPE_IN_UpdateCustomerLocation @CUPK , @LocationId
	
    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
         -- customer is associated with household so household information should also go in customer locations table
        exec pa_CPE_IN_UpdateCustomerLocation @HHPK , @LocationId 
    END

    -- delete existing lock forcefully
    DELETE
    FROM customerlock
    WHERE CustomerPK = @CustomerLockPK

    -- insert a new lock
    INSERT INTO customerlock (
        CustomerPK
        ,LockingGroupID
        ,LocationID
        ,TerminalNumber
        ,TransactionNumber
        ,LockedDate
        ,UE_LockExpireDate
        ,lockedby
		,LockedByIdentifier
        ,CardTypeID
        )
    VALUES (
        @CustomerLockPK
        ,0
        ,@LocationId
        ,@TermNum
        ,@TransNum
        ,getDate()
        ,DATEADD(MI, @LockExpireInterval, GETDATE())
        ,@CUPK
		,@CustomerId
        ,@CustomerIdType
        )

    SELECT LockID AS LockID
        ,customerpk AS UserID
        ,@CustomerIdType AS UserIDType
        ,@HHPK AS HHPrimaryID
        ,0 AS LockStatus
        ,getdate() AS LockedTime
        ,LocationID
        ,TerminalNumber
        ,TransactionNumber
    FROM customerlock
    WHERE customerpk = @CustomerLockPK

    EXEC dbo.pa_UE_saveLookupData @CustomerLockPK
    EXEC dbo.pa_UE_fetchCustomerLookupData @CustomerId
        ,@CustomerIdType
        ,@IncludePending
END

END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleForcedLookupAutoEnroll] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_handleLockingLookup.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_handleLockingLookup]   Script Date 21/08/2015 164418 ******/
--stored procedure to handle customer locking. will be called from Customer Service 
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleLockingLookup]')AND type IN (N'P',N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleLockingLookup]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleLockingLookup] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
    ,@IncludePending bit = '0'
AS
BEGIN
DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @LockStatus INT
DECLARE @CustomerLockPK BIGINT
DECLARE @LOCKEDBY BIGINT
DECLARE @LOCKEDLOCATION BIGINT
DECLARE @LOCKEDTERMINAL INT
DECLARE @LOCKEDTRANSNUM NVARCHAR(128)

SET @CustomerLockPK = 0
SET @LockID = 0
SET @LockStatus = - 1

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci WITH (NOLOCK) 
INNER JOIN Customers c WITH (NOLOCK)  ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId

IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
        
        exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @CustomerIdType, @IncludePending
END
ELSE
BEGIN
    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
    END

    IF @LockExpireInterval = 0
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
    END
    ELSE
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
            AND UE_LockExpireDate > getdate()
    END

    IF @LockID > 0
    BEGIN
        --if we get a request from the same customer id and same transaction id, return the status as lock already acquired
        IF @CUPK = @LOCKEDBY
            AND @LocationId = @LOCKEDLOCATION
            AND @TermNum = @LOCKEDTERMINAL
            AND @TransNum = @LOCKEDTRANSNUM
        BEGIN
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,0 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            --already acquired lock
            exec dbo.pa_UE_fetchLockedData @CUPK, @IncludePending
        END
        ELSE
        BEGIN
            -- we didn't set a lock during the request, so since there is a non-expired lock, we have to change the lock status to 1 (already locked)
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,1 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
        END
    END
    ELSE
    BEGIN
        -- The customer record is not locked, insert a new lock
        INSERT INTO customerlock with (rowlock)(
            CustomerPK
            ,LockingGroupID
            ,LocationID
            ,TerminalNumber
            ,TransactionNumber
            ,LockedDate
            ,UE_LockExpireDate
            ,lockedby
            )
        VALUES (
            @CustomerLockPK
            ,0
            ,@LocationId
            ,@TermNum
            ,@TransNum
            ,getDate()
            ,DATEADD(MI, @LockExpireInterval, GETDATE())
            ,@CUPK
            )

        SELECT TOP 1 LockID AS LockID
            ,@CustomerId AS UserID
            ,@CustomerIdType AS UserIDType
            ,@HHPK AS HHPrimaryID
            ,0 AS LockStatus
            ,getdate() AS LockedTime
            ,LocationID
            ,TerminalNumber
            ,TransactionNumber
        FROM customerlock WITH (NOLOCK)
        WHERE customerpk = @CustomerLockPK
        
        exec dbo.pa_UE_saveLookupData @CustomerLockPK
        exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
    END
END
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleLockingLookup] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_handleLockingLookupAutoEnroll.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_handleLockingLookupAutoEnroll]   Script Date 21/08/2015 164418 ******/
--stored procedure to handle customer locking. will be called from Customer Service 
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleLockingLookupAutoEnroll]')AND type IN (N'P',N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleLockingLookupAutoEnroll]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleLockingLookupAutoEnroll] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
    ,@IncludePending bit = '0'
AS
BEGIN
DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @LockStatus INT
DECLARE @CustomerLockPK BIGINT
DECLARE @LOCKEDBY BIGINT
DECLARE @LOCKEDLOCATION BIGINT
DECLARE @LOCKEDTERMINAL INT
DECLARE @LOCKEDTRANSNUM NVARCHAR(128)

SET @CustomerLockPK = 0
SET @LockID = 0
SET @LockStatus = - 1

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci WITH (NOLOCK) 
INNER JOIN Customers c WITH (NOLOCK)  ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId

IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
        
        exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @CustomerIdType, @IncludePending
END
ELSE
BEGIN
	-- if customer is found then make sure customer is associated with this location.
	exec pa_CPE_IN_UpdateCustomerLocation @CUPK , @LocationId 

    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
         -- customer is associated with household so household information should also go in customer locations table
        exec pa_CPE_IN_UpdateCustomerLocation @HHPK , @LocationId 
    END

    IF @LockExpireInterval = 0
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
    END
    ELSE
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
            AND UE_LockExpireDate > getdate()
    END

    IF @LockID > 0
    BEGIN
        --if we get a request from the same customer id and same transaction id, return the status as lock already acquired
        IF @CUPK = @LOCKEDBY
            AND @LocationId = @LOCKEDLOCATION
            AND @TermNum = @LOCKEDTERMINAL
            AND @TransNum = @LOCKEDTRANSNUM
        BEGIN
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,0 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            --already acquired lock
            exec dbo.pa_UE_fetchLockedData @CUPK, @IncludePending
        END
        ELSE
        BEGIN
            -- we didn't set a lock during the request, so since there is a non-expired lock, we have to change the lock status to 1 (already locked)
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,1 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
        END
    END
    ELSE
    BEGIN
        -- The customer record is not locked, insert a new lock
        INSERT INTO customerlock with (rowlock)(
            CustomerPK
            ,LockingGroupID
            ,LocationID
            ,TerminalNumber
            ,TransactionNumber
            ,LockedDate
            ,UE_LockExpireDate
            ,lockedby
			,LockedByIdentifier
			,CardTypeID
            )
        VALUES (
            @CustomerLockPK
            ,0
            ,@LocationId
            ,@TermNum
            ,@TransNum
            ,getDate()
            ,DATEADD(MI, @LockExpireInterval, GETDATE())
            ,@CUPK
			,@CustomerId
			,@CustomerIdType
            )

        SELECT TOP 1 LockID AS LockID
            ,@CustomerId AS UserID
            ,@CustomerIdType AS UserIDType
            ,@HHPK AS HHPrimaryID
            ,0 AS LockStatus
            ,getdate() AS LockedTime
            ,LocationID
            ,TerminalNumber
            ,TransactionNumber
        FROM customerlock WITH (NOLOCK)
        WHERE customerpk = @CustomerLockPK
        
        exec dbo.pa_UE_saveLookupData @CustomerLockPK
        exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
    END
END
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleLockingLookupAutoEnroll] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_handleLookup.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_handleLookup]   Script Date 21/08/2015 164418 ******/
--stored procedure to fetch customer lookup data, will be called from customer service
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleLookup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleLookup]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleLookup] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
    ,@IncludePending bit = '0'
AS
BEGIN

DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @LockStatus INT
DECLARE @CustomerLockPK BIGINT
DECLARE @LOCKEDBY BIGINT
DECLARE @LOCKEDLOCATION BIGINT
DECLARE @LOCKEDTERMINAL INT
DECLARE @LOCKEDTRANSNUM NVARCHAR(128)

SET @CustomerLockPK = 0
SET @LockID = 0
SET @LockStatus = - 1

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci WITH (NOLOCK) 
INNER JOIN Customers c WITH (NOLOCK)  ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId

IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @CustomerIdType, @IncludePending
    
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
        
        
END
ELSE
BEGIN
-- if customer is found then make sure customer is associated with this location.
	exec pa_CPE_IN_UpdateCustomerLocation @CUPK , @LocationId   
	
    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
    END

    IF @LockExpireInterval = 0
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
    END
    ELSE
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
            AND UE_LockExpireDate > getdate()
    END

    IF @LockID > 0
    BEGIN
        --if we get a request from the same customer id and same transaction id, return the status as lock already acquired
        IF @CUPK = @LOCKEDBY
            AND @LocationId = @LOCKEDLOCATION
            AND @TermNum = @LOCKEDTERMINAL
            AND @TransNum = @LOCKEDTRANSNUM
        BEGIN
            exec dbo.pa_UE_fetchLockedData @CustomerLockPK, @IncludePending
            
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,0 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            --already acquired lock
            
        END
        ELSE
        BEGIN
            -- we didn't set a lock during the request, so since there is a non-expired lock, we have to change the lock status to 1 (already locked)
            exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
            
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,1 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            
        END
    END
    ELSE
    BEGIN
        -- The customer record is not locked, insert a new lock
        exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
        
        SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,1 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
    END
END
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleLookup] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_handleLookupAutoEnroll.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_handleLookupAutoEnroll]   Script Date 21/08/2015 164418 ******/
--stored procedure to fetch customer lookup data, will be called from customer service
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleLookupAutoEnroll]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleLookupAutoEnroll]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleLookupAutoEnroll] @CustomerId NVARCHAR(400)
    ,@CustomerIdType INT
    ,@LocationId BIGINT
    ,@TermNum INT
    ,@TransNum NVARCHAR(128)
    ,@LockExpireInterval INT
    ,@IncludePending bit = '0'
AS
BEGIN

DECLARE @CUPK BIGINT
DECLARE @HHPK BIGINT
DECLARE @LockID BIGINT
DECLARE @LockStatus INT
DECLARE @CustomerLockPK BIGINT
DECLARE @LOCKEDBY BIGINT
DECLARE @LOCKEDLOCATION BIGINT
DECLARE @LOCKEDTERMINAL INT
DECLARE @LOCKEDTRANSNUM NVARCHAR(128)

SET @CustomerLockPK = 0
SET @LockID = 0
SET @LockStatus = - 1

SELECT TOP 1 @CUPK = c.CustomerPK
    ,@HHPK = isnull(HHPK, 0)
FROM CardIDs ci WITH (NOLOCK) 
INNER JOIN Customers c WITH (NOLOCK)  ON c.CustomerPK = ci.CustomerPK
WHERE ci.CardTypeID = @CustomerIdType
    AND ci.ExtCardID = @CustomerId

IF @CUPK IS NULL
BEGIN
    -- The customer record is not found, so return the status as 2 (not found)
    exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @CustomerIdType, @IncludePending
    
    SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,2 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
        
        
END
ELSE
BEGIN
-- if customer is found then make sure customer is associated with this location.
	exec pa_CPE_IN_UpdateCustomerLocation @CUPK , @LocationId   
	
    IF @HHPK = 0
    BEGIN
        SET @CustomerLockPK = @CUPK
    END
    ELSE
    BEGIN
        SET @CustomerLockPK = @HHPK
          -- customer is associated with household so household information should also go in customer locations table
        exec pa_CPE_IN_UpdateCustomerLocation @HHPK , @LocationId 
    END

    IF @LockExpireInterval = 0
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
    END
    ELSE
    BEGIN
        SELECT TOP 1 @LockID = LockID
            ,@LOCKEDBY = LOCKEDBY
            ,@LOCKEDLOCATION = locationid
            ,@LOCKEDTERMINAL = terminalnumber
            ,@LOCKEDTRANSNUM = transactionnumber
        FROM customerlock WITH (NOLOCK)
        WHERE CustomerPK = @CustomerLockPK
            AND UE_LockExpireDate > getdate()
    END

    IF @LockID > 0
    BEGIN
        --if we get a request from the same customer id and same transaction id, return the status as lock already acquired
        IF @CUPK = @LOCKEDBY
            AND @LocationId = @LOCKEDLOCATION
            AND @TermNum = @LOCKEDTERMINAL
            AND @TransNum = @LOCKEDTRANSNUM
        BEGIN
            exec dbo.pa_UE_fetchLockedData @CustomerLockPK, @IncludePending
            
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,0 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            --already acquired lock
            
        END
        ELSE
        BEGIN
            -- we didn't set a lock during the request, so since there is a non-expired lock, we have to change the lock status to 1 (already locked)
            exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
            
            SELECT TOP 1 LockID
                ,@CustomerId AS UserID
                ,@CustomerIdType AS UserIDType
                ,@HHPK AS HHPrimaryID
                ,1 AS LockStatus
                ,LockedDate AS LockedTime
                ,LocationID
                ,TerminalNumber
                ,TransactionNumber
            FROM customerlock WITH (NOLOCK)
            WHERE CustomerPK = @CustomerLockPK
            
            
        END
    END
    ELSE
    BEGIN
        -- The customer record is not locked, insert a new lock
        exec dbo.pa_UE_fetchCustomerLookupData @CustomerId, @customeridtype, @IncludePending
        
        SELECT 0 AS LockID
        ,@CustomerId AS UserID
        ,@CustomerIdType AS UserIDType
        ,0 AS HHPrimaryID
        ,1 AS LockStatus
        ,getdate() AS LockedTime
        ,0 AS LocationID
        ,0 AS TerminalNumber
        ,'' AS TransactionNumber
    END
END
END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleLookupAutoEnroll] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UE_saveLookupData.sql'; 
--
GO
/****** Object  StoredProcedure [dbo].[pa_UE_saveLookupData]   Script Date 21/08/2015 164418 ******/
--stored procedure to handle customer locking. will be called from Customer Service 
IF EXISTS (
        SELECT *
        FROM sys.objects
        WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_saveLookupData]')
            AND type IN (
                N'P'
                ,N'PC'
                )
        )
    DROP PROCEDURE [dbo].[pa_UE_saveLookupData]
GO

CREATE PROCEDURE [dbo].[pa_UE_saveLookupData] @CustomerPK bigint

AS

BEGIN
delete from Points_Locked with (rowlock) WHERE CustomerPK = @CustomerPK
delete FROM StoredValue_Locked with (rowlock) WHERE CustomerPK = @CustomerPK
delete FROM CPE_RewardDistribution_Locked with (rowlock) WHERE CustomerPK = @CustomerPK


--getUserPointsFromRawData
insert into Points_Locked with (rowlock) (ProgramID
        ,CustomerPK 
        ,Amount)
SELECT ProgramID
        ,CustomerPK 
        ,Amount
    FROM Points WITH (NOLOCK)
    WHERE CustomerPK = @CustomerPK
        AND ProgramID IS NOT NULL

--getUserSVFromRawData
insert into StoredValue_Locked with (rowlock) (SVProgramID
        ,OfferID
        ,CustomerPK
        ,QtyEarned
        ,QtyUsed
        ,Value
        ,EarnedDate
        ,EarnedLocationID
        ,ExpireDate
        ,ExternalID) 
SELECT  isnull(SVProgramID, 0) AS SVProgramID
        ,max(isnull(OfferID, 0) )AS IncentiveID
        ,max(isnull(SV.CustomerPK, 0)) AS CustomerPK
        ,sum(isnull(QtyEarned, 0)) AS QtyEarned
        ,sum(isnull(QtyUsed, 0)) AS QtyUsed
        ,max(isnull(Value, 0)) AS Value
        ,min(EarnedDate) AS EarnedDate
        ,max(isnull(EarnedLocationID, 0) )AS EarnedLocationID
        ,min(ExpireDate) AS ExpireDate
        ,min(CASE ExternalID
            WHEN NULL
                THEN '0'
            WHEN ''
                THEN '0'
            ELSE ExternalID
            END) AS ExternalID
    FROM StoredValue AS SV WITH (NOLOCK)
    where ExpireDate > GETDATE() and SV.CustomerPK = @CustomerPK
        AND SV.StatusFlag = 1
    group by SVProgramID




--getUserRDFromRawData 
insert into CPE_RewardDistribution_Locked with (rowlock)(
        IncentiveID
        ,RewardOptionID
        ,Phase
        ,CustomerPK
        ,DistributionDate)
SELECT 
        RD.IncentiveID
        ,RD.RewardOptionID
        ,RD.Phase
        ,RD.CustomerPK
        ,RD.DistributionDate
    FROM CPE_RewardDistribution AS RD WITH (NOLOCK)
    WHERE RD.CustomerPK = @CustomerPK
        AND RD.deleted = 0

END

GO
GRANT EXECUTE ON [dbo].[pa_UE_saveLookupData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_UnsubscribePromotion.StoredProcedure.sql'; 
--
GO
/****** Object:  Procedure [dbo].[pa_UnsubscribePromotion]    Script Date: 10/13/2016 ******/
/****** Purpose: To get all the offers ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID('[dbo].[pa_UnsubscribePromotion]', 'P') AND type in ('P'))
    DROP PROCEDURE [dbo].[pa_UnsubscribePromotion]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_UnsubscribePromotion] @CustomerGroupID bigint, @CustomerID nvarchar(max), @cardType bigint  
AS
  SET NOCOUNT ON;
  Declare @CustomerPK int
  
  select @CustomerPK = CustomerPK from [dbo].[Customers] with (NoLock) where InitialCardID = @CustomerID and InitialCardTypeId=@cardType
  
  Delete from [dbo].[GroupMembership] with (RowLock) where CustomerGroupID = @CustomerGroupID and CustomerPK = @CustomerPK and Deleted=1
  
  Update [dbo].[GroupMembership] with (RowLock) set Deleted=1, Manual=1, LastUpdate=getdate(), CMOAStatusFlag=2, TCRMAStatusFlag=2, CPEStatusFlag=0, 
  UEStatusFlag=0 where CustomerGroupID=@CustomerGroupID and CustomerPK = @CustomerPK and Deleted=0  
GO
GRANT EXECUTE ON [dbo].[pa_UnsubscribePromotion] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pa_UpdateCoupons.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_UpdateCoupons]    Script Date: 06/24/2016 16:17:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UpdateCoupons]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UpdateCoupons]
GO

/****** Object:  StoredProcedure [dbo].[pa_UpdateCoupons]    Script Date: 06/24/2016 16:17:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC pa_UpdateCoupons (@UpdateCouponCodeRequest VARCHAR(MAX) = NULL)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @TrackableCoupons_Temp TABLE (
        ProgramId INT,
        CouponCode VARCHAR(150),
        RemainingUses INT,
        InitialUses INT,
        ExpDate DATETIME
    )

    DECLARE @UnUsedCoupons TABLE (
        CouponCode VARCHAR(150)
    )
    
    DECLARE @CouponRequestXML	  XML	=   @UpdateCouponCodeRequest,
		  @UnUsedCouponCount	  BIGINT	=   0
    
    DECLARE	 @CouponLength		 INT           = 20,
			 @Prefix			 NVARCHAR(150) = NULL,
			 @Suffix			 NVARCHAR(150) = NULL,
			 @StartRange		 VARCHAR(150)  = NULL,
			 @EndRange		 VARCHAR(150)  = NULL,
			 @CouponDataType	 VARCHAR(1)    = 'N',
			 @PrefixLength		 TINYINT		 = 0,
			 @SuffixLength		 TINYINT		 = 0,
			 @UsedCouponCount	 BIGINT	      = 0,
			 @PadLength		 INT		 = 0
                       
    SELECT	 @CouponLength	  =	  CouponLength,
			 @Prefix		  =	  ISNULL(Prefix,''),
			 @Suffix		  =	  ISNULL(Suffix,''),
			 @StartRange	  =	  StartRange,
			 @EndRange	  =	  EndRange,
			 @CouponDataType =	  PatternDataType		  
    FROM		 CouponPattern
    
    SELECT	 @PrefixLength	  = LEN(@Prefix),	   
			 @SuffixLength	  = LEN(@Suffix) 
    SELECT	 @PadLength	  = @CouponLength - (@PrefixLength + @SuffixLength)
    
    BEGIN
        BEGIN TRANSACTION;

            BEGIN TRY

                -- Parse the input request to read used CouponCodes along with ProgramId
                INSERT INTO @TrackableCoupons_Temp (CouponCode,
                        ProgramId,
                        RemainingUses,
                        InitialUses,
                        ExpDate)
                    SELECT
                        a.b.value('.', 'VARCHAR(150)') AS [CouponCode],
                        c.d.value('.', 'INT') AS [ProgramId],
                        e.f.value('.', 'INT') AS [RemainingUses],
                        e.f.value('.', 'INT') AS [InitialUses],
                        g.h.value('.', 'DATETIME') AS [ExpDate]
                    FROM @CouponRequestXML.nodes('/couponUpdates/couponData')
                    AS
                    [root] ([child])
                    CROSS APPLY child.nodes('coupon') a (b)
                        CROSS APPLY child.nodes('programId') c (d)
                        CROSS APPLY child.nodes('uses') e (f)
                        OUTER APPLY child.nodes('expDate') g (h)

                --Insert Used CouponCodes along with ProgramId into TrackableCoupons
                INSERT INTO TrackableCoupons WITH (ROWLOCK)
                SELECT CouponCode, ProgramId, RemainingUses, InitialUses, ExpDate FROM @TrackableCoupons_Temp
                    
                
                -- Parse the input request to read unused CouponCodes
                INSERT INTO @UnUsedCoupons (CouponCode)
                    SELECT
                        a.b.value('.', 'VARCHAR(150)') AS [CouponCode]
                    FROM @CouponRequestXML.nodes('/couponUpdates')
                    AS
                    [root] ([child])
                    CROSS APPLY child.nodes('unusedCoupons') a (b)

                -- Inserting unused Coupons into UnunsedCoupons table, later which at the time of FillCouponStock(threshold case), they will be moved to CouponStock
                INSERT INTO UnusedCoupons WITH (ROWLOCK)
                SELECT CouponCode FROM @UnUsedCoupons
                
                -- Return CouponStock Balance, which will be used by caller to take decission on Filling CouponStock
			 SELECT COUNT(1) AS 'CouponStockBalance' FROM CouponStock WITH (NOLOCK)
			 
                -- Updating the UsedCouponCount in CouponPattern
			 SELECT @UnUsedCouponCount = COUNT(1) from @UnUsedCoupons
                
			 UPDATE CouponPattern WITH (ROWLOCK)
			 SET UsedCouponCount = UsedCouponCount - @UnUsedCouponCount
			 
			 -- Return UsedCouponCount and IsMailSent from CouponPattern
			 SELECT  UsedCouponCount AS  'UsedCouponCount',
				    IsMailSent	   AS  'IsMailSent'
			 FROM CouponPattern WITH (NOLOCK)           

            END TRY

            BEGIN CATCH
                
                SELECT
                    ERROR_NUMBER() AS ErrorNumber,
                    ERROR_SEVERITY() AS ErrorSeverity,
                    ERROR_STATE() AS ErrorState,
                    ERROR_PROCEDURE() AS ErrorProcedure,
                    ERROR_LINE() AS ErrorLine,
                    ERROR_MESSAGE() AS ErrorMessage;

                IF @@TRANCOUNT > 0
                    ROLLBACK TRANSACTION;
            END CATCH;

            IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

    END
END
GO
GRANT EXECUTE ON [dbo].[pa_UpdateCoupons] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Update_CustomerDetails.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Update_CustomerDetails]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Update_CustomerDetails]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_Update_CustomerDetails] @CustomerPK bigint, @Prefix nvarchar(20), @FirstName nvarchar(50), @MiddleName nvarchar(50),   
            @LastName nvarchar(50), @Suffix nvarchar(20), @Address nvarchar(1000), @City nvarchar(1000), @State nvarchar(1000), @Zip nvarchar(1000),   
            @PhoneAsEntered nvarchar(100), @PhoneDigitsOnly nvarchar(100), @MobilePhoneAsEntered nvarchar(100), @MobilePhoneDigitsOnly nvarchar(100), @Country nvarchar(50), @Email nvarchar(1400), @DateOfBirth nvarchar(50), @Password nvarchar(400),  
            @Employee bit, @EmployeeID nvarchar(26), @TestCustomer bit, @CustomerStatusID int, @NoPassword bit=0,@AltIDOptOut int, @UpdateOK bit OUTPUT  
                             
AS   
  SET NOCOUNT ON;  
  set @UpdateOK=0;  
  
  Update Customers with (RowLock) set Prefix=@Prefix, FirstName=@FirstName, MiddleName=@MiddleName, LastName=@LastName, Suffix=@Suffix,   
    Password = case when @NoPassword=1 then Password else @Password end,   
    Employee=@Employee, EmployeeID=@EmployeeID, TestCard=@TestCustomer, CustomerStatusID=@CustomerStatusID, AltIDOptOut= @AltIDOptOut  
    where CustomerPK=@CustomerPK;  
  if @@RowCount=0 begin   
    set @UpdateOK=1;  
  end  
    
  if not exists(select 1 from CustomerExt where CustomerPK=@CustomerPK) begin  
    Insert into CustomerExt (CustomerPK, Address, City, State, Zip, PhoneAsEntered, PhoneDigitsOnly, Email, Country, DateOfBirth, MobilePhoneAsEntered, MobilePhoneDigitsOnly)   
      values (@CustomerPK, @Address, @City, @State, @Zip, @PhoneAsEntered, @PhoneDigitsOnly, @Email, @Country, @DateOfBirth, @MobilePhoneAsEntered, @MobilePhoneDigitsOnly)  
  end  
  else begin  
    Update CustomerEXT with (RowLock) set Address=@Address, City=@City, State=@State, Zip=@Zip, PhoneAsEntered=@PhoneAsEntered, PhoneDigitsOnly=@PhoneDigitsOnly, Email=@Email, Country=@Country, DateOfBirth=@DateOfBirth,   
      MobilePhoneAsEntered=@MobilePhoneAsEntered, MobilePhoneDigitsOnly=@MobilePhoneDigitsOnly  
      where CustomerPK=@CustomerPK;  
  end  
GO

GRANT EXECUTE ON [dbo].[pa_Update_CustomerDetails] TO [Copient_Logix] AS [dbo]
GO




print 'processing storedprocedures/dbo.pc_AdvancedLimitsVar_Create.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_AdvancedLimitsVar_Create.StoredProcedure.sql 68918 2013-08-20 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_AdvancedLimitsVar_Create]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_AdvancedLimitsVar_Create]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_AdvancedLimitsVar_Create]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_AdvancedLimitsVar_Create]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_AdvancedLimitsVar_Create] @LimitID bigint, @VarID bigint OUTPUT
AS 
  SET NOCOUNT ON;
  insert into PromoVariables (VarTypeID, Description, LinkID, CreatedDate, LastUpdate) values (5, ''Advanced Limit ID ''+cast(@LimitID as nvarchar), @LimitID, GetDate(), GetDate());
  set @VarID=Scope_Identity();
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_AdvancedLimitsVar_Create] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_Gen_Purge_Output_byLoc.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_Gen_Purge_Output_byLoc.StoredProcedure.sql 106631 2016-11-16 19:01:28Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_Gen_Purge_Output_byLoc]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_Gen_Purge_Output_byLoc]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_Gen_Purge_Output_byLoc]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_Gen_Purge_Output_byLoc]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_Gen_Purge_Output_byLoc] @LocationID int
AS 
  exec pc_CPE_IPLPurge_GM_Output @LocationID
  exec pc_CPE_IPLPurge_Customers_Output @LocationID
  exec pc_CPE_IPLPurge_CustomerRemoval_Output @LocationID
  exec pc_CPE_IPLPurge_RA_Output @LocationID
  exec pc_CPE_IPLPurge_PointsAdj_Output @LocationID
  exec pc_CPE_IPLPurge_RD_Output @LocationID
  exec pc_CPE_IPLPurge_CR_Output @LocationID
  exec pc_CPE_IPLPurge_SV_Output @LocationID
  exec pc_CPE_IPLPurge_STD_Output @LocationID
  exec pc_CPE_IPLPurge_CustomerAttributes_Output @LocationID
  exec pc_CPE_IPLPurge_SF_Output @LocationID
  exec pc_CPE_IPLPurge_CardIDs_Output @LocationID
  exec pc_CPE_IPLPurge_SVTransferred_Output @LocationID
  exec pc_CPE_IPLPurge_PendingPoints_Output @LocationID
  exec pc_CPE_IPLPurge_PendingRewardDistribution_Output @LocationID
  exec pc_CPE_IPLPurge_PendingRewardLimit_Output @LocationID
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_Gen_Purge_Output_byLoc] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_CR_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_CR_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_CR_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CR_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_CR_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CR_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_CR_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (1800) from CPE_CR_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_CR_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_CardIDs_Output.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CardIDs_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_CardIDs_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CardIDs_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_CardIDs_Output] @LocationID int  
AS   
  SET NOCOUNT ON;  
  declare @ProcessRows int;  
  --set rowcount 1800;    
  set @ProcessRows=1;  
  while @ProcessRows=1 begin  
    delete TOP (1800) from CPE_CardIDs_Output with (RowLock) where TargetLocationID=@LocationID;  
    if @@RowCount=0 set @ProcessRows=0;  
  end 
  '
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_CardIDs_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_CustomerAttributes_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_CustomerAttributes_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_CustomerAttributes_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CustomerAttributes_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_CustomerAttributes_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CustomerAttributes_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE  [dbo].[pc_CPE_IPLPurge_CustomerAttributes_Output] @LocationID int
AS 
  Declare @ProcessRows int;
  set nocount on;
  --set rowcount 1800;
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_CustomerAttributes_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
END
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_CustomerAttributes_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_CustomerRemoval_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_CustomerRemoval_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_CustomerRemoval_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CustomerRemoval_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_CustomerRemoval_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_CustomerRemoval_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_CustomerRemoval_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_CustomerRemoval_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_CustomerRemoval_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_Customers_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_Customers_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_Customers_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_Customers_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_Customers_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_Customers_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_Customers_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_Customers_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_Customers_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_GM_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_GM_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_GM_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_GM_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_GM_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_GM_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_GM_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_GM_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_GM_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_PendingPoints_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_PendingPoints_Output.StoredProcedure.sql 32583 2015-11-03 20:22:15Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_PendingPoints_Output]    Script Date: 11/03/2015 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PendingPoints_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_PendingPoints_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PendingPoints_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_PendingPoints_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_PointsPending_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_PendingPoints_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_PendingRewardDistribution_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_PendingRewardDistribution_Output.StoredProcedure.sql 32583 2015-11-03 20:22:15Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_PendingRewardDistribution_Output]    Script Date: 11/03/2015 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PendingRewardDistribution_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_PendingRewardDistribution_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PendingRewardDistribution_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_PendingRewardDistribution_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_RewardDistributionPending_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_PendingRewardDistribution_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_PendingRewardLimit_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_PendingRewardLimit_Output.StoredProcedure.sql 32583 2015-11-03 20:22:15Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_PendingRewardLimit_Output]    Script Date: 11/03/2015 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PendingRewardLimit_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_PendingRewardLimit_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PendingRewardLimit_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_PendingRewardLimit_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_RewardLimitPending_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_PendingRewardLimit_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_PointsAdj_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_PointsAdj_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_PointsAdj_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PointsAdj_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_PointsAdj_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PointsAdj_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_PointsAdj_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_PointsAdj_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_PointsAdj_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_PrefsMV_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_PrefsMV_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_PrefsMV_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_PrefsMV_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_PrefsMV_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_PrefsMV_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
GO

GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_PrefsMV_Output] TO [Copient_Logix] AS [dbo]
GO




print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_Prefs_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_Prefs_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_Prefs_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_Prefs_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_Prefs_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_Prefs_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
GO

GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_Prefs_Output] TO [Copient_Logix] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_RA_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_RA_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_RA_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_RA_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_RA_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_RA_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_RA_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_RA_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_RA_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_RD_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_RD_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_RD_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_RD_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_RD_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_RD_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_RD_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (1800) from CPE_RD_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_RD_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_SF_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_SF_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_SF_Output]    Script Date: 03/11/2011 10:00:00 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_SF_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_SF_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_SF_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_SF_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_SF_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_SF_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_STD_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_STD_Output.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_STD_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_STD_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_STD_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_STD_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_STD_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    delete TOP (1800) from CPE_STD_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_STD_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_SVTransferred_Output.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_SVTransferred_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_SVTransferred_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_SVTransferred_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_SVTransferred_Output] @LocationID int  
AS   
  SET NOCOUNT ON;  
  declare @ProcessRows int;  
  --set rowcount 1800;    
  set @ProcessRows=1;  
  while @ProcessRows=1 begin  
    delete TOP (1800) from CPE_SVTransferred_Output with (RowLock) where TargetLocationID=@LocationID;  
    if @@RowCount=0 set @ProcessRows=0;  
  end 
  '
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_SVTransferred_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pc_CPE_IPLPurge_SV_Output.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_CPE_IPLPurge_SV_Output.StoredProcedure.sql 120246 2018-02-06 02:08:41Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_CPE_IPLPurge_SV_Output]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_SV_Output]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_CPE_IPLPurge_SV_Output]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_CPE_IPLPurge_SV_Output]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_CPE_IPLPurge_SV_Output] @LocationID int
AS 
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 1800;  
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (1800) from CPE_SV_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
  set @ProcessRows=1;
  while @ProcessRows=1 begin
    Delete TOP (1800) from CPE_SVUpdated_Output with (RowLock) where TargetLocationID=@LocationID;
    if @@RowCount=0 set @ProcessRows=0;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_CPE_IPLPurge_SV_Output] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CloneTableSchema.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_CloneTableSchema]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_CloneTableSchema]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- pc_CloneTableSchema
--
-- Note that every partitioned unique index _MUST_ contain the partitioned column 
-- as the first column of the index.
CREATE PROCEDURE [dbo].[pc_CloneTableSchema]
    @SourceSchema nvarchar(255),
    @SourceTable nvarchar(255),
    @DestinationSchema nvarchar(255),
    @DestinationTable nvarchar(255),
    @TargetLocation nvarchar(255) = NULL
AS
BEGIN
    /*
        Clones an existing table to another table (without data)
        Optionally drops and re-creates target table
        Copies:
            * Structure
            * Clustered index
            * Primary key
            * Indexes (including ASC/DESC, included columns, filters)
            * Constraints (and unique constraints)
            * Default constraints

        DOES NOT copy:
            * Triggers
            * File groups
            * Probably a lot of other things

        Note: Assumes that you name (unique) constraints with the table name in it (in order to not duplicate constraint names)
    */
    SET NOCOUNT ON;

	IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = @SourceSchema AND TABLE_NAME = @SourceTable )
	BEGIN
	    RAISERROR('pc_CloneTableSchema: No such source table [%s].[%s]', 18, 1, @SourceSchema, @SourceTable)
	    RETURN
	END

    -- Never destroy an existing table.
    IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = @DestinationSchema AND TABLE_NAME = @DestinationTable)
    BEGIN
		RAISERROR('pc_CloneTableSchema: Target table [%s].[%s] already exists, aborting', 18, 1, @DestinationSchema, @DestinationTable);
		RETURN;
    END


	declare @SourceTableObjectID bigint
	SET @SourceTableObjectID = OBJECT_ID(N'[' + @SourceSchema + '].[' + @SourceTable + ']')


    -- Check for computed columns
	IF EXISTS (SELECT 1 FROM sys.columns col WHERE col.object_id=@SourceTableObjectID AND col.is_computed<>0)
	BEGIN
	    RAISERROR('pc_CloneTableSchema: Source table [%s].[%s] contains computed columns. These are not yet supported.', 18, 1, @SourceSchema, @SourceTable)
	    RETURN
	END
	
	-- Check for foreign keys
	IF EXISTS ( SELECT 1 FROM sys.foreign_key_columns WHERE parent_object_id=@SourceTableObjectID )
	BEGIN
		RAISERROR('pc_CloneTableSchema: Source table [%s].[%s] contains foreign keys which are not yet supported.', 18, 1, @SourceSchema, @SourceTable)
		RETURN
	END

	-- The following types are currently unsupported:
    --   datetimeoffset
    --   datetime2
    --   time
	DECLARE @UnsupportedTypes AS Table ( [name] nvarchar(64) )
	INSERT INTO @UnsupportedTypes VALUES ('datetimeoffset')
	INSERT INTO @UnsupportedTypes VALUES ('datetime2')
	INSERT INTO @UnsupportedTypes VALUES ('time')

    IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS col INNER JOIN @UnsupportedTypes ut ON col.DATA_TYPE=ut.[name] WHERE TABLE_SCHEMA=@SourceSchema AND TABLE_NAME=@SourceTable)
    BEGIN
	    Declare @ErrMsg nvarchar(max)
		SET @ErrMsg = ''
	    SELECT @ErrMsg = @ErrMsg + [name] + ', ' FROM @UnsupportedTypes
	    SET @ErrMsg = LEFT(@ErrMsg, LEN(@ErrMsg) - 1)
	    RAISERROR('pc_CloneTableSchema: Source table [%s].[%s] contains one of the following unsupported types: %s', 18, 1, @SourceSchema, @SourceTable, @ErrMsg)
	    RETURN
    END


    BEGIN TRAN T_CLONE_TABLE_SCHEMA

	BEGIN TRY
	
		-- Copy the table structure
		DECLARE @TableCreation nvarchar(max)
		SET @TableCreation = 'CREATE TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ( '
		SELECT @TableCreation = @TableCreation + 
			'[' + isc.COLUMN_NAME + '] [' + isc.DATA_TYPE + ']' + 
			CASE WHEN isc.CHARACTER_MAXIMUM_LENGTH IS NULL THEN '' ELSE '(' + CAST(isc.CHARACTER_MAXIMUM_LENGTH as nvarchar(32)) + ')' END + ' ' + 
			CASE WHEN isc.NUMERIC_PRECISION IS NOT NULL AND (isc.DATA_TYPE='decimal' OR isc.DATA_TYPE='numeric') THEN '(' + CAST(isc.NUMERIC_PRECISION as nvarchar(32)) + ', ' + CAST(isc.NUMERIC_SCALE as nvarchar(32)) + ')' ELSE '' END + ' ' + 
			CASE isc.IS_NULLABLE WHEN 'YES' THEN 'NULL' ELSE 'NOT NULL' END + ' ' + 
			CASE col.is_identity WHEN 1 THEN 'IDENTITY(' + cast(idc.seed_value AS nvarchar(max)) + ', ' + cast(idc.increment_value AS nvarchar(max)) + ')' ELSE '' END + ','
			FROM INFORMATION_SCHEMA.COLUMNS isc
			INNER JOIN sys.columns col ON col.name=isc.COLUMN_NAME AND col.object_id=@SourceTableObjectID
			LEFT OUTER JOIN sys.identity_columns idc ON col.column_id=idc.column_id AND col.object_id=idc.object_id
			WHERE TABLE_SCHEMA=@SourceSchema AND TABLE_NAME=@SourceTable 
			ORDER BY ORDINAL_POSITION
		SET @TableCreation = LEFT(@TableCreation, LEN(@TableCreation) - 1)
		SET @TableCreation = @TableCreation + ' ) '
		
		IF @TargetLocation IS NOT NULL
		BEGIN
			SET @TableCreation = @TableCreation + ' ON ' + @TargetLocation
		END
		print 'Creating table: ''' + @DestinationSchema + '.' + @DestinationTable + ''''
		print 'SQL: ' + @TableCreation
		exec(@TableCreation)


		-- Create clustered index
		DECLARE @CIName nvarchar(max), @CIUnique bit, @CIPK bit, @CIID int
		SELECT TOP 1 @CIID=index_id, @CIName=REPLACE(name, '_' + @SourceTable, '_' + @DestinationTable), 
			@CIUnique=is_unique, @CIPK=is_primary_key FROM sys.indexes 
			WHERE object_id=@SourceTableObjectID AND [type]=1
		IF @CIPK IS NULL SET @CIPK=0
		IF NOT @CIName IS NULL 
		BEGIN
			DECLARE @CIColumns nvarchar(MAX)
			SET @CIColumns = ''

			SELECT @CIColumns = @CIColumns + '[' + col.name + '] ' + CASE (icol.is_descending_key) WHEN 1 THEN 'DESC' ELSE 'ASC' END + ','
				FROM sys.index_columns icol 
				INNER JOIN sys.columns col ON col.object_id = icol.object_id AND col.column_id = icol.column_id
				WHERE icol.object_id=@SourceTableObjectID AND icol.index_id=@CIID
				ORDER BY icol.key_ordinal
			SET @CIColumns = LEFT(@CIColumns, LEN(@CIColumns) - 1)

			DECLARE @TYPESTR nvarchar(max)
			SET @TYPESTR='INDEX'
			if @CIPK = 1 SET @TYPESTR='PRIMARY KEY'
			print 'Create CLUSTERED ' + @TYPESTR + ' ''' + @CIName + ''''
			
			IF @CIPK = 1
			BEGIN
				-- This is unique by default.
				exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD  CONSTRAINT [' + @CIName + '] PRIMARY KEY CLUSTERED (' + @CIColumns + ')');
			END
			ELSE
			BEGIN
				DECLARE @UniqueStr nvarchar(max)
				IF @CIUnique=1 SET @UniqueStr='UNIQUE' ELSE SET @UniqueStr=''
				exec('CREATE ' + @UniqueStr + ' CLUSTERED INDEX [' + @CIName + '] ON [' + @DestinationSchema + '].[' + @DestinationTable + '] (' + @CIColumns + ')')
			END
		END



		DECLARE @PKName nvarchar(max), @PKID int
		SELECT TOP 1 @PKID=index_id, @PKName=REPLACE(name, '_' + @SourceTable, '_' + @DestinationTable) 
			FROM sys.indexes 
			WHERE object_id=@SourceTableObjectID AND [type]<>1 and is_primary_key=1

		-- Create primary key
		IF NOT @PKName IS NULL
		BEGIN
			DECLARE @PKColumns nvarchar(MAX)
			SET @PKColumns = ''

			SELECT @PKColumns = @PKColumns + '[' + col.name + '] ' + CASE (icol.is_descending_key) WHEN 1 THEN 'DESC' ELSE 'ASC' END + ','
				FROM sys.index_columns icol 
				INNER JOIN sys.columns col ON col.object_id = icol.object_id AND col.column_id = icol.column_id
				WHERE icol.object_id=@SourceTableObjectID AND icol.index_id=@PKID
				ORDER BY icol.key_ordinal
			SET @PKColumns = LEFT(@PKColumns, LEN(@PKColumns) - 1)
			print 'Create NONCLUSTERED PRIMARY KEY: ''' + @PKName + ''''
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD  CONSTRAINT [' + @PKName + '] PRIMARY KEY NONCLUSTERED (' + @PKColumns + ')');
		END

		--create other indexes
		DECLARE @IndexId int, @IndexName nvarchar(255), @IsUnique bit, @IsUniqueConstraint bit

		DECLARE indexcursor CURSOR FOR
		SELECT index_id, REPLACE(name, '_' + @SourceTable + '_', '_' + @DestinationTable + '_'), is_unique, is_unique_constraint
			FROM sys.indexes WHERE is_primary_key=0 AND [type] = 2 AND object_id = object_id('[' + @SourceSchema + '].[' + @SourceTable + ']')
		OPEN indexcursor;
		FETCH NEXT FROM indexcursor INTO @IndexId, @IndexName, @IsUnique, @IsUniqueConstraint;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @Unique nvarchar(255)
			SET @Unique = CASE WHEN @IsUnique = 1 THEN ' UNIQUE ' ELSE '' END

			DECLARE @KeyColumns nvarchar(max), @IncludedColumns nvarchar(max)
			SET @KeyColumns = ''
			SET @IncludedColumns = ''

			select @KeyColumns = @KeyColumns + '[' + c.name + '] ' + CASE WHEN is_descending_key = 1 THEN 'DESC' ELSE 'ASC' END + ',' from sys.index_columns ic
			inner join sys.columns c ON c.object_id = ic.object_id and c.column_id = ic.column_id
			where index_id = @IndexId and ic.object_id = object_id('[' + @SourceSchema + '].[' + @SourceTable + ']') and key_ordinal > 0
			order by index_column_id

			select @IncludedColumns = @IncludedColumns + '[' + c.name + '],' from sys.index_columns ic
			inner join sys.columns c ON c.object_id = ic.object_id and c.column_id = ic.column_id
			where index_id = @IndexId and ic.object_id = object_id('[' + @SourceSchema + '].[' + @SourceTable + ']') and key_ordinal = 0
			order by index_column_id

			IF LEN(@KeyColumns) > 0
				SET @KeyColumns = LEFT(@KeyColumns, LEN(@KeyColumns) - 1)

			IF LEN(@IncludedColumns) > 0
			BEGIN
				SET @IncludedColumns = ' INCLUDE (' + LEFT(@IncludedColumns, LEN(@IncludedColumns) - 1) + ')'
			END

			--IF @FilterDefinition IS NULL
			--	SET @FilterDefinition = ''
			--ELSE
			--	SET @FilterDefinition = 'WHERE ' + @FilterDefinition + ' '

			print 'Creating index: ''' + @IndexName + '''' 
			IF @IsUniqueConstraint = 0
				exec('CREATE ' + @Unique + ' NONCLUSTERED INDEX [' + @IndexName + '] ON [' + @DestinationSchema + '].[' + @DestinationTable + '] (' + @KeyColumns + ')' + @IncludedColumns);
			ELSE
			BEGIN
				SET @IndexName = REPLACE(@IndexName, @SourceTable, @DestinationTable)
				exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD  CONSTRAINT [' + @IndexName + '] UNIQUE NONCLUSTERED (' + @KeyColumns + ')');
			END

			FETCH NEXT FROM indexcursor INTO @IndexId, @IndexName, @IsUnique, @IsUniqueConstraint;
		END;
		CLOSE indexcursor;
		DEALLOCATE indexcursor;

		--create constraints
		DECLARE @ConstraintName nvarchar(max), @CheckClause nvarchar(max)
		DECLARE constraintcursor CURSOR FOR
			SELECT REPLACE(c.CONSTRAINT_NAME, '_' + @SourceTable + '_', '_' + @DestinationTable + '_' ), CHECK_CLAUSE from INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE t
			INNER JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS c ON c.CONSTRAINT_SCHEMA = TABLE_SCHEMA AND c.CONSTRAINT_NAME = t.CONSTRAINT_NAME
			 WHERE TABLE_SCHEMA = @SourceSchema AND TABLE_NAME = @SourceTable
		OPEN constraintcursor;
		FETCH NEXT FROM constraintcursor INTO @ConstraintName, @CheckClause;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			print 'Creating constraint: ''' + @ConstraintName + ''''
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] WITH CHECK ADD  CONSTRAINT [' + @ConstraintName + '] CHECK ' + @CheckClause)
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] CHECK CONSTRAINT [' + @ConstraintName + ']')
			FETCH NEXT FROM constraintcursor INTO @ConstraintName, @CheckClause;
		END;
		CLOSE constraintcursor;
		DEALLOCATE constraintcursor;

		-- print 'Creating default constraints'
		DECLARE @DFName nvarchar(max), @Default nvarchar(max), @DefColumn nvarchar(max)
		DECLARE DFcursor CURSOR FOR
			SELECT REPLACE(dfc.name, '_' + @SourceTable + '_', '_' + @DestinationTable + '_' ), dfc.[definition], col.name 
				FROM sys.default_constraints dfc INNER JOIN sys.columns col ON dfc.parent_column_id = col.column_id AND dfc.parent_object_id = col.object_id
				WHERE parent_object_id = @SourceTableObjectID
		OPEN DFcursor
		FETCH NEXT FROM DFcursor INTO @DFName, @Default, @DefColumn
		WHILE @@FETCH_STATUS = 0
		BEGIN
			print 'Creating default constraint: ''' + @DFName + ''''
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD CONSTRAINT ' + @DFName + ' DEFAULT ' + @Default + ' FOR ' + @DefColumn)
			FETCH NEXT FROM DFcursor INTO @DFName, @Default, @DefColumn
		END
		CLOSE DFcursor
		DEALLOCATE DFcursor

		COMMIT TRAN T_CLONE_TABLE_SCHEMA

	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage nvarchar(max), @ErrorSeverity nvarchar(max), @ErrorState nvarchar(max)
		SELECT @ErrorMessage=ERROR_MESSAGE(), @ErrorSeverity=ERROR_SEVERITY(), @ErrorState=ERROR_STATE()
		BEGIN TRY
			-- If we fail to rollback, the database will eventually do the right thing.
			ROLLBACK TRAN T_CLONE_TABLE_SCHEMA
		END TRY
		BEGIN CATCH END CATCH
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
	END CATCH

END
GO


-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_CloneTableSchema] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_DistributionVar_Create.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_DistributionVar_Create.StoredProcedure.sql 68918 2013-08-20 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_DistributionVar_Create]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_DistributionVar_Create]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_DistributionVar_Create]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_DistributionVar_Create]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_DistributionVar_Create] @OfferID bigint, @VarID bigint OUTPUT
AS 
  SET NOCOUNT ON;
  insert into PromoVariables (VarTypeID, Description, LinkID, CreatedDate, LastUpdate) values (1, ''Offer ''+cast(@OfferID as nvarchar)+'' distribution limit'', @OfferID, GetDate(), GetDate());
  set @VarID=Scope_Identity();
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_DistributionVar_Create] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_Get_CAAtoGOExtractContents.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pc_Get_CAAtoGOExtractContents]     ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_Get_CAAtoGOExtractContents]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_Get_CAAtoGOExtractContents]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_Get_CAAtoGOExtractContents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [dbo].[pc_Get_CAAtoGOExtractContents] @ScheduledRunMinute Int
AS
SET NOCOUNT ON;

SELECT RTRIM(c.InitialCardID)MemberID, CONVERT(VARCHAR, c.CreatedDate, 112)+ REPLACE(CONVERT(VARCHAR(8),c.CreatedDate, 114), '':'','''') CreatedDate, c.CreatedLocationID AS StoreID
                              FROM Customers c With (NoLock) 
                              JOIN CardIDs cid With (NoLock)ON c.CustomerPK = cid.CustomerPK AND cid.CardTypeID = 10 
                              AND Cid.CardStatusID = -1
                              AND DATEDIFF(mi, c.CreatedDate,GETDATE())<= @ScheduledRunMinute
                              AND c.Initialcardtypeid=0 
                              AND c.CreatedLocationID <> -1
                              AND c.CreatedLocationID IS NOT NULL ORDER BY CreatedDate;
                                                                                                      
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_Get_CAAtoGOExtractContents] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_IsPartitioned.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_IsPartitioned.StoredProcedure.sql 42853 2012-01-27 16:34:45Z josh $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_IsPartitioned]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_IsPartitioned]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_IsPartitioned]
    @TableName nvarchar(255),
	@IsPartitioned bit output
AS
BEGIN
	IF EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@TableName )
	BEGIN
		SET @IsPartitioned = 1
		RETURN
	END
	SET @IsPartitioned = 0
END
GO

GRANT EXECUTE ON [dbo].[pc_IsPartitioned] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_PartitionMaintenance.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_PartitionMaintenance]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_PartitionMaintenance]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_PartitionMaintenance]
    @TableName nvarchar(255),
    @HistoryWidth int
WITH EXECUTE AS OWNER
AS
BEGIN
	IF NOT EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@TableName )
	BEGIN
		RAISERROR('pc_PartitionMaintenance: Table ''%s'' is not partitioned or is not being tracked', 18, 1, @TableName);
		RETURN
	END
	
	declare @Now datetime
	select @Now=getdate()
	
	DECLARE @NewLine nvarchar(2)
	DECLARE @TailErrorMessage nvarchar(255)
	DECLARE @HeadErrorMessage nvarchar(255)
	SET @TailErrorMessage = ''
	SET @HeadErrorMessage = ''
	SET @NewLine = CHAR(10)
	
	-- Handle the tail first to free up space if possible.
	BEGIN TRY
		print 'Rotate tail'
		exec [dbo].[pc_RotateTailPartition] @TableName, @Now, @HistoryWidth
	END TRY
	BEGIN CATCH
		-- Remember the error so that we can throw it later.
		SELECT @TailErrorMessage=ERROR_MESSAGE()		
	END CATCH

	-- Handle the head second.
	BEGIN TRY
		print 'Rotate head'
		exec [dbo].[pc_RotateHeadPartition] @TableName, @Now
	END TRY
	BEGIN CATCH
		SELECT @HeadErrorMessage=ERROR_MESSAGE()
		-- Remember the error so that we can throw it later.
	END CATCH

	IF @HeadErrorMessage <> '' OR @TailErrorMessage <> ''
	BEGIN
		RAISERROR('Errors encountered while performing partition maintenance on ''%s''%s    Head Rotation Error: %s%s    Tail Rotation Error: %s', 18, 1, @TableName, @NewLine, @HeadErrorMessage, @NewLine, @TailErrorMessage)
		RETURN
	END
	
END

GRANT EXECUTE ON [dbo].[pc_PartitionMaintenance] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_PartitionTable.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_PartitionTable]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_PartitionTable]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- pc_PartitionTable
-- Partition a table by date.
--
-- @TableName - Name of the table to partition
-- @PartitionColumn - Column on which to partition the table.
-- @PartitionWidth is a value measured in days. This indicates
--   the size of the partition.
-- @HeadRoom is the number of future partitions to try to 
--   maintain ahead of the current partition.
-- @TailRoom is the number of past partitions to initialize
--   the new table with.
-- #param_Locations - Temporary table of the form 
--   ( id int, path nvarchar(255) )
--   Take ownership.
--
-- Yields:
--   One new file for each entry in #param_Locations
--   One new filegroup for each entry in #param_Locations
--   One new entry in PartitionedTables
--   One new entry in PartitionFilegroups for each entry in #param_Locations
--   Table with original data with the name <@TableName>_PTOld
--   New partition function with the name <@TableName>__Function
--   New partition scheme with the name <@TableName>__Scheme
--   Partitioned table on <@TableName>__Scheme with @HeadRoom + @TailRoom + 2 partitions named <@TableName>
CREATE PROCEDURE [dbo].[pc_PartitionTable]
    @TableName nvarchar(255),
    @PartitionColumn nvarchar(255),
    @PartitionWidth int,
    @HeadRoom int = 2, 
    @TailRoom int = 0
AS
BEGIN
	DECLARE @ErrMsg nvarchar(max), @ErrSev int, @ErrSt int

	BEGIN TRY
	
	IF NOT EXISTS ( SELECT 1 FROM sys.tables WHERE object_id=OBJECT_ID(N'[dbo].[' + @TableName + ']') )
	BEGIN
		RAISERROR('Table ''%s'' does not exist', 18, 1, @TableName)
		RETURN
	END

    IF @PartitionWidth <= 0
    BEGIN
		RAISERROR('PartitionWidth must be greater than 0 days', 18, 1)
		RETURN
    END

	IF @HeadRoom < 0
	BEGIN
		RAISERROR('HeadRoom must be an integer in the range [0, *)', 18, 1)
		RETURN
	END
	
	IF @TailRoom < 0
	BEGIN
		RAISERROR('TailRoom must be an integer in the range [0, *)', 18, 1)
		RETURN
	END

	DECLARE @OldDataExt nvarchar(63)
	SET @OldDataExt = '_PTOld'
	
	IF EXISTS ( SELECT 1 FROM sys.tables WHERE object_id=OBJECT_ID(N'[dbo].[' + @TableName + @OldDataExt) )
	BEGIN
		RAISERROR('Table ''%s%s'' already exists. This script requires that table to be empty', 18, 1, @TableName, @OldDataExt)
		RETURN
	END

	-- Check that partition column is in the table.
	IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[' + @TableName + ']') AND name=@PartitionColumn )
	BEGIN
		RAISERROR('PartitionColumn ''%s'' does not exist in table ''%s''. Cannot continue with the partition', 18, 1, @PartitionColumn, @TableName)
		RETURN
	END

    -- Check that the param_Locations table exists in the tempDB.
	IF NOT EXISTS ( SELECT 1 FROM tempdb.sys.objects WHERE object_id=OBJECT_ID(N'tempdb..#param_Locations') )
	BEGIN
		RAISERROR('Required parameter table ''#param_Locations'' does not exist', 18, 1)
		RETURN
	END

	
	-- Make sure that some minimum number of filegroups is provided.
	
	DECLARE @LocationCount int, @RequiredLocationCount int
	SET @RequiredLocationCount = @HeadRoom + @TailRoom + 2
	SELECT @LocationCount=COUNT(1) FROM #param_Locations
	IF @LocationCount < @RequiredLocationCount
	BEGIN
		RAISERROR('With the provided parameters (HeadRoom: %d; TailRoom: %d), at least %d filegroups are required. Only %d were provided.', 18, 1, @HeadRoom, @TailRoom, @RequiredLocationCount, @LocationCount)
		RETURN
	END

    -- @todo: Check for unique indexes on the source table. This may cause problems when partitioning.
    --   They currently cause the process to fail, so it's not a terrible problem not to explicitly check.


	IF EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@TableName )
	BEGIN
		RAISERROR('Table ''%s'' has already been partitioned', 18, 1, @TableName)
		RETURN
	END

    declare @DatabaseName nvarchar(255)
    select @DatabaseName=DB_NAME()

	declare @FG_Prefix nvarchar(255)
	SET @FG_Prefix = @DatabaseName + '__' + @TableName + '__'

	IF EXISTS ( SELECT 1 FROM sys.filegroups WHERE LEFT(name, LEN(@FG_Prefix))=@FG_Prefix )
	BEGIN
		RAISERROR('Table ''%s'' has already been partitioned or filegroups exist that will prevent successful partitioning (of the form ''%s*'')', 18, 1, @TableName, @FG_Prefix)
		RETURN
	END

	declare @CreatedFilegroups AS TABLE ( [name] nvarchar(255), [fg_created] [bit], [file_created] [bit] )

	BEGIN TRY
	
		-- Force path to have trailing slash
		declare myiter CURSOR FOR SELECT [id], [path] + '\' from #param_Locations
		--' 

		declare @id int, @path nvarchar(max)

		OPEN myiter
		FETCH NEXT FROM myiter INTO @id, @path
		IF @@FETCH_STATUS<>0
		BEGIN
			-- This was already checked for, but this is just in case something weird happens.
			RAISERROR('No partitions/filegroups defined', 18, 1)
			RETURN
		END
		WHILE @@FETCH_STATUS=0
		BEGIN
			--print 'Row: ' + cast(@id as nvarchar(10)) + ', ' + @path

			DECLARE @FGName nvarchar(max)
			SET @FGName = @FG_Prefix + CAST(@id AS nvarchar(10))
			DECLARE @FileLogicalName nvarchar(max)
			SET @FileLogicalName = @FG_Prefix + CAST(@id AS NVARCHAR(10))
			DECLARE @FilePhysicalName nvarchar(max)
			SET @FilePhysicalName = @path + @FG_Prefix + CAST(@id AS NVARCHAR(3)) + '.ndf'
			
			INSERT INTO @CreatedFilegroups VALUES ( @FGName, 0, 0 )

			-- Transactions cannot be used around database modifications, so there is a window here where 
			-- the filegroup/file creation may succeed, but we don't get around to marking that it needs
			-- to be cleaned up. Even worse, if the process goes down in the middle of this process,
			-- there's no easy way to recover.
			DECLARE @SQL nvarchar(max)
			SET @SQL = 'ALTER DATABASE [' + @DatabaseName + '] ADD FILEGROUP ' + @FGName + ';'
			print 'Create FILEGROUP: ' + @FGName
			EXEC (@SQL)

			UPDATE @CreatedFilegroups SET [fg_created]=1 WHERE [name]=@FGName
			
			SET @SQL = 'ALTER DATABASE [' + @DatabaseName + '] ADD FILE (NAME = N''' + @FileLogicalName + ''', FILENAME = N''' + @FilePhysicalName + ''', SIZE = 5MB, FILEGROWTH = 5MB) TO FILEGROUP [' + @FGName + '];'
			print 'Create FILE: ' + @FilePhysicalName
			EXEC (@SQL)

			UPDATE @CreatedFilegroups SET [file_created]=1 WHERE [name]=@FGName
			
			FETCH NEXT FROM myiter into @id, @path
		END
		CLOSE myiter
		DEALLOCATE myiter

	END TRY
	BEGIN CATCH
		-- Grab error message, severity, and state
		SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrSt=ERROR_STATE()

		DECLARE @SQL1 nvarchar(max)
		DECLARE @SubErrMsg nvarchar(max)		
		DECLARE @fg_name nvarchar(255), @fg_created bit, @file_created bit

		-- Clean up all created filegroups
		DECLARE cleanupIter CURSOR FOR SELECT [name], [fg_created], [file_created] from @CreatedFilegroups
		OPEN cleanupIter
		FETCH NEXT FROM cleanupIter INTO @fg_name, @fg_created, @file_created
		WHILE @@FETCH_STATUS=0
		BEGIN

			-- Remove the file and filegroup if they were created by _THIS_PROCESS_. 
			IF @file_created=1
			BEGIN
				SET @SQL1 = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILE ' + @fg_name + ';'
				BEGIN TRY
					EXEC(@SQL1)
				END TRY
				BEGIN CATCH
					SELECT @SubErrMsg=ERROR_MESSAGE()
					print 'Failed to clean up the FILE: ' + @SubErrMsg
				END CATCH
			END

			IF @fg_created=1
			BEGIN
				SET @SQL1 = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILEGROUP ' + @fg_name + ';'
				BEGIN TRY
					EXEC(@SQL1)
				END TRY
				BEGIN CATCH
					SELECT @ErrMsg=ERROR_MESSAGE()
					print 'Failed to clean up the FILEGROUP: ' + @ErrMsg
				END CATCH
			END

			FETCH NEXT FROM cleanupIter INTO @fg_name, @fg_created, @file_created
		END
		CLOSE cleanupIter
		DEALLOCATE cleanupIter
		RAISERROR(@ErrMsg, @ErrSev, @ErrSt)
		RETURN
	END CATCH
	
	END TRY
	BEGIN CATCH
		-- Grab error message, severity, and state
		SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrSt=ERROR_STATE()
		
		-- The interface for this procedure indicates that we take ownership of param_Locations. 
		-- Therefore, we should clean up.
		BEGIN TRY
			DROP TABLE #param_Locations
		END TRY BEGIN CATCH END CATCH
		RAISERROR(@ErrMsg, @ErrSev, @ErrSt)
		RETURN
	END CATCH
	
	-- Don't need this anymore.
	DROP TABLE #param_Locations

	BEGIN TRAN T1
    BEGIN TRY

		INSERT INTO [dbo].[PartitionedTables] (TableName, PartitionWidth, HeadRoom) VALUES ( @TableName, @PartitionWidth, @HeadRoom )
		DECLARE @TableID int
		SELECT @TableID=ID FROM [dbo].[PartitionedTables] WHERE TableName=@TableName
		
		--SELECT * FROM @CreatedFilegroups
		
		INSERT INTO [dbo].[PartitionFilegroups] (TableID, DataSpaceID) 
		    SELECT @TableID, sfg.data_space_id FROM @CreatedFilegroups cfg INNER JOIN sys.filegroups sfg ON cfg.name=sfg.name

		declare @CreatePartitionFunction nvarchar(max)
		declare @CreatePartitionScheme nvarchar(max)

		declare @FunctionName nvarchar(255)
		declare @SchemeName nvarchar(255)
		set @FunctionName = @TableName + '__Function'
		set @SchemeName = @TableName + '__Scheme'



		DECLARE @Now datetime
		DECLARE @TmpName as nvarchar(max)
	    DECLARE @PartIndex int

		SET @Now = GETDATE()	    
	    SET @PartIndex = -@TailRoom
	    
		DECLARE myiter CURSOR FOR SELECT TOP (@RequiredLocationCount) [name] FROM sys.filegroups WHERE LEFT([name], LEN(@FG_Prefix))=@FG_Prefix
		OPEN myiter
		FETCH NEXT FROM myiter INTO @TmpName

		-- Get Partition Scheme kicked off so that the commas are correct.
		SET @CreatePartitionFunction = 'CREATE PARTITION FUNCTION ' + @FunctionName + ' (datetime) AS RANGE LEFT FOR VALUES ( '
	    SET @CreatePartitionScheme = 'CREATE PARTITION SCHEME ' + @SchemeName + ' AS PARTITION ' + @FunctionName + ' TO (' + @TmpName

		FETCH NEXT FROM myiter INTO @TmpName
		
		-- Get Partition Function kicked off so that the commas are correct.
		SET @CreatePartitionFunction = @CreatePartitionFunction + '''' + CAST( DATEADD(d, @PartitionWidth * @PartIndex, @Now) as nvarchar(63)) + ''''
		SET @PartIndex = @PartIndex + 1
		SET @CreatePartitionScheme = @CreatePartitionScheme + ', ' + @TmpName

		FETCH NEXT FROM myiter INTO @TmpName
		WHILE @@FETCH_STATUS=0
		BEGIN
			SET @CreatePartitionFunction = @CreatePartitionFunction + ', ''' + CAST( DATEADD(d, @PartitionWidth * @PartIndex, @Now) as nvarchar(63)) + ''''
			SET @CreatePartitionScheme = @CreatePartitionScheme + ', ' + @TmpName
			SET @PartIndex = @PartIndex + 1
			FETCH NEXT FROM myiter into @TmpName
		END
		CLOSE myiter
		DEALLOCATE myiter

		SET @CreatePartitionFunction = @CreatePartitionFunction + ');';
		SET @CreatePartitionScheme = @CreatePartitionScheme + ' );'

		print 'Create PARTITION FUNCTION: ' + @CreatePartitionFunction
		EXEC (@CreatePartitionFunction)
		print 'Create PARTITION SCHEME: ' + @CreatePartitionScheme
		EXEC (@CreatePartitionScheme)


		declare @OldName nvarchar(max)
		declare @NewName nvarchar(max)
		SET @OldName = @TableName
		SET @NewName = @TableName + @OldDataExt
		EXEC [dbo].[pc_RenameTable] @OldName, @NewName

		declare @SourceTableParam nvarchar(max)
		SET @SourceTableParam = @TableName + @OldDataExt
		declare @PartitionParam nvarchar(max)
		SET @PartitionParam = @SchemeName + '(' + @PartitionColumn + ')'

		-- Create the table on the new partition schema.
		EXEC [dbo].[pc_CloneTableSchema] 'dbo', @SourceTableParam, 'dbo', @TableName, @PartitionParam

		COMMIT TRAN T1

    END TRY
    BEGIN CATCH
		ROLLBACK TRAN T1
		DECLARE @ErrorMessage nvarchar(max), @ErrorSeverity nvarchar(max), @ErrorState nvarchar(max)
		SELECT @ErrorMessage=ERROR_MESSAGE(), @ErrorSeverity=ERROR_SEVERITY(), @ErrorState=ERROR_STATE()
		
		-- Clean up the filegroups		
		declare myiter CURSOR FOR SELECT name from @CreatedFilegroups
		OPEN myiter
		FETCH NEXT FROM myiter INTO @fg_name
		WHILE @@FETCH_STATUS=0
		BEGIN
			DECLARE @mySQL nvarchar(max)
			SET @mySQL = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILE ' + @fg_name + ';'
			EXEC (@mySQL)

			SET @mySQL = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILEGROUP ' + @fg_name + ';'
			EXEC (@mySQL)
		    
			FETCH NEXT FROM myiter into @fg_name
		END
		CLOSE myiter
		DEALLOCATE myiter

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
		RETURN
    END CATCH

END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_PartitionTable] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pc_PointsVar_Create.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_PointsVar_Create.StoredProcedure.sql 68918 2013-08-20 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_PointsVar_Create]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_PointsVar_Create]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_PointsVar_Create]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_PointsVar_Create]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_PointsVar_Create] @ProgramID bigint, @VarID bigint OUTPUT
AS 
  SET NOCOUNT ON;
  insert into PromoVariables (VarTypeID, Description, LinkID, CreatedDate, LastUpdate) values (3, ''Points ProgramID ''+cast(@ProgramID as nvarchar), @ProgramID, GetDate(), GetDate());
  set @VarID=Scope_Identity();
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_PointsVar_Create] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_PointsVar_Create_Specific.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_PointsVar_Create_Specific.StoredProcedure.sql 68918 2013-08-20 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_PointsVar_Create_Specific]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_PointsVar_Create_Specific]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_PointsVar_Create_Specific]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_PointsVar_Create_Specific]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_PointsVar_Create_Specific] @ProgramID bigint, @VarID bigint, @Success bit OUTPUT
AS 
  SET NOCOUNT ON;
  set @Success = 0;
  select VarTypeID from PromoVariables with (NoLock) where PromoVarID = @VarID;
  If @@ROWCOUNT = 0 begin
    SET IDENTITY_INSERT PromoVariables ON;
    insert into PromoVariables (PromoVarID, VarTypeID, Description, LinkID, CreatedDate, LastUpdate) values
                               (@VarID, 3, ''Points ProgramID ''+cast(@ProgramID as nvarchar), @ProgramID, GetDate(), GetDate());
    SET IDENTITY_INSERT PromoVariables OFF;
    set @Success = 1;
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_PointsVar_Create_Specific] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_PromoVar_Update.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_PromoVar_Update.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_PromoVar_Update]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_PromoVar_Update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_PromoVar_Update]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_PromoVar_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_PromoVar_Update] @CustomerPK bigint, @PromoVarID bigint, 
	@VariableTypeID int, @AdjAmount decimal(12,3)
AS 
  SET NOCOUNT ON;
  declare @NumRows as int;
  declare @Amount as decimal (12,3);
  declare @LinkID as bigint;
  set @Numrows=0;
  set @Amount=0;

  if @VariableTypeId=1 begin -- Distribution Limits
    select @NumRows=1, @Amount=isnull(Amount,0) from DistributionVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
  end
  else if @VariableTypeId=2 begin -- Accumulation
    select @NumRows=1, @Amount=isnull(Amount, 0) from AccumulationVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
  end
  else if @VariableTypeId=3 begin -- Points
    select @NumRows=1, @Amount=isnull(Amount, 0) from Points with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
  end
  else if @VariableTypeId=4 begin -- Reward Limit
    select @NumRows=1, @Amount=isnull(Amount, 0) from RewardLimitVariables with (NoLock) where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
  end

  if @Amount+@AdjAmount<0 begin
    set @Amount=0;
  end
  else begin
    set @Amount=@Amount+@AdjAmount
  end 

  if @NumRows>0 begin
    if @VariableTypeId=1 begin -- Distribution Limits
      update DistributionVariables with (RowLock) set Amount=@Amount where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
    end
    else if @VariableTypeId=2 begin -- Accumulation
      update AccumulationVariables with (RowLock) set Amount=@Amount where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
    end
    else if @VariableTypeId=3 begin -- Points
      update Points with (RowLock) set Amount=@Amount where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
    end
    else if @VariableTypeId=4 begin -- Reward Limit
      update RewardLimitVariables with (RowLock) set Amount=@Amount where PromoVarID=@PromoVarID and CustomerPK=@CustomerPK;
    end
  end
  else begin
    if @VariableTypeId=1 begin -- Distribution Limits
      insert into DistributionVariables with (RowLock) (PromoVarID, CustomerPK, Amount) values (@PromoVarID, @CustomerPK, @Amount);
    end
    else if @VariableTypeId=2 begin -- Accumulation
      insert into AccumulationVariables with (RowLock) (PromoVarID, CustomerPK, Amount) values (@PromoVarID, @CustomerPK, @Amount);
    end
    else if @VariableTypeId=3 begin -- Points
      select @LinkID=isnull(LinkID, 0) from PromoVariables with (NoLock) where PromoVarID=@PromoVarID;
      insert into Points with (RowLock) (PromoVarID, CustomerPK, Amount, ProgramID) values (@PromoVarID, @CustomerPK, @Amount, @LinkID);
    end
    else if @VariableTypeId=4 begin -- Reward Limit
      insert into RewardLimitVariables with (RowLock) (PromoVarID, CustomerPK, Amount) values (@PromoVarID, @CustomerPK, @Amount);
    end
  end 
  update Customers set UpdateCount=UpdateCount+1 where CustomerPK=@CustomerPK;
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_PromoVar_Update] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_RenameTable.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_RenameTable]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_RenameTable]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_RenameTable]
    @OldTableName nvarchar(255),
    @NewTableName nvarchar(255)
AS
BEGIN

    IF NOT EXISTS ( SELECT 1 FROM sys.tables WHERE object_id=OBJECT_ID(N'[dbo].[' + @OldTableName + ']') )
    BEGIN
        RAISERROR('Table ''%s'' does not exist', 18, 1, @OldTableName)
        RETURN
    END

    -- Odd case, but we shouldn't fail on it.
    IF @OldTableName = @NewTableName
        RETURN

	IF EXISTS ( SELECT 1 FROM sys.objects WHERE object_id=OBJECT_ID(N'[dbo].[' + @NewTableName + ']'))
	BEGIN
		RAISERROR('Table ''%s'' already exists, cannot over-write it', 18, 1, @NewTableName)
		RETURN
	END

	DECLARE @OldName nvarchar(max), @NewName nvarchar(max)
	
	BEGIN TRAN T1
	
	BEGIN TRY

		-- Find all indexes for a table. Rename them.
		DECLARE indexcursor CURSOR FOR
		SELECT @OldTableName + '.' + name, REPLACE(name, '_' + @OldTableName, '_' + @NewTableName) 
			FROM sys.indexes WHERE object_id = object_id('[dbo].[' + @OldTableName + ']') AND name IS NOT NULL
		OPEN indexcursor;
		FETCH NEXT FROM indexcursor INTO @OldName, @NewName;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			exec sp_rename @OldName, @NewName, 'INDEX'
			FETCH NEXT FROM indexcursor INTO @OldName, @NewName
		END
		CLOSE indexcursor;
		DEALLOCATE indexcursor;
	    
		-- Find all check constraints for a table. Rename them.
		DECLARE cc_cursor CURSOR FOR
		SELECT name, REPLACE(name, '_' + @OldTableName, '_' + @NewTableName)
			FROM sys.check_constraints cc WHERE cc.parent_object_id=OBJECT_ID(N'[dbo].[' + @OldTableName + ']')
		OPEN cc_cursor;
		FETCH NEXT FROM cc_cursor INTO @OldName, @NewName
		WHILE @@FETCH_STATUS = 0
		BEGIN
			exec sp_rename @OldName, @NewName
			FETCH NEXT FROM cc_cursor INTO @OldName, @NewName
		END
		CLOSE cc_cursor;
		DEALLOCATE cc_cursor;
	    
		-- Find all default constraints for a table. Rename them.
		DECLARE dc_cursor CURSOR FOR
		SELECT name, REPLACE(name, '_' + @OldTableName, '_' + @NewTableName)
			FROM sys.default_constraints dc WHERE dc.parent_object_id=OBJECT_ID(N'[dbo].[' + @OldTableName + ']')
		OPEN dc_cursor;
		FETCH NEXT FROM dc_cursor INTO @OldName, @NewName
		WHILE @@FETCH_STATUS = 0
		BEGIN
			exec sp_rename @OldName, @NewName
			FETCH NEXT FROM dc_cursor INTO @OldName, @NewName
		END
	    CLOSE dc_cursor;
	    DEALLOCATE dc_cursor;

		exec sp_rename @OldTableName, @NewTableName
	
		COMMIT TRAN T1
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN T1
		DECLARE @ErrorMessage nvarchar(max), @ErrorSeverity nvarchar(max), @ErrorState nvarchar(max)
		SELECT @ErrorMessage=ERROR_MESSAGE(), @ErrorSeverity=ERROR_SEVERITY(), @ErrorState=ERROR_STATE()
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
	END CATCH

END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_RenameTable] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_RewardLimitVar_Create.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_RewardLimitVar_Create.StoredProcedure.sql 68918 2013-08-20 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_RewardLimitVar_Create]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_RewardLimitVar_Create]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pc_RewardLimitVar_Create]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_RewardLimitVar_Create]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pc_RewardLimitVar_Create] @RewardID bigint, @VarID bigint OUTPUT
AS 
  SET NOCOUNT ON;
  insert into PromoVariables (VarTypeID, Description, LinkID, CreatedDate, LastUpdate) values (4, ''Reward ''+cast(@RewardID as nvarchar)+'' Reward Limit'', @RewardID, GetDate(), GetDate());
  set @VarID=Scope_Identity();
' 
END
GO
GRANT EXECUTE ON [dbo].[pc_RewardLimitVar_Create] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_RotateHeadPartition.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_RotateHeadPartition]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_RotateHeadPartition]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_RotateHeadPartition]
    @PartitionedTable nvarchar(255),
	@ProcessTime datetime
AS
BEGIN
	IF NOT EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable )
	BEGIN
		RAISERROR('Table ''%s'' is not partitioned or is not being tracked', 18, 1, @PartitionedTable);
		RETURN
	END
	
	DECLARE @FunctionName nvarchar(255), @SchemeName nvarchar(255)
	SET @FunctionName = @PartitionedTable + '__Function'
	SET @SchemeName = @PartitionedTable + '__Scheme'
	
	
	-- Grab HeadRoom, PartitionWidth
	DECLARE @HeadRoom int, @PartitionWidth int
	SELECT @HeadRoom=HeadRoom, @PartitionWidth=PartitionWidth FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable

	DECLARE @LastDivider datetime
	
	-- Grab front range value given that we know the name of the table.
	SELECT TOP (1) @LastDivider=cast(rv.[value] as datetime)
	    FROM sys.partition_range_values rv
	    INNER JOIN sys.partition_functions pf ON rv.function_id=pf.function_id
		WHERE pf.[name]=@FunctionName
		ORDER BY rv.boundary_id DESC
	
	--print 'LastDivider: ' + CAST(@LastDivider as nvarchar(max))
	
	
	DECLARE @Idx int
	
	
	-- Check to make sure that we haven't busted a partition boundary.
	IF @LastDivider IS NULL OR @ProcessTime > DATEADD(d, @PartitionWidth, @LastDivider)
	BEGIN
		-- Somehow we managed not to rotate in a partition for a very long time.
		-- Go ahead and set now as the latest divider.
		-- Should probably throw some kind of an error.
		SET @Idx = 0
		SET @LastDivider = @ProcessTime
    END
	ELSE
	BEGIN
		SET @Idx = 1
	END

	--print 'Computed LastDivider: ' + CAST(@LastDivider as nvarchar(max))

	DECLARE @HeadRoomDate datetime	
	SET @HeadRoomDate = DATEADD(D, @HeadRoom*@PartitionWidth, @ProcessTime)
	--print 'HeadRoomDate: ' + CAST(@HeadRoomDate as nvarchar(max))
	

	WHILE DATEADD(d, @Idx*@PartitionWidth, @LastDivider) <= DATEADD(d, (@HeadRoom)*@PartitionWidth, @ProcessTime)
	BEGIN
		DECLARE @NewDivider datetime
		SELECT @NewDivider=DATEADD(d, @Idx*@PartitionWidth, @LastDivider)
		-- Rotate in a new filegroup
		-- Select an unused filegroup.
		DECLARE @FG_Name nvarchar(255)
		DECLARE @AvailableFGs TABLE ( name nvarchar(255) )
		INSERT INTO @AvailableFGs 
		    SELECT fg.[name] 
		    FROM [dbo].[PartitionFilegroups] pfg
			INNER JOIN [dbo].[PartitionedTables] ptb ON pfg.TableID=ptb.ID
			LEFT OUTER JOIN sys.destination_data_spaces dds ON pfg.DataSpaceID=dds.data_space_id
			INNER JOIN [sys].[filegroups] fg ON fg.data_space_id=pfg.DataSpaceID
			WHERE dds.data_space_id IS NULL
		-- If we've run out, there's a problem.
		IF NOT EXISTS (SELECT 1 FROM @AvailableFGs)
		BEGIN
			RAISERROR('pc_RotateHeadPartition: There are no more available filegroups for table ''%s''', 18, 1, @PartitionedTable)
			RETURN
		END
		SELECT TOP 1 @FG_Name=name FROM @AvailableFGs

		print 'Adding FG: ''' + @FG_Name + ''' at divider ' + cast(@NewDivider as nvarchar(max))
		BEGIN TRAN T1
		-- Update Scheme
		EXEC('ALTER PARTITION SCHEME [' + @SchemeName + '] NEXT USED [' + @FG_Name + ']')
		-- Update Function
		EXEC('ALTER PARTITION FUNCTION ' + @FunctionName + ' () SPLIT RANGE (''' + @NewDivider + ''')')
		COMMIT TRAN T1
		
		DELETE FROM @AvailableFGs
		
		SET @Idx = @Idx + 1
	END

END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_RotateHeadPartition] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_RotateTailPartition.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_RotateTailPartition]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_RotateTailPartition]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- @PartitionedTable - Name of the table to process.
-- @ProcessTime - Time of processing. In most cases, should be GETDATE()
-- @HistoryWidth - Days to keep history.
CREATE PROCEDURE [dbo].[pc_RotateTailPartition]
    @PartitionedTable nvarchar(255),
    @ProcessTime datetime,
	@HistoryWidth int
AS
BEGIN
   	IF NOT EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable )
	BEGIN
		RAISERROR('pc_RotateTailPartition: Table ''%s'' is not partitioned or is not being tracked', 18, 1, @PartitionedTable);
		RETURN
	END
	
	IF @HistoryWidth <= 0
	BEGIN
		RAISERROR('pc_RotateTailPartition: HistoryWidth must be greater than zero', 18, 1)
		RETURN
	END
	
	DECLARE @FunctionName nvarchar(255), @SchemeName nvarchar(255)
	SET @FunctionName = @PartitionedTable + '__Function'
	SET @SchemeName = @PartitionedTable + '__Scheme'
	
	-- Grab HeadRoom, PartitionWidth
	DECLARE @HeadRoom int, @PartitionWidth int
	SELECT @HeadRoom=HeadRoom, @PartitionWidth=PartitionWidth FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable
	
	DECLARE @FirstDivider datetime
	
	-- Grab front range value given that we know the name of the table.
	SELECT TOP (1) @FirstDivider=cast(rv.[value] as datetime)
	    FROM sys.partition_range_values rv
	    INNER JOIN sys.partition_functions pf ON rv.function_id=pf.function_id
		WHERE pf.[name]=@FunctionName
		ORDER BY rv.boundary_id ASC

	DECLARE @DropDate datetime
	SELECT @DropDate=DATEADD(d, -@HistoryWidth, @ProcessTime)
		
	--print 'FirstDivider: ' + cast(@FirstDivider as nvarchar(255))
	--print 'DropDate: ' + cast(@FirstDivider as nvarchar(255))
	
	WHILE @FirstDivider <= @DropDate
	BEGIN
		print 'Removing tail partition at: ' + cast(@FirstDivider as nvarchar(255))

		-- Find the filegroup that the last partition is on.
		DECLARE @FirstDataSpaceName nvarchar(255)
		SELECT TOP 1 @FirstDataSpaceName=fg.[name]
			FROM sys.destination_data_spaces dds
			INNER JOIN sys.partition_schemes ps ON ps.data_space_id=dds.partition_scheme_id
			INNER JOIN sys.filegroups fg ON fg.data_space_id=dds.data_space_id
			WHERE ps.[name]=@SchemeName AND dds.destination_id = 1
		IF @@ROWCOUNT=0
		BEGIN
			RAISERROR('pc_RotateTailPartition: Error: Caught up to the head of the list. pc_RotateHeadPartition may not be working correctly', 18, 1)
			RETURN
		END

		DECLARE @TmpTable nvarchar(255)
		SELECT @TmpTable=@PartitionedTable + '_' + cast(YEAR(@FirstDivider) as nvarchar(10)) + cast(MONTH(@FirstDivider) as nvarchar(10)) + cast(DAY(@FirstDivider) as nvarchar(10))
		-- Clone the @PartitionedTable to a version of that table on the same filegroup.
		exec [dbo].[pc_CloneTableSchema] 'dbo', @PartitionedTable, 'dbo', @TmpTable, @FirstDataSpaceName
		-- ALTER TABLE SWITCH PARTITION X TO <NEW TABLE>
		BEGIN TRY
			EXEC('ALTER TABLE [dbo].[' + @PartitionedTable + '] SWITCH PARTITION 1 TO ' + @TmpTable)
			
			-- DROP NEW TABLE
			EXEC('DROP TABLE [dbo].[' + @TmpTable + ']')
		END TRY
		BEGIN CATCH
			DECLARE @ErrMsg nvarchar(max), @ErrSev int, @ErrState int
			SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrState=ERROR_STATE()
			IF EXISTS ( SELECT 1 FROM sys.tables WHERE name=@TmpTable)
			BEGIN
				EXEC('DROP TABLE [dbo].[' + @TmpTable + ']')
			END
			RAISERROR(@ErrMsg, @ErrSev, @ErrState)
		END CATCH

		-- Now merging the ranges will move no data.
		DECLARE @SQL nvarchar(max)
		SET @SQL='ALTER PARTITION FUNCTION ' + @FunctionName + ' () MERGE RANGE ( ''' + cast(@FirstDivider as nvarchar(255)) + ''')'
		EXEC( @SQL )
		SELECT TOP (1) @FirstDivider=cast(rv.[value] as datetime)
			FROM sys.partition_range_values rv
			INNER JOIN sys.partition_functions pf ON rv.function_id=pf.function_id
			WHERE pf.[name]=@FunctionName
			ORDER BY rv.boundary_id ASC
		IF @@ROWCOUNT=0
		BEGIN
			RAISERROR('pc_RotateTailPartition: Error: Caught up to the head of the list. pc_RotateHeadPartition may not be working correctly', 18, 2)
			RETURN
		END
	END
	
	-- Do some on-the-way-out error checking. This may not be a good place to do this, but make
	-- sure that there are enough partitions to accomodate the history.
	DECLARE @FG_Count int
	SELECT @FG_Count=COUNT(1) FROM [dbo].[PartitionFilegroups] pfg
		INNER JOIN [dbo].[PartitionedTables] pt ON pt.ID=pfg.TableID
		WHERE pt.TableName=@PartitionedTable
	
	IF @HistoryWidth > (@FG_Count - 1) * @PartitionWidth
	BEGIN
		RAISERROR('pc_RotateTailPartition: Warning: There may not be enough filegroups (%d) for table ''%s'' to safely accommodate %d days of history with a partition width of %d days', 18, 1, @FG_Count, @PartitionedTable, @HistoryWidth, @PartitionWidth)
		RETURN
	END
END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_RotateTailPartition] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pl_CPE_IN_CustomersActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pl_CPE_IN_CustomersActive.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pl_CPE_IN_CustomersActive]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pl_CPE_IN_CustomersActive]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pl_CPE_IN_CustomersActive]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pl_CPE_IN_CustomersActive]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pl_CPE_IN_CustomersActive] @CustomerPK int
AS 
  select CustomerPK as UserID, isnull(HHPK, 0) as HHPrimaryID, CustomerTypeID as HHRec, Employee, CurrYearSTD, LastYearSTD, isnull(CustomerStatusID, 0) as CustomerStatusID, isnull(FirstName, '''') as FirstName, isnull(LastName, '''') as LastName
    from Customers with (NoLock) 
   where CustomerPK=@CustomerPK;
' 
END
GO
GRANT EXECUTE ON [dbo].[pl_CPE_IN_CustomersActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pl_Return_CustCardCount.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pl_Return_CustCardCount.StoredProcedure.sql 112532 2017-05-15 13:59:54Z gs250217 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pl_Return_CustCardCount]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pl_Return_CustCardCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pl_Return_CustCardCount]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pl_Return_CustCardCount]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pl_Return_CustCardCount] @CustomerPK bigint, @CardTypeID int, @CardCount int OUTPUT
AS   
  set @CardCount = 0;
  SELECT @CardCount = Count(ExtCardID) FROM CardIDs WITH (NOLOCK) WHERE CustomerPK = @CustomerPK and CardTypeID=@CardTypeID and CardStatusID in (1,6); 

' 
END
GO
GRANT EXECUTE ON [dbo].[pl_Return_CustCardCount] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pl_Return_CustomerAttributes.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pl_Return_CustomerAttributes.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pl_Return_CustomerAttributes]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pl_Return_CustomerAttributes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pl_Return_CustomerAttributes]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pl_Return_CustomerAttributes]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pl_Return_CustomerAttributes] @CustPK bigint
AS   
  SELECT CustomerPK, AttributeTypeID, AttributeValueID FROM CustomerAttributes WITH (NOLOCK) WHERE CustomerPK = @CustPK;
' 
END
GO
GRANT EXECUTE ON [dbo].[pl_Return_CustomerAttributes] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pl_UE_IN_CustomersActive.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pl_UE_IN_CustomersActive.StoredProcedure.sql 37573 2011-09-21 20:55:29Z mark $
-- Build Version: 7.3.1.138972

/****** Object:  StoredProcedure [dbo].[pl_CPE_IN_CustomersActive]    Script Date: 12/27/2010 16:44:20 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pl_UE_IN_CustomersActive]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pl_UE_IN_CustomersActive]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pl_UE_IN_CustomersActive] @CustomerPK int
AS 
  select CustomerPK as UserID, isnull(HHPK, 0) as HHPrimaryID, CustomerTypeID as HHRec, Employee, CurrYearSTD, LastYearSTD, isnull(CustomerStatusID, 0) as CustomerStatusID, isnull(FirstName, '''') as FirstName, isnull(LastName, '''') as LastName
    from Customers with (NoLock) 
   where CustomerPK=@CustomerPK;
GO

GRANT EXECUTE ON [dbo].[pl_UE_IN_CustomersActive] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.proc_TUA_YB.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.proc_TUA_YB.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[proc_TUA_YB]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_TUA_YB]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[proc_TUA_YB]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_TUA_YB]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_TUA_YB]
AS 
  SET NOCOUNT ON;
  -- mark 1800 rows to work with
  --set rowcount 1800
  update TOP (1800) YS_UploadTemp_YB with (RowLock) set WaitingACK=-5 where WaitingACK=0;
  --set rowcount 0
  -- move the 1800 marked rows to YellowBox.Temp_YB
  insert into Temp_YB (LocationID, BoxID, InStoreLocationID, PrinterTypeID, OpDisplayTypeID) 
    select LocationID, Col1 as BoxID, Col2 as InStoreLocationID, Col3 as PrinterTypeID, Col4 as OpDisplayTypeID from YS_UploadTemp_YB with (NoLock) where WaitingACK=-5;
  -- update any existing rows in the YellowBoxes table
  update YellowBoxes with (RowLock) set InStoreLocationID=TYB.InStoreLocationID, PrinterTypeID=TYB.PrinterTypeID,  OpDisplayTypeID=TYB.OpDisplayTypeID
    from YellowBoxes Inner Join Temp_YB as TYB with (NoLock) on YellowBoxes.LocationID=TYB.LocationID and YellowBoxes.BoxID=TYB.BoxID;
  -- insert any non-existant rows into the YellowBoxes table
  insert into YellowBoxes(LocationID, BoxID, InStoreLocationID, PrinterTypeID, OpDisplayTypeID) 
    select TYB.LocationID, TYB.BoxID, TYB.InStoreLocationID, TYB.PrinterTypeID, TYB.OpDisplayTypeID 
    from Temp_YB as TYB with (NoLock) left join YellowBoxes as YB on YB.LocationID=TYB.LocationID and YB.BoxID=TYB.BoxID 
    where YB.PKID is Null;
  -- clear out the temporary table
  Truncate table Temp_YB;
  -- delete the 1800 marked rows
  Delete from YS_UploadTemp_YB with (RowLock) where WaitingACK=-5;
' 
END
GO
GRANT EXECUTE ON [dbo].[proc_TUA_YB] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_AccumulationVariables_Delete_by_OfferID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_AccumulationVariables_Delete_by_OfferID.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_AccumulationVariables_Delete_by_OfferID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_AccumulationVariables_Delete_by_OfferID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_AccumulationVariables_Delete_by_OfferID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_AccumulationVariables_Delete_by_OfferID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_AccumulationVariables_Delete_by_OfferID] @OfferID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the AccumuationVariables records for the specified OfferID
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  Delete TOP (1800) AccumulationVariables with (RowLock) from 
    AccumulationVariables as AV with (RowLock) Inner Join PromoVariables as PV with (NoLock) 
      on AV.PromoVarID=PV.PromoVarID and PV.LinkID=@OfferID

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_AccumulationVariables_Delete_by_OfferID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_AddSVConversionData.StoredProcedure.sql'; 
--
GO
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_AddSVConversionData]    Script Date: 10/03/2012 10:15:56 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_AddSVConversionData]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_AddSVConversionData]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_AddSVConversionData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE procedure [dbo].[pt_AddSVConversionData] @SVProgramID bigint, @SVMonetaryValue decimal(12,3), @SVPointsValue int
as 
  set nocount on

  --if  a converstion record does not exist for this SV Program ID, insert it
  select @SVProgramID=isnull(SVProgramID, 0) from StoredValuePointsConversion with (NoLock) where SVProgramID=@SVProgramID;
  if @SVProgramID=0 begin
    Insert into StoredValuePointsConversion with (RowLock) (SVProgramID, SVMonetaryValue, SVPointsValue) values (@SVProgramID, @SVMonetaryValue, @SVPointsValue);
  end
  --if  a converstion record does exist for this SV Program ID, update it
  else begin
    Update StoredValuePointsConversion with (RowLock) set SVProgramID=@SVProgramID, SVMonetaryValue=@SVMonetaryValue, SVPointsValue=@SVPointsValue where SVProgramID=@SVProgramID;
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_AddSVConversionData] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_AdjustmentReason_Merge.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_AdjustmentReasons_Merge]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_AdjustmentReasons_Merge]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_AdjustmentReasons_Merge] @ReasonID int, @Description nvarchar(100), @Program nvarchar(50), @Delete bit

AS 
  SET NOCOUNT ON;
  
If @Delete=0 
    Merge AdjustmentReasons with (RowLock) As Target
	Using (select @ReasonID, @Description, @Program) as source (ReasonID, [Description], Program)
	On (target.ReasonID = source.ReasonID)
	When Matched Then
		Update set [Description]=@Description, [Enabled]=1, LastUpdate=getdate(), Program=@Program
	When Not Matched Then 
		Insert (ReasonID, [Description], [Enabled], UserDefined, LastUpdate, Program)
		Values (@ReasonID, @Description, 1, 1, getdate(), @Program);
Else
	Merge AdjustmentReasons with (RowLock) As Target
	Using (select @ReasonID, @Description, @Program) as source (ReasonID, [Description], Program)
	On (target.ReasonID = source.ReasonID)
	When Matched Then
		Delete;
GO


GRANT EXECUTE ON [dbo].[pt_AdjustmentReasons_Merge] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_Attach_To_PrivacyGroup.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Attach_To_PrivacyGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Attach_To_PrivacyGroup]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Attach_To_PrivacyGroup]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Attach_To_PrivacyGroup]     
 @CustomerGroupID INT,    
    @CustomerPK BIGINT,    
    @FieldID INT,     
    @FieldValue [nvarchar](1000)    
AS    
BEGIN    
--to be used by pa_CUA_UpdateCustomerHHSupplemental SP to attach a customer to a private customer group     
 SET NOCOUNT ON;    
 DECLARE @HHPK BIGINT ;  
DECLARE @HHPK_CustomerPK BIGINT;    
 DECLARE @NumRecs INT;      
 DECLARE @ExtFieldID VARCHAR(10);    
       
 SET @HHPK = 0    
     
 SELECT @ExtFieldID= ExtFieldID FROM CustomerSupplementalFields WHERE FieldID=@FieldID    
 --IF (@FieldID = 3 AND @FieldValue=1)    
 IF (@ExtFieldID =''NER'' AND @FieldValue=1)    
    BEGIN      
       IF NOT EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @CustomerPK AND Deleted=0)      
           BEGIN      
                        INSERT INTO GroupMembership (CustomerGroupID, CustomerPK,  Manual, LastUpdate, Deleted, CMOAStatusFlag,TCRMAStatusFlag, ExtInterfaceID)  VALUES(@CustomerGroupID, @CustomerPK,  1 , GETDATE(), 0,  0,  0, -999)         
                        --Get hh card details of the customer to added them to private customer group      
                        SELECT  @HHPK = HHPK  FROM Customers WITH (NOLOCK) WHERE  CustomerPK=  @CustomerPK                    
                        IF @HHPK > 0      
                               
                            INSERT INTO GroupMembership (CustomerGroupID, CustomerPK,  Manual, LastUpdate, Deleted, CMOAStatusFlag,TCRMAStatusFlag, ExtInterfaceID)  VALUES(@CustomerGroupID, @HHPK,  1 , GETDATE(), 0,  0,  0, -999)        
                            --update Other cards (related to HH card)   
                                                DECLARE CustomersCursor CURSOR LOCAL FAST_FORWARD FOR  
             SELECT CustomerPK   FROM Customers WITH (NOLOCK) WHERE  HHPK=  @CustomerPK     
                   OPEN CustomersCursor  
               FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK  
                 WHILE @@FETCH_STATUS = 0  
                   BEGIN  
                        INSERT INTO GroupMembership (CustomerGroupID, CustomerPK,  Manual, LastUpdate, Deleted, CMOAStatusFlag,TCRMAStatusFlag, ExtInterfaceID)  VALUES(@CustomerGroupID, @HHPK_CustomerPK,  1 , GETDATE(), 0,  0,  0, -999)        
              FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK  
                   END  
              CLOSE CustomersCursor  
            DEALLOCATE CustomersCursor  
           END      
       ELSE      
          DELETE  GroupMembership WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@CustomerPK  AND  Deleted=1   --Removing previous entries for the same CustomerPK                     
    END       
END    
'
END
GO
GRANT EXECUTE ON [dbo].[pt_Attach_To_PrivacyGroup] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_BarcodeBatchRequests.storedprocedure.sql'; 
--
GO
-- $Id: dbo.pt_BarcodeBatchRequests.StoredProcedure.sql 27378 2011-06-05 17:56:18Z  nate $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_BarcodeBatchRequests]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_BarcodeBatchRequests]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_BarcodeBatchRequests]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_BarcodeBatchRequests]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_BarcodeBatchRequests]
as 
  -- this procedure returns all the unfilled Barcode Batch generation requests
  SET NOCOUNT ON;
  select U.CustomerGroupID, U.SVProgramID, U.RequestedOn
   from BarcodeBatchRequestQueue as U with (NoLock) 
   where U.RequestCompletedOn = NULL
   ORDER BY RequestedOn ASC;
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_BarcodeBatchRequests] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_CM_AdvancedLimitVariables_BulkDelete_By_LimitID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CM_AdvancedLimitVariables_BulkDelete_By_LimitID.StoredProcedure.sql 92721 2015-09-03 14:41:43Z mf200002 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CM_AdvancedLimitVariables_BulkDelete_By_LimitID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CM_AdvancedLimitVariables_BulkDelete_By_LimitID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CM_AdvancedLimitVariables_BulkDelete_By_LimitID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_CM_AdvancedLimitVariables_BulkDelete_By_LimitID] @InputLimitIDs as dbo.LimitIDType ReadOnly, @NumDeleted int OUTPUT 
AS
BEGIN

	--
	--	When large files are imported, the @LimitIdDT gets quite large. So, transferring records from table variable into temp table.
	--	This way we could leverage some native features of temporary tables (that are not available for table variables).
	--
	CREATE TABLE #LimitIDTable
	(
		  [LimitID] 	[bigint] NOT NULL	PRIMARY KEY
	)
	INSERT INTO #LimitIDTable (LimitID)
	SELECT LimitID FROM @InputLimitIDs
	
  SET NOCOUNT ON;


  Delete T1 from CM_AdvancedLimitVariables T1 With (RowLock) INNER JOIN #LimitIDTable T2 on T2.LimitID=T1.LimitID;
  
  DROP TABLE #LimitIDTable;

  set @NumDeleted=@@RowCount;
  --set rowcount 0
END
GO
GRANT EXECUTE ON [dbo].[pt_CM_AdvancedLimitVariables_BulkDelete_By_LimitID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CM_AdvancedLimitVariables_Delete_By_LimitID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CM_AdvancedLimitVariables_Delete_By_LimitID.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CM_AdvancedLimitVariables_Delete_By_LimitID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CM_AdvancedLimitVariables_Delete_By_LimitID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CM_AdvancedLimitVariables_Delete_By_LimitID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_CM_AdvancedLimitVariables_Delete_By_LimitID] @LimitID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
BEGIN
  -- This procedure deletes 1800 Points records that for the specified ProgramID
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from CM_AdvancedLimitVariables with (RowLock) where LimitID=@LimitID;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0

END
GO
GRANT EXECUTE ON [dbo].[pt_CM_AdvancedLimitVariables_Delete_By_LimitID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CM_AdvancedLimitVariables_Search_By_LimitID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CM_AdvancedLimitVariables_Search_By_LimitID.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CM_AdvancedLimitVariables_Search_By_LimitID]    Script Date: 12/27/2010 15:13:08 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CM_AdvancedLimitVariables_Search_By_LimitID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CM_AdvancedLimitVariables_Search_By_LimitID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_CM_AdvancedLimitVariables_Search_By_LimitID] @InputLimitIDs as dbo.LimitIDType ReadOnly
AS
BEGIN
	--
	--	When large files are imported, the @LimitIdDT gets quite large. So, transferring records from table variable into temp table.
	--	This way we could leverage some native features of temporary tables (that are not available for table variables).
	--
	CREATE TABLE #LimitIDTable
	(
		  [LimitID] 	[bigint] NOT NULL	PRIMARY KEY
	)
	INSERT INTO #LimitIDTable (LimitID)
	SELECT LimitID FROM @InputLimitIDs
	
	select distinct a.LimitID from CM_AdvancedLimitVariables a with (NoLock) left join #LimitIDTable b on b.LimitID=a.LimitID WHERE b.LimitID IS NULL;
	
	DROP TABLE #LimitIDTable;

END
GO
GRANT EXECUTE ON [dbo].[pt_CM_AdvancedLimitVariables_Search_By_LimitID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CUA_UpdateCustomerHouseholdSupplemental.StoredProcedure.sql.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CUA_UpdateCustomerHouseholdSupplemental]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CUA_UpdateCustomerHouseholdSupplemental]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CUA_UpdateCustomerHouseholdSupplemental]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_CUA_UpdateCustomerHouseholdSupplemental] @FieldID int, @FieldValue nvarchar(1000), @CustomerPK bigint --, @UpdatedRows int OUTPUT        
AS             
  SET NOCOUNT ON            
  DECLARE @NumRecs INT;            
  DECLARE @HHPK_CustomerPK BIGINT;        
  --SET @UpdatedRows = 0        
          
        --update Other cards (related to HH card) CustomerSupplemental info          
                 DECLARE CustomersCursor CURSOR LOCAL FAST_FORWARD FOR        
                  SELECT CustomerPK   FROM Customers WITH (NOLOCK) WHERE  HHPK=  @CustomerPK         
                    OPEN CustomersCursor        
                    FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK        
                   WHILE @@FETCH_STATUS = 0        
                     BEGIN     
                       SELECT @NumRecs=COUNT(1) FROM  CustomerSupplemental WITH (NOLOCK) WHERE CustomerPK = @HHPK_CustomerPK and FieldID = @FieldID;            
                       IF @NumRecs = 0      
                                   
                         INSERT INTO CustomerSupplemental (CustomerPK, FieldID, Value, LastUpdate, Deleted)  VALUES (@HHPK_CustomerPK, @FieldID, @FieldValue, GETDATE(), 0);          
                       ELSE            
                         UPDATE CustomerSupplemental SET Value=@FieldValue, LastUpdate=GETDATE(), Deleted=0 WHERE CustomerPK=@HHPK_CustomerPK AND FieldID=@FieldID;            
                   FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK        
                     END        
                   CLOSE CustomersCursor        
                  DEALLOCATE CustomersCursor        
--SET @UpdatedRows = @@ROWCOUNT                        
      
'
END
GO
GRANT EXECUTE ON [dbo].[pt_CUA_UpdateCustomerHouseholdSupplemental] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_CardIDs_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CardIDs_Delete.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CardIDs_Delete]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CardIDs_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CardIDs_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CardIDs_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CardIDs_Delete] @ExtCardID nvarchar(400), @CardTypeID int, 
                                           @CardPK bigint OUTPUT, @CustomerPK bigint OUTPUT, @Deleted bit OUTPUT 
AS 
  SET NOCOUNT ON;
  
  set @CardPK = 0;
  set @CustomerPK = 0
  set @Deleted = 0;
  
    -- determine if this card already exists
    select Top 1 @CardPK = IsNull(CardPK,0), @CustomerPK = ISNULL(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

    if @CardPK > 0
      begin
        delete from CardIDs with (RowLock) where CardPK = @CardPK;
        if @@ROWCOUNT > 0 set @Deleted = 1;
      end
  

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CardIDs_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CardIDs_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CardIDs_Delete.StoredProcedure.sql 53881 2012-08-15 01:39:05Z mp250205 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CardIDs_Insert]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CardIDs_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_CardIDs_Insert] @CustomerPK bigint, @ExtCardID nvarchar(400), @CardStatusID int, @CardTypeID int, 
                                           @PIN nvarchar(50), @CardPK bigint OUTPUT,@ExtCardIDOriginal nvarchar(400)
AS 
  SET NOCOUNT ON;
  
  set @CardPK = 0;
  
    -- determine if this card already exists
    Insert into CardIDs (CustomerPK, ExtCardID, CardStatusID, CardTypeID, PIN,ExtCardIDOriginal) 
      values (@CustomerPK, @ExtCardID, @CardStatusID, @CardTypeID, @PIN,@ExtCardIDOriginal);
    set @CardPK=Scope_Identity();

GO

GRANT EXECUTE ON [dbo].[pt_CardIDs_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CardIDs_SelectByExtCardIDCardTypeID.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CardIDs_SelectByExtCardIDCardTypeID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_CardIDs_SelectByExtCardIDCardTypeID]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_CardIDs_SelectByExtCardIDCardTypeID] @ExtCardID nvarchar(400), @CardTypeID int
AS
    -- $Id: pt_Return_CustomerPassword.sql 33138 2011-06-28 20:38:36Z josh $
    -- Build Version: 7.3.1.138972

    /**  This stored procedure returns information about the customer's card **/

  SET NOCOUNT ON;
  select CID.CardPK, CID.CustomerPK, CID.ExtCardIDOriginal as ExtCardID, CID.CardStatusID, CID.CardTypeID
  from CardIDs as CID with (NoLock) 
  where CID.ExtCardID=@ExtCardID and CID.CardTypeID=@CardTypeID

GO

GRANT EXECUTE ON [dbo].[pt_CardIDs_SelectByExtCardIDCardTypeID] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_Card_Range_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Card_Range_Delete.StoredProcedure.sql 1077994 2016-12-26 22:56:07Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Card_Range_Delete]    Script Date: 12/26/2016 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Card_Range_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Card_Range_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Card_Range_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Card_Range_Delete] @CardRangeID bigint
AS
  BEGIN
    DELETE FROM CardRange WHERE CardRangeID = @CardRangeID;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Card_Range_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Card_Range_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Card_Range_Insert.StoredProcedure.sql 1077994 2016-12-26 22:56:07Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Card_Range_Insert]    Script Date: 12/26/2016 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Card_Range_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Card_Range_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Card_Range_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Card_Range_Insert] @CardTypeID int, @StartRange decimal(38,0),
	@EndRange decimal(38,0)
AS
  BEGIN
    INSERT INTO CardRange (CardTypeID, StartRange, EndRange)
		VALUES (@CardTypeID, @StartRange, @EndRange);
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Card_Range_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CheckEmailExists.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CheckEmailExists.StoredProcedure.sql  2011-04-18 21:13:17Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CheckEmailExists]    Script Date: 04/18/2011 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CheckEmailExists]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CheckEmailExists]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_CheckEmailExists] @Email nvarchar(1000)
AS  
  IF EXISTS ( SELECT * FROM CustomerExt WHERE email = @Email ) 
     SELECT 1
  Else 
     SELECT 0

GO

GRANT EXECUTE ON [dbo].[pt_CheckEmailExists] TO [Copient_Logix_uspRole] AS [dbo]
GO







print 'processing storedprocedures/dbo.pt_CheckValidCustNoteTypeId.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CheckValidCustNoteTypeId]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CheckValidCustNoteTypeId]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CheckValidCustNoteTypeId]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'Create PROCEDURE [dbo].[pt_CheckValidCustNoteTypeId] @CustNoteTypeId int, @Result int Output     
AS     
  -- This procedure checks for valid CustNoteTypeId, if the passed id is valid than returns 1 else 0
 BEGIN  
	  SET NOCOUNT ON;    
	  SET @Result = 0;    
    BEGIN TRY
		IF EXISTS (SELECT NoteTypeID from CustomerNoteTypes WHERE NoteTypeID = @CustNoteTypeId)
		BEGIN
			SET @Result = 1;  
		END	
	END TRY
	BEGIN CATCH
		SET @Result = 0; 
	END CATCH; 
END	 
'
END
GO
GRANT EXECUTE ON [dbo].[pt_CheckValidCustNoteTypeId] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_CustomerAuthInProgress_Check.StoredProcedure.sql'; 
--
GO
-- $Id:  dbo.pt_CustomerAuthInProgress_Check.StoredProcedure.sql 67743 2013-07-10 11:06:34Z jg185197 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerAuthInProgress_Check]') AND TYPE in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CustomerAuthInProgress_Check];

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_CustomerAuthInProgress_Check] 
  @CustomerPK   bigint, 
  @AuthInProgress smallint OUTPUT 
AS 
BEGIN
  SET NOCOUNT ON;
  SELECT @AuthInProgress=AuthInProgressFlag from Customers with (NoLock) where CustomerPK=@CustomerPK;

  IF @AuthInProgress = 0
  BEGIN
     UPDATE Customers with (RowLock)SET AuthInProgressFlag=1 where CustomerPK=@CustomerPK;
  END
END
RETURN @AuthInProgress;
GO

GRANT EXECUTE ON [dbo].[pt_CustomerAuthInProgress_Check] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerAuthInProgress_ReleaseLock.StoredProcedure.sql'; 
--
GO
-- $Id:  dbo.pt_CustomerAuthInProgress_ReleaseLock.StoredProcedure.sql 67743 2013-07-10 11:06:34Z jg185197 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerAuthInProgress_ReleaseLock]') AND TYPE in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CustomerAuthInProgress_ReleaseLock];

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_CustomerAuthInProgress_ReleaseLock] 
  @CustomerPK   bigint
AS 
BEGIN
  SET NOCOUNT ON;
  UPDATE Customers with (RowLock) SET AuthInProgressFlag=0 where CustomerPK=@CustomerPK;
END
GO

GRANT EXECUTE ON [dbo].[pt_CustomerAuthInProgress_ReleaseLock] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerAuthTokens_Create.StoredProcedure.sql'; 
--
GO
-- $Id:  dbo.pt_CustomerAuthTokens_Create.StoredProcedure.sql 67743 2013-07-10 11:06:34Z jg185197 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerAuthTokens_Create]') AND TYPE in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CustomerAuthTokens_Create];

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_CustomerAuthTokens_Create] 
  @CustomerPK   BIGINT, 
  @AuthToken    VARCHAR(36), 
  @GUID         VARCHAR(36)
AS 
BEGIN

  -- we are storing a new AuthToken for the CustomerPK/GUID combination, so we need
  -- to get rid of any records with that combination of values so we don't 
  -- violate the unique constraint on the table
  Delete from CustomerAuthTokens where CustomerPK=@CustomerPK and GUID=@GUID;

  -- This procedure inserts new authorization token into the database
  -- Customer may only have 100 authentication tokens simultaneously. Oldest token is deleted if more than 100
  SET NOCOUNT ON;

  WITH CTE AS
  (
    SELECT 
      ROW_NUMBER() OVER (PARTITION BY CustomerPK ORDER BY TokenCreateTime DESC) RN 
    FROM 
      CustomerAuthTokens
    WHERE 
      CustomerPK = @CustomerPK
  )
  DELETE 
    CTE
  WHERE 
    RN >= 100  

  INSERT INTO CustomerAuthTokens 
    (CustomerPK, 
    AuthToken, 
    TokenCreateTime, 
    GUID) 
  VALUES 
    (@CustomerPK, 
    @AuthToken, 
    GETDATE(), 
    @GUID);
END
GO

GRANT EXECUTE ON [dbo].[pt_CustomerAuthTokens_Create] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerAuthTokens_Lookup.StoredProcedure.sql'; 
--
GO
-- $Id:  $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerAuthTokens_Lookup]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CustomerAuthTokens_Lookup];

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[pt_CustomerAuthTokens_Lookup] @AuthToken varchar(36), @TimeOut int, @GUID varchar(36), @CustomerPK bigint OUTPUT
as 
  set nocount on;
  declare @TokenCreateTime datetime;
  set @CustomerPK=-1;
  select @CustomerPK=CustomerPK, @TokenCreateTime = TokenCreateTime from CustomerAuthTokens where AuthToken=@AuthToken and GUID=@GUID;
  if (@CustomerPK <> -1)
    BEGIN
	  if (@TimeOut > 0) AND (DATEDIFF(second, @TokenCreateTime, Getdate()) >= @TimeOut)
	    BEGIN
          set @CustomerPK = 0;  
		  Delete From CustomerAuthTokens where AuthToken = @AuthToken;
		END
	  else
	     Update CustomerAuthTokens Set TokenCreateTime = getdate() where AuthToken = @AuthToken;
    END
GO

GRANT EXECUTE ON [dbo].[pt_CustomerAuthTokens_Lookup] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerAuthTokens_Verify.StoredProcedure.sql'; 
--
GO
-- $Id:  $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerAuthTokens_Verify]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CustomerAuthTokens_Verify];

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[pt_CustomerAuthTokens_Verify] @CustomerPK bigint, @AuthToken varchar(36), @GUID varchar(36), @ValidToken bit OUTPUT
as 
  set nocount on;
  declare @NumRecs int;
  set @ValidToken=0;
  select @NumRecs=count(*) from CustomerAuthTokens where CustomerPK=@CustomerPK and AuthToken=@AuthToken and GUID=@GUID;
  if @NumRecs>0 begin
    set @ValidToken=1; 
  end
GO

GRANT EXECUTE ON [dbo].[pt_CustomerAuthTokens_Verify] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerEdits_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerEdits_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerEdits_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerEdits_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerEdits_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerEdits_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerEdits_Insert] @CustomerPK bigint, @AdminUserID int, @EditPK int OUTPUT
AS  
  set @EditPK = 0;
  
  insert into CustomerEdits (CustomerPK, AdminUserID, LastUpdate) values (@CustomerPK, @AdminUserID, GETDATE());
  set @EditPK = SCOPE_IDENTITY();
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerEdits_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerIDsFromGroupID.storedprocedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerIDsFromGroupID.StoredProcedure.sql 27378 2011-06-05 17:56:18Z  nate $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerIDsFromGroupID]    Script Date: 12/27/2010 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerIDsFromGroupID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerIDsFromGroupID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerIDsFromGroupID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_CustomerIDsFromGroupID] @CustomerGroupID bigint
as 
-- this procedure returns all customerIDs in a customer group
SET NOCOUNT ON;
select C.CustomerPK, C.ExtCardIDOriginal as ExtCardID from CardIDs  as C with (NoLock)
where C.CustomerPK in (select CustomerPK from GroupMembership with (NoLock) where CustomerGroupID=@CustomerGroupID and Deleted =0);
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerIDsFromGroupID] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_CustomerInfoChanges_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerInfoChanges_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerInfoChanges_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerInfoChanges_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerInfoChanges_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerInfoChanges_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_CustomerInfoChanges_Insert] @CustomerPK bigint, @AdminUserID int
as 
  set nocount on;

  insert into CustomerInfoChanges (CustomerPK, AdminUserID, ChangeDate, ReportStatus)
    values (@CustomerPK, @AdminUserID, GETDATE(), 1); 
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerInfoChanges_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerLocations_Delete_By_Location.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerLocations_Delete_By_Location.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerLocations_Delete_By_Location]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerLocations_Delete_By_Location]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerLocations_Delete_By_Location]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerLocations_Delete_By_Location]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerLocations_Delete_By_Location] @LocationID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the CustomerLocations records for the specified OfferID
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from CustomerLocations with (RowLock) where LocationID=@LocationID

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerLocations_Delete_By_Location] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerNoteHistoryByExtID_Select.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerNoteHistoryByExtID_Select.StoredProcedure.sql 25980 2011-02-10 21:05:41Z Lakshmi Yechuri $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerNoteHistoryByExtID_Select]    Script Date: 02/10/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerNoteHistoryByExtID_Select]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerNoteHistoryByExtID_Select]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns data from CustomerNotes table in the LogixXS database, which is in the give date/time range.**/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerNoteHistoryByExtID_Select]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerNoteHistoryByExtID_Select] @ExtCardID nvarchar(400), 
                                                                   @CardTypeID int = 0,@BeginDate datetime,@EndDate datetime
AS
  SET NOCOUNT ON;
  BEGIN
  
   DECLARE @CustomerPK BIGINT
   SELECT  @CustomerPK = CustomerPK from CardIDs with (NoLock)WHERE ExtCardID = @ExtCardID and CardTypeID = @CardTypeID
   SELECT  @ExtCardID, CreatedDate, NoteTypeID,Note FROM CustomerNotes WHERE (CustomerPK = @CustomerPK)
                                                                         AND (CreatedDate >= @BeginDate) 
                                                                         AND (CreatedDate <= @EndDate) 
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerNoteHistoryByExtID_Select] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerNotes_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerNotes_Delete.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerNotes_Delete]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerNotes_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerNotes_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerNotes_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerNotes_Delete] @NoteID int
AS
  SET NOCOUNT ON;
  BEGIN
    UPDATE CustomerNotes SET Deleted=1 where NoteID=@NoteID;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerNotes_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerNotes_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerNotes_Insert.StoredProcedure.sql 47201 2012-04-10 14:53:19Z mark $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerNotes_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerNotes_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerNotes_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerNotes_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerNotes_Insert] @NoteTypeID int, @LinkID int, 
	@AdminUserID int, @FirstName nvarchar(50), @LastName nvarchar(50), @Note nvarchar(1000), 
	@Private bit, @Important bit, @Deleted bit, @LanguageID int, @NoteID int OUTPUT
AS
  SET NOCOUNT ON;
  BEGIN
    INSERT INTO CustomerNotes with (RowLock) 
		(CustomerPK, AdminUserID, FirstName, LastName, CreatedDate, Note, Private, Important, Deleted, LanguageID) 
    VALUES 
		(@LinkID, @AdminUserID, @FirstName, @LastName, getdate(), @Note, @Private, @Important, @Deleted, @LanguageID);
    SET @NoteID=scope_identity();
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerNotes_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerProgramBalancesLastUpdate_Select.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerProgramBalancesLastUpdate_Select.StoredProcedure.sql 25980 2011-02-11 21:05:41Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerProgramBalancesLastUpdate_Select]    Script Date: 02/11/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerProgramBalancesLastUpdate_Select]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerProgramBalancesLastUpdate_Select]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns the last update date for each points program for a customer, given the external card id and the card type.
I had to write this stored procedure separate from pt_CustomerProgramBalances_Select as there would be performance issues if I 
joined Points to PointHistory in that SP**/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerProgramBalancesLastUpdate_Select]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerProgramBalancesLastUpdate_Select]
  @ExtCardID nvarchar(400),
  @CardTypeID int = 0
AS
  SET NOCOUNT ON;
  DECLARE @CustomerPK BIGINT
 
  SELECT @CustomerPK = CustomerPK from CardIDs with (NoLock)WHERE ExtCardID = @ExtCardID and CardTypeID = @CardTypeID; 
  SELECT PH.ProgramID,MAX(PH.LastUpdate) AS LastUpdate FROM PointsHistory PH WITH (NOLOCK) WHERE PH.CustomerPK = ISNULL(@CustomerPK,0) GROUP BY PH.ProgramID
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerProgramBalancesLastUpdate_Select] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerProgramBalances_Select.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerProgramBalances_Select.StoredProcedure.sql 25980 2011-02-11 21:05:41Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerProgramBalances_Select]    Script Date: 02/11/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerProgramBalances_Select]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerProgramBalances_Select]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns the balances of a customer for each points program, given the external card id and the card type **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerProgramBalances_Select]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerProgramBalances_Select]
  @ExtCardID nvarchar(400),
  @CardTypeID int = 0
AS
  SET NOCOUNT ON;
  DECLARE @CustomerPK BIGINT
 
  

  SELECT @CustomerPK = CustomerPK from CardIDs with (NoLock)WHERE ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;
  
  SELECT P.ProgramID,P.PromoVarID, P.Amount FROM Points P WITH (NOLOCK) WHERE P.CustomerPK = ISNULL(@CustomerPK,0) ORDER BY P.ProgramID

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerProgramBalances_Select] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerRemovalQueue_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerRemovalQueue_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerRemovalQueue_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerRemovalQueue_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CustomerRemovalQueue_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerRemovalQueue_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_CustomerRemovalQueue_Insert] @CustomerPK bigint
AS 
  SET NOCOUNT ON;
  
  insert into CustomerRemovalQueue with (RowLock) (CustomerPK, RemovalDate, StatusFlag) values (@CustomerPK, GETDATE(), 0);  

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerRemovalQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CustomerSupplementalFields_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerSupplementalFields_Delete.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerSupplementalFields_Delete]    Script Date: 12/27/2010 15:13:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerSupplementalFields_Delete]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CustomerSupplementalFields_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_CustomerSupplementalFields_Delete] @FieldID bigint 
AS  
  SET NOCOUNT ON;
  Update CustomerSupplementalFields with (RowLock) set LastUpdate=getdate(), Deleted=1 where FieldID=@FieldID

GO
GRANT EXECUTE ON [dbo].[pt_CustomerSupplementalFields_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_CustomerSupplementalFields_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_CustomerSupplementalFields_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_CustomerSupplementalFields_Insert]    Script Date: 12/27/2010 15:13:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CustomerSupplementalFields_Insert]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_CustomerSupplementalFields_Insert]
GO
CREATE PROCEDURE [dbo].[pt_CustomerSupplementalFields_Insert] @ExtFieldID nvarchar(50), @Name nvarchar(100), @FieldTypeID int, @Length int, @Visible bit, @Editable bit, @FieldID int OUTPUT
AS
  BEGIN
  SET NOCOUNT ON;
  INSERT INTO CustomerSupplementalFields with (RowLock)
    (ExtFieldID, Name, FieldTypeID, Length, Visible, Editable, Deleted, LastUpdate)
  VALUES
    (@ExtFieldID, @Name, @FieldTypeID, @Length, @Visible, @Editable, 0, GETDATE());
  SET @FieldID=Scope_Identity();
  END
GO
GRANT EXECUTE ON [dbo].[pt_CustomerSupplementalFields_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_Customers_Delete_By_CustomerGroup.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Customers_Delete_By_CustomerGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Customers_Delete_By_CustomerGroup]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Customers_Delete_By_CustomerGroup]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'Create PROCEDURE [dbo].[pt_Customers_Delete_By_CustomerGroup] @CustomerGroupID BigInt, @NumDeleted Int OUTPUT    
AS    
  SET NOCOUNT ON;
  
Delete from CardIDs where CustomerPK in ( Select CGI1.CustomerPK  from GroupMembership CGI1 
inner join GroupMembership CGI2
on CGI1.CustomerPK = CGI2.CustomerPK 
where CGI1.CustomerGroupID=@CustomerGroupID
group by CGI1.CustomerPK 
having (Count(CGI1.CustomerPK) = 1)
)


Delete from Customers where CustomerPK in ( Select CGI1.CustomerPK  from GroupMembership CGI1 
inner join GroupMembership CGI2
on CGI1.CustomerPK = CGI2.CustomerPK 
where CGI1.CustomerGroupID=@CustomerGroupID
group by CGI1.CustomerPK 
having (Count(CGI1.CustomerPK) = 1)
)
SET @NumDeleted=@@RowCount;
'
END
GO
GRANT EXECUTE ON [dbo].[pt_Customers_Delete_By_CustomerGroup] TO [Copient_Logix_uspRole] AS [dbo]
GO	



print 'processing storedprocedures/dbo.pt_Customers_Update.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Customers_Update]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_Customers_Update];
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[pt_Customers_Update] @CustomerPK bigint, @FirstName nvarchar(50), @LastName nvarchar(50), @Employee bit,
             @AltIDOptOut int, @TestCard bit, @MiddleName nvarchar(50), @EmployeeID nvarchar(26), @CustomerStatusID int,
             @Prefix nvarchar(20), @Suffix nvarchar(20), @CustNotFound bit Output 
as 
  -- $Id:  $
  -- Build Version: 7.3.1.138972
  set nocount on;
  set @CustNotFound=0;
  Update Customers set FirstName=@FirstName, LastName=@LastName, Employee=@Employee, AltIDOptOut=@AltIDOptOut, TestCard=@TestCard,
    MiddleName=@MiddleName, EmployeeID=@EmployeeID, CustomerStatusID=@CustomerStatusID, 
    Prefix=@Prefix, Suffix=@Suffix
  where CustomerPK=@CustomerPK;
  if @@RowCount=0 begin
    set @CustNotFound=1;
  end
GO

GRANT EXECUTE ON [dbo].[pt_Customers_Update] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Detach_From_PrivacyGroup.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Detach_From_PrivacyGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Detach_From_PrivacyGroup]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Detach_From_PrivacyGroup]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Detach_From_PrivacyGroup]     
 @CustomerGroupID INT,    
    @CustomerPK BIGINT,    
    @FieldID INT     
AS    
BEGIN    
--to be used by pa_CUA_UpdateCustomerHHSupplemental SP to detach a customer from a private customer group     
    SET NOCOUNT ON;    
    DECLARE @HHPK BIGINT;  
    DECLARE @HHPK_CustomerPK BIGINT;     
    DECLARE @ExtFieldID VARCHAR(10);    
    SET @HHPK =0    
        
    SELECT @ExtFieldID= ExtFieldID FROM CustomerSupplementalFields WHERE FieldID=@FieldID    
        
    IF (@ExtFieldID =''NER'')    
       BEGIN    
      IF EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @CustomerPK AND Deleted=0)    
           BEGIN    
                    IF NOT EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @CustomerPK AND Deleted=1)    
                         BEGIN    
                                    IF EXISTS ( SELECT TOP 1 * FROM CustomerSupplemental WITH (NOLOCK) WHERE  CustomerPK=@CustomerPK AND FieldID=@FieldID AND Value=0)                             
                                                      BEGIN    
                                                           UPDATE GroupMembership SET Deleted=1,  LastUpdate=GETDATE() WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@CustomerPK     
                                                           --Get hh card details of the customer to detach them from the given private customer group    
                                         SELECT  @HHPK = HHPK  FROM Customers WITH (NOLOCK) WHERE  CustomerPK=  @CustomerPK                  
                                         IF @HHPK > 0    
                                              BEGIN    
                                                      IF EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @HHPK AND Deleted=0)     
                                                          BEGIN    
                                                                  IF NOT EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @HHPK AND Deleted=1)     
                                                                       UPDATE GroupMembership SET Deleted=1,LastUpdate=GETDATE() WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@HHPK     
                                                                  ELSE    
                                                                       DELETE  GroupMembership WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@HHPK  AND  Deleted=0                                                                   
                                                          END     
                                                          -----update Other cards (related to HH card)   
                                                           DECLARE CustomersCursor CURSOR LOCAL FAST_FORWARD FOR  
                    SELECT CustomerPK   FROM Customers WITH (NOLOCK) WHERE  HHPK=  @CustomerPK     
                         OPEN CustomersCursor  
                     FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK  
                       WHILE @@FETCH_STATUS = 0  
                        BEGIN  
                                                                             IF EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @HHPK_CustomerPK AND Deleted=0)     
                                                                               BEGIN    
                                                                                    IF NOT EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @HHPK_CustomerPK AND Deleted=1)     
                             UPDATE GroupMembership SET Deleted=1,LastUpdate=GETDATE() WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@HHPK_CustomerPK     
                                                                                    ELSE    
                                                                                         DELETE  GroupMembership WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@HHPK_CustomerPK  AND  Deleted=0                                                       
            
                                                                               END  
                    FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK  
                        END  
                    CLOSE CustomersCursor  
                       DEALLOCATE CustomersCursor  
                                              END                 
                          END          
           END    
      ELSE    
           BEGIN    
                 DELETE  GroupMembership WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@CustomerPK  AND  Deleted=0                      
                 SELECT  @HHPK = HHPK  FROM Customers WITH (NOLOCK) WHERE  CustomerPK=  @CustomerPK                  
                                         IF @HHPK > 0    
                                              BEGIN    
                                                           DECLARE CustomersCursor CURSOR LOCAL FAST_FORWARD FOR  
                    SELECT CustomerPK   FROM Customers WITH (NOLOCK) WHERE  HHPK=  @CustomerPK     
                         OPEN CustomersCursor  
                     FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK  
                       WHILE @@FETCH_STATUS = 0  
                        BEGIN  
                                                                     IF EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @HHPK_CustomerPK AND Deleted=0)     
                                                                       BEGIN    
                                                                            IF NOT EXISTS ( SELECT TOP 1 * FROM GroupMembership WITH (NOLOCK) WHERE  CustomerGroupID = @CustomerGroupID AND CustomerPK= @HHPK_CustomerPK AND Deleted=1)     
                                                                                UPDATE GroupMembership SET Deleted=1,LastUpdate=GETDATE() WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@HHPK_CustomerPK     
                                                                            ELSE    
                                                                                DELETE  GroupMembership WHERE  CustomerGroupID=@CustomerGroupID AND CustomerPK=@HHPK_CustomerPK  AND  Deleted=0                                                                
   
                                                                            END        
                       FETCH NEXT FROM CustomersCursor INTO @HHPK_CustomerPK  
                        END  
                    CLOSE CustomersCursor  
                       DEALLOCATE CustomersCursor  
                                              END    
           END          
        END    
      END                       
    
END 

'
END
GO
GRANT EXECUTE ON [dbo].[pt_Detach_From_PrivacyGroup] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_DistributionVariables_Delete_by_OfferID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_DistributionVariables_Delete_by_OfferID.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_DistributionVariables_Delete_by_OfferID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_DistributionVariables_Delete_by_OfferID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_DistributionVariables_Delete_by_OfferID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_DistributionVariables_Delete_by_OfferID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_DistributionVariables_Delete_by_OfferID] @OfferID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the DistributionVariables records for the specified OfferID
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  Delete TOP (1800) DistributionVariables with (RowLock) from 
    DistributionVariables as DV with (RowLock) Inner Join PromoVariables as PV with (NoLock) 
      on DV.PromoVarID=PV.PromoVarID and PV.LinkID=@OfferID

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_DistributionVariables_Delete_by_OfferID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GMInsertQueue_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_GMInsertQueue_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GMInsertQueue_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GMInsertQueue_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GMInsertQueue_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GMInsertQueue_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_GMInsertQueue_Insert] @FileName nvarchar(255), @CustomerGroupID bigint, @CardTypeID int, 
                                                 @OperationType int = 0, @ExtInteraceID int = null
as 
  set nocount on;
  Insert into GMInsertQueue ([FileName], UploadTime, CustomerGroupID, StatusFlag, CardTypeID, OperationType, ExtInterfaceID)
   values (@FileName, GetDate(), @CustomerGroupID, 0, @CardTypeID, @OperationType, @ExtInteraceID);

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GMInsertQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Generate_UPC.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_Generate_UPC]    Script Date: 07/05/2011 11:08:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Generate_UPC]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_Generate_UPC]
GO

/****** Object:  StoredProcedure [dbo].[pt_Generate_UPC]    Script Date: 07/05/2011 11:08:03 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_Generate_UPC] 
	@InputBarCode            bigint = NULL, --  no nulls allowed
	@LocationID              NVARCHAR(20) = NULL, 
	@SVProgramID             bigint = NULL, --  no nulls allowed
	@EffectiveDate           datetime = NULL,
	@ExpireDate              datetime = NULL, 
	@CustomerPK              bigint = NULL, 	--  no nulls allowed
	@RedemptionRestrictionID int,
    @IssuingTransactionID    NVARCHAR(128) = NULL,
	@IssueDate               datetime = NULL,
	@ValidLocation           bigint = NULL,
  @RewardOptionID          bigint = NULL,
	@UPCCode                 char(12) OUTPUT

AS
    -- $Id: dbo.pt_Generate_UPC.sql 80721 2014-07-08 12:32:04Z sr185204 $
    -- Build Version: 7.3.1.138972
/*
This proc accepts the input variables, validates the LocationID as restricted, single location, or a location group
and then writes a row into the BarcodeDetails table and gets the unique counter from the InputBarCode
It concatinates the InputBarCode and the UniqueCounter to return a UPCCode to the calling program

The SPROC pt_ReturnNextTrackingCode does not allow the @InputCode to be null

LogixXS.dbo.BarCodeDetails	does not allow the following columns to be null
	@SVProgramID and @CustomerPK

*/

SET NOCOUNT ON;
DECLARE @UniqueCounter  char(6), 
        @upcprefix      char(6),     
        @upccodework    nvarchar(14), 
        @generatedate   datetime, 
        @err            int, 
        @errmsg         varchar(255), 
        @ReturnCode     int

IF @EffectiveDate IS NULL
BEGIN
  SET @EffectiveDate = GETDATE()
END

--  Check for nulls and error if found
IF @InputBarCode IS NULL
BEGIN
	SET @errmsg = 'NULL InputBarCode provided - unable to create UPCCode'
	RAISERROR (@errmsg, 18, 1)
	RETURN -1
END 

IF datalength( convert( varchar(255), @InputBarCode ) ) <> 10
BEGIN
	SET @errmsg = 'InputBarCode is less than or greater than 10 characters long - unable to create UPCCode '
	RAISERROR (@errmsg, 18, 1) 
	RETURN -2
END 

IF @SVProgramID IS NULL
BEGIN
	SET @errmsg = 'NULL SVProgramID provided - unable to create UPCCode '
	RAISERROR (@errmsg, 18, 1)
	RETURN -3
END 

IF @EffectiveDate IS NULL
BEGIN
	SET @errmsg = 'NULL EffectiveDate provided - unable to create UPCCode because no EffectiveDate can be determined '
	RAISERROR (@errmsg, 18, 1)
	RETURN -4
END 

IF @ExpireDate  IS NULL
BEGIN
	SET @errmsg = 'NULL ExpireDate provided - unable to create UPCCode because no ExpirationDate can be determined '
	RAISERROR (@errmsg, 18, 1)
	RETURN -5
END 

IF @CustomerPK IS NULL
BEGIN
	SET @errmsg = 'NULL CustomerPK provided - unable to create UPCCode without a customer'
	RAISERROR (@errmsg, 18, 1)
	RETURN -6
END 

IF @IssuingTransactionID  IS NULL
BEGIN
	SET @errmsg = 'NULL IssuingTransactionID provided - unable to create UPCCode '
	RAISERROR (@errmsg, 18, 1)
	RETURN -7
END 

IF @IssueDate  IS NULL
BEGIN
	SET @errmsg = 'NULL IssueDate provided - unable to create UPCCode without IssueDate '
	RAISERROR (@errmsg, 18, 1)
	RETURN -8
END 


--  Validate the LocationID
--  The @RedemptionRestrictionID variable is provided by the calling program
--  	And comes from the LogixRT.dbo.StoredValuePrograms column RedemptionRestrictionID
--  Valid values are 0 = all locations, 1 = single store, 2 = group that this store belongs to
--	 IF the value of @RedemptionRestrictionID = 1 or 2, the input variable @LocationID is not allowed to be null 	

/*  cannot make this call because LogixRT may be renamed or exist on another server / instance
SELECT @RedemptionRestrictionID = RedemptionRestrictionID
FROM LogixRT.dbo.StoredValuePrograms
WHERE SVProgramID = @SVProgramID
*/
IF @RedemptionRestrictionID IS NULL
    BEGIN
	    SET @errmsg = 'NULL RedemptionRestrictionID provided - a valid location cannot be determined - unable to create UPCCode '
	    RAISERROR (@errmsg, 18, 1)
	    RETURN -9
    END
ELSE IF @RedemptionRestrictionID in (1, 2)
    BEGIN
	    IF @ValidLocation IS NULL
	    BEGIN
		    SET @errmsg = 'NULL ValidLocation provided - value of input @RedemptionRestrictionID ='+convert (varchar(10),@RedemptionRestrictionID) + ' invalid condition - unable to create UPCCode '
		    RAISERROR (@errmsg, 18, 1)
		    RETURN -10
	    END
    END
ELSE IF @RedemptionRestrictionID <> 0
    BEGIN
	    SET @errmsg = 'Invalid RedemptionRestrictionID provided (' + convert( varchar(255), @RedemptionRestrictionID ) + '); valid values are 0, 1, 2 - unable to create UPCCode '
	    RAISERROR (@errmsg, 18, 1)
	    RETURN -11
    END
--  we appear to be good to this point - map to the correct manufacturer code to create the correct input code
DECLARE @MappedID AS NVARCHAR(5)
DECLARE @DefaultManufacturerCode NVARCHAR(5)
DECLARE @InputCode AS NVARCHAR(6)
DECLARE @TrackingCode AS NVARCHAR(6)
DECLARE @StringBarCode AS NVARCHAR(10)
SET @StringBarCode = STR(@InputBarCode)
SET @DefaultManufacturerCode = SUBSTRING(@StringBarCode,1,5)
SELECT @MappedID = MappedID FROM UniqueUPCManufacturerCodeMapping WHERE ManufacturerCode = @DefaultManufacturerCode

IF @MappedID IS NULL
BEGIN
SET @errmsg = 'Cannot find Maunfacturer Code Mapping - unable to create UPCCode'
RAISERROR (@errmsg, 18, 1)
RETURN -14
END
SELECT @InputCode = @MappedID + SUBSTRING(@StringBarCode,6,10)

BEGIN TRAN

--lets get the unique counter so we can write to the BarcodeDetails table and return the UPC Code
exec @ReturnCode = dbo.pt_ReturnNextTrackingCode @InputCode, @UniqueCounter OUTPUT

IF @ReturnCode <> 0
BEGIN
	ROLLBACK
	SET @errmsg = 'Failed to get next unique barcode for ' + convert( varchar(255), @InputBarCode ) + ' - check SQL Server Error log for more details'
	RAISERROR (@errmsg, 18, 1)
	RETURN -12
END 

SELECT @generatedate = getdate()
--SELECT @upcprefix = REPLICATE('0', (6 - datalength(ltrim(rtrim(@InputBarCode))))) + LTRIM(rtrim(@InputBarCode))
--SELECT @upccodework = @upcprefix + @UniqueCounter
--The actual final upc output is a combination of the input code and next unique counter
SELECT @upccodework = @InputCode + @UniqueCounter
SELECT @UPCCode = convert(char(12),@upccodework)

INSERT INTO dbo.BarcodeDetails (
        Barcode,      ValidLocation,  CustomerPK,  SVProgramID,  GeneratedOn,   ExpirationDate, IssueDate,  EffectiveDate,  RedemptionRestrictionID,  IssuingTransactionID,  IssuingCostCenter, RewardOptionID
        )
SELECT  @upccodework, @ValidLocation, @CustomerPK, @SVProgramID, @generatedate, @ExpireDate,   @IssueDate, @EffectiveDate, @RedemptionRestrictionID, @IssuingTransactionID, @LocationID, @RewardOptionID

SELECT @err = @@ERROR
IF @err <> 0
BEGIN
	ROLLBACK
	SET @errmsg = 'Attempting insert into dbo.BarcodeDetails generated an error code = ' + convert(varchar(255),@err)
	RAISERROR (@errmsg, 18, 1)
	RETURN -13
END 
 
COMMIT

RETURN 0

GO

GRANT EXECUTE ON dbo.pt_Generate_UPC TO Copient_Logix_uspRole
GO

print 'processing storedprocedures/dbo.pt_GetCouponBatchList.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Get_UniqueCouponCode.StoredProcedure.sql 27378 2011-06-08 17:56:18Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GetCouponBatchList]    Script Date: 06/08/2011 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GetCouponBatchList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GetCouponBatchList]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GetCouponBatchList]') AND type in (N'P', N'PC'))
BEGIN

EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_GetCouponBatchList] @RequestPK bigint
AS
	
	DECLARE @bstart as DateTime 
DECLARE @bstop as DateTime 
Select @bstart = BarcodeGenerationStart, @bstop = RequestCompletedOn from BarcodeBatchRequestQueue where RequestPK = @RequestPK
select c.InitialCardIDOriginal as InitialCardID, b.barcode, @bstop as ''BatchGeneratedOn'' from BarcodeDetails as b 
inner join Customers as c on c.CustomerPK = b.CustomerPK where  b.GeneratedOn >= @bstart and  b.GeneratedOn<= @bstop 
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GetCouponBatchList] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_GetCouponCountForPattern.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GetCouponCountForPattern]') AND type in (N'P', N'PC'))
BEGIN
DROP PROCEDURE [dbo].[pt_GetCouponCountForPattern]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	CREATE PROCEDURE [dbo].[pt_GetCouponCountForPattern] @table CouponType ReadOnly, @CouponCount bigint OUTPUT
	AS
	BEGIN
	SET NOCOUNT ON
	
		SET @CouponCount = dbo.GetUsedCouponCount(@table)
	
	END
GO

GRANT EXECUTE ON [dbo].[pt_GetCouponCountForPattern] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GetSpecificCardTypeDetails.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_SaveCustCondCardTypes.StoredProcedure.sql 32583 2016-04-27 20:22:15Z vd185037 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_SaveCustCondCardTypes]    Script Date: 04/27/2016 15:13:13 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GetSpecificCardTypeDetails]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[pt_GetSpecificCardTypeDetails]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_GetSpecificCardTypeDetails] 
	 @CardTypeIDs nvarchar(MAX)
AS  
BEGIN
  SET NOCOUNT ON;                 
    Select CardTypeID, Description,PhraseTerm from CardTypes ct with (NoLock)
    Inner Join (SELECT * FROM [dbo].[Split] (@CardTypeIDs, ',')) c
    On c.items=ct.CardTypeId
END
GO
GRANT EXECUTE ON [dbo].[pt_GetSpecificCardTypeDetails] TO [Copient_Logix_uspRole] AS [dbo]
GO





print 'processing storedprocedures/dbo.pt_Get_CustPKList.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Get_CustPKList.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Get_CustPKList]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_CustPKList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Get_CustPKList]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_CustPKList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Get_CustPKList] @HHPK bigint, @CustPKs nvarchar(max) OUTPUT
AS 
  SELECT @CustPKs = (COALESCE(@CustPKs + '','' + CAST(CustomerPK AS NVARCHAR(26)), CAST(CustomerPK AS NVARCHAR(26))))
  FROM Customers with (NoLock) WHERE HHPK = @HHPK AND CustomerTypeID <> 1

  IF @CustPKs IS NULL SET @CustPKs = ''0''
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Get_CustPKList] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Get_ExtCardIDList.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Get_ExtCardIDList.StoredProcedure.sql 87130 2015-02-16 18:16:31Z jd185168 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Get_ExtCardIDList]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_ExtCardIDList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Get_ExtCardIDList]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_ExtCardIDList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Get_ExtCardIDList] @CustPKs nvarchar(max), @IncludeAltIDType3Cards int = 0, @ExtCardIDs nvarchar(max) OUTPUT
AS 
  DECLARE
      @SQL nvarchar(max)
    , @Parameter nvarchar(max)
  
  IF @IncludeAltIDType3Cards=1 BEGIN
    SET @SQL = N''SELECT @ExtCardIDs = (COALESCE(@ExtCardIDs + '''','''' + '''''''''''''''' + ExtCardID + '''''''''''''''', '''''''''''''''' + ExtCardID + ''''''''''''''''))
    FROM CardIDs with (NoLock) WHERE CustomerPK IN ('' + @CustPKs + '') AND CardTypeID not in (1)''
    SET @Parameter = N''@ExtCardIDs nvarchar(max) OUTPUT''
  END
	
  ELSE BEGIN
    SET @SQL = N''SELECT @ExtCardIDs = (COALESCE(@ExtCardIDs + '''','''' + '''''''''''''''' + ExtCardID + '''''''''''''''', '''''''''''''''' + ExtCardID + ''''''''''''''''))
    FROM CardIDs with (NoLock) WHERE CustomerPK IN ('' + @CustPKs + '') AND CardTypeID not in (1,3)''
    SET @Parameter = N''@ExtCardIDs nvarchar(max) OUTPUT''
  END
	
  EXECUTE sp_executesql @SQL, @Parameter, @ExtCardIDs = @ExtCardIDs OUTPUT
  
  IF @ExtCardIDs IS NULL SET @ExtCardIDs = ''''''''''''
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Get_ExtCardIDList] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Get_LogixTransNumList.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Get_LogixTransNumList.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Get_LogixTransNumList]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_LogixTransNumList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Get_LogixTransNumList]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_LogixTransNumList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Get_LogixTransNumList] @HHPK bigint, @ExtCardIDs nvarchar(max), @LogixTransNums nvarchar(max) OUTPUT
AS 
  SELECT TOP 120 @LogixTransNums  = (COALESCE(@LogixTransNums, '''''''' + LogixTransNum + '''''','''''' + LogixTransNum + ''''''''))
  FROM CPE_RewardDistribution with (NoLock) WHERE CustomerPK = @HHPK AND PresentedCustomerID IS NULL ORDER BY DistributionDate DESC
  
  IF @LogixTransNums IS NULL SET @LogixTransNums = ''''''''''''
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Get_LogixTransNumList] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Get_UniqueCouponCode.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Get_UniqueCouponCode.StoredProcedure.sql 27378 2011-06-08 17:56:18Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Get_UniqueCouponCode]    Script Date: 06/08/2011 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_UniqueCouponCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Get_UniqueCouponCode]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/** This stored procedure returns a uniquebarcode, given a product code. The input is usually a 10 digit UPC-A code.
The first 5 digits, which represent the manufacturer code, are replaced by an ID which is found in the UniqueUPCManufacturerCodeMapping 
table. A six-character value is generated based on an algorithm by the SP pt_ReturnNextTrackingCode and this is used to make the coupon code unique. **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Get_UniqueCouponCode]') AND type in (N'P', N'PC'))
BEGIN
--must add a UniqueBarCodeTable to return, instead of just a single UniqueBarCode
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Get_UniqueCouponCode] @ProductCode NVARCHAR(10), @NumberOfBarCodes INT, @UniqueBarCodes nvarchar(max) OUTPUT
AS
  DECLARE @MappedID AS NVARCHAR(5)
  DECLARE @DefaultManufacturerCode NVARCHAR(5)
  DECLARE @InputCode AS NVARCHAR(6)
  DECLARE @TrackingCode AS NVARCHAR(6)
  DECLARE @count AS INT
  DECLARE @UniqueBarCode AS NVARCHAR(12)
  
    SET @UniqueBarCodes = ''''
	SET @count = 1
    SET @DefaultManufacturerCode = SUBSTRING(@ProductCode,1,5)
    SELECT @MappedID = MappedID FROM UniqueUPCManufacturerCodeMapping WHERE ManufacturerCode = @DefaultManufacturerCode
    SELECT @InputCode = @MappedID + SUBSTRING(@ProductCode,6,10)
  WHILE (@count <= @NumberOfBarCodes)
  BEGIN
    EXEC pt_ReturnNextTrackingCode  @InputCode, @TrackingCode OUTPUT
    SELECT @UniqueBarCode = @InputCode + @TrackingCode
	SET @UniqueBarCodes = @UniqueBarCodes + Cast(@UniqueBarCode as nvarchar(max)) + '',''
	SET @count = (@count + 1)
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Get_UniqueCouponCode] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_GroupMembership_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_GroupMembership_Delete.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GroupMembership_Delete]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GroupMembership_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_GroupMembership_Delete]  @ExtCardID nvarchar(400), @CardTypeID int, @CustomerGroupID bigint, @Status int OUTPUT
AS
  set nocount on;
  declare @NumRows int;
  declare @CustomerPK bigint;

  set @NumRows=0;
  set @Status=0;
  set @CustomerPK=0;

  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;

  if @CustomerPK>0 begin
    select @NumRows=count(*) from GroupMembership with (NoLock) where CustomerPK=@CustomerPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
    if @NumRows>0 begin
      Delete from GroupMembership with (RowLock) where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=1;
      Update GroupMembership with (RowLock) set Deleted=1, Manual=1, LastUpdate=getdate(), CMOAStatusFlag=2, TCRMAStatusFlag=2, CPEStatusFlag=0, UEStatusFlag=0 where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=0;
      set @Status=0;
    end
    else begin
      set @Status=-1; -- not found
    end
  end
  else begin
    set @Status=-1; -- not found
  end 

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GroupMembership_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GroupMembership_Delete_ByGroup.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_GroupMembership_Delete_ByGroup.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GroupMembership_Delete_ByGroup]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GroupMembership_Delete_ByGroup]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByGroup]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_GroupMembership_Delete_ByGroup] @CustomerGroupID bigint
AS 
  -- This procedure deletes all of the GroupMembership records for the specified CustomerGroupID
  SET NOCOUNT ON;
  declare @ProcessRows int;
  --set rowcount 4800;
  set @ProcessRows=1

  while @ProcessRows=1 begin
    delete TOP (4800) from GroupMembership with (RowLock) where CustomerGroupID=@CustomerGroupID;
    if @@RowCount=0 begin
      set @ProcessRows=0;
    end
  end
  --set rowcount 0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GroupMembership_Delete_ByGroup] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GroupMembership_Delete_ByGroup_Cycles.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_GroupMembership_Delete_ByGroup_Cycles.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GroupMembership_Delete_ByGroup_Cycles]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByGroup_Cycles]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GroupMembership_Delete_ByGroup_Cycles]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByGroup_Cycles]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_GroupMembership_Delete_ByGroup_Cycles] @CustomerGroupID bigint, @RunAgain int Output
AS 
  -- This procedure deletes all of the GroupMembership records for the specified CustomerGroupID
  SET NOCOUNT ON;
  declare @StartTime as datetime;
  declare @MinutesElapsed as int;
  declare @NumRows int;
  declare @ProcessRows int;
  set @ProcessRows=1
  set @MinutesElapsed=0;
  set @RunAgain=0;
  --set rowcount 4800;
  select @StartTime=getdate();

  while @ProcessRows=1 begin
    delete TOP (4800) from GroupMembership with (RowLock) where CustomerGroupID=@CustomerGroupID;
    set @NumRows=@@Rowcount;
    if @NumRows=0 begin
      set @ProcessRows=0;
    end

    select @MinutesElapsed=DateDiff(mi, @StartTime, getdate());
    if @MinutesElapsed>=5 begin
      set @ProcessRows=0; 
      if @NumRows>0 begin 
        set @RunAgain=1;      
      end
    end
  end -- while
  --set rowcount 0;
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GroupMembership_Delete_ByGroup_Cycles] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GroupMembership_Delete_ByID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_GroupMembership_Delete_ByID.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GroupMembership_Delete_ByID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GroupMembership_Delete_ByID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_GroupMembership_Delete_ByID]  @MembershipID bigint
as 
  set nocount on;
  declare @NumRows int;
  declare @CustomerPK bigint;
  declare @CustomerGroupID bigint;

  set @CustomerGroupID=0;
  set @CustomerPK=0;
  set @NumRows=0;

  select @NumRows=count(*) from GroupMembership where MembershipID=@MembershipID and Deleted=0;
  if @NumRows>0 begin
    select @CustomerPK=isnull(CustomerPK, 0), @CustomerGroupID=isnull(CustomerGroupID, 0) from GroupMembership where MembershipID=@MembershipID;
    if (@CustomerPK>0) and (@CustomerGroupID>0) begin
      Delete from GroupMembership with (RowLock) where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=1;
    end 
    Update GroupMembership with (RowLock) set Deleted=1, Manual=1, LastUpdate=getdate(), CMOAStatusFlag=2, TCRMAStatusFlag=2, CPEStatusFlag=0, UEStatusFlag=0 where MembershipID=@MembershipID and Deleted=0;
  end 

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GroupMembership_Delete_ByID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GroupMembership_Delete_ByPK.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_GroupMembership_Delete_ByPK.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GroupMembership_Delete_ByPK]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByPK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GroupMembership_Delete_ByPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Delete_ByPK]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_GroupMembership_Delete_ByPK]  @CustomerPK bigint, @CustomerGroupID bigint, @Status int OUTPUT
AS
  set nocount on;
  declare @NumRows int;

  set @NumRows=0;
  set @Status=0;

  -- determine if the customerPK exists
  select @CustomerPK = IsNull(CustomerPK, 0) from Customers with (NoLock) where CustomerPK = @CustomerPK;
  
  if @CustomerPK>0 begin
    select @NumRows=count(*) from GroupMembership with (NoLock) where CustomerPK=@CustomerPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
    if @NumRows>0 begin
      Delete from GroupMembership with (RowLock) where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=1;
      Update GroupMembership with (RowLock) set Deleted=1, Manual=1, CMOAStatusFlag=2, TCRMAStatusFlag=2, CPEStatusFlag=0, UEStatusFlag=0 where CustomerGroupID=@CustomerGroupID and CustomerPK=@CustomerPK and Deleted=0;
      set @Status=0;
    end
    else begin
      set @Status=-1; -- not found
    end
  end
  else begin
    set @Status=-1; -- not found
  end 


' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GroupMembership_Delete_ByPK] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GroupMembership_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_GroupMembership_Insert.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_GroupMembership_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GroupMembership_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_GroupMembership_Insert]  @ExtCardID nvarchar(400), @CardTypeID int, @CustomerTypeID int, @CustomerGroupID bigint,
                                                                                          @Status int OUTPUT, @AddHHToGroup bit = NULL, @AutoAddCardOption bit = NULL, @ExtCardIDOriginal nvarchar(400) =null
as 
  set nocount on;
  declare @NumRows int;
  declare @CustomerPK bigint;
  declare @HHPK bigint;
        
  set @NumRows=0;
  set @Status=0;
  set @CustomerPK=0;

  -- try to get the CustomerPK from the Customers table
  select @CustomerPK=isnull(CustomerPK, 0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
   
  if @CustomerPK=0 begin
   -- resync the initial card values for any customers with this ExtCardID as its IntialCardID
   exec dbo.pa_CPE_CI_HandleInitialCard @ExtCardID, @CardTypeID,@ExtCardIDOriginal
   
    -- customer does not exist - create a new record
   Insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, CustomerTypeID, FirstName, LastName, CreatedDate,InitialCardIDOriginal) values (@ExtCardID, @CardTypeID, @CustomerTypeID, '''', '''', getdate(),@ExtCardIDOriginal);
   SET @CustomerPK=Scope_Identity();
   END 
  
     if(@CustomerPK >0)
	 BEGIN
			if (@AutoAddCardOption>0) and (@CardTypeID =5)
			BEGIN
				Update Customers set Employee=1,  EmployeeID=@ExtCardID where CustomerPK = @CustomerPK
			END
	   END
  
   IF (@CustomerPK > 0) and (@AddHHToGroup =1) 
      BEGIN
        -- get the HHPK for the customer PK	
        select @HHPK = ISNULL(HHPK, 0) from Customers with (NoLock)where CustomerPK = @CustomerPK;
        
        If @HHPK > 0 
         BEGIN
            SELECT @NumRows=count(*) from GroupMembership with (NoLock) where CustomerPK=@HHPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
              IF @NumRows=0 
               BEGIN
                 INSERT INTO GroupMembership WITH (RowLock) (CustomerGroupID, CustomerPK, Manual, LastUpdate, Deleted, CMOAStatusFlag, TCRMAStatusFlag) values (@CustomerGroupID, @HHPK, 1, getdate(), 0, 2, 2);
                 SET @Status=0;
               END  
              ELSE 
               BEGIN
                 SET @Status=-1; -- could not insert - record already exists
               END
         END
      END

  

  select @NumRows=count(*) from GroupMembership with (NoLock) where CustomerPK=@CustomerPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
  if @NumRows=0 begin
    Insert into GroupMembership with (RowLock) (CustomerGroupID, CustomerPK, Manual, LastUpdate, Deleted, CMOAStatusFlag, TCRMAStatusFlag) values (@CustomerGroupID, @CustomerPK, 1, getdate(), 0, 2, 2);
    set @Status=0;
  end
  else begin
    set @Status=-1; -- could not insert - record already exists
  end

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_GroupMembership_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_GroupMembership_Insert_ByPK.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_GroupMembership_Insert_ByPK]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_GroupMembership_Insert_ByPK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_GroupMembership_Insert_ByPK]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[pt_GroupMembership_Insert_ByPK]  @CustomerPK int, @CustomerGroupID bigint, @AddHHToGroup bit = NULL, @Status int OUTPUT
as 

    -- $Id: dbo.pt_GroupMembership_Insert_ByPK.StoredProcedure.sql 124164 2018-05-30 09:47:13Z pm185205 $
    -- Build Version: 7.3.1.138972

  set nocount on;
  declare @NumRows int;
  declare @HHPK bigint;

  set @NumRows=0;
  set @Status=0;

  -- see if the customer already exists
  select @CustomerPK=isnull(CustomerPK, 0) from Customers with (NoLock) where CustomerPK=@CustomerPK;
   
  if @CustomerPK > 0
   begin
   IF (@CustomerPK > 0) and (@AddHHToGroup =1) 
        BEGIN
          -- get the HHPK for the customer PK	
          select @HHPK = ISNULL(HHPK, 0) from Customers with (NoLock)where CustomerPK = @CustomerPK;
          
          If @HHPK > 0 
           BEGIN
              SELECT @NumRows=count(*) from GroupMembership with (NoLock) where CustomerPK=@HHPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
                IF @NumRows=0 
                 BEGIN
                   INSERT INTO GroupMembership WITH (RowLock) (CustomerGroupID, CustomerPK, Manual, LastUpdate, Deleted, CMOAStatusFlag, TCRMAStatusFlag) 
                   values (@CustomerGroupID, @HHPK, 1, getdate(), 0, 2, 2);
                   SET @Status=0;
                 END  
                ELSE 
                 BEGIN
                   SET @Status=-1; -- could not insert - record already exists
                 END
           END
    END
  
      select @NumRows=count(*) from GroupMembership with (NoLock) where CustomerPK=@CustomerPK and CustomerGroupID=@CustomerGroupID and Deleted=0;
      if @NumRows=0 begin
        Insert into GroupMembership with (RowLock) (CustomerGroupID, CustomerPK, Manual, Deleted, CMOAStatusFlag, TCRMAStatusFlag) values (@CustomerGroupID, @CustomerPK, 1, 0, 2, 2);
        set @Status=0;
      end
      else begin
        set @Status=-1; -- could not insert - record already exists
      end
    end 
  else
    begin
      set @Status=-2 -- CustomerPK does not exist
    end 

GO

GRANT EXECUTE ON [dbo].[pt_GroupMembership_Insert_ByPK] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_HouseholdQueue_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_HouseholdQueue_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_HouseholdQueue_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_HouseholdQueue_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_HouseholdQueue_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_HouseholdQueue_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE Procedure [dbo].[pt_HouseholdQueue_Insert] @CustomerPK bigint, @HHPK bigint, @ActionTypeID int,
                                                  @SourceTypeID int, @Option5Value nvarchar(20) = null, @Option6Value nvarchar(20) = null,
                                                  @Option6Percent nvarchar(5) = null, @Option7Value nvarchar(20) = null,
                                                  @Option8Value nvarchar(20)=null, @Option9Value nvarchar(20)=null,
                                                  @AdminUserID int = 0, @PKID bigint OUTPUT
as 
  set nocount on;
  set @PKID = 0;
  
  -- first check if this request is already in the queue.
  select @PKID=IsNull(PKID,0) from HouseholdQueue with (NoLock) where CustomerPK=@CustomerPK and HHPK=@HHPK;

  if @PKID = 0 
    begin
      insert into HouseholdQueue with (RowLock) (CustomerPK, HHPK, ActionTypeID,
          SourceTypeID, LastUpdate, StatusCode, Option5Value, Option6Value,     
          Option6Percent, Option7Value, Option8Value, Option9Value, AdminUserID) 
       values (@CustomerPK, @HHPK, @ActionTypeID,
               @SourceTypeID, GETDATE(), 0, @Option5Value, @Option6Value,
               @Option6Percent, @Option7Value, @Option8Value, @Option9Value, @AdminUserID);
       set @PKID = SCOPE_IDENTITY();
    end

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_HouseholdQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_LGMCustomerGroup_Insert.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_LGM_CustomerGroup_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_LGM_CustomerGroup_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_LGM_CustomerGroup_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_LGM_CustomerGroup_Insert]  @CustomerGroupID bigint, @status int OUTPUT
AS
  SET NOCOUNT ON;
  declare @counter int;
  declare @CustomerPK bigint;
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;
  set @CustomerPK = 0;
  set @counter = 1;
  BEGIN TRY    
    BEGIN TRAN T1
		While(@counter < (Select count(*) from #TempCardPK)+1)
		Begin
			Select @CustomerPK = CustomerPK from #TempCardPK where TempPK = @counter;
			
			Exec pt_GroupMembership_Insert_ByPK @CustomerPK, @CustomerGroupID, @Status = @Status Output;
			set @counter = @counter + 1;
			print @Status
			IF @status <> 0 
              IF @status = -2
                BEGIN
                  SET @ErrorMessage = ''Error: Batch Insert Failed. CustomerPK does not exist, CustomerPK = '';
				  SET @ErrorMessage += cast(@CustomerPK as varchar(max));
				  RAISERROR (@ErrorMessage, -- Message text.
                  16, -- Severity.
                  1 -- State.
                  );
			    END
		End

    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH
    SELECT 
      @ErrorMessage = ERROR_MESSAGE(),
      @ErrorSeverity = ERROR_SEVERITY(),
      @ErrorState = ERROR_STATE();

    IF @@TRANCOUNT > 0
      BEGIN
        ROLLBACK TRAN T1;
        RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               );
      END
  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_LGM_CustomerGroup_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pt_LGM_CustomerGroup_Remove.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_LGM_CustomerGroup_Remove]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_LGM_CustomerGroup_Remove]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_LGM_CustomerGroup_Remove]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_LGM_CustomerGroup_Remove] @CustomerGroupID bigint, @status int OUTPUT
AS
  SET NOCOUNT ON;
  declare @counter int;
  declare @CustomerPK bigint;
  set @CustomerPK = 0;
  set @counter = 1;
  BEGIN TRY    
    BEGIN TRAN T1
		While(@counter < (Select count(*) from #TempCardPK)+1)
		Begin
			Select @CustomerPK = CustomerPK from #TempCardPK where TempPK = @counter;
			
			Exec pt_GroupMembership_Delete_ByPK @CustomerPK, @CustomerGroupID, @Status = @Status Output;
			set @counter = @counter + 1;
			print @Status
			IF @status <> 0 
			BEGIN
				RAISERROR (''Error raised in TRY block.'', -- Message text.
               16, -- Severity.
               1 -- State.
               );
			END
			
		End

    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH

    IF @@TRANCOUNT > 0 BEGIN
  ROLLBACK TRAN T1;
      END

  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_LGM_CustomerGroup_Remove] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pt_LGM_CustomerGroup_Replace.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_LGM_CustomerGroup_Replace]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_LGM_CustomerGroup_Replace]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_LGM_CustomerGroup_Replace]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_LGM_CustomerGroup_Replace] @CustomerGroupID bigint, @status int OUTPUT
AS
  SET NOCOUNT ON;
  declare @counter int;
  declare @CustomerPK bigint;
  set @CustomerPK = 0;
  set @counter = 1;
  BEGIN TRY    
    BEGIN TRAN T1
		delete from GroupMembership where CustomerGroupID = @CustomerGroupID
		While(@counter < (Select count(*) from #TempCardPK)+1)
		Begin
			Select @CustomerpK = CustomerPK from #TempCardPK where TempPK = @counter;
			Exec pt_GroupMembership_Insert_ByPK @CustomerPK, @CustomerGroupID, @Status = @Status Output;
			set @counter = @counter + 1;
			If @status = -2 
			Begin
			RAISERROR (''Error raised in TRY block.'', -- Message text.
               16, -- Severity.
               1 -- State.
               );
			End
		End

    COMMIT TRAN T1;
  END TRY
  BEGIN CATCH

    IF @@TRANCOUNT > 0 BEGIN
  ROLLBACK TRAN T1;
      END

  END CATCH
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_LGM_CustomerGroup_Replace] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pt_NewCardIDs_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_NewCardIDs_Insert.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_NewCardIDs_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_NewCardIDs_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_NewCardIDs_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_NewCardIDs_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_NewCardIDs_Insert] @ExtCardID nvarchar(400), @CardTypeID int, 
                                              @CustomerPK bigint, @CardStatusID int, 
                                              @CardPK bigint OUTPUT, @Created bit = 0 OUTPUT , @ExtCardIDOriginal nvarchar(400) =null
AS 
  SET NOCOUNT ON;
  set @CardPK = 0
  set @Created = 0;
  
    -- determine if this card already exists
    select Top 1 @CardPK = IsNull(CardPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

    if @CardPK = 0
      begin
        insert into CardIDs with (RowLock) (CustomerPK, ExtCardID, CardStatusID, CardTypeID,ExtCardIDOriginal)
        values (@CustomerPK, @ExtCardID, @CardStatusID, @CardTypeID,@ExtCardIDOriginal);
        set @CardPK=Scope_Identity();
        
        if @CardPK > 0 set @Created  = 1;
      end
  
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_NewCardIDs_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_NewCustomer_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_NewCustomer_Insert.StoredProcedure.sql 119339 2018-01-08 12:20:20Z ss251114 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_NewCustomer_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_NewCustomer_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_NewCustomer_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_NewCustomer_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_NewCustomer_Insert] @ExtCardID nvarchar(400), @CardTypeID int, @CustomerPK bigint OUTPUT, @FirstName nvarchar(50) = NULL, @LastName nvarchar(50) = NULL,  @AutoAddCardOption bit = NULL,@ExtCardIDOriginal nvarchar(400)=null
AS 
  SET NOCOUNT ON;
  Declare @CustTypeID INT
  set @CustTypeID = 0
  set @CustomerPK = 0
    -- Mar 19, 2010 LY Added 2 optional parameters for customer firstname and lastname for RT 2963 for Brookshires.
  -- Made the params optional since the change is needed only for CM. The input params are 
  -- passed in by reading CMOptions 20 and 21
  
  -- determine if this card already exists
  select Top 1 @CustomerPK = IsNull(CustomerPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;

    if @CustomerPK = 0
      begin
		select @CustTypeID=CustTypeID from CardTypes where CardTypeID=@CardTypeID
        insert into Customers with (RowLock) (InitialCardID, InitialCardTypeID, FirstName, LastName, CreatedDate, UpdateCount, CustomerTypeID,InitialCardIDOriginal)
        values (@ExtCardID, @CardTypeID, @FirstName,@LastName, getdate(),0, @CustTypeID,@ExtCardIDOriginal);
        set @CustomerPK=Scope_Identity();
		if (@AutoAddCardOption>0) and (@CardTypeID =5)
			BEGIN
				Update Customers set Employee=1,  EmployeeID=@ExtCardID where CustomerPK = @CustomerPK
			END
      end
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_NewCustomer_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_PendingDeleteByCartID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_PendingDeleteByCartID.StoredProcedure.sql 1 2015-01-05 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_PendingDeleteByCartID]    Script Date: 1/5/2015 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PendingDeleteByCartID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_PendingDeleteByCartID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PendingDeleteByCartID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_PendingDeleteByCartID] @TableNum varchar(4), @Operation varchar(2),
  @Col1 varchar(255),     -- CartID
  @LocalServerID int, @LocationID bigint, @WaitingACK int  
AS
  SET NOCOUNT ON;
  BEGIN
    update PointsPending set LastUpdate = GetDate(), Deleted = 1 where CartID = @Col1;
    update DistributionVariablesPending set LastUpdate = GetDate(), Deleted = 1 where CartID = @Col1;
    update RewardLimitVariablesPending set LastUpdate = GetDate(), Deleted = 1 where CartID = @Col1;
    update CPE_RewardDistributionPending set LastUpdate = GetDate(), Deleted = 1 where CartID = @Col1;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_PendingDeleteByCartID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_PendingDeleteByCartID_UpdateBroker.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_PendingDeleteByCartID_UpdateBroker.StoredProcedure.sql 1 2015-01-05 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_PendingDeleteByCartID_UpdateBroker]    Script Date: 1/5/2015 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PendingDeleteByCartID_UpdateBroker]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_PendingDeleteByCartID_UpdateBroker]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PendingDeleteByCartID_UpdateBroker]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_PendingDeleteByCartID_UpdateBroker] @TableNum varchar(4), @Operation varchar(2),
  @Col1 varchar(255),     -- CartID
  @LocalServerID int, @LocationID bigint, @WaitingACK int  
AS
  SET NOCOUNT ON;
  BEGIN
    if @LocationID > 0
    begin
      insert into CPE_PointsPending_Output with (RowLock) (ProgramID,CustomerPK,EarnedAdjAmount,RedeemedAdjAmount,
        CartID,Deleted,LastUpdate,WaitingACK,TargetLocationID)
      select PP.ProgramID,PP.CustomerPk,-PP.EarnedAmount as EarnedAdjAmount,-PP.RedeemedAmount as RedeemedAdjAmount,
        PP.CartID,1 as Deleted,getdate() as LastUpdate,0 as WaitingACK,CL.LocationID as TargetLocationID
      from PointsPending PP with (NoLock)
      inner join CustomerLocations CL on CL.CustomerPk=PP.CustomerPk and CL.LocationID=@LocationId
      where PP.Deleted=0 and PP.CartID = @Col1;
    end
    update PointsPending set LastUpdate = GetDate(), Deleted = 1 where Deleted=0 and CartID = @Col1;

    if @LocationID > 0
    begin
      insert into CPE_RewardLimitPending_Output with (RowLock) (PromoVarID,CustomerPK,AdjAmount,
        CartID, Deleted, LastUpdate, WaitingACK, TargetLocationID)
      select RLV.PromoVarID, RLV.CustomerPk,-Amount as AdjAmount,
        RLV.CartID,1 as Deleted,getdate() as LastUpdate,0 as WaitingACK,CL.LocationID as TargetLocationID
      from RewardLimitVariablesPending RLV with (NoLock)
      inner join CustomerLocations CL on CL.CustomerPk=RLV.CustomerPk and CL.LocationID=@LocationId
      where RLV.Deleted=0 and RLV.CartID = @Col1;
    end
    update RewardLimitVariablesPending set LastUpdate = GetDate(), Deleted = 1 where Deleted=0 and CartID = @Col1;

    if @LocationID > 0
    begin
      insert into  CPE_RewardDistributionPending_Output with (RowLock) (IncentiveID,RewardOptionID,CustomerPK,
        CartID,Deleted,LastUpdate,WaitingACK,TargetLocationID)
      select RDP.IncentiveID,RDP.RewardOptionID,RDP.CustomerPk,
        RDP.CartID,1 as Deleted,getdate() as LastUpdate,0 as WaitingACK,CL.LocationID as TargetLocationID
      from  CPE_RewardDistributionPending RDP with (NoLock)
      inner join CustomerLocations CL on CL.CustomerPk=RDP.CustomerPk and CL.LocationID=@LocationId
      where RDP.Deleted=0 and RDP.CartID = @Col1;
    end
    update CPE_RewardDistributionPending set LastUpdate = GetDate(), Deleted = 1 where Deleted=0 and CartID = @Col1;

    update DistributionVariablesPending set LastUpdate = GetDate(), Deleted = 1 where Deleted=0 and CartID = @Col1;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_PendingDeleteByCartID_UpdateBroker] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_PointsAdj_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_PointsAdj_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_PointsAdj_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PointsAdj_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_PointsAdj_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PointsAdj_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_PointsAdj_Insert] @ProgramID int, @CustomerPK int, 
	@AdjAmount int, @EarnedUnderROID int, @EarnedUnderCMOfferID bigint,
	@WaitingAck int, @LastServerID int, @PKID int output
AS
  insert into PointsAdj (ProgramID, CustomerPK, AdjAmount, EarnedUnderROID,
		 EarnedUnderCMOfferID, LastUpdate, WaitingAck, LastServerID)
  values (@ProgramID, @CustomerPK, @AdjAmount, @EarnedUnderROID,
          @EarnedUnderCMOfferID, getdate(), @WaitingAck, @LastServerID);
  set @PKID = Scope_Identity();
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_PointsAdj_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_PointsInsertQueue_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_PointsInsertQueue_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PointsInsertQueue_Insert]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_PointsInsertQueue_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_PointsInsertQueue_Insert] @FileName as nvarchar(255), @ProgramID bigint, @PKID bigint OUTPUT
AS
  SET NOCOUNT ON;
  BEGIN
    insert into PointsInsertQueue ([FileName], ProgramID)
         values (@FileName, @ProgramID);

    set @PKID = Scope_Identity();
  END
GO

GRANT EXECUTE ON [dbo].[pt_PointsInsertQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_PointsProgramsByID_Select.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_PointsProgramsByID_Select.StoredProcedure.sql 25980 2011-02-10 21:05:41Z Lakshmi Yechuri $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_PointsProgramsByID_Select]    Script Date: 2/10/2011 15:13:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PointsProgramsByID_Select]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_PointsProgramsByID_Select]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns the name and description of points program, given the program id */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PointsProgramsByID_Select]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_PointsProgramsByID_Select] @PgmID bigint, @PgmName nvarchar(255) OUTPUT, @PgmDescription nvarchar(1000) OUTPUT
AS 
  SET NOCOUNT ON;
  select @PgmName = ProgramName, @PgmDescription = Description from PointsPrograms WITH (NOLOCK) WHERE ProgramID= @PgmID;
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_PointsProgramsByID_Select] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_PointsPrograms_Select_All.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_PointsPrograms_Select_All.StoredProcedure.sql 25980 2011-02-10 21:05:41Z Lakshmi Yechuri $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_PointsPrograms_Select_All]    Script Date: 2/10/2011 15:13:15 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PointsPrograms_Select_All]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_PointsPrograms_Select_All]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/** This stored procedure returns the list of all point programs defined in AMS,along with creation date and lastupdate date **/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PointsPrograms_Select_All]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_PointsPrograms_Select_All]
AS 
  SET NOCOUNT ON;
  select ProgramID, ProgramName, Description,CreatedDate AS DateOfCreation, LastUpdate AS DateLastUpdated from PointsPrograms 
  WITH  (NOLOCK) ORDER BY ProgramID
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_PointsPrograms_Select_All] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Points_Delete_By_Program.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Points_Delete_By_Program.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Points_Delete_By_Program]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Points_Delete_By_Program]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Points_Delete_By_Program]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Points_Delete_By_Program]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Points_Delete_By_Program] @ProgramID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS 
  -- This procedure deletes 1800 Points records that for the specified ProgramID
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from Points with (RowLock) where ProgramID=@ProgramID;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Points_Delete_By_Program] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Promo_Variables_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Promo_Variables_Delete.StoredProcedure.sql 68918 2013-08-20 20:57:03Z jg185197 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Promo_Variables_Delete]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Promo_Variables_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Promo_Variables_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Promo_Variables_Delete]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Promo_Variables_Delete] @PromoVarID bigint
AS
  SET NOCOUNT ON;
  BEGIN
    update PromoVariables set LastUpdate = GetDate(), Deleted = 1 where PromoVarID = @PromoVarID;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Promo_Variables_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Promo_Variables_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Promo_Variables_Insert.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Promo_Variables_Insert]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Promo_Variables_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Promo_Variables_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Promo_Variables_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Promo_Variables_Insert] @ExternalId nvarchar(400), @Name nvarchar(50),
	@Description nvarchar(255), @VarTypeID int, @UpdateToHost bit, @PromoVarID bigint OUTPUT
AS
  SET NOCOUNT ON;
  BEGIN
    if @ExternalID = ''0'' or @ExternalID = '''' begin
      set @ExternalID = null;
    end
    if @Description = '''' begin
      set @Description = null;
    end
    insert into PromoVariables (VarTypeID, Description, ExternalID, Name, UpdateToHost, Deleted, CreatedDate, LastUpdate)
         values (@VarTypeID, @Description, @ExternalID, @Name, @UpdateToHost, 0, getdate(), getdate());

    set @PromoVarID = Scope_Identity();
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Promo_Variables_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Promo_Variables_Update.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Promo_Variables_Update.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Promo_Variables_Update]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Promo_Variables_Update]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Promo_Variables_Update]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Promo_Variables_Update]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Promo_Variables_Update] @PromoVarID bigint, @ExternalId nvarchar(400) = '''', 
	@Name nvarchar(50), @Description nvarchar(255), @VarTypeID int, @UpdateToHost bit
AS
  SET NOCOUNT ON;
  BEGIN
    update PromoVariables 
       set VarTypeID = @VarTypeID, Description = @Description, ExternalID = @ExternalID,
           Name = @Name, UpdateToHost = @UpdateToHost, LastUpdate = getdate()
     where PromoVarID = @PromoVarID;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Promo_Variables_Update] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_RA_Archive_Delete_by_ROID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_RA_Archive_Delete_by_ROID.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_RA_Archive_Delete_by_ROID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RA_Archive_Delete_by_ROID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_RA_Archive_Delete_by_ROID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RA_Archive_Delete_by_ROID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_RA_Archive_Delete_by_ROID] @RewardOptionID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the CPE_RA_Archive records for the specified RewardOptionID
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  set @NumDeleted=0;

  Delete TOP (1800) from CPE_RA_Archive with (RowLock) where RewardOptionID=@RewardOptionID

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_RA_Archive_Delete_by_ROID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_RedeemCoupon.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_RedeemCoupon.StoredProcedure.sql 27378 2011-06-10 17:56:18Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_RedeemCoupon]    Script Date: 06/10/2011 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RedeemCoupon]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_RedeemCoupon]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/** This stored procedure marks a unique UPC coupon as redeemed. **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RedeemCoupon]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_RedeemCoupon]   @UniqueBarCode NVARCHAR(12), 
                                                                                 @TransEndDate DATETIME,
                                                                                 @ExtCardID NVARCHAR(400),
                                                                                 @CardTypeID INT,
                                                                                 @LocationID NVARCHAR(20),
                                                                                 @TransactionID NVARCHAR(128),
                                                                                 @StatusCode INT OUTPUT
                                                                                       
AS 
  DECLARE @CustomerPK AS BIGINT
  DECLARE @BarCode AS NVARCHAR(14)
  DECLARE @RedeemedLocationID AS NVARCHAR(20)
  DECLARE @RedeemedDate AS DATETIME

  --Get the Customer PK
  SELECT @CustomerPK=ISNULL(CustomerPK, 0) FROM CardIDs with (NoLock) WHERE ExtCardID=@ExtCardID and CardTypeID=@CardTypeID

  -- Get the redeemed location id from the parameters
  SELECT TOP 1 @RedeemedLocationID = @LocationID


    IF EXISTS (SELECT * FROM dbo.BarCodeDetails BCD WHERE BCD.BarCode = @UniqueBarCode) 
     BEGIN
       SELECT @RedeemedDate = RedeemedDate FROM dbo.BarCodeDetails BCD WHERE BCD.BarCode = @UniqueBarCode
       IF @RedeemedDate IS NULL
         BEGIN
           UPDATE BarCodeDetails SET RedeemedLocationID = @RedeemedLocationID, RedeemedDate = @TransEndDate,
                                   RedeemingMemberID  = @CustomerPK, RedeemingTransactionID =  @TransactionID 
           WHERE BarCode = @UniqueBarCode
           IF @@ROWCOUNT > 0 SET @StatusCode = 1
           ELSE SET @StatusCode = -1  
         END                          
       ELSE                            
          SET @StatusCode = -1   -- Coupon already redeemed                       
     END
    ELSE  SET @StatusCode = -1  --Coupon does not exist
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_RedeemCoupon] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pt_ReportInvalidCards.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_ReportInvalidCards.StoredProcedure.sql 53806 2013-04-05 01:24:42Z sg250265 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_ReportInvalidCards]    Script Date: 04/05/2013 16:44:17 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_ReportInvalidCards]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_ReportInvalidCards]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE pt_ReportInvalidCards
As

BEGIN 

	---Report to get incorrect CardID having Exceeded Card Length.
	
		select 'Exceeded Card Length' as Reason, 
		 CardPK, CustomerPK, ExtCardID,C.CardTypeID,Ct.Description,  Numericonly , CT.MaxIDLength, CT.PaddingLength, C.CardStatusID
		from CardIDs c Left join CardTypes ct
			on c.CardTypeID = ct.CardTypeID 
		where ( LEN(c.ExtCardID) > ct.MaxIDLength) and c.CardStatusID = 1 
    
		union

		---Report to get incorrect Numeric CardIDs having Alphanumeric Card number for Numeric Card Type

		select 'Alphanumeric Card number for Numeric Card Type' as Reason,
		 CardPK, CustomerPK, ExtCardID, C.CardTypeID,Ct.Description,NumericOnly, CT.MaxIDLength, CT.PaddingLength,  C.CardStatusID
		from CardIDs c Left join CardTypes ct
			on c.CardTypeID = ct.CardTypeID 
		where c.CardStatusID = 1 
			and NumericOnly = 1 and isnumeric(c.ExtCardID) <> 1

		union	
			
		---Report to get invalid cards for both numeric and non numeric

		select 'Card Length less than Padding length for Numeric Card Types' as  Reason,
		 CardPK, CustomerPK, ExtCardID,C.CardTypeID,Ct.Description,Numericonly , CT.MaxIDLength, CT.PaddingLength,  C.CardStatusID
		from CardIDs C left join CardTypes CT on
			C.CardTypeID = CT.CardTypeID
		where C.CardStatusID = 1  
		and  LEN(c.ExtCardID) < ct.PaddingLength and NumericOnly =1 and PaddingLength>0
	
	

END	

GO
GRANT EXECUTE ON [dbo].[pt_ReportInvalidCards] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pt_ReturnNextTrackingCode.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_ReturnNextTrackingCode]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_ReturnNextTrackingCode]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pt_ReturnNextTrackingCode] @UPCID bigint, @NewTrackingCode char(6) OUTPUT
AS
    /** This stored procedure returns the next tracking code in sequence for a given UPCID **/
    -- $Id: dbo.pt_ReturnNextTrackingCode.sql 63493 2013-03-20 15:49:01Z sr185178 $
    -- Build Version: 7.3.1.138972
    
SET NOCOUNT ON

DECLARE @oldid char(6), @errflag int, @errmsg varchar(255)

IF @UPCID IS NULL
BEGIN
	SET @errmsg = 'NULL UPCID provided to pt_ReturnNextTrackingCode - no TrackingCode generated'
	RAISERROR (@errmsg, 9, 1)
	RETURN -1
END 

IF EXISTS (SELECT 1 FROM dbo.RewardsTrackingCodeSequence where UPCID = @UPCID)
BEGIN
	DECLARE @res INT  
	EXEC @res = sp_getapplock @Resource = 'barcode_app_lock', @LockOwner = 'Session', @LockMode = 'Exclusive'; 
	   SELECT @oldid = LastTrackingValue
	   FROM dbo.RewardsTrackingCodeSequence
	   WHERE UPCID = @UPCID
	   
	   SELECT @NewTrackingCode = dbo.GetNextTrackingCode(@oldid)
	   
	   UPDATE dbo.RewardsTrackingCodeSequence
	   SET LastTrackingValue = @NewTrackingCode
	   WHERE UPCID = @UPCID
	EXEC @res = sp_releaseapplock @Resource = 'barcode_app_lock', @LockOwner = 'Session';      
END
ELSE
BEGIN
   SET @NewTrackingCode = '000001'
   
   INSERT INTO dbo.RewardsTrackingCodeSequence
   VALUES (@UPCID, @NewTrackingCode)
   
   SET @errflag = @@ERROR
   IF @errflag <> 0
   BEGIN
      SET @NewTrackingCode = NULL
      SET @errmsg = 'Attempt to insert '+CONVERT(varchar(10),@UPCID) +' into dbo.RewardsTrackingCodeSequence table generated error code ' + CONVERT(varchar(10), @errflag)
      RAISERROR (@errmsg, 9, 1)
      RETURN -1
   END
END

RETURN 0

GO

GRANT EXECUTE ON [dbo].[pt_ReturnNextTrackingCode] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Return_CardByAltID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Return_CardByAltID.StoredProcedure.sql 25980 2011-05-02 21:05:41Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Return_CardByAltID]    Script Date: 05/02/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CardByAltID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Return_CardByAltID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns the external cardid(s) of a customer, given the alternate id **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CardByAltID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Return_CardByAltID]
  @AltID nvarchar(400)
AS
  SET NOCOUNT ON
  DECLARE @CustomerPK BIGINT
  DECLARE @AltIDCardType INT
  SET @AltIDCardType = 3
  
  SELECT @CustomerPK = CustomerPK from CardIDs with (NoLock)WHERE ExtCardID = @AltID and CardTypeID = @AltIDCardType
  
  SELECT C.ExtCardID from CardIDs C WHERE C.CustomerPK = ISNULL(@CustomerPK,0) AND 
                                          C.CardTypeID=0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Return_CardByAltID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Return_CardStatus.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Return_CardStatus.StoredProcedure.sql 25980 2011-02-09 21:05:41Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Return_CardStatus]    Script Date: 02/09/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CardStatus]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Return_CardStatus]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns the status of a customer card, given the external card id and the card type **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CardStatus]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Return_CardStatus]
  @ExtCardID nvarchar(400),@CardTypeID int = 0
AS
  SET NOCOUNT ON; 

  SELECT CardStatusID from CardIDs with (NoLock)WHERE ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;
 
' 
END
GRANT EXECUTE ON [dbo].[pt_Return_CardStatus] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pt_Return_CustomerAttributesByExtCardID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Return_CustomerAttributesByExtCardID.StoredProcedure.sql 25980 2011-02-09 21:05:41Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Return_CustomerAttributesByExtCardID]    Script Date: 02/09/2011 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerAttributesByExtCardID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Return_CustomerAttributesByExtCardID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns all the attribute types and values for a specific customer.
Input Params : Card ID, Card Type(0 for Customer Card)
Output Params : The attribute value and type for all attributes defined for the customer. 

**/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerAttributesByExtCardID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Return_CustomerAttributesByExtCardID] @ExtCardID nvarchar(400), @CardTypeID int
AS   
  DECLARE @CustomerPK AS BIGINT
  SET @CustomerPK = 0
  SELECT Top 1 @CustomerPK = IsNull(CustomerPK,0) from CardIDs with (NoLock) where ExtCardID=@ExtCardID and CardTypeID=@CardTypeID;
  SELECT CustomerPK, AttributeTypeID, AttributeValueID FROM CustomerAttributes WITH (NOLOCK) WHERE CustomerPK = @CustomerPK;
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Return_CustomerAttributesByExtCardID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Return_CustomerPassword.sql'; 
--
GO


/****** Object:  StoredProcedure [dbo].[pt_Return_CustomerPassword]    Script Date: 05/16/2011 10:26:24 ******/
/**  This stored procedure returns the password for a customer taking email as the input parameter **/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerPassword]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_Return_CustomerPassword]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_Return_CustomerPassword] @Email nvarchar(1400)
AS
    -- $Id: dbo.pt_Return_CustomerPassword.sql 113767 2017-06-21 08:40:46Z ss251194 $
    -- Build Version: 7.3.1.138972
    /**  This stored procedure returns the password for a customer taking email as the input parameter **/

  SET NOCOUNT ON;

  SELECT Password from dbo.Customers C
  INNER JOIN dbo.CustomerExt CE 
     ON C.CustomerPK = CE.CustomerPK
  WHERE CE.email = @Email

GO

GRANT EXECUTE ON [dbo].[pt_Return_CustomerPassword] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_Return_CustomerProfile.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Return_CustomerProfile.StoredProcedure.sql 25980 2011-02-09 21:05:41Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Return_CustomerProfile]    Script Date: 02/09/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerProfile]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Return_CustomerProfile]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/** This stored procedure returns the details of a customer, given the external card id and the card type **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerProfile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Return_CustomerProfile]
  @ExtCardID nvarchar(400),
  @CardTypeID int = 0
AS
  SET NOCOUNT ON;
  DECLARE @CustomerPK BIGINT;
  

  SELECT @CustomerPK = CustomerPK from CardIDs with (NoLock)WHERE ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;
  
  SELECT C.CustomerPK,C.PreFix, C.FirstName, C.MiddleName, C.LastName,C.Suffix,C.Password,C.AltIDOptOut, C.CreatedLocationID,
         CE.Address, CE.City,CE.State,CE.ZIP, CE.email,CE.PhoneAsEntered as Phone,CE.DOB from Customers C LEFT OUTER JOIN CustomerExt CE WITH                  (NOLOCK) ON C.CustomerPK= CE.CustomerPK where C.CustomerPK = ISNULL(@CustomerPK,0); 

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Return_CustomerProfile] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Return_CustomerSupplementalData.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_Return_CustomerSupplementalData]    Script Date: 05/06/2011 16:44:19 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerSupplementalData]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_Return_CustomerSupplementalData]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_Return_CustomerSupplementalData]
  @ExtCardID nvarchar(400),
  @CardTypeID int = 0
AS

    -- $Id: dbo.pt_Return_CustomerSupplementalData.StoredProcedure.sql 25980 2011-05-06 21:05:41Z Lakshmi $
    -- Build Version: 7.3.1.138972
    /** This stored procedure returns the supplemental data(Attributes) of a customer, given the external card id and the card type **/

    SET NOCOUNT ON;
    DECLARE @CustomerPK BIGINT;

    SELECT @CustomerPK = CustomerPK from CardIDs with (NoLock) WHERE ExtCardID = @ExtCardID and CardTypeID = @CardTypeID;
    
    SELECT CS.CustomerPK, CS.FieldID as AttribID, CSF.Name As AttribName, CS.Value As AttribValue FROM CustomerSupplemental CS 
        LEFT OUTER JOIN CustomerSupplementalFields CSF WITH(NOLOCK) ON CS.FieldID = CSF.FieldID 
            WHERE CS.CustomerPK = ISNULL(@CustomerPK,0); 

GO


GRANT EXECUTE ON [dbo].[pt_Return_CustomerSupplementalData] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Return_CustomerSupplementalDataByAttribName.sql'; 
--
GO
-- $Id: dbo.pt_Return_CustomerSupplementalDataByAttribName.sql 27378 2011-06-09 17:56:18Z Lakshmi-Checking in for SSA$
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Return_CustomerSupplementalDataByAttribName]    Script Date: 06/09/2011 16:44:20 ******/


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerSupplementalDataByAttribName]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Return_CustomerSupplementalDataByAttribName]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Return_CustomerSupplementalDataByAttribName]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Return_CustomerSupplementalDataByAttribName]
  @ExtCardID nvarchar(400),
  @CardTypeID int = 0,
  @AttribName nvarchar(50)
AS
  SET NOCOUNT ON;
  DECLARE @CustomerPK BIGINT;
  
  SELECT CS.CustomerPK, CS.FieldID as AttribID, CSF.Name As AttribName, CS.Value As AttribValue 
    FROM CustomerSupplemental CS 
    INNER JOIN CardIDs CRD with (NoLock)
       ON ISNULL(CRD.CustomerPK,0) = CS.CustomerPK
    LEFT OUTER JOIN CustomerSupplementalFields CSF WITH(NOLOCK) 
      ON CS.FieldID= CSF.FieldID 
   WHERE ExtCardID = @ExtCardID 
     AND CardTypeID = @CardTypeID
     AND CSF.Name = @AttribName;   

' 
END
GO

GRANT EXECUTE ON pt_Return_CustomerSupplementalDataByAttribName TO COPIENT_LOGIX;
GO

print 'processing storedprocedures/dbo.pt_RewardAccumulation_Delete_by_ROID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_RewardAccumulation_Delete_by_ROID.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_RewardAccumulation_Delete_by_ROID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardAccumulation_Delete_by_ROID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_RewardAccumulation_Delete_by_ROID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardAccumulation_Delete_by_ROID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_RewardAccumulation_Delete_by_ROID] @RewardOptionID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the RewardAccumulation records for the specified RewardOptionID
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  Delete TOP (1800) from CPE_RewardAccumulation with (RowLock) where RewardOptionID=@RewardOptionID

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_RewardAccumulation_Delete_by_ROID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_RewardAccumulation_PurgeDeletedRecords.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_RewardAccumulation_PurgeDeletedRecords.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_RewardAccumulation_PurgeDeletedRecords]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardAccumulation_PurgeDeletedRecords]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_RewardAccumulation_PurgeDeletedRecords]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardAccumulation_PurgeDeletedRecords]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_RewardAccumulation_PurgeDeletedRecords] @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes CPE_RewardAccumulation records that are marked as deleted
  SET NOCOUNT ON;
  declare @StartTime datetime;
  declare @CurrentDeleted int;

  set @RunAgain=1;
  set @StartTime=getdate();
  set @NumDeleted=0;
  set @CurrentDeleted=0;

  -- run for up to 5 minutes
  while @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) begin
    set @CurrentDeleted=0
    --set rowcount 1800;  -- only delete 1800 records at a time
    Delete TOP (1800) from CPE_RewardAccumulation with (RowLock) where Deleted=1

    set @CurrentDeleted=@@RowCount;
    set @NumDeleted=@NumDeleted+@CurrentDeleted
    if @CurrentDeleted>100 begin  -- keep processing until there are less than 100 rows
      set @RunAgain=1;
    end
    else begin
      set @RunAgain=0;
    end
    --set rowcount 0
  end -- while
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_RewardAccumulation_PurgeDeletedRecords] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_RewardDistribution_Delete_by_OfferID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_RewardDistribution_Delete_by_OfferID.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_RewardDistribution_Delete_by_OfferID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardDistribution_Delete_by_OfferID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_RewardDistribution_Delete_by_OfferID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardDistribution_Delete_by_OfferID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_RewardDistribution_Delete_by_OfferID] @OfferID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the RewardDistribution records for the specified OfferID
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  Delete TOP (1800) from CPE_RewardDistribution with (RowLock) where IncentiveID=@OfferID

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_RewardDistribution_Delete_by_OfferID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_RewardLimitVariables_Delete_by_OfferID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_RewardLimitVariables_Delete_by_OfferID.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_RewardLimitVariables_Delete_by_OfferID]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardLimitVariables_Delete_by_OfferID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_RewardLimitVariables_Delete_by_OfferID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_RewardLimitVariables_Delete_by_OfferID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_RewardLimitVariables_Delete_by_OfferID] @OfferID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the RewardLimitVariables records for the specified OfferID
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  Delete TOP (1800) RewardLimitVariables with (RowLock) from 
    RewardLimitVariables as RLV with (RowLock) Inner Join PromoVariables as PV with (NoLock) 
      on RLV.PromoVarID=PV.PromoVarID and PV.LinkID=@OfferID

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_RewardLimitVariables_Delete_by_OfferID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_StoredValue_Delete_By_Program.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_StoredValue_Delete_By_Program.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_StoredValue_Delete_By_Program]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_StoredValue_Delete_By_Program]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_StoredValue_Delete_By_Program]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_StoredValue_Delete_By_Program]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_StoredValue_Delete_By_Program] @SVProgramID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS 
  -- This procedure deletes 1800 StoredValue records that for the specified SVProgramID
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from StoredValue with (RowLock) where SVProgramID=@SVProgramID;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_StoredValue_Delete_By_Program] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_StoredValue_FuelPartner_Delete_By_Program.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_StoredValue_FuelPartner_Delete_By_Program.StoredProcedure.sql 120243 2018-02-05 20:43:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_StoredValue_FuelPartner_Delete_By_Program]    Script Date: 12/27/2010 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_StoredValue_FuelPartner_Delete_By_Program]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_StoredValue_FuelPartner_Delete_By_Program]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_StoredValue_FuelPartner_Delete_By_Program]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_StoredValue_FuelPartner_Delete_By_Program] @SVProgramID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS 
  -- This procedure deletes 1800 records that for the specified SVProgramID
  -- invoked by DBPurgeAgent
  SET NOCOUNT ON;
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from StoredValuePointsConversion with (RowLock) where SVProgramID=@SVProgramID;
  Delete TOP (1800) from StoredValueThirdPartyTransactions with (RowLock) where SVProgramID=@SVProgramID;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_StoredValue_FuelPartner_Delete_By_Program] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_StoredValuesInsertQueue_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_StoredValuesInsertQueue_Insert.StoredProcedure.sql 6244 2012-11-09 17:35:15 JN185015 $
-- Build Version: 7.3.1.138972
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_StoredValuesInsertQueue_Insert]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_StoredValuesInsertQueue_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_StoredValuesInsertQueue_Insert] @FileName as nvarchar(255), @SVProgramID bigint, @PKID bigint OUTPUT
AS
  SET NOCOUNT ON;
  BEGIN
    insert into StoredValuesInsertQueue ([FileName], ProgramID)
         values (@FileName, @SVProgramID);

    set @PKID = Scope_Identity();
  END
GO

GRANT EXECUTE ON [dbo].[pt_StoredValuesInsertQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TrackableCoupon_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_Delete.StoredProcedure.sql 70929 2013-10-21 20:37:36Z kb250147 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupon_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupon_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupon_Delete]
  @CouponId           BIGINT
AS 
BEGIN
 DELETE FROM TrackableCoupons WHERE CouponID = @CouponId
 DELETE FROM TrackableCouponsCache WHERE CouponID = @CouponId
END 
GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupon_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCoupon_ForceRedeem.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_ForceRedeem.StoredProcedure.sql 71703 2013-11-06 17:33:18Z vb185060 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupon_ForceRedeem]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupon_ForceRedeem]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupon_ForceRedeem]
  @CouponCode         VARCHAR(150),
  @NumberUsed         TINYINT,  
  @Status             TINYINT       OUTPUT,
  @RemainingUses      SMALLINT      OUTPUT
  
AS 
  -- This stored procedure searches for a record with a passed-in CouponCode and decrements its remaining uses.
  -- 1. check TrackableCoupons table for Trackable coupon.
  -- 2. If found, update TrackableCoupons, return status 1.
  -- 3. If not found, return status 0.

  SET NOCOUNT ON;
  
  DECLARE @CurrentUses    INT
  
  -- 1. check TrackableCouponsCache table
    SELECT TOP (1)
      @CurrentUses = RemainingUses
    FROM 
      TrackableCouponsCache WITH (NoLock) 
    WHERE 
      CouponCode = @CouponCode;
      
  -- 2. If found, update TrackableCoupons, return data.
    IF @@RowCount > 0 
    BEGIN
        SET @Status = 1;
        SET @RemainingUses = @CurrentUses - @NumberUsed;
        
        UPDATE dbo.TrackableCouponsCache
        SET
           RemainingUses = @RemainingUses
        WHERE
           CouponCode = @CouponCode;
        
        UPDATE
          TrackableCoupons
        SET
          RemainingUses = @RemainingUses
        WHERE
          CouponCode = @CouponCode;          	    
      END
    ELSE 
    BEGIN
		SELECT TOP (1)
		  @CurrentUses = RemainingUses
		FROM 
		  TrackableCoupons WITH (NoLock) 
		WHERE 
		  CouponCode = @CouponCode;

		  -- 2. If found, update TrackableCoupon table, return data.
		IF @@RowCount > 0 
		BEGIN
	        SET @Status = 1;
		    SET @RemainingUses = @CurrentUses - @NumberUsed;

			UPDATE
			  TrackableCoupons
			SET
			  RemainingUses = @RemainingUses
			WHERE
			  CouponCode = @CouponCode;          	    		
        END
        ELSE
		BEGIN  
		  -- 3. If not found, return status 0
		  SET @RemainingUses = 0;
		  SET @Status = 0;
		END
    END
GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupon_ForceRedeem] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TrackableCoupon_Query.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_Query.StoredProcedure.sql 128574 2018-09-04 20:02:07Z db123627 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupon_Query]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupon_Query]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupon_Query]
  @CouponCode         VARCHAR(150),
  @LockDurationSec    INT = 31536000, -- 1 year
  @Status             TINYINT         OUTPUT,
  @InitialUses        TINYINT         OUTPUT,
  @RemainingUses      SMALLINT        OUTPUT,
  @ProgramID          INT             OUTPUT,
  @ExpireDate         DATETIME = NULL OUTPUT 
AS 
  -- This stored procedure searches for a record with a passed-in CouponCode and returns it's data.
  -- 1. Check TrackableCouponsCache table for coupon.
  -- 2. If found, update cached date, return data.
  -- 3. If not found, check TrackableCoupons table.
  -- 4. If found, copy to TrackableCouponsCache, return data.
  -- 5. If not found, return status 0.

  SET NOCOUNT ON;
  
  DECLARE @LockDate   DATETIME;
  
  -- 1. Check TrackableCouponsCache table for coupon 
  SELECT TOP (1)
    @InitialUses = InitialUses,
    @RemainingUses = RemainingUses,
    @ProgramID = ProgramID,
    @LockDate = LockDate,
    @ExpireDate = ExpireDate
  FROM 
    TrackableCouponsCache WITH (NoLock) 
  WHERE 
    CouponCode = @CouponCode;
    
  -- 2. If found, update cached date, return data
  IF @@RowCount > 0 
  BEGIN
    -- check if the lock has expired and unlock if it has
    IF  @LockDate IS NOT NULL AND DATEDIFF(second, @LockDate, GETDATE()) < @LockDurationSec
      SET @Status = 2;
    ELSE
    BEGIN
      SET @Status = 1;
      SET @LockDate = NULL;
    END
    
    -- update cached date so this row will stay in the cache longer
    UPDATE 
      TrackableCouponsCache
    SET 
      CachedDate = GETDATE(),
      LockDate = @LockDate      
    WHERE 
      CouponCode = @CouponCode;
  END
  ELSE
  BEGIN
  
    -- 3. If not found, check TrackableCoupons table
    SELECT TOP (1)
      @RemainingUses = RemainingUses,
      @InitialUses = InitialUses,
      @ProgramID = ProgramID,
      @ExpireDate = ExpireDate
    FROM 
      TrackableCoupons WITH (NoLock) 
    WHERE 
      CouponCode = @CouponCode;
  
    -- 4. If found, copy to TrackableCouponsCache (if remaining uses > 0), return data
    IF @@RowCount > 0 
    BEGIN
      SET @Status = 1;
      
      IF (@RemainingUses > 0)
      BEGIN
        -- copy to TrackableCouponsCache
        INSERT INTO 
          TrackableCouponsCache
          (CouponID
          ,CouponCode
          ,ProgramID
          ,RemainingUses
          ,InitialUses
          ,ExpireDate
          )
        SELECT 
           CouponID
          ,CouponCode
          ,ProgramID
          ,RemainingUses
          ,InitialUses
          ,ExpireDate
        FROM
          TrackableCoupons WITH (NoLock)
        WHERE 
          CouponCode = @CouponCode;
      END
    END
    ELSE
    BEGIN  
      -- 5. If not found, return status 0
      SET @InitialUses = 0;
      SET @RemainingUses = 0;
      SET @ProgramID = 0;
      SET @Status = 0;
      SET @ExpireDate = NULL;
    END
  END

GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupon_Query] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TrackableCoupon_Redeem.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_Redeem.StoredProcedure.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupon_Redeem]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupon_Redeem]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupon_Redeem]
  @CouponCode         VARCHAR(150),
  @NumberUsed         TINYINT,
  @LockKey            BIGINT,      
  @Status             TINYINT       OUTPUT,
  @RemainingUses      SMALLINT      OUTPUT
  
AS 
  -- This stored procedure searches for a record with a passed-in CouponCode and decrements its remaining uses.
  -- 1. Check TrackableCouponsCache table for coupon.
  -- 2. If found, check LockKey
  -- 3. If LockKey correct, remove from cache, update TrackableCoupons, return data.
  -- 4. If LockKey not correct, return status 3.
  -- 5. If not found, check TrackableCoupons table.
  -- 6. If found, check LockKey
  -- 7. If LockKey correct, update TrackableCoupons, return data.
  -- 8. If LockKey not correct, return status 3.
  -- 9. If not found, return status 0.

  SET NOCOUNT ON;
  
  DECLARE @CurrentLockKey BIGINT
  DECLARE @CurrentUses    INT
  
  -- 1. Check TrackableCouponsCache table for coupon 
  SELECT TOP (1)
    @CurrentLockKey = CouponID,
    @CurrentUses = RemainingUses
  FROM 
    TrackableCouponsCache WITH (NoLock) 
  WHERE 
    CouponCode = @CouponCode;
    
  -- 2. If found, check LockKey
  IF @@RowCount > 0 
  BEGIN
    IF @CurrentLockKey = @LockKey
    BEGIN
      -- 3. If LockKey correct, update TrackableCoupons, remove from cache, return data
      SET @Status = 1;
      SET @RemainingUses = @CurrentUses - @NumberUsed;
      
      UPDATE
        TrackableCoupons
      SET
        RemainingUses = @RemainingUses
      WHERE
        CouponCode = @CouponCode;
        
      -- Delete from cache
      DELETE FROM
        TrackableCouponsCache
      WHERE
        CouponCode = @CouponCode;
    END
    ELSE
    BEGIN
      -- 4. If LockKey not correct, return status 3
      SET @Status = 3;
      SET @RemainingUses = @CurrentUses;
    END
  END  
  ELSE
  BEGIN  
  
  -- 5. If not found, check TrackableCoupons table
    SELECT TOP (1)
      @CurrentLockKey = CouponID,
      @CurrentUses = RemainingUses
    FROM 
      TrackableCoupons WITH (NoLock) 
    WHERE 
      CouponCode = @CouponCode;
      
    -- 6. If found, check LockKey
    IF @@RowCount > 0 
    BEGIN
      IF @CurrentLockKey = @LockKey
      BEGIN
        -- 7. If LockKey correct, update TrackableCoupons, return data.
        SET @Status = 1;
        SET @RemainingUses = @CurrentUses - @NumberUsed;
        
        UPDATE
          TrackableCoupons
        SET
          RemainingUses = @RemainingUses
        WHERE
          CouponCode = @CouponCode;
      END
      ELSE
      BEGIN
        -- 8. If LockKey not correct, return status 3
        SET @Status = 3;
        SET @RemainingUses = @CurrentUses;
      END
    END
    ELSE
    BEGIN  
      -- 9. If not found, return status 0
      SET @RemainingUses = 0;
      SET @Status = 0;
    END
  END

GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupon_Redeem] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TrackableCoupon_Scan.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_Scan.StoredProcedure.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupon_Scan]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupon_Scan]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupon_Scan]
  @CouponCode         VARCHAR(150),
  @LockDurationSec    INT = 31536000, -- 1 year
  @Status             TINYINT       OUTPUT,
  @RemainingUses      SMALLINT      OUTPUT,
  @ProgramID          INT           OUTPUT,
  @LockKey            BIGINT        OUTPUT
AS 
  -- This stored procedure searches for a record with a passed-in CouponCode, locks coupon, and returns it's data.
  -- 1. Check TrackableCouponsCache table for coupon.
  -- 2. If found, update cached date, locks coupon, return data.
  -- 3. If not found, check TrackableCoupons table.
  -- 4. If found, copy to TrackableCouponsCache, lock coupon, return data.
  -- 5. If not found, return status 0.

  SET NOCOUNT ON;
  
  DECLARE @LockDate   DATETIME;
  
  -- 1. Check TrackableCouponsCache table for coupon 
  SELECT TOP (1)
    @ProgramID = ProgramID,
	  @RemainingUses = RemainingUses,
	  @LockDate = LockDate,
	  @LockKey = CouponID
  FROM 
    TrackableCouponsCache WITH (NoLock) 
  WHERE 
    CouponCode = @CouponCode;
    
  -- 2. If found, update cached date, locks coupon, return data
  IF @@RowCount > 0 
  BEGIN
    -- check if the lock has expired and lock it new if it has
    IF  @LockDate IS NOT NULL AND DATEDIFF(second, @LockDate, GETDATE()) < @LockDurationSec
    BEGIN
      SET @Status = 2; -- already locked
      
      -- update cached date so this row will stay in the cache longer but do not change lock status
      UPDATE 
        TrackableCouponsCache
      SET 
        CachedDate = GETDATE()
      WHERE 
        CouponCode = @CouponCode;
      END
      
    ELSE
    BEGIN
      SET @Status = 1; -- not locked so will need to lock
      
      UPDATE 
        TrackableCouponsCache
      SET 
        CachedDate = GETDATE(),
        LockDate = GETDATE()
      WHERE 
        CouponCode = @CouponCode;
    END
  END
  ELSE
  BEGIN
  
    -- 3. If not found, check TrackableCoupons table
    SELECT TOP (1)
      @ProgramID = ProgramID,
	    @RemainingUses = RemainingUses,
	    @LockKey = CouponID
    FROM 
      TrackableCoupons WITH (NoLock) 
    WHERE 
      CouponCode = @CouponCode;
  
    -- 4. If found, copy to TrackableCouponsCache (if remaining uses > 0), lock coupon, return data
    IF @@RowCount > 0 
    BEGIN
      SET @Status = 1;
      
      IF (@RemainingUses > 0)
      BEGIN
        -- copy to TrackableCouponsCache
        INSERT INTO 
          TrackableCouponsCache
          (CouponID
          ,CouponCode
          ,ProgramID
          ,RemainingUses
          ,InitialUses
          ,LockDate
          )
        SELECT 
           CouponID
          ,CouponCode
          ,ProgramID
          ,RemainingUses
          ,InitialUses
          ,GETDATE() AS LockDate
        FROM
          TrackableCoupons WITH (NoLock)
        WHERE 
          CouponCode = @CouponCode;
      END
    END
    ELSE
    BEGIN  
      -- 5. If not found, return status 0
      SET @ProgramID = 0;
      SET @RemainingUses = 0;
      SET @LockKey = 0;
      SET @Status = 0;
    END
  END

GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupon_Scan] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TrackableCoupon_SearchByCouponCode.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_SearchByCouponCode.StoredProcedure.sql 70929 2013-10-21 20:37:36Z kb250147 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupon_SearchByCouponCode]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupon_SearchByCouponCode]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupon_SearchByCouponCode]
  @CouponCode				  VARCHAR(150),
  @PageIndex				  INT,
  @PageSize				  INT,
  @Sorting				  NVARCHAR(200),
  @RecordCount				  INT OUT,
  @TrackableCouponLockTimeOut	  INT    = 0
AS 
  BEGIN
 DECLARE @PageLowerBound int  
 DECLARE @PageUpperBound int   
 DECLARE @RowsToReturn int   
 DECLARE @strTempResult nvarchar(max)  
 DECLARE @strQuery nvarchar(max)  
 DECLARE @strcount nvarchar(max)  
 declare @where nvarchar(1000)
 Declare @LockDate	    DATETIME
   
 SELECT @PageLowerBound = @PageIndex  * @PageSize  
 SELECT @PageUpperBound = ((@PageIndex +1)* @PageSize) + 1;  
    IF @Sorting = ''  
    BEGIN  
    SET @Sorting = ' ORDER BY TC.CouponID DESC '  
    END  
  set @where= ' WHERE TC.CouponCode = ''' +@CouponCode +''''
  
    -- Check If the given CouponCode is Locked(i.e., Scanned)
    IF EXISTS (SELECT 1 FROM TrackableCouponsCache WITH (NOLOCK) WHERE CouponCode = @CouponCode)
    BEGIN
	   -- Get the LockDate for given CouponCode
	   SELECT @LockDate = LockDate FROM TrackableCouponsCache WITH (NOLOCK) WHERE CouponCode = @CouponCode
	   
	   -- Check If the LockDate time exceeds the TrackableCouponLockTimeOut, If so, unlock the Coupon
	   IF(DATEDIFF(SECOND,ISNULL(@LockDate,GETDATE()),GETDATE()) > @TrackableCouponLockTimeOut)
	   BEGIN
		  -- Unlock the CouponCode
		  UPDATE TrackableCouponsCache
		  SET LockDate = NULL, CachedDate = GETDATE()
		  WHERE	CouponCode = @CouponCode;
	   END
    END
     
    SET @strTempResult = ' 
  WITH TempResult as  
  (  
   SELECT ROW_NUMBER() OVER(' + @Sorting + ') as RowNum,
   TC.CouponID, TC.CouponCode,CASE  WHEN TCC.LockDate is NULL THEN 0 ELSE 1 END As Locked, TC.ProgramID, TC.RemainingUses, TC.InitialUses, TC.ExpireDate  
	   FROM TrackableCoupons TC LEFT OUTER JOIN TrackableCouponsCache TCC ON TC.CouponID = TCC.CouponID
		  ' + @where +'  
  )  
  select * FROM TempResult WHERE RowNum > '  + cast(@PageLowerBound as nvarchar(200)) + ' AND RowNum < '  + cast(@PageUpperBound as nvarchar(200))   
    
  SET @strcount ='SELECT @RecordCount=count(CouponID) FROM TrackableCoupons TC' + @where    
   
 set @strTempResult = @strTempResult + ';'  + @strcount;   
 DECLARE @def AS NVARCHAR(200)  
 SET @def='@RecordCount int OUTPUT'  
 EXECUTE sp_executesql @strTempResult, @def,@RecordCount =@RecordCount output  
END 
GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupon_SearchByCouponCode] TO [Copient_Logix_uspRole] AS [dbo]
GO

--Declare @RowCount int
--execute pt_TrackableCoupon_SearchByCouponCode 'ABC123', 0, 20, '', @RowCount out





print 'processing storedprocedures/dbo.pt_TrackableCoupon_Unlock.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_Unlock.StoredProcedure.sql 71662 2013-11-06 03:35:43Z jg185197 $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupon_Unlock]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupon_Unlock]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupon_Unlock]
  @CouponCode         VARCHAR(150),
  @Status             TINYINT       OUTPUT
AS 
  -- This stored procedure searches for a record with a passed-in CouponCode and unlocks it if it is locked.
  -- 1. Check TrackableCouponsCache for coupon.
  -- 2. If found, remove lock, return data.
  -- 3. If not found, check TrackableCoupons table.
  -- 4. If found, copy to TrackableCouponsCache, return data.
  -- 5. If not found, return status.

  SET NOCOUNT ON;
  
  -- 1. Check TrackableCouponsCache table for coupon
  -- 2. If found, remove lock, return data
  UPDATE 
    TrackableCouponsCache
  SET 
    LockDate = NULL,
    CachedDate = GETDATE()
  WHERE 
    CouponCode = @CouponCode;
  
  IF @@RowCount > 0 
     SET @Status = 1;
  ELSE
  BEGIN
  
    -- 3. If not found, check TrackableCoupons table
    -- 4. If found, copy to TrackableCouponsCache, return data
    INSERT INTO 
      TrackableCouponsCache
      (CouponID
      ,CouponCode
      ,ProgramID
      ,RemainingUses
      ,InitialUses
      )
    SELECT 
       CouponID
      ,CouponCode
      ,ProgramID
      ,RemainingUses
      ,InitialUses
    FROM
      TrackableCoupons WITH (NoLock)
    WHERE
      CouponCode = @CouponCode; 
      
    -- 5. If not found, return status
    IF @@RowCount > 0 
      SET @Status = 1;
    ELSE
      SET @Status = 0; 
  END

GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupon_Unlock] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TrackableCoupons_AdjustNumUses.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_AdjustNumUses.StoredProcedure.sql 70929 2018-3-21 20:37:36Z $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupons_AdjustNumUses]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupons_AdjustNumUses]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupons_AdjustNumUses] (@CouponData   VARCHAR(MAX))

AS 
BEGIN


    DECLARE @CouponsRequestXML AS XML
    SET @CouponsRequestXML = @CouponData
        
    DECLARE @CouponsRequest TABLE (
        CouponCode VARCHAR(150),
        Uses SMALLINT
    )

    DECLARE @CouponResponse TABLE (
        CouponCode VARCHAR(150),
        Status TINYINT
    )

     
    INSERT INTO @CouponsRequest (CouponCode, Uses)
        SELECT
            a.b.value('.', 'VARCHAR(150)') AS [CouponCode],
            c.d.value('.', 'INT') AS [RemainingUses]
        FROM @CouponsRequestXML.nodes('/CouponAdjustRequest/adjustRequest')
        AS
        [root] ([child])
        CROSS APPLY child.nodes('couponId') a (b)
        CROSS APPLY child.nodes('remainingUses') c (d)
 
    UPDATE TC WITH (ROWLOCK)
    SET TC.RemainingUses = CR.Uses
        OUTPUT INSERTED.CouponCode,
        1    
        INTO @CouponResponse (CouponCode, Status)
        FROM TrackableCoupons TC 
        JOIN @CouponsRequest CR ON TC.CouponCode = CR.CouponCode 

    DELETE TCC 
        FROM TrackableCouponsCache TCC WITH (ROWLOCK)
        JOIN @CouponsRequest CR ON TCC.CouponCode = CR.CouponCode 

    SELECT CouponCode, Status From @CouponResponse
        UNION
    SELECT CouponCode, 0 FROM @CouponsRequest
    WHERE CouponCode NOT IN (SELECT CouponCode FROM @CouponResponse)

END 
GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupons_AdjustNumUses] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCoupons_Delete.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupon_Delete.StoredProcedure.sql 70929 2018-3-21 20:37:36Z $
-- Build Version: 7.3.1.138972

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupons_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCoupons_Delete]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupons_Delete] (@CouponList   VARCHAR(MAX))

AS 
BEGIN

    DECLARE @CouponsRequestXML AS XML
    SET @CouponsRequestXML = @CouponList
      
    DECLARE @TrackableCouponsHist_Temp TABLE (
    CouponCode VARCHAR(150),
    Type TINYINT,
    CouponsUsed INT,
    LocationID BIGINT,
    CreationDate DATETIME
    )
        
    DECLARE @CouponsRequest TABLE (
        CouponCode VARCHAR(150)
    )

    DECLARE @CouponResponse TABLE (
        CouponCode VARCHAR(150),
        Status TINYINT
    )

    INSERT INTO @CouponsRequest (CouponCode)
        SELECT
            a.b.value('.', 'VARCHAR(150)') AS [CouponCode]
        FROM @CouponsRequestXML.nodes('/CouponDeleteRequest/deleteRequest')
        AS
        [root] ([child])
        CROSS APPLY child.nodes('couponId') a (b)

    INSERT INTO @TrackableCouponsHist_Temp(CouponCode, Type, CouponsUsed, LocationID, CreationDate) 
    SELECT CouponCode, 2, InitialUses as CouponsUsed, -9, GETDATE() FROM TrackableCoupons TC WHERE  TC.CouponCode IN (SELECT CouponCode FROM @CouponsRequest)

    DELETE TC 
        OUTPUT DELETED.CouponCode,
        1    
        INTO @CouponResponse (CouponCode, Status)
        FROM TrackableCoupons TC WITH (ROWLOCK)
        JOIN @CouponsRequest CR ON TC.CouponCode = CR.CouponCode 

    DELETE TCC 
        FROM TrackableCouponsCache TCC WITH (ROWLOCK)
        JOIN @CouponsRequest CR ON TCC.CouponCode = CR.CouponCode 
     
    INSERT INTO LogixWH.dbo.TrackableCouponsHistory WITH (ROWLOCK)(CouponCode, Type, CouponsUsed, LocationID, CreationDate)  
    SELECT CouponCode, Type, CouponsUsed, LocationID, CreationDate FROM @TrackableCouponsHist_Temp TCT WHERE TCT.CouponCode IN (SELECT CouponCode FROM @CouponResponse)

    SELECT CouponCode, Status From @CouponResponse
        UNION
    SELECT CouponCode, 0 FROM @CouponsRequest
    WHERE CouponCode NOT IN (SELECT CouponCode FROM @CouponResponse)
END 
GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupons_Delete] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCoupons_Query.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupons_Query.StoredProcedure.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT
        *
    FROM sys.objects
    WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupons_Query]')
    AND TYPE IN (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_TrackableCoupons_Query]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupons_Query] @CouponCode      VARCHAR(MAX),
                                                   @LockDurationSec INT = 31536000, -- 1 year
                                                   @CalculateExpDate INT = 0,
                                                   @TransactionDateTime DATETIME = NULL
AS
    -- This stored procedure searches for a record with a passed-in CouponCode and returns it's data.
    -- 1. Check TrackableCouponsCache table for coupon.
    -- 2. If found, update cached date, return data.
    -- 3. If not found, check TrackableCoupons table.
    -- 4. If found, copy to TrackableCouponsCache, return data.
    -- 5. If not found, return status 0.
    -- (if CalculateExpDate is enabled the TransactioDateTime will be used to 
    --  determine if a coupon is expired which will return a status of 10.)

    SET NOCOUNT ON;

    DECLARE @NoOfCouponsInRequest INT = 0
    DECLARE @NoOfCouponsInResponse INT = 0

    DECLARE @CouponsRequestXML AS XML
    SET @CouponsRequestXML = @CouponCode

    DECLARE @CouponsRequest TABLE (
        CouponCode VARCHAR(150)
    )
    DECLARE @CouponResponse TABLE ( CouponID BIGINT,
        CouponCode VARCHAR(150),
        Status TINYINT,
        InitialUses SMALLINT,
        RemainingUses SMALLINT,
        ProgramID INT
    )

    INSERT INTO @CouponsRequest (CouponCode)
        SELECT
            a.b.value('.', 'VARCHAR(150)') AS [CouponCode]
        FROM @CouponsRequestXML.nodes('/couponTrackingRequest')
        AS
        [root] ([child])
        CROSS APPLY child.nodes('couponIds') a (b)

    -- Update TrackableCouponsCache's CacheDate and LockDate for the Coupons and Inserts the result into Response table
    UPDATE TrackableCouponsCache WITH (ROWLOCK)
    SET CachedDate = GETDATE(),
        LockDate = CASE
                      WHEN DATEDIFF(SECOND, LockDate, GETDATE()) < @LockDurationSec THEN LockDate
                      ELSE NULL
                  END
    OUTPUT INSERTED.CouponID,
    INSERTED.CouponCode,
    INSERTED.InitialUses,
    INSERTED.RemainingUses,
    INSERTED.ProgramID,
    CASE
        WHEN (DATEDIFF(SECOND, INSERTED.LockDate, GETDATE()) < @LockDurationSec) THEN 2
        WHEN (@CalculateExpDate = 1 AND INSERTED.ExpireDate < @TransactionDateTime) THEN 10
        ELSE 1
    END
    INTO @CouponResponse (CouponID, CouponCode, InitialUses, RemainingUses, ProgramID, Status)
    WHERE CouponCode IN (SELECT CouponCode FROM @CouponsRequest)

    -- If @NoOfCouponsInResponse doesn't match with @NoOfCouponsInRequest, then serach for the Coupon in TrackableCoupons table
    SELECT @NoOfCouponsInRequest = COUNT(1) FROM @CouponsRequest
    SELECT @NoOfCouponsInResponse = COUNT(1) FROM @CouponResponse

    IF (@NoOfCouponsInResponse < @NoOfCouponsInRequest)
    BEGIN
        -- Get the Remaining Coupons info from TrackableCoupons
        SELECT
            CouponID,
            CouponCode,
            ProgramID,
            RemainingUses,
            InitialUses,
            ExpireDate INTO #CouponResponse_Temp
        FROM TrackableCoupons WITH (NOLOCK)
        WHERE CouponCode IN (
        SELECT CouponCode FROM @CouponsRequest
        EXCEPT
        SELECT CouponCode FROM @CouponResponse)

        -- Insert them into TrackableCouponsCache WHERE RemainingUses > 0
        INSERT INTO TrackableCouponsCache WITH (ROWLOCK) (CouponID, CouponCode, ProgramID, RemainingUses, InitialUses, ExpireDate)
            SELECT
                CouponID,
                CouponCode,
                ProgramID,
                RemainingUses,
                InitialUses,
                ExpireDate
            FROM #CouponResponse_Temp
            WHERE RemainingUses > 0

        -- Insert them into @CouponResponse
        INSERT INTO @CouponResponse (CouponID, CouponCode, InitialUses, RemainingUses, ProgramID, Status)
            SELECT
                CouponID,
                CouponCode,
                InitialUses,
                RemainingUses,
                ProgramID,                  
                CASE 
                 WHEN (@CalculateExpDate = 1 AND #CouponResponse_Temp.ExpireDate < @TransactionDateTime) THEN 10
                 ELSE 1
                END
            FROM #CouponResponse_Temp

    END

    -- Return the response
    SELECT CouponCode, CouponID, Status, InitialUses, RemainingUses, ProgramID FROM @CouponResponse
    UNION
    SELECT CouponCode, 0, 0, 0, 0, 0 FROM @CouponsRequest
    WHERE CouponCode NOT IN (SELECT CouponCode FROM @CouponResponse)
GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupons_Query] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCoupons_Redeem.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupons_Redeem.StoredProcedure.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT
        *
    FROM sys.objects
    WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupons_Redeem]')
    AND TYPE IN (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_TrackableCoupons_Redeem]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupons_Redeem] @CouponCode VARCHAR(MAX)

AS
    -- This stored procedure searches for a record with a passed-in CouponCode and decrements its remaining uses.
    -- 1. Check TrackableCouponsCache table for coupon.
    -- 2. If found, check LockKey
    -- 3. If LockKey correct, remove from cache, update TrackableCoupons, return data.
    -- 4. If LockKey not correct, return status 3.
    -- 5. If not found, check TrackableCoupons table.
    -- 6. If found, check LockKey
    -- 7. If LockKey correct, update TrackableCoupons, return data.
    -- 8. If LockKey not correct, return status 3.
    -- 9. If not found, return status 0.

    SET NOCOUNT ON;

    DECLARE @NoOfCouponsInRequest INT = 0
    DECLARE @NoOfCouponsInResponse INT = 0

    DECLARE @CouponsRequestXML AS XML
    SET @CouponsRequestXML = @CouponCode

	    DECLARE @CouponsRequestInitial TABLE (
        CouponCode VARCHAR(150),
        Uses SMALLINT,
        CouponID BIGINT,
        IsForceRedeem BIT
    )
	
    DECLARE @CouponsRequest TABLE (
        CouponCode VARCHAR(150),
        Uses SMALLINT,
        CouponID BIGINT,
        IsForceRedeem BIT
    )
    DECLARE @CouponResponse TABLE (
	   CouponID BIGINT,
        CouponCode VARCHAR(150),
        Status TINYINT,
        RemainingUses SMALLINT,
        NumberUsed TINYINT,
        LockKey BIGINT
    )

    INSERT INTO @CouponsRequestInitial (CouponCode, Uses, CouponID, IsForceRedeem)
        SELECT
            a.b.value('.', 'VARCHAR(150)') AS [CouponCode],
            c.d.value('.', 'INT') AS [NumberUsed],
            e.f.value('.', 'BIGINT') AS [LockKey],
            g.h.value('.', 'BIT') AS [IsForceRedeem]
        FROM @CouponsRequestXML.nodes('/CouponRedeemRequest/redeemRequest')
        AS
        [root] ([child])
        CROSS APPLY child.nodes('couponId') a (b)
        CROSS APPLY child.nodes('couponsUsed') c (d)
        CROSS APPLY child.nodes('lockKey') e (f)
        CROSS APPLY child.nodes('forceRedeem') g (h)

	INSERT INTO @CouponsRequest(
      CouponCode,
      Uses,
      CouponID,
      IsForceRedeem)
      SELECT 
		CouponCode,
		Uses,
		CouponID,
		IsForceRedeem
	  FROM
		@CouponsRequestInitial
	 
    -- Update the RemainingUses in TrackableCoupons table and insert the resultant records to Response table
    UPDATE TC WITH (ROWLOCK)
    SET TC.RemainingUses = 
    (CASE
		WHEN TC.RemainingUses  >= CR.Uses 
		   THEN TC.RemainingUses - CR.Uses  
		ELSE TC.RemainingUses
	END)
	OUTPUT INSERTED.CouponID,
			INSERTED.CouponCode,
			INSERTED.RemainingUses,
			(CASE WHEN INSERTED.RemainingUses  < DELETED.RemainingUses
			      THEN 1
			      ELSE 9
			 END)
			INTO @CouponResponse (CouponID, CouponCode, RemainingUses, Status)
			FROM TrackableCoupons TC
			JOIN @CouponsRequest CR
			ON CR.CouponCode = TC.CouponCode
			AND (TC.CouponID = CR.CouponID OR CR.IsForceRedeem = 1) -- Incase of Force Redeem, CouponID will not be passed to the Procedure

    -- Delete the Redeemed Coupons from Cache table
    DELETE TCC
        FROM TrackableCouponsCache TCC WITH (ROWLOCK)
        JOIN @CouponsRequest CR
            ON TCC.CouponID = CR.CouponID
            AND TCC.CouponCode = CR.CouponCode
            AND CR.IsForceRedeem = 0
            
    -- Update the Force-Redeemed Coupons from Cache table
    UPDATE TCC
    SET TCC.RemainingUses = 
	(CASE
		WHEN TCC.RemainingUses  >= CR.Uses 
		   THEN TCC.RemainingUses - CR.Uses  
		ELSE TCC.RemainingUses
	END)
        FROM TrackableCouponsCache TCC WITH (ROWLOCK)
        JOIN @CouponsRequest CR
            ON TCC.CouponCode = CR.CouponCode
            AND CR.IsForceRedeem = 1

    -- Check for LockKey correctness in case, @NoOfCouponsInResponse doesn't match with @NoOfCouponsInRequest
    SELECT @NoOfCouponsInRequest = COUNT(1)
    FROM @CouponsRequest
    SELECT @NoOfCouponsInResponse = COUNT(1)
    FROM @CouponResponse
    
    IF (@NoOfCouponsInResponse < @NoOfCouponsInRequest)
    BEGIN
        INSERT INTO @CouponResponse (CouponID, CouponCode, RemainingUses, Status)
            SELECT
                TC.CouponID,
                CRQ.CouponCode,
                TC.RemainingUses,
                3
            FROM @CouponsRequest CRQ
            JOIN TrackableCoupons TC WITH (NOLOCK)
                ON CRQ.CouponCode = TC.CouponCode
            WHERE CRQ.CouponID <> TC.CouponID
            AND CRQ.IsForceRedeem = 0
    END

    -- Return the response
    SELECT
        CouponCode,
        CouponID,
        Status,
        RemainingUses
    FROM @CouponResponse
    UNION
    SELECT
        CouponCode,
        0,
        0,
        0
    FROM @CouponsRequest
    WHERE CouponCode NOT IN (SELECT CouponCode FROM @CouponResponse)

GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupons_Redeem] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCoupons_Scan.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupons_Scan.StoredProcedure.sql 71703 2013-11-06 17:33:18Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT
        *
    FROM sys.objects
    WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupons_Scan]')
    AND TYPE IN (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_TrackableCoupons_Scan]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupons_Scan] @CouponCode      VARCHAR(MAX),
                                                  @LockDurationSec INT = 31536000, -- 1 year
                                                  @CalculateExpDate INT = 0,
                                                  @TransactionDateTime DATETIME = NULL
AS
    -- This stored procedure searches for a record with a passed-in CouponCode, locks coupon, and returns it's data.
    -- 1. Check TrackableCouponsCache table for coupon.
    -- 2. If found, update cached date, locks coupon, return data.
    -- 3. If not found, check TrackableCoupons table.
    -- 4. If found, copy to TrackableCouponsCache, lock coupon, return data.
    -- 5. If not found, return status 0.
    -- (if CalculateExpDate is enabled the TransactioDateTime will be used to 
    --  determine if a coupon is expired which will return a status of 10.)
	
    SET NOCOUNT ON;

    DECLARE @NoOfCouponsInRequest INT = 0
    DECLARE @NoOfCouponsInResponse INT = 0
    DECLARE @CouponsRequestXML XML
	-- Added these variables for Coupon locking.
	-- When a scan request is coming from the same Transaction, Terminal, Location ID 
		-- When the Coupon is not locked, add the Terminal, Transaction, Location ID to the trackableCouponCache table and lock it. 
		-- When the coupon is already locked, we need to grant the lock again as it is coming from 
			-- same Transaction and store  
	  
	DECLARE @TranID VARCHAR(128)
    DECLARE @TermID VARCHAR(8)
    DECLARE @LocID INT

    SET @CouponsRequestXML = @CouponCode

    DECLARE @CouponsRequest TABLE (
        CouponCode VARCHAR(150)
    )

    DECLARE @CouponResponse TABLE ( CouponID BIGINT,
        CouponCode VARCHAR(150),
        Status TINYINT,
        RemainingUses SMALLINT,
        ProgramID INT,
        LockKey BIGINT,
		-- Added these fields to check if the scan request is coming from the same transaction, terminal, Location ID.
        TransactionID VARCHAR(150),
		TerminalID VARCHAR(150),
		LocationID INT
    )
    
    DECLARE @CouponResponse_Temp TABLE ( CouponID BIGINT,
        CouponCode VARCHAR(150),
        Status TINYINT,
        RemainingUses SMALLINT,
        ProgramID INT,
        LockKey BIGINT
    )

	-- Parse XML received in the coupon code field and save it in @CouponsRequest
    INSERT INTO @CouponsRequest (CouponCode)
        SELECT
            a.b.value('.', 'VARCHAR(150)') AS [CouponCode]
        FROM @CouponsRequestXML.nodes('/couponTrackingRequest')
        AS
        [root] ([child])
        CROSS APPLY child.nodes('couponIds') a (b)
		
	SELECT @LocID = b.value('(./locationID/text())[1]','Varchar(150)'),
		@TermID =  b.value('(./terminalID/text())[1]','Varchar(150)'),
		@TranID =  b.value('(./transactionID/text())[1]','Varchar(150)') 
		FROM @CouponsRequestXML.nodes('/couponTrackingRequest') as a(b)

    -- Store the CouponInformation, especially Status which can be used further. 
    SELECT CouponID,CouponCode,RemainingUses,ProgramID,TransactionID, TerminalID, LocationID , CASE
        WHEN (@CalculateExpDate = 1 AND ExpireDate < @TransactionDateTime) THEN 10
        WHEN (LockDate IS NOT NULL AND DATEDIFF(SECOND, LockDate, GETDATE()) < @LockDurationSec) THEN 2
        ELSE 1
    END AS Status INTO #CouponResponse
    FROM TrackableCouponsCache C WITH (NOLOCK)
    WHERE 
    EXISTS ( SELECT CouponCode FROM @CouponsRequest WHERE CouponCode=C.CouponCode)
	
	-- Check if the status of the coupon is already locked(2) and also check if the request is coming from the same transaction, terminal and location ID on which the coupon is locked.
	-- If so, grant the lock.(Move the status to 1)
	IF EXISTS (SELECT status from #CouponResponse where status = 2 and CouponCode IN (Select CouponCode from @CouponsRequest) AND TransactionID = @TranID AND TerminalID = @TermID AND  LocationID = @LocID)
	BEGIN
		UPDATE #CouponResponse SET Status = 1 where TransactionID = @TranID AND TerminalID = @TermID AND  LocationID = @LocID AND Status = 2 AND CouponCode IN (Select CouponCode from @CouponsRequest)
	END
    
    -- Update TrackableCouponsCache's CacheDate and LockDate to Lock Coupons and Inserts the result into Response table
    UPDATE TrackableCouponsCache WITH (ROWLOCK)
    SET CachedDate = GETDATE(),
        LockDate =	CASE
                      WHEN (@CalculateExpDate = 1 AND ExpireDate < @TransactionDateTime) THEN NULL
                      WHEN (LockDate IS NOT NULL AND DATEDIFF(SECOND, LockDate, GETDATE()) < @LockDurationSec) THEN LockDate					  
                      ELSE GETDATE()
                END
    OUTPUT INSERTED.CouponID,
    INSERTED.CouponCode,
    INSERTED.CouponID,
    INSERTED.RemainingUses,
    INSERTED.ProgramID
    INTO @CouponResponse (CouponID, CouponCode, LockKey, RemainingUses, ProgramID)
    WHERE CouponCode IN (SELECT CouponCode FROM @CouponsRequest)
	
	IF EXISTS (SELECT status from #CouponResponse where status = 1)
	BEGIN
		UPDATE TrackableCouponsCache WITH (ROWLOCK) SET
		TransactionID=@TranID,TerminalID=@TermID,LocationID=@LocID
		WHERE CouponCode IN (SELECT CouponCode FROM #CouponResponse where status = 1) AND CouponCode IN 
		(SELECT CouponCode FROM @CouponsRequest)
	END
    
    -- Update the CouponStatus
    UPDATE @CouponResponse SET [Status] = CRT.[Status]
    FROM @CouponResponse CR
    JOIN #CouponResponse CRT ON CR.CouponCode = CRT.CouponCode


    -- If @NoOfCouponsInResponse is less than @NoOfCouponsInRequest, then Seach for the Coupons in TrackableCoupons and Inserts into Cache and Response tables
	-- The reason for this check is, TrackableCouponsCache table may not contain all the coupons, if any coupon in the request is missing, check for it in TrackableCoupons table.
    SELECT @NoOfCouponsInRequest = COUNT(1) FROM @CouponsRequest
    SELECT @NoOfCouponsInResponse = COUNT(1) FROM @CouponResponse

    IF (@NoOfCouponsInResponse < @NoOfCouponsInRequest)
    BEGIN
        -- Get the Remaining Coupons info from TrackableCoupons
        SELECT
            CouponID,
            CouponCode,
            ProgramID,
            RemainingUses,
            InitialUses,
            ExpireDate INTO #CouponResponse_Temp
        FROM TrackableCoupons WITH (NOLOCK)
        WHERE CouponCode IN (
        SELECT CouponCode FROM @CouponsRequest
        EXCEPT
        SELECT CouponCode FROM @CouponResponse)

        -- Insert them into TrackableCouponsCache WHERE RemainingUses > 0
        INSERT INTO TrackableCouponsCache WITH (ROWLOCK) (CouponID, CouponCode, ProgramID, RemainingUses, InitialUses, LockDate, ExpireDate, TransactionID, TerminalID, LocationID)
            SELECT
                CouponID,
                CouponCode,
                ProgramID,
                RemainingUses,
                InitialUses,
                GETDATE(),
                ExpireDate,
				@TranID,
				@TermID,
				@LocID
            FROM #CouponResponse_Temp
            WHERE RemainingUses > 0

        -- Insert them into @CouponResponse
        INSERT INTO @CouponResponse (CouponID, CouponCode, LockKey, RemainingUses, ProgramID, Status, TransactionID,TerminalID, LocationID)
            SELECT
                CouponID,
                CouponCode,
                CouponID,
                RemainingUses,
                ProgramID,
                CASE 
                 WHEN (@CalculateExpDate = 1 AND #CouponResponse_Temp.ExpireDate < @TransactionDateTime) THEN 10
                 ELSE 1
                END,
				@TranID,
				@TermID,
				@LocID
            FROM #CouponResponse_Temp
    END


    -- Return the response
    SELECT
        CouponCode,
        CouponID,
        Status,
        LockKey,
        RemainingUses,
        ProgramID
    FROM @CouponResponse
    UNION
    SELECT
        CouponCode,
        0,
        0,
        0,
        0,
        0
    FROM @CouponsRequest
    WHERE CouponCode NOT IN (SELECT
        CouponCode
    FROM @CouponResponse)

GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupons_Scan] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCoupons_Unlock.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCoupons_Unlock.StoredProcedure.sql 71662 2013-11-06 03:35:43Z jg185197 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT
        *
    FROM sys.objects
    WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCoupons_Unlock]')
    AND TYPE IN (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_TrackableCoupons_Unlock]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCoupons_Unlock] @CouponCode VARCHAR(MAX)
AS
    -- This stored procedure searches for a record with a passed-in CouponCodes and unlocks it if it is locked.
    -- 1. Check TrackableCouponsCache for coupon.
    -- 2. If found, remove lock, return data.
    -- 3. If not found, check TrackableCoupons table.
    -- 4. If found, copy to TrackableCouponsCache, return data.
    -- 5. If not found, return status.

    SET NOCOUNT ON;

    DECLARE @NoOfCouponsInRequest INT = 0
    DECLARE @NoOfCouponsInResponse INT = 0
    DECLARE @CouponsRequestXML XML
    SET @CouponsRequestXML = @CouponCode

    DECLARE @CouponsRequest TABLE (
        CouponCode VARCHAR(150)
    )

    DECLARE @CouponResponse TABLE (
        CouponID BIGINT,
        CouponCode VARCHAR(150),
        Status TINYINT
    )

    INSERT INTO @CouponsRequest (CouponCode)
        SELECT
            a.b.value('.', 'VARCHAR(150)') AS [CouponCode]
        FROM @CouponsRequestXML.nodes('/couponTrackingRequest')
        AS
        [root] ([child])
        CROSS APPLY child.nodes('couponIds') a (b)

    -- Check and Unlock the Coupons from Cache table and Insert the result into Response table
    UPDATE TrackableCouponsCache WITH (ROWLOCK)
    SET CachedDate = GETDATE(),
        LockDate = NULL
    OUTPUT INSERTED.CouponID,
    INSERTED.CouponCode,
    1 -- Status-1: Successful
    INTO @CouponResponse (CouponID, CouponCode, Status)
    WHERE CouponCode IN (SELECT CouponCode FROM @CouponsRequest)

    -- If @NoOfCouponsInResponse is less than @NoOfCouponsInRequest, Serach for the Coupons in TrackableCoupons and add them to Cache and Response table
    SELECT @NoOfCouponsInRequest = COUNT(1) FROM @CouponsRequest
    SELECT @NoOfCouponsInResponse = COUNT(1) FROM @CouponResponse

    IF (@NoOfCouponsInResponse < @NoOfCouponsInRequest)
    BEGIN
        -- Get the Remaining Coupons info from TrackableCoupons
        SELECT
            CouponID,
            CouponCode,
            ProgramID,
            RemainingUses,
            InitialUses INTO #CouponResponse_Temp
        FROM TrackableCoupons WITH (NOLOCK)
        WHERE CouponCode IN (
        SELECT CouponCode FROM @CouponsRequest
        EXCEPT
        SELECT CouponCode FROM @CouponResponse)

        -- Insert them into TrackableCouponsCache WHERE RemainingUses > 0
        INSERT INTO TrackableCouponsCache WITH (ROWLOCK) (CouponID, CouponCode, ProgramID, RemainingUses, InitialUses)
            SELECT
                CouponID,
                CouponCode,
                ProgramID,
                RemainingUses,
                InitialUses
            FROM #CouponResponse_Temp

        -- Insert them into @CouponResponse
        INSERT INTO @CouponResponse (CouponID, CouponCode, Status)
            SELECT CouponID, CouponCode, 1 FROM #CouponResponse_Temp
    END

    -- Return the response
    SELECT CouponCode, CouponID, Status FROM @CouponResponse
    UNION
    SELECT CouponCode, 0, 0 FROM @CouponsRequest
    WHERE CouponCode NOT IN (SELECT CouponCode FROM @CouponResponse)

GO

GRANT EXECUTE ON [dbo].[pt_TrackableCoupons_Unlock] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_ValidateCoupon.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pt_ValidateCoupon]    Script Date: 06/08/2011 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_ValidateCoupon]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_ValidateCoupon]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pt_ValidateCoupon] @UniqueBarCode NVARCHAR(12), 
                                         @posDateTime DATETIME, 
                                         @ExtCardID NVARCHAR(400),
                                         @CardTypeID int, 
                                         @ValidLocation BIT,
                                         @CouponReasonCodeDesc NVARCHAR(100) OUTPUT, 
                                         @Valid BIT OUTPUT
                                                                                       
AS 
    -- $Id: dbo.pt_ValidateCoupon.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
    -- Build Version: 7.3.1.138972
    /** This stored procedure checks whether a uniquebarcode coupon is valid or not. A description is returned indicating why the
    coupon was invalid. **/

  DECLARE @CustomerPK AS BIGINT
  DECLARE @BarCode AS NVARCHAR(14)
  DECLARE @EffectiveDate AS DateTime
  DECLARE @ExpirationDate AS DateTime
  DECLARE @RedeemedDate AS DateTime
  DECLARE @VoidBit AS BIT
  DECLARE @CardStatusID INT
  DECLARE @RedemptionRestrictionID AS INT
  --SET @CardStatusID = 0
  SET @VoidBit =0
  --Get the Customer PK
  SELECT @CustomerPK=ISNULL(CustomerPK, 0) FROM CardIDs with (NoLock) WHERE ExtCardID=@ExtCardID and CardTypeID=@CardTypeID
  -- Check the Card status
  --SELECT @CardStatusID= CardStatusID FROM CardIDs with (NoLock) WHERE ExtCardID=@ExtCardID and CardTypeID=@CardTypeID
  
  --IF @CardStatusID= 1 
   BEGIN
    IF EXISTS (SELECT * FROM dbo.BarCodeDetails BCD WHERE BCD.BarCode = @UniqueBarCode) 
     BEGIN
      SELECT  @CustomerPK= CustomerPK, @EffectiveDate = EffectiveDate, @ExpirationDate=ExpirationDate, 
              @VoidBit = Voided, @RedemptionRestrictionID = RedemptionRestrictionID,
              @RedeemedDate = RedeemedDate FROM dbo.BarCodeDetails BCD WHERE BCD.BarCode = @UniqueBarCode     
      SET @CouponReasonCodeDesc =
          CASE WHEN ( @VoidBit = 1)                    THEN 'Coupon void'
               WHEN ( @EffectiveDate > @posDateTime)   THEN 'Coupon not effective yet '
               WHEN ( @ExpirationDate < @posDateTime)  THEN 'Coupon has expired'
               WHEN (@RedemptionRestrictionID=1) AND ( @ValidLocation = 0 ) THEN 'Coupon not valid at the location'
               WHEN (@RedemptionRestrictionID=2) AND ( @ValidLocation = 0 ) THEN 'Coupon not valid at the location'
               WHEN ( @RedeemedDate IS NOT NULL)       THEN 'Coupon already redeemed'
               ELSE 'Coupon Valid'
          END --End Case   
      SET @Valid=
          CASE WHEN ( @VoidBit = 1)                    THEN 0
               WHEN ( @EffectiveDate > @posDateTime)   THEN 0
               WHEN ( @ExpirationDate < @posDateTime)  THEN 0
               WHEN (@RedemptionRestrictionID=1) AND ( @ValidLocation = 0 ) THEN 0
               WHEN (@RedemptionRestrictionID=2) AND ( @ValidLocation = 0 ) THEN 0
               WHEN ( @RedeemedDate IS NOT NULL)       THEN 0
               ELSE 1
          END --End Case                 
     END 
    ELSE -- Barcode does not exist
     SELECT @CouponReasonCodeDesc= 'Coupon does not exist' , @Valid = 0     
   END
  --ELSE -- CardStatusID <>1
    --SELECT @CouponReasonCodeDesc='The card is not active' ,@Valid = 0
     
GO

GRANT EXECUTE ON [dbo].[pt_ValidateCoupon] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_ValidateMember.StoredProcedure.sql.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_Signs_Update]    Script Date: 03/31/2012 18:13:13 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_ValidateMember]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_ValidateMember]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_ValidateMember]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'
    
CREATE PROCEDURE [dbo].[pt_ValidateMember]   
    
    @MemberRedemptionID INT, --redemption member validation rules for this coupon  
    @ExtCardID NVARCHAR(400),  
    @CardTypeID int,
    @UniqueBarCode NVARCHAR(14),
    @ValidMember INT OUTPUT  
AS   
  
  DECLARE @CustomerPK AS BIGINT  
  DECLARE @CardStatusID AS INT 
  Set @CardStatusID = 0
    
  --Get the Customer PK  
  SELECT @CustomerPK=ISNULL(CustomerPK, 0) FROM CardIDs with (NoLock) WHERE ExtCardID=@ExtCardID and CardTypeID=@CardTypeID  
  -- Check the Card status  
  SELECT @CardStatusID= CardStatusID FROM CardIDs with (NoLock) WHERE ExtCardID=@ExtCardID and CardTypeID=@CardTypeID  


    SET @ValidMember =  
        CASE   
           WHEN (@MemberRedemptionID=0)    
                THEN 1  
           WHEN @CardStatusID <> 1 AND @CardStatusID <> 6
                THEN 4           
           WHEN (@MemberRedemptionID=-1)    
                THEN 2
            WHEN (@MemberRedemptionID=1) AND (@CustomerPK <> (select customerpk from BarcodeDetails where Barcode = @UniqueBarCode) OR @CardStatusID <> 1)
                THEN 3  
              
            WHEN (@MemberRedemptionID=2) AND @CardStatusID <> 1
                THEN 4

            ELSE 1  
              
        END --End Case  '

END
GO
GRANT EXECUTE ON [dbo].[pt_ValidateMember] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_VoidAllCoupons.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_VoidAllCoupons]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_VoidAllCoupons]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/** This stored procedure voids all uniquebarcode coupons attached to a transaction. 
A value indicating the number of records updated is returned. This
value can be a number >=1(depending on the number of coupons voided) or a 0. If a matching coupon cannot be found, 
no update is performed and hence a 0 is returned **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_VoidAllCoupons]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_VoidAllCoupons] @ExtCardID NVARCHAR(400), @CardTypeID INT,
                                                                                 @VoidedCSR BIGINT, @IssueDate DATETIME,
                                                                                 @IssuingCostCenter NVARCHAR(20), @IssuingTransactionID NVARCHAR(128)

-- $Id: dbo.pt_VoidAllCoupons.StoredProcedure.sql 27378 2011-08-08 17:56:18Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_VoidAllCoupons]    Script Date: 08/08/2011 16:44:20 ******/
                                                                       
                                                                                       
AS 
  DECLARE @CustomerPK BIGINT;

  SELECT @CustomerPK = ISNULL(CustomerPK,0) from CardIDs with (NoLock) WHERE ExtCardID = @ExtCardID and CardTypeID = @CardTypeID
  UPDATE BarcodeDetails SET Voided=1, RedeemedDate=getdate(), RedeemedLocationID=''-9'', RedeemedCSR=@VoidedCSR
         WHERE CustomerPK=@CustomerPK AND IssuingTransactionID = @IssuingTransactionID
         AND IssueDate = @IssueDate AND IssuingCostCenter = @IssuingCostCenter
  SELECT @@ROWCOUNT       
      
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_VoidAllCoupons] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pt_VoidCoupon.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_VoidCoupon.StoredProcedure.sql 27378 2011-08-08 17:56:18Z Lakshmi $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_VoidCoupon]    Script Date: 08/08/2011 16:44:20 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_VoidCoupon]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_VoidCoupon]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/** This stored procedure voids a uniquebarcode coupon. A value indicating the number of records updated is returned. This
value can only be a 1 or a 0 because the Barcode column is the primary key and hence
unique. If a matching code cannot be found, no update is performed and hence a 0 is returned **/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_VoidCoupon]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_VoidCoupon] @VoidUniqueBarCode NVARCHAR(12), @VoidedCSR BIGINT
                                                                       
                                                                                       
AS 
  UPDATE BarcodeDetails SET Voided=1, RedeemedDate=getdate(), RedeemedLocationID=''-9'', RedeemedCSR=@VoidedCSR
         WHERE Barcode=@VoidUniqueBarCode
  SELECT @@ROWCOUNT       
      
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_VoidCoupon] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/pa_UE_handleTransDownloadByStoreId.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_UE_handleTransDownloadByStoreId]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_UE_handleTransDownloadByStoreId]
GO

CREATE PROCEDURE [dbo].[pa_UE_handleTransDownloadByStoreId] @LocationId BIGINT,@EMPInstalled BIT=0
    
AS

BEGIN
CREATE TABLE #SvUsed
(
	LocalID BIGINT,
	ServerSerial INTEGER,
	NewExternalID NVARCHAR(400),
	QtyUsed INTEGER,
	LastUpdate DateTime
)
exec dbo.pa_CPE_TD_ActiveCustomers_Output @LocationId=@LocationId
--Get customer related record
exec dbo.pa_CPE_TD_CustomersOutput @LocationId=@LocationId

--Get card ids related data
exec dbo.pa_CPE_TD_CardIDsOutput @LocationId=@LocationId

--User removal record
 exec dbo.pa_CPE_TD_CustomerRemoval @LocationId=@LocationId
 
--Get savings to date related data
exec dbo.pa_CPE_TD_STDOutput @LocationId=@LocationId

--Get Groupmembership related data
exec dbo.pa_CPE_TD_GMOutput_Active @LocationId=@LocationId

--Get GroupMembership deleted related records
exec dbo.pa_CPE_TD_GMOutput_Deleted @LocationId=@LocationId

--Get points related data
exec dbo.pa_CPE_TD_PointsAdj @LocationId=@LocationId

--Get Stored Value related data
exec dbo.pa_CPE_TD_SVOutput_New @LocationId=@LocationId

--Get updated Stored value used data
Insert into #SvUsed exec dbo.pa_CPE_TD_SVOutput_Used @LocationId=@LocationId

SELECT CustomerPK  AS UserID, ExpireDate, ExternalID, OfferID AS IncentiveID, SVProgramID, Value ,SVU.QtyUsed as QtyUsed 
                           FROM StoredValue as SV Inner Join #SvUsed as SVU on 
                           SVU.LocalID = SV.LocalID AND SVU.ServerSerial = SV.ServerSerial where  SV.Deleted = 0 
                           UNION ALL 
                           SELECT Col3 AS UserID, Col10 AS ExpireDate, Col11 AS ExternalID, Col4 AS IncentiveID, Col3 AS SVProgramID, Col8 AS Value ,SVU.QtyUsed as QtyUsed 
                           FROM CPE_UploadTemp_SV as CPT INNER JOIN #SvUsed as SVU on 
                           CPT.Col1 = SVU.LocalID AND CPT.Col2 = SVU.ServerSerial


-- Get Reward distribution data 
exec dbo.pa_CPE_TD_RDOutput_Active @LocationId=@LocationId

if(@EMPInstalled=1)
Begin
--Get Preference  Removal Output
exec pa_CPE_TD_PrefValueRemovalOutput @LocationId=@LocationId

--Get data from Preference output
exec dbo.pa_CPE_TD_PrefsOutput @LocationId=@LocationId

--
exec dbo.pa_CPE_TD_PrefValueRemovalMVOutput @LocationId=@LocationId

exec dbo.pa_CPE_TD_PrefsMVOutput_Active @LocationId=@LocationId
END

END
GO
GRANT EXECUTE ON [dbo].[pa_UE_handleTransDownloadByStoreId] TO [Copient_Logix_uspRole] AS [dbo]
GO






-- BEGIN SCRIPT FOOTER ------------------------------------------------------

-- Add/Update the DBVersion function
IF OBJECT_ID ( N'dbo.DBVersion', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[DBVersion]
END
GO

CREATE FUNCTION [dbo].[DBVersion]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:46
    -- Build Version: 7.3.1.138972
    return '7.3.1.138972';
END
GO

GRANT EXECUTE ON [dbo].[DBVersion] TO [Copient_Logix_uspRole] AS [dbo]
GO


-- Add/Update the DBGenerated function
IF OBJECT_ID ( N'dbo.DBGenerated', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[DBGenerated]
END
GO

CREATE FUNCTION [dbo].[DBGenerated]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:46
    -- Build Version: 7.3.1.138972
    return '2019-08-19 11:58:46';
END
GO

GRANT EXECUTE ON [dbo].[DBGenerated] TO [Copient_Logix_uspRole] AS [dbo]
GO





-- Add/Update the LogixDBName function
IF OBJECT_ID ( N'dbo.LogixDBName', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[LogixDBName]
END
GO

CREATE FUNCTION [dbo].[LogixDBName]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:46
    -- Build Version: 7.3.1.138972
    return 'LogixXS';
END
GO

GRANT EXECUTE ON [dbo].[LogixDBName] TO [Copient_Logix_uspRole] AS [dbo]
GO


-- *********************************************
-- * GRANT EXECUTE USP and UDF SECTION         *
-- *********************************************
declare @CLRole as varchar(128)
set @CLRole = 'Copient_Logix_uspRole' --- Replace this with an appropriated role if different. Copient_Logix_uspRole is the recommended name for Logix.
IF EXISTS (select name from sys.database_principals where type='R' and name=@CLRole) BEGIN
  declare @uspudfName as varchar(128)
  declare uspCursor CURSOR FOR
    select name from sys.procedures where name not like 'sp[_]%'
    union select name from sys.objects where type='FN' and name not like 'fn_%'
    order by name FOR READ ONLY
  OPEN uspCursor
  FETCH uspCursor INTO @uspudfName
  WHILE @@FETCH_STATUS = 0 BEGIN
    EXECUTE('GRANT EXECUTE ON [' + @uspudfName + '] TO ' + @CLRole)
    FETCH uspCursor INTO @uspudfName
  END
  CLOSE uspCursor
  DEALLOCATE uspCursor
END
ELSE
    print 'Please create "@CLRole", or assign the right role in your system to @CLRole variable';
GO

print 'Completed LogixXS'
print DB_NAME() + ' DBVersion is now ' + [dbo].[DBVersion]()
print CURRENT_TIMESTAMP;


