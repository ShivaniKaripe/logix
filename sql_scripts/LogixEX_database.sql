-- -----------------------------------------------------------------------------------------------
-- LogixEX script
-- Generated by sqlcat_db.py ( $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $ )
-- Generated 2019-08-19 11:58:45
-- Build Version: 7.3.1.138972
-- -----------------------------------------------------------------------------------------------
print CURRENT_TIMESTAMP;
print 'Beginning LogixEX script on'
print @@VERSION;
print 'Using database ' + DB_NAME() + ' on ' + @@SERVERNAME;
print 'Running as user ' + SYSTEM_USER;

print 'Upgrading database ' + DB_NAME();
IF OBJECT_ID ( N'dbo.DBVersion', N'FN') IS NOT NULL
    print ' from DBVersion ' + [dbo].[DBVersion]();
print ' to 7.3.1.138972 (generated 2019-08-19 11:58:45)'

declare @dbn nvarchar(255)
set @dbn = db_name()

declare @error_msg_format nvarchar(512)
set @error_msg_format = CHAR(13) + CHAR(13) + 'THIS IS THE WRONG DATABASE (%s)' + CHAR(13) + CHAR(13)

IF db_name() = 'master'
BEGIN
    RAISERROR( @error_msg_format, 20, 1, @dbn ) WITH LOG, NOWAIT
END

IF OBJECT_ID ( N'dbo.LogixDBName', N'FN') IS NOT NULL
BEGIN
    IF [dbo].[LogixDBName]() <> 'LogixEX'
    BEGIN
        RAISERROR( @error_msg_format, 20, 1, @dbn ) WITH LOG, NOWAIT
    END
END

IF NOT EXISTS (SELECT * FROM fn_my_permissions (db_name(), 'DATABASE') WHERE permission_name='ALTER')
BEGIN
    declare @error_permission nvarchar(256)
    set @error_permission = CHAR(13) + CHAR(13) + 'This user does not have sufficient permissions to run this script. It must be run by a member of the sysadmin fixed server role or a user with ALTER TRACE and ALTER DATABASE permissions.' + CHAR(13) + CHAR(13)
    RAISERROR( @error_permission, 18, 1 ) WITH NOWAIT
END

SET NOCOUNT ON;

--
-- -- DEFAULT CONSTRAINT renaming code --
-- Creates a stored proc to rename mis-named DEFAULT CONSTRAINTs, calls that stored proc, then DROPs that stored proc when it is no longer needed.
--
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Logix_FixDefaultConstraintNames]') AND type in (N'P', N'PC'))
BEGIN
    DROP PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
END
GO

CREATE PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
AS
BEGIN

    SET NOCOUNT ON
    declare @keepgoing as bit
    set @keepgoing = 1
    while ( @keepgoing = 1 )
    BEGIN
        set @keepgoing = 0

        DECLARE @cmd as nvarchar(512);
		    DECLARE @DFcmd as nvarchar(256);
		    DECLARE @DFObject as nvarchar(256);
        SELECT TOP 1 @DFObject = 'DF_' + OBJECT_NAME(dc.parent_object_id) + '_' + columnList.COLUMN_NAME, @cmd = 'dbo.sp_rename ' + dc.name + ', DF_' + OBJECT_NAME(dc.parent_object_id) + '_' + columnList.COLUMN_NAME + ', OBJECT ;'
                            FROM sys.default_constraints as dc
                            INNER JOIN INFORMATION_SCHEMA.COLUMNS AS columnList ON
                                columnList.TABLE_NAME = OBJECT_NAME(dc.parent_object_id) AND columnList.ORDINAL_POSITION = dc.parent_column_id
                        WHERE dc.is_system_named = 1
                            and SUBSTRING ( dc.name, 1, 4 ) = 'DF__'
                            and object_name(dc.parent_object_id) not like 'sys[^_]%'
                            and object_name(dc.parent_object_id) not like 'MS[a-z]%'
                            and objectproperty(dc.parent_object_id, 'IsUserTable') = 1
                            and objectproperty(dc.parent_object_id, 'IsMSShipped') = 0

        IF @@ROWCOUNT > 0
        BEGIN
            print 'Renaming incorrectly named DEFAULT CONSTRAINT ( ' + @cmd + ' )'
			      IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(@DFObject) AND type = 'D')
			      BEGIN
			        SET @DFcmd = 'ALTER TABLE [dbo].[CPE_Incentives] DROP CONSTRAINT ' +@DFObject;
			        EXEC( @DFcmd );
			      END
            EXEC( @cmd );
            set @keepgoing = 1
        END

    END -- while

END -- Logix_FixDefaultConstraintNames
GO

EXEC [dbo].[Logix_FixDefaultConstraintNames]
GO

DROP PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
GO

-- DEFAULT CONSTRAINT renaming complete


-- END SCRIPT HEADER ------------------------------------------------------


--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/tables/ --
--
print 'processing tables/DBA.PD_ActivityMonitor.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	vii)	DBA.PD_ActivityMonitor

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_ActivityMonitor' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_ActivityMonitor(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_ActivityMonitor_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_ActivityMonitor_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Session_ID 						SMALLINT 			NOT NULL
			, User_Process 						CHAR(1) 			NULL
			, Login_Name						NVARCHAR(128) 		NOT NULL
			, Database_Name						NVARCHAR(128) 		NOT NULL
			, Task_State 						NVARCHAR(60) 		NOT NULL
			, Command 							NVARCHAR(50) 		NOT NULL
			, Application_Name					NVARCHAR(128) 		NOT NULL
			, Wait_Time_in_ms 					BIGINT 				NOT NULL
			, Wait_Type 						NVARCHAR(60) 		NOT NULL
			, Wait_Resource 					NVARCHAR(1024) 		NOT NULL
			, Blocked_By 						VARCHAR(30) 		NOT NULL
			, Head_Blocker 						VARCHAR(1) 			NOT NULL
			, Total_CPU_ms 						INT 				NOT NULL
			, Total_Physical_IO_in_MB			BIGINT 				NULL
			, Memory_USE_KB 					INT 				NULL
			, Open_Transactions 				INT 				NOT NULL
			, Login_Time 						DATETIME 			NOT NULL
			, Last_Request_Start_Time 			DATETIME 			NOT NULL
			, [Host_Name] 						NVARCHAR(128) 		NOT NULL
			, Net_Address						VARCHAR(48) 		NOT NULL
			, Execution_Context_ID 				INT 				NOT NULL
			, Request_ID 						INT 				NOT NULL
		) 
		ON [PRIMARY]
ELSE
	PRINT 'DBA.PD_ActivityMonitor is already added'
GO

--Changing column precision from 16 to 50
IF COLUMNPROPERTY( OBJECT_ID( '[DBA].[PD_ActivityMonitor]' ), 'Command', 'PRECISION' ) < 50 
	ALTER TABLE [DBA].[PD_ActivityMonitor] ALTER COLUMN [Command] [NVARCHAR](50) NOT NULL
GO


PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_FKs_With_NoIndexes.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	v)	DBA.PD_FKs_With_NoIndexes

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_FKs_With_NoIndexes' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_FKs_With_NoIndexes (
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_FKs_With_NoIndexes_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_FKs_With_NoIndexes_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Foreign_Key_Name					VARCHAR(100)
			, Relationship						VARCHAR(250)
			, Parent_Table_Index_State			VARCHAR(100)
			, Referenced_Table_Index_State		VARCHAR(100)
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_FKs_With_NoIndexes is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_IndexPhysicalStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	vi)	DBA.PD_IndexPhysicalStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_IndexPhysicalStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_IndexPhysicalStats (
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_IndexPhysicalStats					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_IndexPhysicalStats_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Schema_Name]						VARCHAR(20)			NOT NULL
			, [Table_Name]						VARCHAR(100)		NOT NULL
			, [Index_Name]						VARCHAR(100)		NOT NULL
			, [Database_ID]						INT					NOT NULL
			, [Object_ID]						INT					NOT NULL
			, [Index_ID]						INT					NOT NULL
			, Partition_Number					INT					NULL
			, Index_Type_Desc					VARCHAR(30)			NULL
			, Alloc_Unit_Type_Desc				VARCHAR(30)			NULL
			, Index_Depth						INT					NULL
			, Index_Level						INT					NULL
			, Avg_fragmentation_in_percent		NUMERIC(10,2)		NULL
			, Fragment_count					INT					NULL
			, Avg_fragment_size_in_pages		NUMERIC(10,2)		NULL
			, Page_count						INT					NULL
			, Avg_page_space_used_in_percent	NUMERIC(10,2)		NULL
			, Created_By						VARCHAR(50)			NOT NULL		CONSTRAINT		DF_PD_IndexPhysicalStats_Created_By			DEFAULT								SYSTEM_USER
		)
		ON  [PRIMARY]
	ELSE
		PRINT 'DBA.PD_IndexPhysicalStats is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_Index_Usage.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	iv)	DBA.PD_Index_Usage

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_Index_Usage' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_Index_Usage(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_Index_Usage_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_Index_Usage_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Category							VARCHAR(20)			NOT NULL
			, Table_Name						VARCHAR(50)			NOT NULL
			, Index_Name						VARCHAR(100)		NULL
			, User_Seeks						BIGINT				NULL
			, User_Scans						BIGINT				NULL
			, User_Lookups						BIGINT				NULL
			, User_Updates						BIGINT				NULL
			, Last_User_Scan					DATETIME			NULL
			, Last_User_Seek					DATETIME			NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_Index_Usage is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_Missing_Indexes.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	iii)	DBA.PD_Missing_Indexes

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_Missing_Indexes' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_Missing_Indexes(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_Missing_Indexes_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_Missing_Indexes_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Category							VARCHAR(25)			NOT NULL
			, Total_Cost						BIGINT				NULL
			, Average_User_Impact				NUMERIC(5,2)		NULL
			, Table_Name						VARCHAR(50)			NULL
			, Equality_Usage					VARCHAR(500)		NULL		
			, InEquality_Usage					VARCHAR(500)		NULL
			, Include_Columns					VARCHAR(500)		NULL
			, Unique_Compiles					BIGINT				NULL
			, User_Scans						BIGINT				NULL
			, User_Seeks						BIGINT				NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_Missing_Indexes is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_ServerHardware.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	xi)		DBA.PD_ServerHardware

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_ServerHardware' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_ServerHardware
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_ServerHardware_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_ServerHardware_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Sql and OS Version]				VARCHAR(200)		NULL
			, [NoF Physical CPUs]				TINYINT				NULL
			, [NoF Logical CPUs]				TINYINT				NULL
			, [Physical Mem in GB]				NUMERIC(5,2)		NULL
			, [Available Physical Mem in GB]	NUMERIC(5,2)		NULL
			, [Total Page File Size in GB]		NUMERIC(5,2)		NULL
			, [System Memory State]				VARCHAR(20)			NULL
			, [Is it a VM]						VARCHAR(10)			NULL
			, [SqlServer Instance Start Time]	DATETIME			NULL
		) ON  [PRIMARY]
	ELSE
		PRINT 'DBA.PD_ServerHardware is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_TableStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	x)		DBA.PD_TableStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_TableStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_TableStats
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_TableStats_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_TableStats_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Table_Name						VARCHAR(100)		NOT NULL
			, Index_Name						VARCHAR(100)			NULL
			, [Index_Type]						VARCHAR(70)			NOT	NULL
			, RowCounts							BIGINT				NOT NULL
			, TotalSpaceKB						INT					NOT	NULL
			, Is_Primary_Key					BIT					NOT NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_TableStats is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_TopQueries.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	ii)	DBA.PD_TopQueries

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects As O WHERE O.name = N'PD_TopQueries' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_TopQueries(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_TopQueries_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_TopQueries_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Top_Category]					VARCHAR(25)			NOT NULL
			, Query								VARCHAR(MAX)		NOT NULL
			, Execution_Count					BIGINT				NULL
			, Average_CPU_Used_in_S				INT					NULL
			, Total_Logical_Reads				BIGINT				NULL
			, Average_logical_reads				BIGINT				NULL
			, Last_Logical_Reads				INT					NULL
			, Total_Logical_Writes				BIGINT				NULL
			, Last_Logical_Writes				INT					NULL
			, Total_Worker_Time					BIGINT				NULL
			, Last_Worker_Time					BIGINT				NULL
			, Total_elapsed_time_in_S			INT					NULL
			, Last_elapsed_time_in_S			INT					NULL
			, Last_Execution_Time				INT					NULL
		) ON  [PRIMARY]
ELSE
        PRINT 'DBA.PD_TopQueries is already added'
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Execution_Count') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Execution_Count] BIGINT NULL
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Total_Logical_Reads') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Total_Logical_Reads] BIGINT NULL
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Total_Logical_Writes') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Total_Logical_Writes] BIGINT NULL
GO

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_UpdateStatistics.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	ix)		DBA.PD_UpdateStatistics

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_UpdateStatistics' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_UpdateStatistics
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_UpdateStatistics_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_UpdateStatistics_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Table_Name						VARCHAR(100)		NOT NULL
			, Statistic							VARCHAR(100)		NOT NULL
			, [Statistic Type]					VARCHAR(100)		NOT	NULL
			, [Stats Last Updated]				DATETIME				NULL
			, ModifiedRows						BIGINT					NULL
			, No_Recompute						BIT					NOT NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_UpdateStatistics is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_WaitStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	i)	DBA.PD_WaitStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_WaitStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_WaitStats(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_WaitStats_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_WaitStats_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, WaitType							NVARCHAR(60)		NOT NULL	
			, Wait_S							DECIMAL(14,2)		NULL
			, Resource_S						DECIMAL(14,2)		NULL
			, Signal_S							DECIMAL(14,2)		NULL
			, WaitCount							BIGINT				NOT NULL
			, Percentage						DECIMAL(4,2)		NULL
			, AvgWait_S							DECIMAL(14,4)		NULL
			, AvgRes_S							DECIMAL(14,4)		NULL
			, AvgSig_S							DECIMAL(14,4)		NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_WaitStats is already added'
	GO
	
	
PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'		


--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/views/ --
--

--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/functions/ --
--

--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/storedprocedures/ --
--
print 'processing storedprocedures/PD_Job.sql'; 
--
GO
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
--
--		Purpose		:	Create AMS_PD job
--		Author		:	Uday K. Sangepu for NCR on December 5, 2012 
--
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

--
--	Start of script:	PD_Job.sql
--

SET NOCOUNT ON

BEGIN TRY

	BEGIN TRANSACTION Add_AMS_PD_Job

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	I)	Create Job: AMS_PD
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		DECLARE @JobID		UNIQUEIDENTIFIER
				, @ERR 		INT
				, @DBNAME	SYSNAME
				, @JOBNAME  SYSNAME

		-- Get the actual database name into a variable of SYSNAME datatype
		SELECT @DBNAME = DB_NAME() 
		SELECT @JOBNAME = N'AMS_PD_' + @DBNAME
		--print 'JOBNAME: ' + @JOBNAME
		
		--Get jobstep name to verify if it is exists for each jobstep
        DECLARE @StepName Varchar(50)
        Select @StepName = step_name from msdb.dbo.sysjobsteps where job_id = @JobID and database_name = @DBNAME  		

		
		--	EXECUTE msdb.dbo.sp_delete_job @job_name = N'AMS_PD'
		If not exists(select * from msdb.dbo.sysjobs WHERE job_id = @jobId and name  = @JOBNAME)	
	Begin
		EXECUTE msdb.dbo.sp_add_job 
				  @job_name					=	@JOBNAME
				, @enabled					=	1
				, @description				=	N'Monitor and Gather performance diagnostic metrics for the database server'
				, @owner_login_name			=	N'sa'
				, @notify_level_eventlog	=	2
				, @job_id					=	@JobID OUTPUT

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_job failed for AMS_PD'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END

		SELECT @JobID [AMS_PD JobID]
	End	

		
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	II)	Create Job steps
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

		--
		--	Step 1: Start AMS_PD Job
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)	
	 Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	1
				, @step_name				=	N'Start AMS_PD Job' 
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Start AMS_PD Job
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													DECLARE   @JobStartTime	DATETIME = GETDATE()
													PRINT ''Performance Diagnostics Job Start: '' + CONVERT(VARCHAR, @JobStartTime, 109)		--	With Milli Seconds
													PRINT ''------------------------------------------------------------------------------------------------------''
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 1: Start AMS_PD Job'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
    End
		--
		--	Step 2: WaitStats
		--
       If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	2
				, @step_name				=	N'WaitStats'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather Wait Stats 
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													;WITH	Waits 
													AS
													(
														SELECT wait_type										AS [Wait_Type]
															, wait_time_ms / 1000.0 							AS WaitS
															, (wait_time_ms - signal_wait_time_ms) / 1000.0 	AS ResourceS
															, signal_wait_time_ms / 1000.0 						AS SignalS
															, waiting_tasks_count 								AS WaitCount
															, 100.0 * wait_time_ms / SUM(wait_time_ms) OVER () 	AS Percentage
															, ROW_NUMBER() OVER ( ORDER BY wait_time_ms DESC) 	AS [RowNum]
														FROM   sys.dm_os_wait_stats
														WHERE  wait_type NOT IN (	''CLR_SEMAPHORE'',				''LAZYWRITER_SLEEP'',				''RESOURCE_QUEUE'',						''SLEEP_TASK'',				''SLEEP_SYSTEMTASK''
																					, ''SQLTRACE_BUFFER_FLUSH'',		''WAITFOR'',						''LOGMGR_QUEUE'',							''CHECKPOINT_QUEUE'',			''REQUEST_FOR_DEADLOCK_SEARCH''
																					, ''XE_TIMER_EVENT'',				''BROKER_TO_FLUSH'',				''BROKER_TASK_STOP'',						''CLR_MANUAL_EVENT'',			''CLR_AUTO_EVENT''
																					, ''DISPATCHER_QUEUE_SEMAPHORE'', ''FT_IFTS_SCHEDULER_IDLE_WAIT'',	''XE_DISPATCHER_WAIT'',					''XE_DISPATCHER_JOIN'',		''BROKER_EVENTHANDLER''
																					, ''TRACEWRITE'',					''FT_IFTSHC_MUTEX'',				''SQLTRACE_INCREMENTAL_FLUSH_SLEEP'',		''BROKER_RECEIVE_WAITFOR'',	''ONDEMAND_TASK_QUEUE''
																					, ''DBMIRROR_EVENTS_QUEUE'',		''DBMIRRORING_CMD'',				''BROKER_TRANSMITTER'',					''SQLTRACE_WAIT_ENTRIES'',	''SLEEP_BPOOL_FLUSH''
																					, ''SQLTRACE_LOCK''
																				)	--	These are filtered out as these are usually benign
													)
													INSERT INTO DBA.PD_WaitStats(WaitType, Wait_S, Resource_S, Signal_S, WaitCount, Percentage, AvgWait_S, AvgRes_S, AvgSig_S)
													SELECT    TOP 10
															  W1.wait_type 												AS WaitType
															, CAST (W1.WaitS AS DECIMAL (14, 2)) 						AS Wait_S
															, CAST (W1.ResourceS AS DECIMAL (14, 2)) 					AS Resource_S
															, CAST (W1.SignalS AS DECIMAL (14, 2)) 						AS Signal_S
															, W1.WaitCount 												AS WaitCount
															, CAST (W1.Percentage AS DECIMAL (4, 2)) 					AS Percentage
															, CAST ((W1.WaitS / W1.WaitCount) AS DECIMAL (14, 4)) 		AS AvgWait_S
															, CAST ((W1.ResourceS / W1.WaitCount) AS DECIMAL (14, 4)) 	AS AvgRes_S
															, CAST ((W1.SignalS / W1.WaitCount) AS DECIMAL (14, 4)) 	AS AvgSig_S
													FROM Waits AS W1
													INNER JOIN Waits AS W2
														ON W2.RowNum <= W1.RowNum
													GROUP BY  W1.RowNum
															, W1.wait_type
															, W1.WaitS
															, W1.ResourceS
															, W1.SignalS
															, W1.WaitCount
															, W1.Percentage
													HAVING   SUM(W2.Percentage) - W1.Percentage < 95; -- percentage threshold
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 2: WaitStats'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End										

		--
		--	Step 3: Top_N_Queries
		--
        If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	3
				, @step_name				=	N'Top_N_Queries'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather queries that take the most resources
													--				i)		Total CPU usage
													--				ii)		Average CPU usage
													--				iii)	Total Logial IO
													--				iv)		Average Logical IO
													--
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													--
													--	i)	Total CPU usage	
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT    TOP 10 
															  ''Top Total CPU Time''																	AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													--		, qp.query_plan																			AS	[Query_Plan]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY qs.total_worker_time DESC; 


													--
													--	ii)	Top Average CPU Time
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT    TOP 10 
															  ''Top Average CPU Time''																AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													--		, qp.query_plan																			AS	[Query_Plan]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Average_CPU_Used_in_S] DESC; -- CPU time

													--
													--	iii)	Total Logical IO
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT	TOP 10 
															''Top Total Logical IO''																	AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Total_Logical_Reads] DESC; 


													--
													--	iv)	Average Logical IO
													--
													INSERT INTO DBA.PD_TopQueries 	(Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT	TOP 10 
															''Top Average Logical IO''																AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Average_logical_reads] DESC; 
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 3: Top_N_Queries'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
     End
												
		--
		--	Step 4: Index Stats
		--
        If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	4
				, @step_name				=	N'Index_Stats'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather necessary stats on indexes 
													--					i)		Missing Indexes
													--					ii)		Index UsageUsage
													--					iii)	Do All FK have indexes on them (from Dave Levy) 
													--					iv)		Index Stats (internal & external fragmentation, allocation_unit_type, etc)

													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


													--
													--	i)	Missing Indexes
													--
														INSERT INTO DBA.PD_Missing_Indexes(Category, Total_Cost, Average_User_Impact, Table_Name, Equality_Usage, InEquality_Usage, Include_Columns, Unique_Compiles, User_Scans, User_Seeks)
														SELECT  TOP 25
																  ''Missing Indexes''		AS [Category]
																, ROUND(avg_total_user_cost * avg_user_impact * (user_seeks + user_scans),0) AS [Total Cost]
																, avg_user_impact		AS [Average_User_Impact]
																, statement				AS [Table_Name]
																, equality_columns		AS [Equality_Usage]
																, inequality_columns	AS [Inequality_Usage]
																, included_columns		AS [Include_Cloumns]
																, s.unique_compiles		AS [Unique_Compiles]
																, s.user_scans			AS [User_Scans]
																, s.user_seeks			AS [User_Seeks]
														FROM sys.dm_db_missing_index_groups g 
														INNER JOIN sys.dm_db_missing_index_group_stats s 
															ON s.group_handle = g.index_group_handle 
														INNER JOIN sys.dm_db_missing_index_details d 
															ON d.index_handle = g.index_handle
														ORDER BY [Total Cost] DESC;

													--
													--	ii)	Index Usage
													--

														INSERT INTO DBA.PD_Index_Usage(Category, Table_Name, Index_Name, User_Seeks, User_Scans, User_Lookups, User_Updates, Last_User_Scan, Last_User_Seek)
														SELECT     ''Index Usage''
																, OBJECT_NAME(S.[OBJECT_ID])
																, I.[NAME]
																, USER_SEEKS
																, USER_SCANS
																, USER_LOOKUPS
																, USER_UPDATES
																, last_user_scan
																, last_system_seek
														FROM SYS.DM_DB_INDEX_USAGE_STATS AS S
														INNER JOIN SYS.INDEXES AS I
															ON I.[OBJECT_ID] = S.[OBJECT_ID]
															AND I.INDEX_ID = S.INDEX_ID
														WHERE   OBJECTPROPERTY(S.[OBJECT_ID],''IsUserTable'') = 1 
														AND S.database_id = DB_ID()
														And OBJECT_NAME(S.[OBJECT_ID]) not like ''%PD_%''


													--
													--	iii)	Do All FK have indexes on them (from Dave Levy) 
													--	

														INSERT INTO DBA.PD_FKs_With_NoIndexes (Foreign_Key_Name, Relationship, Parent_Table_Index_State, Referenced_Table_Index_State)
														SELECT		OBJECT_NAME(fk.object_id) AS [foreign_key_name],
																	QUOTENAME(SCHEMA_NAME(pt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.parent_object_id)) + '' -> '' + QUOTENAME(SCHEMA_NAME(rt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.referenced_object_id)) AS [relationship],
																	CASE 
																			WHEN COUNT(pic.column_id) < COUNT(DISTINCT fkc.constraint_column_id) 
																				THEN ''No Covering Index on '' + QUOTENAME(SCHEMA_NAME(pt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.parent_object_id)) 
																			ELSE ''Covered'' 
																	END AS parent_table_index_state,
																	CASE	
																			WHEN COUNT(ric.column_id) < COUNT(DISTINCT fkc.constraint_column_id) 
																				THEN ''No Covering Index on '' + QUOTENAME(SCHEMA_NAME(rt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.referenced_object_id)) 
																			ELSE ''Covered'' 
																	END AS referenced_table_index_state
														FROM		sys.foreign_keys fk
														INNER JOIN sys.foreign_key_columns fkc
															ON fk.object_id = fkc.constraint_object_id
														INNER JOIN sys.tables pt
															ON fkc.parent_object_id = pt.object_id
														INNER JOIN sys.tables rt
															ON fkc.referenced_object_id = rt.object_id
														LEFT OUTER JOIN sys.indexes pix
															ON fkc.parent_object_id = pix.object_id
															AND pix.is_disabled = 0
															AND pix.is_hypothetical = 0
														LEFT OUTER JOIN sys.index_columns pic
															ON fkc.parent_column_id = pic.column_id
															AND pix.object_id = pic.object_id
															AND pix.index_id = pic.index_id
															AND pic.index_column_id = fkc.constraint_column_id
														LEFT OUTER JOIN sys.indexes rix
															ON fkc.referenced_object_id = rix.object_id
															AND rix.is_disabled = 0
															AND rix.is_hypothetical = 0
														LEFT OUTER JOIN sys.index_columns ric
															ON fkc.referenced_column_id = ric.column_id
															AND rix.object_id = ric.object_id
															AND rix.index_id = ric.index_id
															AND ric.index_column_id = fkc.constraint_column_id
														GROUP BY	fk.object_id,
																	fk.parent_object_id,
																	pt.schema_id,
																	fk.referenced_object_id,
																	rt.schema_id


													--
													--	iv)		Index Stats (internal & external fragmentation, allocation_unit_type, etc)
													--

														--
														--	Metrics to Measure the progress
														--
														--	Variables
														DECLARE   @IndexStats_Sql 	NVARCHAR(MAX) =	''''
																, @SqlLength		INT

														--	Generate SQL statement to run sys.dm_db_index_physical_stats query on all the indexes			
														SELECT @IndexStats_Sql  = @IndexStats_Sql + ''SELECT '''''' + schema_name(O.schema_id) + '''''' AS [Schema_Name], '''''' + OBJECT_NAME(O.object_id) + '''''' AS [Table_Name], '''''' + I.name + '''''' AS [Index_Name], database_id, object_id, index_id, partition_number, index_type_desc, alloc_unit_type_desc, index_depth, index_level, CONVERT(NUMERIC(10,2), avg_fragmentation_in_percent), fragment_count, CONVERT(NUMERIC(10,2), avg_fragment_size_in_pages), page_count, CONVERT(NUMERIC(10,2), avg_page_space_used_in_percent) FROM sys.dm_db_index_physical_stats('' + CONVERT(VARCHAR, DB_ID()) + '', '' + CONVERT(VARCHAR, O.object_id) + '','' + CONVERT(VARCHAR, I.index_id) + '', NULL, DEFAULT) UNION ALL ''
														FROM sys.indexes AS I
														INNER JOIN sys.objects AS O 
															ON O.object_id = I.object_id
														WHERE I.index_id > 0
														ORDER BY OBJECT_NAME(O.object_id)

														--	Remove ''UNION ALL'' at the end
														SELECT @SqlLength = LEN(@IndexStats_Sql)
														SELECT @IndexStats_Sql = SUBSTRING(@IndexStats_Sql, 1, @SqlLength-9)
														
														--	INSERT  result set into DBADB table
														INSERT INTO DBA.PD_IndexPhysicalStats ([Schema_Name], [Table_Name], [Index_Name], [Database_ID], [Object_ID], [Index_ID], Partition_Number, Index_Type_Desc, Alloc_Unit_Type_Desc, Index_Depth, Index_Level, Avg_fragmentation_in_percent, Fragment_count, Avg_fragment_size_in_pages, Page_count, Avg_page_space_used_in_percent) 
														EXEC sp_ExecuteSql @stmt = @IndexStats_Sql 
												'


		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 4: Index Stats'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End											
		--
		--	Step 5: Activity Monitor
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	5
				, @step_name				=	N'Activity_Monitor'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'

													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Take a snapshot of Activity Monitor 
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_ActivityMonitor
													(		 
														  Session_ID 				
														, User_Process 				
														, Login_Name				
														, Database_Name				
														, Task_State 				
														, Command 					
														, Application_Name				
														, Wait_Time_in_ms 			
														, Wait_Type 				
														, Wait_Resource 			
														, Blocked_By 				
														, Head_Blocker 				
														, Total_CPU_ms 				
														, Total_Physical_IO_in_MB	
														, Memory_USE_KB 			
														, Open_Transactions 		
														, Login_Time 				
														, Last_Request_Start_Time 	
														, Host_Name 				
														, Net_Address					
														, Execution_Context_ID 			
														, Request_ID 					
													)
													SELECT 
														  Session_ID 				=	s.session_id
														, User_Process 				=	CONVERT(CHAR(1), s.is_user_process)
														, Login_Name				=	s.login_name
														, Database_Name				=	ISNULL(DB_NAME(p.dbid), N'''')
														, Task_State 				=	ISNULL(t.task_state, N'''')
														, Command 					=	ISNULL(r.command, N'''')
														, Application_Name 			=	ISNULL(s.program_name, N'''')
														, Wait_Time_in_ms 			=	ISNULL(w.wait_duration_ms, 0)
														, Wait_Type 				=	ISNULL(w.wait_type, N'''')
														, Wait_Resource 			=	ISNULL(w.resource_description, N'''')
														, Blocked_By 				=	ISNULL(CONVERT (VARCHAR, w.blocking_session_id), '''')
														, Head_Blocker 				=	CASE
																							-- session has an active request, is blocked, but is blocking others or session is idle but has an open tran and is blocking others
																							WHEN r2.session_id IS NOT NULL AND (r.blocking_session_id = 0 OR r.session_id IS NULL) THEN ''1''
																							-- session is either not blocking someone, or is blocking someone but is blocked by another party
																							ELSE ''''
																						END
														, Total_CPU_ms 				= s.cpu_time
														, Total_Physical_IO_in_MB	= (s.reads + s.writes) * 8 / 1024
														, Memory_USE_KB 			= s.memory_usage * 8192 / 1024
														, Open_Transactions 		= ISNULL(r.open_transaction_count,0)
														, Login_Time 				= s.login_time
														, Last_Request_Start_Time 	= s.last_request_start_time
														, Host_Name 				= ISNULL(s.host_name, N'''')
														, Net_Address				= ISNULL(c.client_net_address, N'''')
														, Execution_Context_ID 		= ISNULL(t.exec_context_id, 0)
														, Request_ID 				= ISNULL(r.request_id, 0)
													--   [Workload Group] 			= ISNULL(g.name, N'''')
													FROM sys.dm_exec_sessions s 
													LEFT OUTER JOIN sys.dm_exec_connections c 
														ON (s.session_id = c.session_id)
													LEFT OUTER JOIN sys.dm_exec_requests r 
														ON (s.session_id = r.session_id)
													LEFT OUTER JOIN sys.dm_os_tasks t 
														ON (r.session_id = t.session_id AND r.request_id = t.request_id)
													LEFT OUTER JOIN (
																		-- In some cases (e.g. parallel queries, also waiting for a worker), one thread can be flagged as
																		-- waiting for several different threads.  This will cause that thread to show up in multiple rows
																		-- in our grid, which we don''t want.  Use ROW_NUMBER to select the longest wait for each thread,
																		-- and use it as representative of the other wait relationships this thread is involved in.
																		SELECT *, ROW_NUMBER() OVER (PARTITION BY waiting_task_address ORDER BY wait_duration_ms DESC) AS row_num
																		FROM sys.dm_os_waiting_tasks
																	) AS w 
														ON (t.task_address = w.waiting_task_address) 
														AND w.row_num = 1
													LEFT OUTER JOIN sys.dm_exec_requests r2 
														ON (s.session_id = r2.blocking_session_id)
													--LEFT OUTER JOIN sys.dm_resource_governor_workload_groups g ON (g.group_id = s.group_id)	--TAKE THIS dmv OUT TO WORK IN 2005
													LEFT OUTER JOIN sys.sysprocesses p 
														ON (s.session_id = p.spid)
													ORDER BY s.session_id;
				
				'			
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 6: Activity Monitor'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End

		--
		--	Step 6: Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin	
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	6
				, @step_name				=	N'Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	List Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages
													--	Author	:	Faizan Khundmiri for AMS (NCR) on March 5, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_TableStats(Table_Name, Index_Name, Index_Type, RowCounts, TotalSpaceKB, Is_Primary_Key)
													SELECT    so.name																			AS [Table_Name]
															, si.name																			AS [Index_Name]
															, CASE	WHEN si.is_primary_key = 0 and si.type = 0 THEN ''HEAP''
																	WHEN si.is_primary_key = 1 and si.type = 2 THEN ''PrimaryKey_NonClustered''
																	WHEN si.is_primary_key = 0 and si.type = 2 THEN ''Non-Clustered''
																	ELSE ''Clustered''	
															  END																				AS	[Index_Type]
															, p.Rows																			AS	[RowCounts]
															, SUM(a.total_pages) * 8															AS	[TotalSpaceKB]
															, si.is_primary_key																	AS	[Is_Primary_Key]
													FROM sys.indexes si  
													INNER JOIN sys.objects so 
														ON	si.[object_id] = so.[object_id] 
													INNER JOIN sys.partitions AS p 
														ON	si.Object_id = p.object_id AND si.Index_id = p.index_id
													INNER JOIN sys.Allocation_units AS a
														ON   p.partition_id = a.container_id
													WHERE so.type = ''U''    --Only get indexes for User Created Tables 
													GROUP BY so.name , si.name , si.type_desc , p.Rows , si.is_primary_key , si.type
													ORDER BY so.name
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 6: Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 7: Check Last Update Statistics
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
      Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	7
				, @step_name				=	N'Check Last Update Statistics'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	List Last Update Statistics
													--	Author	:	Faizan Khundmiri for AMS (NCR) on March 5, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_UpdateStatistics(Table_Name, Statistic, [Statistic Type], [Stats Last Updated], ModifiedRows,No_Recompute)
													SELECT    sch.name + ''.'' + so.name													AS [Table_Name]
															, ss.name																		AS [Statistic]
															, CASE
																WHEN ss.auto_Created = 0 AND ss.user_created = 0 THEN ''Index Statistic'' 
																WHEN ss.auto_created = 0 AND ss.user_created = 1 THEN ''User Created'' 
																WHEN ss.auto_created = 1 AND ss.user_created = 0 THEN ''Auto Created'' 
																END																			AS [Statistic Type] 
															, STATS_DATE(i.[id], i.indid) 													AS [Stats Last Updated]
															, i.rowmodctr																	AS [ModifiedRows]
															, ss.No_Recompute																AS [No_Recompute]
													FROM sys.stats ss 
													JOIN sys.objects so 
														ON	ss.object_id = so.object_id
													JOIN sysindexes i
													     ON so.object_id = i.id
													JOIN sys.schemas sch
															ON   so.schema_id = sch.schema_id
													--OUTER APPLY sys.dm_db_stats_properties(so.object_id, ss.stats_id) AS sp										   
													WHERE so.TYPE = ''U''          
													ORDER BY STATS_DATE(i.[id], i.indid) DESC;
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 7: Check Last Update Statistics'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 8: Check Sql Hardware Information
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	8
				, @step_name				=	N'Check Sql Hardware Information'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather Hardware information of the Sql Server machine
													--	Author	:	Uday K. Sangepu on March 6, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													WITH ServerHardware ([Sql and OS Version], [NoF Physical CPUs], [NoF Logical CPUs], [Physical Mem in GB], [Available Physical Mem in GB], [Total Page File Size in GB], [System Memory State], [Is it a VM], [SqlServer Instance Start Time]) AS 
													(
														--	Memory
														SELECT	  
																  NULL																	AS [Sql and OS Version]
																, NULL																	AS [NoF Physical CPUs]
																, NULL																	AS [NoF Logical CPUs]
																, CONVERT(NUMERIC(5,2), total_physical_memory_kb/(1024*1024.0))			AS [Physical Mem in GB]
																, CONVERT(NUMERIC(5,2), available_physical_memory_kb/(1024*1024.0))		AS [Available Physical Mem in GB]
																, CONVERT(NUMERIC(5,2), total_page_file_kb/(1024*1024.0))				AS [Total Page File Size in GB]
																, CONVERT(VARCHAR(20), system_memory_state_desc)						AS [System Memory State]
																, NULL																	AS [Is it a VM]
																, NULL																	AS [SqlServer Instance Start Time]
														FROM sys.dm_os_sys_memory
														UNION 
														--	CPU
														SELECT	  
																  CONVERT(VARCHAR(200), @@VERSION)										AS [Sql and OS Version]
																, cpu_count/hyperthread_ratio											AS [NoF Physical CPUs]
																, cpu_count																AS [NoF Logical CPUs]
																, NULL																	AS [Physical Mem in GB]
																, NULL																	AS [Available Physical Mem in GB]
																, NULL																	AS [Total Page File Size in GB]
																, NULL																	AS [System Memory State]
																, CONVERT(VARCHAR(10), virtual_machine_type_desc)						AS [Is it a VM]
																, sqlserver_start_time													AS [SqlServer Instance Start Time]
														FROM sys.dm_os_sys_info
													)
													--	SELECT * FROM ServerHardware
													INSERT INTO DBA.PD_ServerHardware (	[Sql and OS Version]
																					, [NoF Physical CPUs]
																					, [NoF Logical CPUs]
																					, [Physical Mem in GB]
																					, [Available Physical Mem in GB]
																					, [Total Page File Size in GB]
																					, [System Memory State]
																					, [Is it a VM]
																					, [SqlServer Instance Start Time]
																					)
													SELECT    MAX([Sql and OS Version])					AS [Sql and OS Version]
															, MAX([NoF Physical CPUs])					AS [NoF Physical CPUs]
															, MAX([NoF Logical CPUs])					AS [NoF Logical CPUs]
															, MAX([Physical Mem in GB])					AS [Physical Mem in GB]
															, MAX([Available Physical Mem in GB])		AS [Available Physical Mem in GB]
															, MAX([Total Page File Size in GB])			AS [Total Page File Size in GB]
															, MAX([System Memory State])				AS [System Memory State]
															, MAX([Is it a VM])							AS [Is it a VM]
															, MAX([SqlServer Instance Start Time])		AS [SqlServer Instance Start Time]
													FROM ServerHardware
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 9: Check Sql Hardware Information'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 9: Purge
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	9
				, @step_name				=	N'Purge'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	1
				, @on_success_step_id		=	0
				, @on_fail_action			=	2
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Purge data collected above periodically			Retention										
													--			i)		DBA.PD_WaitStats							6 months
													--			ii)		DBA.PD_TopQueries							6 months
													--			iii)	DBA.PD_Missing_Indexes						6 months
													--			iv)		DBA.PD_Index_Usage							6 months
													--			v)		DBA.PD_FKs_With_NoIndexes					6 months
													--			vi)		DBA.PD_IndexPhysicalStats					6 months
													--			vii)	DBA.PD_ActivityMonitor						6 months
													--			viii)	DBA.PD_Duplicate_Indexes					6 months
													--          ix)     DBA.PD_TableStats 						    6 months
													--			x)      DBA.PD_UpdateStatistics 					6 months
													--			xi)     DBA.PD_ServerHardware						6 months
													--			xii)	DBA.PD_PerfCounters							6 months        
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--				On March 5th, 2013 Faizan Added DBA.PD_TableStats, DBA.PD_UpdateStatistics, DBA.PD_PerfCounters
													--				On March 6th 2013 Uday K. Sangepu added DBA.PD_ServerHardware
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													--
													--	Purge data older than retention period (6 months)
													--
									
														
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On < DATEADD(MM, -7, GETDATE())


														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On < DATEADD(MM, -7, GETDATE())
														
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On < DATEADD(MM, -7, GETDATE())
														
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														'			
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 11: Purge'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	III)	Create Schedule
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		DECLARE @ScheduleID	INT

		EXECUTE msdb.dbo.sp_add_schedule
				  @schedule_name			=	'Daily_At_10PM'
				, @enabled					=	1
				, @freq_type				=	4
				, @freq_interval			=	1
				, @freq_subday_type			=	0
				, @freq_subday_interval		=	0
				, @active_start_date		=	20130101
				, @active_end_date			=	99991231
				, @active_start_time		=	220000
				, @active_end_time			=	235959
				, @schedule_id				=	@ScheduleID OUTPUT

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_schedule failed for Daily_At_10PM'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
			
		SELECT @ScheduleID AS [Job Schedule]		
		
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	IV)	Create Schedule
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		EXECUTE msdb.dbo.sp_attach_schedule
				  @job_id					=	@JobID
				, @schedule_id				=	@ScheduleID

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_attach_schedule failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END


		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	V)	Modify Job
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		EXECUTE msdb.dbo.sp_update_job 
				  @job_id					=	@JobID
				, @start_step_id			=	1
		
		SELECT @ERR = @@ERROR

		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_update_job failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	VI)	Add Job To Server
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
				
		EXECUTE msdb.dbo.sp_add_jobserver
				  @job_id					=	@JobID
				, @server_name				=	N'(LOCAL)'


		SELECT @ERR = @@ERROR

		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobserver failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
				
		COMMIT TRANSACTION Add_AMS_PD_Job	
END TRY

BEGIN CATCH
    DECLARE @ErrMsg NVARCHAR(max)
    DECLARE @ErrProc NVARCHAR(max)
    DECLARE @ErrLine INTEGER
	SELECT 
	        @ErrProc = ERROR_PROCEDURE(),
	        @ErrLine = ERROR_LINE(),
			@ErrMsg = ERROR_MESSAGE();

	--RAISERROR (N'%s(%d) %s', 18, 1, @ErrProc, @ErrLine, @ErrMsg)
	
	ROLLBACK TRANSACTION Add_AMS_PD_Job

END CATCH

GO

--
--	End of script:	PD_Job.sql
--



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixEX/tables/ --
--
print 'processing tables/Copient_Logix.User.sql'; 
--
GO
-- $Id: Copient_Logix.User.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  User [Copient_Logix]    Script Date: 12/27/2010 14:54:41 ******/
IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = N'Copient_Logix')
CREATE USER [Copient_Logix] FOR LOGIN [Copient_Logix] WITH DEFAULT_SCHEMA=[dbo]
GO


print 'processing tables/Copient_Logix_uspRole.sql'; 
--
GO
-- $Id: Copient_Logix_uspRole.sql 33257 2011-06-30 13:33:10Z rob $
-- Build Version: 7.3.1.138972

/****** Object:  Schema [Copient_Logix_uspRole]    Script Date: 12/27/2010 15:04:02 ******/
-- This was accidentally made to create a schema instead of a role, so drop the schema if it exists and make the role
IF EXISTS (SELECT 1 FROM sys.schemas WHERE name = N'Copient_Logix_uspRole')
    DROP SCHEMA [Copient_Logix_uspRole] 
GO

IF NOT EXISTS ( SELECT 1 FROM [sys].[database_principals] where name = 'Copient_Logix_uspRole' and type = 'R'  )
  CREATE ROLE [Copient_Logix_uspRole] AUTHORIZATION [dbo]
GO

IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N'Copient_Logix')
    exec sp_addrolemember 'Copient_Logix_uspRole', 'Copient_Logix'
GO





print 'processing tables/dbo.ActionTypes.Table.sql'; 
--
GO
-- $Id: dbo.ActionTypes.Table.sql 79536 2014-06-05 04:14:34Z mp185223 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[ActionTypes]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ActionTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[ActionTypes](
	[ActionTypeID] [tinyint] NOT NULL,
	[Description] [nvarchar](40) NOT NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_ActionTypes] PRIMARY KEY CLUSTERED 
(
	[ActionTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ActionTypes' AND COLUMN_NAME='PhraseID')
BEGIN
	ALTER TABLE [dbo].[ActionTypes] ADD [PhraseID] [int] NULL
END
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM ActionTypes WHERE  [ActionTypeID] = 0  )
    INSERT [dbo].[ActionTypes] ([ActionTypeID], [Description],[PhraseID]) VALUES (0, N'Not process by AirMileRejectionAgent',7665)
ELSE
    UPDATE [dbo].[ActionTypes] SET [PhraseID]=7665 WHERE [ActionTypeID] = 0   
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM ActionTypes WHERE  [ActionTypeID] = 1  )
    INSERT [dbo].[ActionTypes] ([ActionTypeID], [Description],[PhraseID]) VALUES (1, N'Move to Issuance Table',7666)
ELSE
    UPDATE [dbo].[ActionTypes] SET [PhraseID]=7666 WHERE [ActionTypeID] = 1
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM ActionTypes WHERE  [ActionTypeID] = 2  )
    INSERT [dbo].[ActionTypes] ([ActionTypeID], [Description],[PhraseID]) VALUES (2, N'Move to Rejection Holding Table',7667)
ELSE
    UPDATE [dbo].[ActionTypes] SET [PhraseID]=7667 WHERE [ActionTypeID] = 2
GO


print 'processing tables/dbo.CmFuelPartnerSV.Table.sql'; 
--
GO
-- $Id: dbo.CmFuelPartnerSV.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CmFuelPartnerSV]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CmFuelPartnerSV](
	[ExportStatus] [int] NOT NULL,
	[LocalID] [bigint] NOT NULL,
	[ServerSerial] [int] NOT NULL,
	[SVProgramID] [bigint] NOT NULL,
	[OfferID] [bigint] NOT NULL,
	[ExtCustomerID] [nvarchar](400) NULL,
	[QtyEarned] [int] NOT NULL,
	[QtyUsed] [int] NOT NULL,
	[Value] [decimal](12, 3) NOT NULL,
	[EarnedDate] [datetime] NOT NULL,
	[EarnedLocationID] [bigint] NULL,
	[ExpireDate] [datetime] NULL,
	[ExternalID] [nvarchar](400) NULL,
	[StatusFlag] [int] NOT NULL,
	[LastUpdate] [datetime] NULL,
	[LastLocationID] [int] NULL,
	[TotalValueEarned] [decimal](12, 3) NOT NULL,
	[RedeemedValue] [decimal](12, 3) NOT NULL,
	[BreakageValue] [decimal](12, 3) NOT NULL,
	[LogixTransNum] [char](36) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_ExportStatus]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_ExportStatus]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_ExportStatus]  DEFAULT ((0)) FOR [ExportStatus]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_OfferID]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_OfferID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_OfferID]  DEFAULT ((0)) FOR [OfferID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_QtyEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_QtyEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_QtyEarned]  DEFAULT ((0)) FOR [QtyEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_QtyUsed]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_QtyUsed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_QtyUsed]  DEFAULT ((0)) FOR [QtyUsed]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_Value]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_Value]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_Value]  DEFAULT ((0)) FOR [Value]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_EarnedDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_EarnedDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_EarnedDate]  DEFAULT (getdate()) FOR [EarnedDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_StatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_StatusFlag]  DEFAULT ((1)) FOR [StatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_TotalValueEarned]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_TotalValueEarned]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_TotalValueEarned]  DEFAULT ((0)) FOR [TotalValueEarned]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_RedeemedValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_RedeemedValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_RedeemedValue]  DEFAULT ((0)) FOR [RedeemedValue]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_BreakageValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_BreakageValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_BreakageValue]  DEFAULT ((0)) FOR [BreakageValue]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_CmFuelPartnerSV_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerSV]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_CmFuelPartnerSV_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD  CONSTRAINT [DF_CmFuelPartnerSV_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END


End
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CmFuelPartnerSV' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[CmFuelPartnerSV] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CmFuelPartnerSV' AND  COLUMN_NAME = 'ExtCustomerID')
BEGIN

ALTER TABLE [dbo].[CmFuelPartnerSV] ALTER COLUMN ExtCustomerID nvarchar(400) NULL;

END
GO

IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CmFuelPartnerSV' AND  COLUMN_NAME = 'ExternalID')
BEGIN

ALTER TABLE [dbo].[CmFuelPartnerSV] ALTER COLUMN ExternalID nvarchar(400) NULL;

END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='CmFuelPartnerSV' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[CmFuelPartnerSV] ADD KeyRotationFlag bit NULL
END
GO 



print 'processing tables/dbo.CmFuelPartnerTransmissionIdSequence.Table.sql'; 
--
GO
-- $Id: dbo.CmFuelPartnerTransmissionIdSequence.Table.sql 50957 2012-06-25 14:12:56Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[CmFuelPartnerTransmissionIdSequence]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CmFuelPartnerTransmissionIdSequence]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CmFuelPartnerTransmissionIdSequence](
	[TransmissionID] [bigint] NOT NULL,
	[LastResetDate] [datetime] NULL,
	[SVProgramID] [bigint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'CmFuelPartnerTransmissionIdSequence' AND column_name = 'SVProgramID')
BEGIN
    ALTER TABLE [dbo].[CmFuelPartnerTransmissionIdSequence] ADD [SVProgramID] [bigint] NULL
END
GO



print 'processing tables/dbo.IssuanceInsertQueue.Table.sql'; 
--
GO
-- $Id: dbo.IssuanceInsertQueue.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[IssuanceInsertQueue]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[IssuanceInsertQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[IssuanceInsertQueue](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[FileName] [nvarchar](255) NOT NULL,
	[UploadTime] [datetime] NULL,
	[StatusFlag] [int] NULL,
	[FileVersion] [varchar](10) NULL,
 CONSTRAINT [PK_IssuanceInsertQueue] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[IssuanceInsertQueue]') AND name = N'IX_IssuanceInsertQueue_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_IssuanceInsertQueue_StatusFlag] ON [dbo].[IssuanceInsertQueue] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.IssuanceRetrieval.Table.sql'; 
--
GO
-- $Id: dbo.IssuanceRetrieval.Table.sql 86757 2015-01-29 13:13:51Z as250399 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[IssuanceRetrieval]    Script Date: 12/27/2010 14:54:40 ******/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[IssuanceRetrieval]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[IssuanceRetrieval](
	[ExtCRMInterface] [nvarchar](100) NOT NULL,
	[LastTableDate] [datetime] NOT NULL,
	[LastPKID] [bigint] NOT NULL,
	[LastCalled] [datetime] NULL,
	[LastRecordCount] [int] NULL 
) ON [PRIMARY]
END
GO


IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[IssuanceRetrieval]') and name='GUID')
  Alter table IssuanceRetrieval add GUID nvarchar(36) NOT NULL CONSTRAINT [DF_IssuanceRetrieval_GUID] DEFAULT ('') with values;
GO

-- DROP the old PK index if it's there
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[IssuanceRetrieval]') AND name = N'PK_IssuanceRetrieval')
    ALTER TABLE [IssuanceRetrieval] DROP CONSTRAINT [PK_IssuanceRetrieval]
GO    
    
    
    
-- make new PK index on typeid, engineid
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[IssuanceRetrieval]') AND name = N'PK_IssuanceRetrieval')
ALTER TABLE [IssuanceRetrieval] ADD CONSTRAINT [PK_IssuanceRetrieval] PRIMARY KEY CLUSTERED 
(
    [ExtCRMInterface] ASC,
    [GUID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

print 'processing tables/dbo.IssuanceTables.Table.sql'; 
--
GO
-- $Id: dbo.IssuanceTables.Table.sql 116346 2017-09-21 07:39:18Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[IssuanceTables]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[IssuanceTables]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[IssuanceTables](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[TableName] [nvarchar](255) NOT NULL,
	[CreateTime] [datetime] NULL,
	[IntStatusFlag] [int] NULL,
	[ExtStatusFlag] [int] NULL,
 CONSTRAINT [PK_IssuanceTables] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[IssuanceTables]') and name='KeyRotationFlag')
BEGIN
  ALTER TABLE [dbo].[IssuanceTables] ADD KeyRotationFlag bit NULL
END


print 'processing tables/dbo.IssuanceTables_Alter.sql'; 
--
GO
declare @TableName varchar(255) = NULL,
        @Sql Nvarchar(4000),
		@Count int

if ((select count(*) from [dbo].[IssuanceTables] as IT where cast(IT.CreateTime as date) = cast(getdate() AS date)) > 0)
begin
	select @TableName=TableName from [dbo].[IssuanceTables] as IT where cast(IT.CreateTime as Date)= cast(getdate() AS DATE)
	select @Count=count(*) from sys.columns where Name = N'ExtRewardID' and Object_ID = Object_ID('[dbo].' + @TableName)
	if(@Count = 0) 
	begin
		exec('ALTER TABLE [dbo].[' + @TableName + '] ADD ExtRewardID NVARCHAR(255) NULL')
	end
	
	select @Count=count(*) from sys.columns where Name = N'TrackableCouponProgramId' and Object_ID = Object_ID('[dbo].' + @TableName)
	if(@Count = 0) 
	begin
		exec('ALTER TABLE [dbo].[' + @TableName + '] ADD TrackableCouponProgramId INT NULL')
	end
	
	select @Count=count(*) from sys.columns where Name = N'Is_InstantWin_Winner' and Object_ID = Object_ID('[dbo].' + @TableName)
	if(@Count = 0) 
	begin
		exec('ALTER TABLE [dbo].[' + @TableName + '] ADD Is_InstantWin_Winner BIT NULL')
	end
	
	select @Count=count(*) from sys.columns where Name = N'TriggerID' and Object_ID = Object_ID('[dbo].' + @TableName)
	if(@Count = 1) 
	begin
		exec('ALTER TABLE [dbo].[' + @TableName + '] ALTER COLUMN TriggerID NVARCHAR(150)')		
	end
end


-- ********** UPDATE IssuanceTableYYYMMDD TABLES TO INCREASE COLUMN LENGTH FROM 256 TO 400. ONLY IF NOT ALREADY DONE ******\

-- UPDATE COLUMN - PrimaryExtID

Declare c_tables Cursor For
Select TableName 
   From dbo.IssuanceTables As it
  Where Exists (Select 1
                        From Information_schema.Columns As c
                       Where c.table_name = it.tablename
                         And c.column_name = 'PrimaryExtID'
                         And c.character_maximum_length = 256);
OPEN c_tables

Fetch Next From c_tables
Into @TableName
While @@FETCH_STATUS = 0
Begin
       Select @Sql = 'ALTER TABLE [dbo].[' + @TableName + ']  ALTER COLUMN PrimaryExtID NVARCHAR(400)';
		  print @Sql
          Exec (@Sql)
          FETCH NEXT 
         FROM c_tables INTO @TableName
End -- of While
Close c_tables;
DeAllocate c_tables;

-- UPDATE COLUMN - ResolvedCustomerID

Declare c_tables1 Cursor For
Select TableName 
   From dbo.IssuanceTables As it
  Where Exists (Select 1
                        From Information_schema.Columns As c
                       Where c.table_name = it.tablename
                         And c.column_name = 'ResolvedCustomerID'
                         And c.character_maximum_length = 256);

OPEN c_tables1

Fetch Next From c_tables1
Into @TableName
While @@FETCH_STATUS = 0
Begin
       Select @Sql = 'ALTER TABLE [dbo].[' + @TableName + ']  ALTER COLUMN ResolvedCustomerID NVARCHAR(400)';
		  print @Sql
          Exec (@Sql)
          FETCH NEXT 
         FROM c_tables1 INTO @TableName
End -- of While
Close c_tables1;
DeAllocate c_tables1;


print 'processing tables/dbo.LMGImportTemp.Table.sql'; 
--
GO
-- $Id: dbo.LMGImportTemp.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LMGImportTemp]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LMGImportTemp](
	[InsertedDate] [datetime] NOT NULL,
	[ClientLocationCode] [nvarchar](20) NOT NULL,
	[BoxID] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[PrimaryExtID] [nvarchar](400) NULL,
	[OfferID] [bigint] NULL,
	[ROID] [bigint] NULL,
	[IssuanceDate] [datetime] NOT NULL,
	[DeliverableType] [int] NOT NULL,
	[Void] [int] NOT NULL,
	[RewardQty] [int] NULL,
	[ProgramID] [bigint] NULL,
	[ChargebackVendorID] [int] NULL,
	[CashierNum] [varchar](30) NULL,
	[ChargebackDept] [nvarchar](20) NULL,
	[ExtCRMInterface] [nvarchar](100) NULL,
	[SourceTypeID] [int] NULL,
	[PromoEngine] [nvarchar](255) NULL,
	[LocationID] [int] NULL,
	[ClientOfferID] [nvarchar](40) NULL,
	[RewardValue] [decimal](12, 3) NULL,
	[UniqueID] [varchar](15) NULL,
	[Expiration] [datetime] NULL,
	[Gross] [decimal](12, 3) NULL,
	[Net] [decimal](12, 3) NULL,
	[ExceedManualThreshold] [bit] NULL,
	[LogixTransNum] [char](36) NULL,
	[VendorCouponCode] [nvarchar](20) NULL,
	[ManufacturerCoupon] [int] NULL,
	[ProcessFlag] [tinyint] NOT NULL,
	[TriggerID] [NVARCHAR](20)  NULL,
	[CustomerPK] [int] NULL,
  	[AirmileMemberID] [nvarchar](50) NULL,
    [CardTypeID] [nvarchar](50) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]') AND name = N'IX_LMGImportTemp_InsertedDate')
CREATE CLUSTERED INDEX [IX_LMGImportTemp_InsertedDate] ON [dbo].[LMGImportTemp] 
(
	[InsertedDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LMGImportTemp_InsertedDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LMGImportTemp_InsertedDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[LMGImportTemp] ADD  CONSTRAINT [DF_LMGImportTemp_InsertedDate]  DEFAULT (getdate()) FOR [InsertedDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LMGImportTemp_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LMGImportTemp_ProcessFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[LMGImportTemp] ADD  CONSTRAINT [DF_LMGImportTemp_ProcessFlag]  DEFAULT ((0)) FOR [ProcessFlag]
END


End
GO
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTemp' AND column_name = 'IWTriggerID')
BEGIN
  EXEC sp_RENAME 'LMGImportTemp.IWTriggerID', 'TriggerID', 'COLUMN'
END
ELSE IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTemp' AND column_name = 'TriggerID')
BEGIN
  ALTER TABLE [dbo].[LMGImportTemp] ADD [TriggerID] NVARCHAR(20)  NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTemp' AND column_name = 'AirmileMemberID')
BEGIN
  ALTER TABLE [dbo].[LMGImportTemp] ADD [AirmileMemberID] [nvarchar](50) NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTemp' AND column_name = 'CardTypeID')
BEGIN
  ALTER TABLE [dbo].[LMGImportTemp] ADD [CardTypeID] [nvarchar](50) NULL
END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LMGImportTemp' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[LMGImportTemp] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTemp]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='LMGImportTemp' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table LMGImportTemp alter column [TransactionNumber] [nvarchar](128);
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTemp]') and name='PrimaryExtID')
Begin
  alter table LMGImportTemp alter column PrimaryExtID nvarchar(400) NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='LMGImportTemp' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[LMGImportTemp] ADD KeyRotationFlag bit NULL
END
GO 

print 'processing tables/dbo.LMGImportTemp_Failed.Table.sql'; 
--
GO
-- $Id: dbo.LMGImportTemp_Failed.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LMGImportTemp_Failed]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTemp_Failed]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LMGImportTemp_Failed](
	[ClientLocationCode] [nvarchar](20) NOT NULL,
	[BoxID] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[PrimaryExtID] [nvarchar](400) NULL,
	[OfferID] [bigint] NULL,
	[ROID] [bigint] NULL,
	[IssuanceDate] [datetime] NOT NULL,
	[DeliverableType] [int] NOT NULL,
	[Void] [int] NOT NULL,
	[RewardQty] [int] NULL,
	[ProgramID] [bigint] NULL,
	[ChargebackVendorID] [int] NULL,
	[CashierNum] [varchar](30) NULL,
	[ChargebackDept] [nvarchar](20) NULL,
	[ExtCRMInterface] [nvarchar](100) NULL,
	[SourceTypeID] [int] NULL,
	[PromoEngine] [nvarchar](255) NULL,
	[ErrorTypeID] [tinyint] NULL,
	[AirmileMemberID] [nvarchar](50) NULL,
    [CardTypeID] [nvarchar](50) NULL
) ON [PRIMARY]
END
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTemp_Failed]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='LMGImportTemp_Failed' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table LMGImportTemp_Failed alter column [TransactionNumber] [nvarchar](128);
END
GO
SET ANSI_PADDING OFF
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTemp_Failed]') and name='PrimaryExtID')
Begin
  alter table LMGImportTemp_Failed alter column PrimaryExtID nvarchar(400) NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='LMGImportTemp_Failed' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[LMGImportTemp_Failed] ADD KeyRotationFlag bit NULL
END
GO 

print 'processing tables/dbo.LMGRejection.Table.sql'; 
--
GO
-- $Id: dbo.LMGRejection.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LMGRejection]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LMGRejection]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LMGRejection](
	[PKID] [int] IDENTITY(1,1) NOT NULL,
	[ClientLocationCode] [nvarchar](20) NOT NULL,
	[BoxID] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[PrimaryExtID] [nvarchar](400) NULL,
	[OfferID] [bigint] NULL,
	[ROID] [bigint] NULL,
	[IssuanceDate] [datetime] NOT NULL,
	[DeliverableType] [int] NOT NULL,
	[Void] [int] NOT NULL,
	[RewardQty] [int] NULL,
	[ProgramID] [bigint] NULL,
	[ChargebackVendorID] [int] NULL,
	[CashierNum] [varchar](30) NULL,
	[ChargebackDept] [nvarchar](20) NULL,
	[ExtCRMInterface] [nvarchar](100) NULL,
	[SourceTypeID] [int] NULL,
	[PromoEngine] [nvarchar](255) NULL,
	[InsertedDate] [datetime] NOT NULL,
	[LocationID] [int] NULL,
	[ClientOfferID] [nvarchar](40) NULL,
	[RewardValue] [decimal](12, 3) NULL,
	[UniqueID] [varchar](15) NULL,
	[Expiration] [datetime] NULL,
	[Gross] [decimal](12, 3) NULL,
	[Net] [decimal](12, 3) NULL,
	[ExceedManualThreshold] [bit] NULL,
	[LogixTransNum] [char](36) NULL,
	[VendorCouponCode] [nvarchar](20) NULL,
	[ManufacturerCoupon] [int] NULL,
	[TriggerID] [NVARCHAR](20)  NULL,
	[AirmileMemberID] [nvarchar](50) NULL,
    [CardTypeID] [nvarchar](50) NULL,
 CONSTRAINT [PK_LMGRejection] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LMGRejection_InsertedDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[LMGRejection]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LMGRejection_InsertedDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[LMGRejection] ADD  CONSTRAINT [DF_LMGRejection_InsertedDate]  DEFAULT (getdate()) FOR [InsertedDate]
END
IF EXISTS (SELECT * FROM sys.columns c, sys.tables t WHERE c.object_id = t.object_id AND t.name = 'LMGRejection' and c.name = 'PrimaryExtID')
BEGIN
alter table LMGRejection alter column PrimaryExtID nvarchar(400)
END
End
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGRejection]') and name='PrimaryExtID')
Begin
  alter table LMGRejection alter column PrimaryExtID nvarchar(400)
End
GO

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGRejection' AND column_name = 'IWTriggerID')
BEGIN
  EXEC sp_RENAME 'LMGRejection.IWTriggerID', 'TriggerID', 'COLUMN'
END
ELSE IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGRejection' AND column_name = 'TriggerID')
BEGIN
  ALTER TABLE [dbo].[LMGRejection] ADD [TriggerID] NVARCHAR(20)  NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGRejection' AND column_name = 'AirmileMemberID')
BEGIN
  ALTER TABLE [dbo].[LMGRejection] ADD [AirmileMemberID] [nvarchar](50) NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGRejection' AND column_name = 'CardTypeID')
BEGIN
  ALTER TABLE [dbo].[LMGRejection] ADD [CardTypeID] [nvarchar](50) NULL
END
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LMGRejection' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[LMGRejection] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
GO
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGRejection]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='LMGRejection' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table LMGRejection alter column [TransactionNumber] [nvarchar](128);
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='LMGRejection' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[LMGRejection] ADD KeyRotationFlag bit NULL
END
GO 

print 'processing tables/dbo.ManualIssuance.Table.sql'; 
--
GO
-- $Id: dbo.ManualIssuance.Table.sql 123590 2018-05-14 08:15:11Z sk185403 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[ManualIssuance]    Script Date: 12/27/2010 14:54:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ManualIssuance]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[ManualIssuance](
	[PKID] [int] IDENTITY(1,1) NOT NULL,
	[ClientLocationCode] [nvarchar](20) NOT NULL,
	[LocationID] [int] NOT NULL,
	[BoxID] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[PrimaryExtID] [nvarchar](400) NULL,
	[CustomerTypeID] [int] NOT NULL,
	[OfferID] [bigint] NULL,
	[ClientOfferID] [nvarchar](40) NULL,
	[ROID] [bigint] NULL,
	[IssuanceDate] [datetime] NOT NULL,
	[DeliverableType] [int] NOT NULL,
	[Void] [int] NOT NULL,
	[RewardQty] [int] NULL,
	[ProgramID] [bigint] NULL,
	[RewardValue] [decimal](12, 3) NULL,
	[UniqueID] [varchar](30) NULL,
	[Expiration] [datetime] NULL,
	[ChargebackVendorID] [int] NULL,
	[CashierNum] [varchar](30) NULL,
	[Gross] [decimal](12, 3) NULL,
	[Net] [decimal](12, 3) NULL,
	[ChargebackDept] [nvarchar](120) NULL,
	[PromoEngine] [nvarchar](255) NULL,
	[ExtCRMInterface] [nvarchar](100) NULL,
	[SourceTypeID] [int] NULL,
	[ExceedManualThreshold] [bit] NULL,
	[LogixTransNum] [char](36) NOT NULL,
	[VendorCouponCode] [nvarchar](20) NULL,
	[ManufacturerCoupon] [int] NULL,
	[WaitingACK] [int] NOT NULL,
	[StatusFlag] [int] NULL,
    [CardTypeID] [nvarchar](26) NULL,
    [ResolvedCustomerID] [nvarchar](400) NULL,
    [HHID] [nvarchar](400) NULL,
	[TriggerID] [NVARCHAR](150)  NULL,
	[TrackableCouponProgramID] INT NULL,
	[Is_InstantWin_Winner] [bit] NULL,
	CONSTRAINT [PK_ManualIssuance] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_CustomerTypeID]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_CustomerTypeID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_CustomerTypeID]  DEFAULT ((0)) FOR [CustomerTypeID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_RewardValue]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_RewardValue]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_RewardValue]  DEFAULT ((0.000)) FOR [RewardValue]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_ChargebackVendorID]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_ChargebackVendorID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_ChargebackVendorID]  DEFAULT ((0)) FOR [ChargebackVendorID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_Gross]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_Gross]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_Gross]  DEFAULT ((0.000)) FOR [Gross]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_Net]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_Net]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_Net]  DEFAULT ((0.000)) FOR [Net]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_ExtCRMInterface]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_ExtCRMInterface]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_ExtCRMInterface]  DEFAULT ('None') FOR [ExtCRMInterface]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_ExceedManualThreshold]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_ExceedManualThreshold]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_ExceedManualThreshold]  DEFAULT ((0)) FOR [ExceedManualThreshold]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_WaitingACK]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_WaitingACK]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_WaitingACK]  DEFAULT ((0)) FOR [WaitingACK]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ManualIssuance_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[ManualIssuance]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ManualIssuance_StatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD  CONSTRAINT [DF_ManualIssuance_StatusFlag]  DEFAULT ((0)) FOR [StatusFlag]
END


End
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ManualIssuance]') and name='PrimaryExtID')
Begin
  alter table ManualIssuance alter column PrimaryExtID nvarchar(400)
End
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ManualIssuance]') and name='ResolvedCustomerID')
Begin
  alter table ManualIssuance alter column ResolvedCustomerID nvarchar(400)
End
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ManualIssuance]') and name='HHID')
Begin
  alter table ManualIssuance alter column HHID nvarchar(400)
End
GO


IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'IWTriggerID')
BEGIN
  EXEC sp_RENAME '[ManualIssuance].[IWTriggerID]', 'TriggerID', 'COLUMN'
END
ELSE IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'TriggerID')
BEGIN
  ALTER TABLE ManualIssuance ADD TriggerID NVARCHAR(20)  NULL
END
GO


-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ManualIssuance' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

	ALTER TABLE [dbo].[ManualIssuance] ALTER COLUMN [LogixTransNum] char(36) NOT NULL;

END
GO
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ManualIssuance]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='ManualIssuance' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  ALTER TABLE ManualIssuance ALTER COLUMN [TransactionNumber] [nvarchar](128);
END
GO

-- [AL-8089] TriggerID column would be used for both TriggerId and TrackableCouponId
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ManualIssuance' AND  COLUMN_NAME = 'TriggerId')
BEGIN
	ALTER TABLE ManualIssuance ALTER COLUMN [TriggerId] [NVARCHAR](150);
END
GO

IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ManualIssuance' AND  COLUMN_NAME = 'TrackableCouponProgramId')
BEGIN
	ALTER TABLE ManualIssuance ADD [TrackableCouponProgramId] INT NULL;
END
GO

IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ManualIssuance' AND  COLUMN_NAME = 'Is_InstantWin_Winner')
BEGIN
	ALTER TABLE [dbo].[ManualIssuance] ADD [Is_InstantWin_Winner] BIT NULL;
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'CardTypeID')
BEGIN
  ALTER TABLE ManualIssuance ADD CardTypeID NVARCHAR(26)  NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'ResolvedCustomerID')
BEGIN
  ALTER TABLE ManualIssuance ADD ResolvedCustomerID NVARCHAR(400)  NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'HHID')
BEGIN
  ALTER TABLE ManualIssuance ADD HHID NVARCHAR(400)  NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'DiscountedUPC')
BEGIN
  ALTER TABLE ManualIssuance ADD DiscountedUPC NVARCHAR(100)  NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'ConditionalUPCs')
BEGIN
  ALTER TABLE ManualIssuance ADD ConditionalUPCs VARCHAR(1000)  NULL
END
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'Coupon')
BEGIN
  ALTER TABLE ManualIssuance ADD Coupon NVARCHAR(150)  NULL
END
IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'CouponProgramID')
BEGIN
  ALTER TABLE ManualIssuance DROP COLUMN CouponProgramID 
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'CouponExtProgramID')
BEGIN
  ALTER TABLE ManualIssuance ADD CouponExtProgramID NVARCHAR(20)  NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'StoreCoupon')
BEGIN
  ALTER TABLE ManualIssuance ADD StoreCoupon INT NULL
END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'ConsumerAccountNumber')
BEGIN
  ALTER TABLE ManualIssuance ADD ConsumerAccountNumber NVARCHAR(100)  NULL
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='ManualIssuance' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[ManualIssuance] ADD KeyRotationFlag bit NULL
END
GO

IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ManualIssuance' AND column_name = 'ChargebackDept'
            AND DATA_TYPE = 'nvarchar' AND CHARACTER_MAXIMUM_LENGTH <> 120)
		ALTER TABLE [dbo].[ManualIssuance] ALTER COLUMN [ChargebackDept] [nvarchar](120) NULL 
	GO

print 'processing tables/dbo.SourceTypes.Table.sql'; 
--
GO
-- $Id: dbo.SourceTypes.Table.sql 84897 2014-11-24 06:01:29Z gs250217 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[SourceTypes]    Script Date: 12/27/2010 14:54:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SourceTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[SourceTypes](
	[SourceTypeID] [int] NOT NULL,
	[Description] [nvarchar](255) NOT NULL,
	[DescriptionPhraseID] int Null,
	[ActionTypeID] [tinyint] NOT NULL,
    [ProgramType] [nvarchar](50) NULL,
 CONSTRAINT [PK_SourceTypes] PRIMARY KEY CLUSTERED 
(
	[SourceTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'SourceTypes' AND column_name = 'DescriptionPhraseID')
  ALTER TABLE [dbo].[SourceTypes] ADD [DescriptionPhraseID] int  NULL
GO

If COLUMNPROPERTY( OBJECT_ID('[dbo].[SourceTypes]'), 'Description', 'Precision') < 255
      ALTER TABLE [dbo].[SourceTypes] ALTER COLUMN [Description] [nvarchar](255) NULL
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM SourceTypes WHERE  [SourceTypeID] = 0  )
    INSERT [dbo].[SourceTypes] ([SourceTypeID], [Description],[DescriptionPhraseID], [ActionTypeID]) VALUES (0, N'Store',260, 0)
	ELSE
	Update [dbo].[SourceTypes] set [DescriptionPhraseID]=260 WHERE [SourceTypeID] = 0
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM SourceTypes WHERE  [SourceTypeID] = 1  )
    INSERT [dbo].[SourceTypes] ([SourceTypeID], [Description],[DescriptionPhraseID], [ActionTypeID]) VALUES (1, N'Manual Entry',7662, 0)
	ELSE
	Update [dbo].[SourceTypes] set [DescriptionPhraseID]=7662 WHERE [SourceTypeID] = 1
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM SourceTypes WHERE  [SourceTypeID] = 11  )
    INSERT [dbo].[SourceTypes] ([SourceTypeID], [Description],[DescriptionPhraseID], [ActionTypeID]) VALUES (11, N'Reversal Refund',7663, 0)
	ELSE
	Update [dbo].[SourceTypes] set [DescriptionPhraseID]=7663 WHERE [SourceTypeID] = 11
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM SourceTypes WHERE  [SourceTypeID] = 12  )
    INSERT [dbo].[SourceTypes] ([SourceTypeID], [Description],[DescriptionPhraseID], [ActionTypeID]) VALUES (12, N'Re-Sent',7664, 0)
	ELSE
	Update [dbo].[SourceTypes] set [DescriptionPhraseID]=7664 WHERE [SourceTypeID] = 12
GO



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixEX/views/ --
--

--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixEX/functions/ --
--
print 'processing functions/dbo.VerifyCAMCard.UserDefinedFunction.sql'; 
--
GO
-- $Id: dbo.VerifyCAMCard.UserDefinedFunction.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  UserDefinedFunction [dbo].[VerifyCAMCard]    Script Date: 12/27/2010 14:57:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VerifyCAMCard]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[VerifyCAMCard](@CCNumberOri as varchar(20))
  RETURNS bit AS 
  BEGIN
  -- (D1*6)+(D2*5)+(D3*4)+(D4*3)+(D5*8)+(D6*7)+(D7*6)+(D8*5)+(D9*4)+(D10*3) 
  -- Divide the digit total by 11 (using a 5 digit quotient and 2 digit remainder) 
  -- If the remainder is less than 2, the check digit equals 0 
  -- If the remainder is 2 or greater, the check digit equals 11 minus the remainder. 
  -- If Check Digit = D11 verification passed 
  declare @Return bit;
  declare @CCNumber as char(11)
  set @CCNumber = RIGHT(REPLACE(@CCNumberOri,'' '', ''''),11);
  if (IsNull(@CCNumber,'''')='''' or (IsNumeric(@CCNumber)=0) or LEN(@CCNumber) < 11) set @Return = 0;
  if @Return=0 return @Return;  --- exit if invalid at this point

  declare @Result int;
  declare @Remainder tinyint;
  declare @CheckDigit tinyint;
  set @Result = (CAST(LEFT(@CCNumber,1) as int)*6) + 
                (CAST(SUBSTRING(@CCNumber,2,1) as int)*5) + (CAST(SUBSTRING(@CCNumber,3,1) as int)*4) + (CAST(SUBSTRING(@CCNumber,4,1)  as int)*3) + 
                (CAST(SUBSTRING(@CCNumber,5,1) as int)*8) + (CAST(SUBSTRING(@CCNumber,6,1) as int)*7) + (CAST(SUBSTRING(@CCNumber,7,1)  as int)*6) + 
                (CAST(SUBSTRING(@CCNumber,8,1) as int)*5) + (CAST(SUBSTRING(@CCNumber,9,1) as int)*4) + (CAST(SUBSTRING(@CCNumber,10,1) as int)*3);

  set @Remainder = @Result%11;
  if @Remainder <2 set @CheckDigit = 0;
  else set @CheckDigit = 11 - @Remainder;

  if @CheckDigit = CAST(RIGHT(@CCNumber,1) as int) set @Return=1;
  else set @Return=0;

  return @Return;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[VerifyCAMCard] TO [Copient_Logix_uspRole] AS [dbo]
GO



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixEX/storedprocedures/ --
--
print 'processing storedprocedures/dbo.pa_CMFuelPartnerGetSV.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CMFuelPartnerGetSV.StoredProcedure.sql 120380 2018-02-08 18:59:19Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CMFuelPartnerGetSV]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CMFuelPartnerGetSV]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[pa_CMFuelPartnerGetSV]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CMFuelPartnerGetSV]
 @ProgramID bigint,
 @RunAgain int OUTPUT 
AS
begin 
  SET NOCOUNT ON;
  declare @NumRecs int;
  declare @MaxRowCount int;

  set @RunAgain=0;
  set @MaxRowCount = 1800;

  -- This retrieves Fuel Partner stored values
  select @NumRecs=count(*) from CmFuelPartnerSV with (NoLock) where ExportStatus=-1 and SVProgramID=@ProgramID;
  if @NumRecs=0 begin
    --set rowcount @MaxRowCount; 
    update TOP (@MaxRowCount) CmFuelPartnerSV with (RowLock) set ExportStatus=-1 where ExportStatus=0 and SVProgramID=@ProgramID; 
    if @@RowCount >= @MaxRowCount begin
      set @RunAgain=1;
    end
    --set rowcount 0;
  end
  select * from CmFuelPartnerSV with (NoLock) where ExportStatus=-1 and SVProgramID=@ProgramID order by EarnedDate;
end
GO

GRANT EXECUTE ON [dbo].[pa_CMFuelPartnerGetSV] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CMFuelPartnerPurgeSV.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_CMFuelPartnerPurgeSV.StoredProcedure.sql 73948 2014-01-24 09:42:13Z vd185037 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_CMFuelPartnerPurgeSV]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CMFuelPartnerPurgeSV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_CMFuelPartnerPurgeSV]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CMFuelPartnerPurgeSV]
 @ProgramID bigint
AS 
begin 
  SET NOCOUNT ON;
  declare @NumRecs int;

  -- This purges processed Fuel Partner stored values
  select @NumRecs=count(*) from CmFuelPartnerSV with (NoLock) where ExportStatus=1 and SVProgramID=@ProgramID;
  if @NumRecs>0 begin
    delete from CmFuelPartnerSV with (RowLock) where ExportStatus=1 and SVProgramID=@ProgramID; 
  end
end
GO

GRANT EXECUTE ON [dbo].[pa_CMFuelPartnerPurgeSV] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_CMFuelPartnerUpdateSV.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_CMFuelPartnerUpdateSV]  ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CMFuelPartnerUpdateSV]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[pa_CMFuelPartnerUpdateSV]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_CMFuelPartnerUpdateSV]
 @LocalID bigint,
 @ServerSerial int 
AS
begin 
  SET NOCOUNT ON;
  -- update status to indicate that this row has been processed
  update CmFuelPartnerSV with (RowLock) set ExportStatus=1 where ExportStatus=-1 and LocalId=@LocalId and ServerSerial=@ServerSerial; 
end
GO

GRANT EXECUTE ON [dbo].[pa_CMFuelPartnerUpdateSV] TO [Copient_Logix_uspRole] AS [dbo]
GO






print 'processing storedprocedures/dbo.pa_CS_UpdateIssuance.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_CS_updateIssuance]    Script Date: 12/29/2015 23:46:48 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_CS_updateIssuance]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[pa_CS_updateIssuance]
GO

/****** Object:  StoredProcedure [dbo].[pa_CS_updateIssuance]    Script Date: 12/29/2015 23:46:48 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_CS_updateIssuance] @uploadData Varchar(Max)
AS          
BEGIN
  DECLARE @xml XML = @uploadData

BEGIN TRY      
      BEGIN TRAN T1  

  INSERT INTO ManualIssuance WITH (ROWLOCK)  
           ([ClientLocationCode]  
           ,[LocationID]  
           ,[BoxID]  
           ,[TransactionNumber]  
           ,[PrimaryExtID]  
           ,[CustomerTypeID]  
           ,[OfferID]  
           ,[ClientOfferID]  
           ,[ROID]  
           ,[IssuanceDate]  
           ,[DeliverableType]  
           ,[Void]  
           ,[RewardQty]  
           ,[ProgramID]  
           ,[RewardValue]  
           ,[UniqueID]  
           ,[Expiration]  
           ,[ChargebackVendorID]  
           ,[CashierNum]  
           ,[Gross]  
           ,[Net]  
           ,[ChargebackDept]  
           ,[PromoEngine]  
           ,[ExtCRMInterface]  
           ,[SourceTypeID]  
           ,[ExceedManualThreshold]  
           ,[LogixTransNum]  
           ,[VendorCouponCode]  
           ,[ManufacturerCoupon]  
           ,[StatusFlag]  
           ,[CardTypeID]  
           ,[ResolvedCustomerID]  
           ,[HHID]  
           ,[TriggerID]  
     ,[TrackableCouponProgramID]  
     ,[Is_InstantWin_Winner]  
     ,[DiscountedUPC]  
     ,[ConditionalUPCs]
	 ,[Coupon]
	 ,[CouponExtProgramID]
	 ,[StoreCoupon]
   ,[consumerAccountNumber])
     select
           a.c.value('(clientLocationCode/text())[1]', 'nvarchar(20)')--@ClientLocationCode  
           ,a.c.value('(locationId/text())[1]', 'int')--@LocationID  
           ,a.c.value('(boxId/text())[1]', 'int')--@BoxID  
           ,a.c.value('(transactionId/text())[1]', 'nvarchar(255)')--@TransactionNumber  
           ,a.c.value('(presentedCustomerId/text())[1]', 'nvarchar(400)')--@PrimaryExtID  
           ,a.c.value('(presentedCardTypeId/text())[1]', 'int')--@CustomerTypeID  
           ,a.c.value('(incentiveId/text())[1]', 'bigint')--@OfferID  
           ,a.c.value('(clientOfferId/text())[1]', 'nvarchar(40)')--@ClientOfferID  
           ,a.c.value('(roId/text())[1]', 'bigint')--@ROID  
           ,a.c.value('(issuanceDate/text())[1]', 'datetime')--@IssuanceDate  
           ,a.c.value('(deliverableType/text())[1]', 'int')--@DeliverableType  
           ,a.c.value('(voId/text())[1]', 'int')--@Void  
           ,a.c.value('(rewardQty/text())[1]', 'int')--@RewardQty  
           ,a.c.value('(programId/text())[1]', 'bigint')--@ProgramID  
           ,a.c.value('(programValue/text())[1]', 'decimal(12,3)')--@RewardValue  
           ,a.c.value('(uniqueId/text())[1]', 'varchar(30)')--@UniqueID  
           ,a.c.value('(expiry/text())[1]', 'datetime')--@Expiration  
           ,a.c.value('(vendorId/text())[1]', 'int')--@ChargebackVendorID  
           ,a.c.value('(cashierNum/text())[1]', 'varchar(30)')--@CashierNum  
           ,a.c.value('(grossTotal/text())[1]', 'decimal(12,3)')--@Gross  
           ,a.c.value('(netTotal/text())[1]', 'decimal(12,3)')--@Net  
           ,a.c.value('(chargeBackDept/text())[1]', 'nvarchar(120)')--@ChargebackDept  
           ,a.c.value('(promoEngine/text())[1]', 'nvarchar(255)')--@PromoEngine  
           ,a.c.value('(extCRMInterfaceName/text())[1]', 'nvarchar(100)')--@ExtCRMInterface  
           ,a.c.value('(sourceTypeId/text())[1]', 'int')--@SourceTypeID  
           ,0--@ExceedManualThreshold  not used in broker
           ,a.c.value('(logixTransNum/text())[1]', 'char(36)')--@LogixTransNum  
           ,a.c.value('(vendorCouponCode/text())[1]', 'nvarchar(20)')--@VendorCouponCode  
           ,a.c.value('(manufacturerCoupon/text())[1]', 'int')--@ManufacturerCoupon  
           ,0--@StatusFlag  
           ,a.c.value('(presentedCardTypeId/text())[1]', 'nvarchar(26)')--@CardTypeID  
           ,a.c.value('(resolvedCustomerId/text())[1]', 'nvarchar(400)')--@ResolvedCustomerID  
           ,a.c.value('(houseHoldId/text())[1]', 'nvarchar(400)')--@HHID  
           ,a.c.value('(triggerCode/text())[1]', 'nvarchar(150)')--@TriggerID  
     ,a.c.value('(tcProgramId/text())[1]', 'int')--@TrackableCouponProgramID  
     ,a.c.value('(isInstantWinner/text())[1]', 'bit')--@Is_InstantWin_Winner  
     ,a.c.value('(upc/text())[1]', 'nvarchar(100)')--@DiscountedUPC
     ,a.c.value('(conditionalUpc/text())[1]', 'varchar(1000)')--@ConditionalUPCs  
	 ,a.c.value('(coupon/text())[1]', 'nvarchar(150)')--@Coupon  
       ,a.c.value('(couponExtprogramId/text())[1]', 'nvarchar(20)')--@CouponExtProgramId   
		,a.c.value('(storeCoupon/text())[1]', 'int')--@StoreCoupon 	   
    ,a.c.value('(consumerAccountNumber/text())[1]','nvarchar(16)')-- @Consumer Account Number   

    FROM @xml.nodes('adjustments/issuanceRows') AS a(c)


      COMMIT TRAN T1;    
    END TRY    
    BEGIN CATCH    
      IF @@TRANCOUNT > 0 BEGIN    
        ROLLBACK TRAN T1;    
      END    
      DECLARE @ErrorMessage NVARCHAR(4000);    
      DECLARE @ErrorSeverity INT;    
      DECLARE @ErrorState INT;    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();    
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);    
    END CATCH    

END
GO
GRANT EXECUTE ON [dbo].[pa_CS_updateIssuance] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_GetNextCmFuelPartnerTransmissionID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetNextCmFuelPartnerTransmissionID.StoredProcedure.sql 50957 2012-06-25 14:12:56Z joe $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetNextCmFuelPartnerTransmissionID]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNextCmFuelPartnerTransmissionID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNextCmFuelPartnerTransmissionID]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_GetNextCmFuelPartnerTransmissionID]
 @SvProgramId bigint,
 @NextTransmissionID bigint = -1 OUTPUT
AS
  declare @CurrentID bigint;
  declare @LastReset as datetime;
  declare @LastMidNight as datetime;
  declare @Today as datetime;

  SET NOCOUNT ON;

  set @Today = getdate();
 
  BEGIN TRAN T1
  BEGIN TRY
    select @CurrentID = TransmissionID, @LastReset = LastResetDate from CmFuelPartnerTransmissionIdSequence with (tablockx)where SVProgramId=@SvProgramId;

    -- is it null?
    if (@CurrentID is null) or (@LastReset is null)
    begin
      -- seed the table
      set @NextTransmissionID = 1;
      insert into CmFuelPartnerTransmissionIdSequence with (RowLock)
        (TransmissionID,LastResetDate,SVProgramID) values (@NextTransmissionID,@Today,@SvProgramId);
    end else begin
      set @LastMidNight = CAST(FLOOR(CAST(@Today AS FLOAT)) AS DATETIME);
      -- has it been reset since last midnight?
      if @LastReset < @LastMidNight
      begin
        -- reset sequence and date
        set @NextTransmissionID = 1;
        update CmFuelPartnerTransmissionIdSequence with (tablockx)
          set TransmissionID=@NextTransmissionID, LastResetDate=@Today where SVProgramId=@SvProgramId;
      end else begin
        -- bump sequence number
        set @NextTransmissionID = @CurrentID + 1;
        update CmFuelPartnerTransmissionIdSequence with (tablockx)
          set TransmissionID=@NextTransmissionID where SVProgramId=@SvProgramId;
      end
    end
    COMMIT TRAN T1
  END TRY
  
  BEGIN CATCH
    ROLLBACK TRAN T1
    DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage = ERROR_MESSAGE(),
      @ErrorSeverity = ERROR_SEVERITY(),
      @ErrorState = ERROR_STATE();

    -- Use RAISERROR inside the CATCH block to return 
    -- error information about the original error that 
    -- caused execution to jump to the CATCH block.
    RAISERROR (@ErrorMessage, -- Message text.
       @ErrorSeverity, -- Severity.
       @ErrorState -- State.
       );
  END CATCH

GO
GRANT EXECUTE ON [dbo].[pa_GetNextCmFuelPartnerTransmissionID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Issuance_SetPosition.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Issuance_SetPosition.StoredProcedure.sql 86659 2015-01-26 12:59:29Z as250399 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Issuance_SetPosition]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Issuance_SetPosition]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Issuance_SetPosition]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[pa_Issuance_SetPosition] @ExtCRMInterface nvarchar(100), @LastTableDate as datetime,
                                                 @LastPKID bigint, @GUID nvarchar(36), @Status int OUTPUT
as 
  set nocount on
  
  set @Status = -1;

  -- determine if a record already exists for the ExtCRMInterface source
  select ExtCRMInterface from IssuanceRetrieval with (NoLock) where ExtCRMInterface = @ExtCRMInterface and GUID = @GUID;

  if @@RowCount > 0
    begin
      update IssuanceRetrieval with (RowLock) 
        set LastTableDate = @LastTableDate, LastPKID = @LastPKID, 
            LastCalled = getdate(), LastRecordCount = 0   
        where ExtCRMInterface = @ExtCRMInterface and GUID = @GUID;
    end
  else
    begin
      insert into IssuanceRetrieval with (RowLock)
        (ExtCRMInterface, LastTableDate, LastPKID, LastCalled, LastRecordCount, GUID)
      values
        (@ExtCRMInterface, @LastTableDate, @LastPKID, getdate(), 0, @GUID)
    end

  -- determine if the update/insert worked
  select ExtCRMInterface from IssuanceRetrieval with (NoLock) where ExtCRMInterface = @ExtCRMInterface and GUID = @GUID
    and LastTableDate = @LastTableDate and LastPKID = @LastPKID;

  if @@RowCount > 0
    begin
      -- send back a success status
      set @Status = 0;    
    end
  else
    begin
      -- send back an invalid criteria status message
      set @Status = 3; 
    end

GO
GRANT EXECUTE ON [dbo].[pa_Issuance_SetPosition] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LMGRejection_Import.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LMGRejection_Import.StoredProcedure.sql 79076 2014-05-28 13:37:42Z gc185065 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LMGRejection_Import]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LMGRejection_Import]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LMGRejection_Import]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_LMGRejection_Import] @RunAgain int Output  
AS   
  set nocount on;  
  declare @StartTime datetime;  
  declare @CurrentIssuranceTable as varchar(128);  

  set @RunAgain=1;  
  set @StartTime=getdate();  
  select TOP (1) @CurrentIssuranceTable=TableName from IssuanceTables order by CreateTime desc   
  
  -- run for up to 5 minutes  
  WHILE @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) BEGIN  
    BEGIN TRY 
      BEGIN TRANSACTION T1

      update top (1800) LMGImportTemp set ProcessFlag=1 where ProcessFlag=0;    
      IF (@@ROWCOUNT=0) BEGIN -- if no record left to process, set @RunAgain to 0.  
        set @RunAgain=0;   
      END  
      ELSE BEGIN -- otherwise, insert into either IssuanceYYYYMMDD or LMGRejection based on ActionTypeID  
        exec('insert into '+@CurrentIssuranceTable+' with (RowLock) (ClientLocationCode, LocationID, BoxID, TransactionNumber, PrimaryExtID, OfferID, ClientOfferID, ROID, IssuanceDate, DeliverableType, Void,  
                          RewardQty, ProgramID, RewardValue, UniqueID, Expiration, ChargebackVendorID, CashierNum, Gross, Net, ChargebackDept, PromoEngine, ExtCRMInterface, 
                          SourceTypeID, ExceedManualThreshold, LogixTransNum, VendorCouponCode, ManufacturerCoupon, CustomerTypeID, CardTypeID, AirmileMemberID, TriggerID)  
                     select L.ClientLocationCode, L.LocationID, L.BoxID, L.TransactionNumber, L.PrimaryExtID, L.OfferID, L.ClientOfferID, L.ROID, L.IssuanceDate, L.DeliverableType, L.Void,  
                            CASE WHEN S.ActionTypeID=1 THEN (RewardQty) ELSE case when S.ActionTypeID=2 then (RewardQty*-1) end END,  L.ProgramID, L.RewardValue, L.UniqueID, L.Expiration, L.ChargebackVendorID, L.CashierNum, L.Gross, L.Net, L.ChargebackDept, L.PromoEngine, L.ExtCRMInterface, 
                            L.SourceTypeID, L.ExceedManualThreshold, L.LogixTransNum, L.VendorCouponCode, L.ManufacturerCoupon, 
                           CASE WHEN isnull(L.CardTypeID,2) > 0 THEN (0) ELSE (isnull(CardTypeID,2)) END as CustomerTypeID, isnull(L.CardTypeID,2), L.AirmileMemberID, L.TriggerID
                       from LMGImportTemp as L with (NoLock) inner join SourceTypes as S with (NoLock) on L.SourceTypeID=S.SourceTypeID  
                      where ProcessFlag=1'); -- Insert into Issuance Table; if ActionType=1 then RewardQty else if ActionType=2 (RewardQty*-1)  
  
        exec('insert into LMGRejection (ClientLocationCode, BoxID, TransactionNumber, PrimaryExtID, OfferID, ROID, IssuanceDate, DeliverableType, Void,  
                          RewardQty, ProgramID, ChargebackVendorID, CashierNum, ChargebackDept, ExtCRMInterface, SourceTypeID, PromoEngine, InsertedDate, 
                          LocationID, ClientOfferID, RewardValue, UniqueID, Expiration, Gross, Net, ExceedManualThreshold, LogixTransNum, VendorCouponCode, ManufacturerCoupon, TriggerID, AirmileMemberID, CardTypeID)  
                     select L.ClientLocationCode, L.BoxID, L.TransactionNumber, L.PrimaryExtID, L.OfferID, L.ROID, L.IssuanceDate, L.DeliverableType, L.Void,  
                            L.RewardQty, L.ProgramID, L.ChargebackVendorID, L.CashierNum, L.ChargebackDept, L.ExtCRMInterface, L.SourceTypeID, L.PromoEngine, getdate() as InsertedDate, 
                            L.LocationID, L.ClientOfferID, L.RewardValue, L.UniqueID, L.Expiration, L.Gross, L.Net, L.ExceedManualThreshold, L.LogixTransNum, L.VendorCouponCode, L.ManufacturerCoupon, L.TriggerID, L.AirmileMemberID, isnull(L.CardTypeID,2)
                       from LMGImportTemp as L with (NoLock) inner join SourceTypes as S with (NoLock) on L.SourceTypeID=S.SourceTypeID   
                      where ProcessFlag=1 and S.ActionTypeID=2'); -- Move to Rejection Holding Table  
      END  
      update LMGImportTemp set ProcessFlag=2 where ProcessFlag=1;   

      COMMIT TRANSACTION  T1;
    END TRY
    BEGIN CATCH
      set @RunAgain=0;
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRANSACTION T1;        
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  END -- while  

GO
GRANT EXECUTE ON [dbo].[pa_LMGRejection_Import] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LogixServ_InsertCmFuelPartnerSV.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LogixServ_InsertCmFuelPartnerSV.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LogixServ_InsertCmFuelPartnerSV]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LogixServ_InsertCmFuelPartnerSV]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LogixServ_InsertCmFuelPartnerSV]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_LogixServ_InsertCmFuelPartnerSV] @StatusFlag int, @ExtCustomerID nvarchar(400),
	@LocationId bigint, @LocalID bigint, @ServerSerial int, @ExternalID nvarchar(400), 
	@SVProgramID bigint, @OfferID bigint, @QtyEarned int, @QtyUsed int, @Value decimal(12,3), 
	@EarnedDate datetime, @ExpireDate datetime, @TotalValueEarned decimal(12,3), 
	@RedeemedValue decimal(12,3), @BreakageValue decimal(12,3), @LogixTransNum nvarchar(36), @UpdateCount int output
AS 
  SET NOCOUNT ON;
  declare @EarnedLocationID as bigint
  declare @Today as datetime
  
  set @Today = getdate()
  set @UpdateCount = 0
  
  if @StatusFlag = 1 or @StatusFlag = 4 or @StatusFlag = 2
  begin
    set @EarnedLocationID = @LocationID
    insert into CmFuelPartnerSV with (RowLock)
      ([LocalID]
      ,[ServerSerial]
      ,[SVProgramID]
      ,[OfferID]
      ,[ExtCustomerID]
      ,[QtyEarned]
      ,[QtyUsed]
      ,[Value]
      ,[EarnedDate]
      ,[EarnedLocationID]
      ,[ExpireDate]
      ,[ExternalID]
      ,[StatusFlag]
      ,[LastUpdate]
      ,[LastLocationID]
      ,[TotalValueEarned]
      ,[RedeemedValue]
      ,[BreakageValue]
      ,[LogixTransNum])
    values
      (@LocalID
      ,@ServerSerial
      ,@SVProgramID
      ,@OfferID
      ,@ExtCustomerID
      ,@QtyEarned
      ,@QtyUsed
      ,@Value
      ,@EarnedDate
      ,@EarnedLocationID
      ,@ExpireDate
      ,@ExternalID
      ,@StatusFlag
      ,@Today
      ,@LocationID
      ,@TotalValueEarned
      ,@RedeemedValue
      ,@BreakageValue
      ,@LogixTransNum);
  end
  set @UpdateCount = @@rowcount;

GO
GRANT EXECUTE ON [dbo].[pa_LogixServ_InsertCmFuelPartnerSV] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ManualIssuance_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ManualIssuance_Insert.StoredProcedure.sql 123649 2018-05-15 09:41:44Z sk185403 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ManualIssuance_Insert]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ManualIssuance_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_ManualIssuance_Insert] 
  @ClientLocationCode       NVARCHAR(20),
  @LocationID               INT,
  @BoxID                    INT,
  @TransactionNumber        NVARCHAR(256),
  @PrimaryExtID             NVARCHAR(400),
  @CustomerTypeID           INT,
  @OfferID                  BIGINT,
  @ClientOfferID            NVARCHAR(40),
  @ROID                     BIGINT,
  @IssuanceDate             DATETIME,
  @DeliverableType          INT, 
  @Void                     INT, 
  @RewardQty                INT, 
  @ProgramID                BIGINT,
  @RewardValue              DECIMAL(12,3), 
  @UniqueID                 VARCHAR(30),
  @Expiration               DATETIME, 
  @ChargeBackVendorID       INT, 
  @CashierNum               VARCHAR(30),
  @Gross                    DECIMAL(12,3), 
  @Net                      DECIMAL(12,3),
  @ChargebackDept           NVARCHAR(120),
  @PromoEngine              NVARCHAR(255),
  @ExtCRMInterface          NVARCHAR(100),
  @SourceTypeID             INT,
  @ExceedManualThreshold    BIT,
  @LogixTransNum            CHAR(36),
  @VendorCouponCode         NVARCHAR(20),
  @ManufacturerCoupon       INT, 
  @StatusFlag               INT,
  @CardTypeID               NVARCHAR(26),
  @ResolvedCustomerID       NVARCHAR(400),
  @HHID                     NVARCHAR(400),
  @TriggerID                NVARCHAR(150),
  @TrackableCouponProgramID INT,
  @Is_InstantWin_Winner		BIT,
  @DiscountedUPC			NVARCHAR(100),
  @ConditionalUPCs			VARCHAR(1000),
  @Coupon					NVARCHAR(150),
  @CouponExtProgramID	    NVARCHAR(20),
  @StoreCoupon              INT
  
  AS 
  -- This stored procedure inserts new record into ManualIssuance table for processing by ProcessIssuance agent
  
  SET NOCOUNT ON;
  
  INSERT INTO ManualIssuance WITH (ROWLOCK)
           ([ClientLocationCode]
           ,[LocationID]
           ,[BoxID]
           ,[TransactionNumber]
           ,[PrimaryExtID]
           ,[CustomerTypeID]
           ,[OfferID]
           ,[ClientOfferID]
           ,[ROID]
           ,[IssuanceDate]
           ,[DeliverableType]
           ,[Void]
           ,[RewardQty]
           ,[ProgramID]
           ,[RewardValue]
           ,[UniqueID]
           ,[Expiration]
           ,[ChargebackVendorID]
           ,[CashierNum]
           ,[Gross]
           ,[Net]
           ,[ChargebackDept]
           ,[PromoEngine]
           ,[ExtCRMInterface]
           ,[SourceTypeID]
           ,[ExceedManualThreshold]
           ,[LogixTransNum]
           ,[VendorCouponCode]
           ,[ManufacturerCoupon]
           ,[StatusFlag]
           ,[CardTypeID]
           ,[ResolvedCustomerID]
           ,[HHID]
           ,[TriggerID]
		   ,[TrackableCouponProgramID]
		   ,[Is_InstantWin_Winner]
		   ,[DiscountedUPC]
		   ,[ConditionalUPCs]
		   ,[Coupon]
		   ,[CouponExtProgramID]
		   ,[StoreCoupon])
     VALUES
           (@ClientLocationCode
           ,@LocationID
           ,@BoxID
           ,@TransactionNumber
           ,@PrimaryExtID
           ,@CustomerTypeID
           ,@OfferID
           ,@ClientOfferID
           ,@ROID
           ,@IssuanceDate
           ,@DeliverableType
           ,@Void
           ,@RewardQty
           ,@ProgramID
           ,@RewardValue
           ,@UniqueID
           ,@Expiration
           ,@ChargebackVendorID
           ,@CashierNum
           ,@Gross
           ,@Net
           ,@ChargebackDept
           ,@PromoEngine
           ,@ExtCRMInterface
           ,@SourceTypeID
           ,@ExceedManualThreshold
           ,@LogixTransNum
           ,@VendorCouponCode
           ,@ManufacturerCoupon
           ,@StatusFlag
           ,@CardTypeID
           ,@ResolvedCustomerID
           ,@HHID
           ,@TriggerID
		   ,@TrackableCouponProgramID
		   ,@Is_InstantWin_Winner
		   ,@DiscountedUPC
		   ,@ConditionalUPCs
		   ,@Coupon
		   ,@CouponExtProgramID
		   ,@StoreCoupon)
  
GO
GRANT EXECUTE ON [dbo].[pa_ManualIssuance_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ProcessIssuance_CreateTable.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_ProcessIssuance_CreateTable]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ProcessIssuance_CreateTable]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_ProcessIssuance_CreateTable]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_ProcessIssuance_CreateTable] @TableName varchar(100)
AS
    -- $Id: dbo.pa_ProcessIssuance_CreateTable.StoredProcedure.sql 123649 2018-05-15 09:41:44Z sk185403 $
    -- Build Version: 7.3.1.138972


  EXEC ('CREATE TABLE [dbo].['+@TableName+'](
    [PKID]                   [int] IDENTITY (1, 1) NOT NULL CONSTRAINT [PK_'+@TableName+'] PRIMARY KEY CLUSTERED, 
    [ClientLocationCode]     [nvarchar](20) NOT NULL,
    [LocationID]             [int] NOT NULL, 
    [BoxID]                  [int] NOT NULL,
    [TransactionNumber]      [nvarchar](256) NOT NULL,
    [PrimaryExtID]           [nvarchar](400) NULL,
    [OfferID]                [bigint] NULL,
    [ClientOfferID]          [nvarchar](40) NULL,
    [ROID]                   [bigint] NULL,
    [IssuanceDate]           [datetime] NOT NULL,
    [DeliverableType]        [int] NOT NULL,
    [Void]                   [int] NOT NULL,
    [RewardQty]              [int] NULL,
    [ProgramID]              [bigint] NULL,
    [RewardValue]            [decimal](12, 3) NULL,
    [UniqueID]               [varchar](30) NULL,
    [Expiration]             [datetime] NULL,
    [ChargeBackVendorID]     [nvarchar](50) NULL,
    [CashierNum]             [varchar](30) NULL,
    [Gross]                  [decimal](12,3) NULL, 
    [Net]                    [decimal](12,3) NULL, 
    [ChargebackDept]         [nvarchar](120) NULL,
    [PromoEngine]            [nvarchar](255) NULL,
    [ExtCRMInterface]        [nvarchar](100) NULL,
    [SourceTypeID]           [int] NULL,
    [ExceedManualThreshold]  [bit] NULL CONSTRAINT [DF_' + @TableName + '_ExceedManualThreshold] DEFAULT (0),
    [LogixTransNum]          [char](36),
    [VendorCouponCode]       [nvarchar](20) NULL,
    [ManufacturerCoupon]     [int] NULL,
    [CustomerTypeID]         [int] NOT NULL Constraint [DF_'+@TableName+'_CustomerTypeID] Default (0),
    [StatusFlag]             [int] NULL CONSTRAINT [DF_'+@TableName+'_StatusFlag]  DEFAULT (0),
    [DiscountedUPC]          [nvarchar](100) NULL,
    [CardTypeID]             [nvarchar](26) NULL,
    [ResolvedCustomerID]     [nvarchar](400) NULL,
    [HHID]                   [nvarchar](400) NULL,
    [AirmileMemberID]        [nvarchar](50) NULL,
    [OfferCatExtID]          [nvarchar](50) NULL, 
    [PromoEngineSubtypeID]   [int] NULL,
    [ConditionalUPCs]        [varchar](1000) NULL,
    [Replayed]               [int] NOT NULL CONSTRAINT [DF_'+@TableName+'_Replayed] DEFAULT (0),
    [POSTimeStamp]           [datetime] NULL,
    [TriggerID]              [nvarchar](150) NULL,
    [ExtRewardID]            [nvarchar](255) NULL,
    [RewardData]		[nvarchar](255) NULL,
    [RewardValueCurrency]  [nvarchar](20) NULL,
    [TrackableCouponProgramID] [int] NULL,
    [Is_InstantWin_Winner] [bit] NULL,
    [Coupon] [nvarchar](150) NULL,
    [CouponExtProgramID] [nvarchar](20) NULL,
    [StoreCoupon] [int] NULL,
    [ConsumerAccountNumber] [nvarchar](100) NULL,
    [KeyRotationFlag] [bit] NULL	
  ) ON [PRIMARY]')

GO

GRANT EXECUTE ON [dbo].[pa_ProcessIssuance_CreateTable] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Process_ManualIssuance.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Process_ManualIssuance.StoredProcedure.sql 120473 2018-02-12 18:49:21Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Process_ManualIssuance]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Process_ManualIssuance]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Process_ManualIssuance]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_Process_ManualIssuance] @IssuanceTable varchar(100), @RunAgain int Output
AS 
  -- This procedure moves ManualIssuance records to the daily Issuance table
  SET NOCOUNT ON;
  DECLARE @NumRows AS INT;
  DECLARE @RowLimit AS INT = 1800
  SET @RunAgain=0;
  --SET rowcount 1800;

  UPDATE Top (@RowLimit) ManualIssuance SET WaitingACK=-5 WHERE WaitingACK=0
  
  SET @NumRows = @@ROWCOUNT;
  
  IF @RowLimit=@NumRows BEGIN
    SET @RunAgain=1;
  END

  --SET ROWCOUNT 0;

  IF @NumRows>0 BEGIN
    BEGIN TRY		
      BEGIN TRAN T1
        EXEC ('insert into ' + @IssuanceTable + ' (ClientLocationCode, LocationID, BoxID, TransactionNumber, PrimaryExtID, OfferID, ClientOfferID, ROID, IssuanceDate, DeliverableType, Void, RewardQty, ProgramID, RewardValue, UniqueID, Expiration, ChargeBackVendorID, CashierNum, Gross, Net, ChargebackDept, PromoEngine, ExtCRMInterface, StatusFlag, SourceTypeID, ExceedManualThreshold, LogixTransNum, VendorCouponCode, ManufacturerCoupon, CustomerTypeID, CardTypeID, ResolvedCustomerID, HHID, TriggerID, TrackableCouponProgramID, Is_InstantWin_Winner,DiscountedUPC,ConditionalUPCs,Coupon,CouponExtProgramID, StoreCoupon,ConsumerAccountNumber) ' +
             '  select ClientLocationCode, LocationID, BoxID, TransactionNumber, PrimaryExtID, OfferID, ClientOfferID, ROID, IssuanceDate, DeliverableType, Void, RewardQty, ProgramID, RewardValue, UniqueID, Expiration, ChargeBackVendorID, CashierNum, Gross, Net, ChargebackDept, PromoEngine, ExtCRMInterface, StatusFlag, SourceTypeID, ExceedManualThreshold, LogixTransNum, VendorCouponCode, ManufacturerCoupon, CustomertypeID, CardTypeID, ResolvedCustomerID, HHID, TriggerID, TrackableCouponProgramID, Is_InstantWin_Winner,DiscountedUPC,ConditionalUPCs,Coupon,CouponExtProgramID,StoreCoupon ,ConsumerAccountNumber from ManualIssuance with (NoLock) where WaitingACK=-5')
      
        DELETE FROM ManualIssuance WHERE WaitingACK=-5;
      COMMIT TRAN T1;
    END TRY

    BEGIN CATCH
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
    
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  END -- if @NumRows>0

GO
GRANT EXECUTE ON [dbo].[pa_Process_ManualIssuance] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_IssuanceInsertQueue_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_IssuanceInsertQueue_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_IssuanceInsertQueue_Insert]    Script Date: 12/27/2010 14:55:48 ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_IssuanceInsertQueue_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_IssuanceInsertQueue_Insert]
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_IssuanceInsertQueue_Insert] @FileName nvarchar(255), @FileVersion varchar(10) 
AS 
  SET NOCOUNT ON;
  Insert into [dbo].[IssuanceInsertQueue] with (RowLock) (FileName, UploadTime, StatusFlag, FileVersion) values (@FileName, getDate(), 0, @FileVersion);

GO
GRANT EXECUTE ON [dbo].[pt_IssuanceInsertQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_SourceTypes_Delete_ByID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_SourceTypes_Delete_ByID.StoredProcedure.sql 33638 2011-07-08 12:48:40Z anthony $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_SourceTypes_Delete_ByID]    Script Date: 12/21/2013 13:13:14 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_SourceTypes_Delete_ByID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_SourceTypes_Delete_ByID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_SourceTypes_Delete_ByID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_SourceTypes_Delete_ByID] @PKID bigint
AS 
  SET NOCOUNT ON;
  declare @NumRows int;

  set @NumRows=0;

  select @NumRows=count(*) from SourceTypes where SourceTypeID=@PKID;
  if @NumRows>0 begin
    Delete from SourceTypes with (RowLock) where SourceTypeID=@PKID;
  end 
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_SourceTypes_Delete_ByID] TO [Copient_Logix_uspRole] AS [dbo]
GO


-- BEGIN SCRIPT FOOTER ------------------------------------------------------

-- Add/Update the DBVersion function
IF OBJECT_ID ( N'dbo.DBVersion', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[DBVersion]
END
GO

CREATE FUNCTION [dbo].[DBVersion]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:45
    -- Build Version: 7.3.1.138972
    return '7.3.1.138972';
END
GO

GRANT EXECUTE ON [dbo].[DBVersion] TO [Copient_Logix_uspRole] AS [dbo]
GO


-- Add/Update the DBGenerated function
IF OBJECT_ID ( N'dbo.DBGenerated', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[DBGenerated]
END
GO

CREATE FUNCTION [dbo].[DBGenerated]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:45
    -- Build Version: 7.3.1.138972
    return '2019-08-19 11:58:45';
END
GO

GRANT EXECUTE ON [dbo].[DBGenerated] TO [Copient_Logix_uspRole] AS [dbo]
GO





-- Add/Update the LogixDBName function
IF OBJECT_ID ( N'dbo.LogixDBName', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[LogixDBName]
END
GO

CREATE FUNCTION [dbo].[LogixDBName]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:45
    -- Build Version: 7.3.1.138972
    return 'LogixEX';
END
GO

GRANT EXECUTE ON [dbo].[LogixDBName] TO [Copient_Logix_uspRole] AS [dbo]
GO


-- *********************************************
-- * GRANT EXECUTE USP and UDF SECTION         *
-- *********************************************
declare @CLRole as varchar(128)
set @CLRole = 'Copient_Logix_uspRole' --- Replace this with an appropriated role if different. Copient_Logix_uspRole is the recommended name for Logix.
IF EXISTS (select name from sys.database_principals where type='R' and name=@CLRole) BEGIN
  declare @uspudfName as varchar(128)
  declare uspCursor CURSOR FOR
    select name from sys.procedures where name not like 'sp[_]%'
    union select name from sys.objects where type='FN' and name not like 'fn_%'
    order by name FOR READ ONLY
  OPEN uspCursor
  FETCH uspCursor INTO @uspudfName
  WHILE @@FETCH_STATUS = 0 BEGIN
    EXECUTE('GRANT EXECUTE ON [' + @uspudfName + '] TO ' + @CLRole)
    FETCH uspCursor INTO @uspudfName
  END
  CLOSE uspCursor
  DEALLOCATE uspCursor
END
ELSE
    print 'Please create "@CLRole", or assign the right role in your system to @CLRole variable';
GO

print 'Completed LogixEX'
print DB_NAME() + ' DBVersion is now ' + [dbo].[DBVersion]()
print CURRENT_TIMESTAMP;


