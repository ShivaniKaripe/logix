-- -----------------------------------------------------------------------------------------------
-- LogixWH script
-- Generated by sqlcat_db.py ( $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $ )
-- Generated 2019-08-19 11:58:45
-- Build Version: 7.3.1.138972
-- -----------------------------------------------------------------------------------------------
print CURRENT_TIMESTAMP;
print 'Beginning LogixWH script on'
print @@VERSION;
print 'Using database ' + DB_NAME() + ' on ' + @@SERVERNAME;
print 'Running as user ' + SYSTEM_USER;

print 'Upgrading database ' + DB_NAME();
IF OBJECT_ID ( N'dbo.DBVersion', N'FN') IS NOT NULL
    print ' from DBVersion ' + [dbo].[DBVersion]();
print ' to 7.3.1.138972 (generated 2019-08-19 11:58:45)'

declare @dbn nvarchar(255)
set @dbn = db_name()

declare @error_msg_format nvarchar(512)
set @error_msg_format = CHAR(13) + CHAR(13) + 'THIS IS THE WRONG DATABASE (%s)' + CHAR(13) + CHAR(13)

IF db_name() = 'master'
BEGIN
    RAISERROR( @error_msg_format, 20, 1, @dbn ) WITH LOG, NOWAIT
END

IF OBJECT_ID ( N'dbo.LogixDBName', N'FN') IS NOT NULL
BEGIN
    IF [dbo].[LogixDBName]() <> 'LogixWH'
    BEGIN
        RAISERROR( @error_msg_format, 20, 1, @dbn ) WITH LOG, NOWAIT
    END
END

IF NOT EXISTS (SELECT * FROM fn_my_permissions (db_name(), 'DATABASE') WHERE permission_name='ALTER')
BEGIN
    declare @error_permission nvarchar(256)
    set @error_permission = CHAR(13) + CHAR(13) + 'This user does not have sufficient permissions to run this script. It must be run by a member of the sysadmin fixed server role or a user with ALTER TRACE and ALTER DATABASE permissions.' + CHAR(13) + CHAR(13)
    RAISERROR( @error_permission, 18, 1 ) WITH NOWAIT
END

SET NOCOUNT ON;

--
-- -- DEFAULT CONSTRAINT renaming code --
-- Creates a stored proc to rename mis-named DEFAULT CONSTRAINTs, calls that stored proc, then DROPs that stored proc when it is no longer needed.
--
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Logix_FixDefaultConstraintNames]') AND type in (N'P', N'PC'))
BEGIN
    DROP PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
END
GO

CREATE PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
AS
BEGIN

    SET NOCOUNT ON
    declare @keepgoing as bit
    set @keepgoing = 1
    while ( @keepgoing = 1 )
    BEGIN
        set @keepgoing = 0

        DECLARE @cmd as nvarchar(512);
		    DECLARE @DFcmd as nvarchar(256);
		    DECLARE @DFObject as nvarchar(256);
        SELECT TOP 1 @DFObject = 'DF_' + OBJECT_NAME(dc.parent_object_id) + '_' + columnList.COLUMN_NAME, @cmd = 'dbo.sp_rename ' + dc.name + ', DF_' + OBJECT_NAME(dc.parent_object_id) + '_' + columnList.COLUMN_NAME + ', OBJECT ;'
                            FROM sys.default_constraints as dc
                            INNER JOIN INFORMATION_SCHEMA.COLUMNS AS columnList ON
                                columnList.TABLE_NAME = OBJECT_NAME(dc.parent_object_id) AND columnList.ORDINAL_POSITION = dc.parent_column_id
                        WHERE dc.is_system_named = 1
                            and SUBSTRING ( dc.name, 1, 4 ) = 'DF__'
                            and object_name(dc.parent_object_id) not like 'sys[^_]%'
                            and object_name(dc.parent_object_id) not like 'MS[a-z]%'
                            and objectproperty(dc.parent_object_id, 'IsUserTable') = 1
                            and objectproperty(dc.parent_object_id, 'IsMSShipped') = 0

        IF @@ROWCOUNT > 0
        BEGIN
            print 'Renaming incorrectly named DEFAULT CONSTRAINT ( ' + @cmd + ' )'
			      IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(@DFObject) AND type = 'D')
			      BEGIN
			        SET @DFcmd = 'ALTER TABLE [dbo].[CPE_Incentives] DROP CONSTRAINT ' +@DFObject;
			        EXEC( @DFcmd );
			      END
            EXEC( @cmd );
            set @keepgoing = 1
        END

    END -- while

END -- Logix_FixDefaultConstraintNames
GO

EXEC [dbo].[Logix_FixDefaultConstraintNames]
GO

DROP PROCEDURE [dbo].[Logix_FixDefaultConstraintNames]
GO

-- DEFAULT CONSTRAINT renaming complete


-- END SCRIPT HEADER ------------------------------------------------------


--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/tables/ --
--
print 'processing tables/DBA.PD_ActivityMonitor.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	vii)	DBA.PD_ActivityMonitor

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_ActivityMonitor' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_ActivityMonitor(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_ActivityMonitor_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_ActivityMonitor_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Session_ID 						SMALLINT 			NOT NULL
			, User_Process 						CHAR(1) 			NULL
			, Login_Name						NVARCHAR(128) 		NOT NULL
			, Database_Name						NVARCHAR(128) 		NOT NULL
			, Task_State 						NVARCHAR(60) 		NOT NULL
			, Command 							NVARCHAR(50) 		NOT NULL
			, Application_Name					NVARCHAR(128) 		NOT NULL
			, Wait_Time_in_ms 					BIGINT 				NOT NULL
			, Wait_Type 						NVARCHAR(60) 		NOT NULL
			, Wait_Resource 					NVARCHAR(1024) 		NOT NULL
			, Blocked_By 						VARCHAR(30) 		NOT NULL
			, Head_Blocker 						VARCHAR(1) 			NOT NULL
			, Total_CPU_ms 						INT 				NOT NULL
			, Total_Physical_IO_in_MB			BIGINT 				NULL
			, Memory_USE_KB 					INT 				NULL
			, Open_Transactions 				INT 				NOT NULL
			, Login_Time 						DATETIME 			NOT NULL
			, Last_Request_Start_Time 			DATETIME 			NOT NULL
			, [Host_Name] 						NVARCHAR(128) 		NOT NULL
			, Net_Address						VARCHAR(48) 		NOT NULL
			, Execution_Context_ID 				INT 				NOT NULL
			, Request_ID 						INT 				NOT NULL
		) 
		ON [PRIMARY]
ELSE
	PRINT 'DBA.PD_ActivityMonitor is already added'
GO

--Changing column precision from 16 to 50
IF COLUMNPROPERTY( OBJECT_ID( '[DBA].[PD_ActivityMonitor]' ), 'Command', 'PRECISION' ) < 50 
	ALTER TABLE [DBA].[PD_ActivityMonitor] ALTER COLUMN [Command] [NVARCHAR](50) NOT NULL
GO


PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_FKs_With_NoIndexes.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	v)	DBA.PD_FKs_With_NoIndexes

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_FKs_With_NoIndexes' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_FKs_With_NoIndexes (
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_FKs_With_NoIndexes_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_FKs_With_NoIndexes_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Foreign_Key_Name					VARCHAR(100)
			, Relationship						VARCHAR(250)
			, Parent_Table_Index_State			VARCHAR(100)
			, Referenced_Table_Index_State		VARCHAR(100)
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_FKs_With_NoIndexes is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_IndexPhysicalStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	vi)	DBA.PD_IndexPhysicalStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_IndexPhysicalStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_IndexPhysicalStats (
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_IndexPhysicalStats					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_IndexPhysicalStats_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Schema_Name]						VARCHAR(20)			NOT NULL
			, [Table_Name]						VARCHAR(100)		NOT NULL
			, [Index_Name]						VARCHAR(100)		NOT NULL
			, [Database_ID]						INT					NOT NULL
			, [Object_ID]						INT					NOT NULL
			, [Index_ID]						INT					NOT NULL
			, Partition_Number					INT					NULL
			, Index_Type_Desc					VARCHAR(30)			NULL
			, Alloc_Unit_Type_Desc				VARCHAR(30)			NULL
			, Index_Depth						INT					NULL
			, Index_Level						INT					NULL
			, Avg_fragmentation_in_percent		NUMERIC(10,2)		NULL
			, Fragment_count					INT					NULL
			, Avg_fragment_size_in_pages		NUMERIC(10,2)		NULL
			, Page_count						INT					NULL
			, Avg_page_space_used_in_percent	NUMERIC(10,2)		NULL
			, Created_By						VARCHAR(50)			NOT NULL		CONSTRAINT		DF_PD_IndexPhysicalStats_Created_By			DEFAULT								SYSTEM_USER
		)
		ON  [PRIMARY]
	ELSE
		PRINT 'DBA.PD_IndexPhysicalStats is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_Index_Usage.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	iv)	DBA.PD_Index_Usage

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_Index_Usage' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_Index_Usage(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_Index_Usage_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_Index_Usage_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Category							VARCHAR(20)			NOT NULL
			, Table_Name						VARCHAR(50)			NOT NULL
			, Index_Name						VARCHAR(100)		NULL
			, User_Seeks						BIGINT				NULL
			, User_Scans						BIGINT				NULL
			, User_Lookups						BIGINT				NULL
			, User_Updates						BIGINT				NULL
			, Last_User_Scan					DATETIME			NULL
			, Last_User_Seek					DATETIME			NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_Index_Usage is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_Missing_Indexes.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	iii)	DBA.PD_Missing_Indexes

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_Missing_Indexes' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_Missing_Indexes(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_Missing_Indexes_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_Missing_Indexes_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Category							VARCHAR(25)			NOT NULL
			, Total_Cost						BIGINT				NULL
			, Average_User_Impact				NUMERIC(5,2)		NULL
			, Table_Name						VARCHAR(50)			NULL
			, Equality_Usage					VARCHAR(500)		NULL		
			, InEquality_Usage					VARCHAR(500)		NULL
			, Include_Columns					VARCHAR(500)		NULL
			, Unique_Compiles					BIGINT				NULL
			, User_Scans						BIGINT				NULL
			, User_Seeks						BIGINT				NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_Missing_Indexes is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_ServerHardware.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	xi)		DBA.PD_ServerHardware

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_ServerHardware' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_ServerHardware
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_ServerHardware_ID						PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_ServerHardware_Created_On				DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Sql and OS Version]				VARCHAR(200)		NULL
			, [NoF Physical CPUs]				TINYINT				NULL
			, [NoF Logical CPUs]				TINYINT				NULL
			, [Physical Mem in GB]				NUMERIC(5,2)		NULL
			, [Available Physical Mem in GB]	NUMERIC(5,2)		NULL
			, [Total Page File Size in GB]		NUMERIC(5,2)		NULL
			, [System Memory State]				VARCHAR(20)			NULL
			, [Is it a VM]						VARCHAR(10)			NULL
			, [SqlServer Instance Start Time]	DATETIME			NULL
		) ON  [PRIMARY]
	ELSE
		PRINT 'DBA.PD_ServerHardware is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_TableStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	x)		DBA.PD_TableStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_TableStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_TableStats
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_TableStats_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_TableStats_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Table_Name						VARCHAR(100)		NOT NULL
			, Index_Name						VARCHAR(100)			NULL
			, [Index_Type]						VARCHAR(70)			NOT	NULL
			, RowCounts							BIGINT				NOT NULL
			, TotalSpaceKB						INT					NOT	NULL
			, Is_Primary_Key					BIT					NOT NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_TableStats is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_TopQueries.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	ii)	DBA.PD_TopQueries

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects As O WHERE O.name = N'PD_TopQueries' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_TopQueries(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_TopQueries_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_TopQueries_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, [Top_Category]					VARCHAR(25)			NOT NULL
			, Query								VARCHAR(MAX)		NOT NULL
			, Execution_Count					BIGINT				NULL
			, Average_CPU_Used_in_S				INT					NULL
			, Total_Logical_Reads				BIGINT				NULL
			, Average_logical_reads				BIGINT				NULL
			, Last_Logical_Reads				INT					NULL
			, Total_Logical_Writes				BIGINT				NULL
			, Last_Logical_Writes				INT					NULL
			, Total_Worker_Time					BIGINT				NULL
			, Last_Worker_Time					BIGINT				NULL
			, Total_elapsed_time_in_S			INT					NULL
			, Last_elapsed_time_in_S			INT					NULL
			, Last_Execution_Time				INT					NULL
		) ON  [PRIMARY]
ELSE
        PRINT 'DBA.PD_TopQueries is already added'
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Execution_Count') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Execution_Count] BIGINT NULL
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Total_Logical_Reads') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Total_Logical_Reads] BIGINT NULL
GO

--Changing datatype from int to bigint
IF (SELECT system_type_id FROM sys.columns WHERE object_id = OBJECT_ID('[DBA].[PD_TopQueries]') AND name = 'Total_Logical_Writes') = 56 -- Integer
	ALTER TABLE [DBA].[PD_TopQueries] ALTER COLUMN [Total_Logical_Writes] BIGINT NULL
GO

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_UpdateStatistics.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	ix)		DBA.PD_UpdateStatistics

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_UpdateStatistics' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))	
		CREATE TABLE DBA.PD_UpdateStatistics
		(
			  ID 								INT 			 	NOT NULL		CONSTRAINT		PK_PD_UpdateStatistics_ID					PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On 						SMALLDATETIME 		NOT NULL 		CONSTRAINT		DF_PD_UpdateStatistics_Created_On			DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, Table_Name						VARCHAR(100)		NOT NULL
			, Statistic							VARCHAR(100)		NOT NULL
			, [Statistic Type]					VARCHAR(100)		NOT	NULL
			, [Stats Last Updated]				DATETIME				NULL
			, ModifiedRows						BIGINT					NULL
			, No_Recompute						BIT					NOT NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_UpdateStatistics is already added'
	GO
	

PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'	

print 'processing tables/DBA.PD_WaitStats.sql'; 
--
GO
PRINT '---------------------------------------------------------------------------------------------------------------------------------'	
	PRINT 'Start of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)	

	--
	--	DBA Schema for PD
	--
	IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'DBA')
		EXEC sp_executesql N'CREATE SCHEMA [DBA] AUTHORIZATION [dbo]'
	GO

--	i)	DBA.PD_WaitStats

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects AS O WHERE O.name = N'PD_WaitStats' AND O.type = 'U' AND O.SCHEMA_ID = SCHEMA_ID('DBA'))
		CREATE TABLE DBA.PD_WaitStats(
			  ID								INT					NOT NULL		CONSTRAINT		PK_PD_WaitStats_ID							PRIMARY KEY			CLUSTERED		IDENTITY(1,1)
			, Created_On						SMALLDATETIME		NOT NULL		CONSTRAINT		DF_PD_WaitStats_Created_On					DEFAULT								(CONVERT(SMALLDATETIME, GETDATE()))
			, WaitType							NVARCHAR(60)		NOT NULL	
			, Wait_S							DECIMAL(14,2)		NULL
			, Resource_S						DECIMAL(14,2)		NULL
			, Signal_S							DECIMAL(14,2)		NULL
			, WaitCount							BIGINT				NOT NULL
			, Percentage						DECIMAL(4,2)		NULL
			, AvgWait_S							DECIMAL(14,4)		NULL
			, AvgRes_S							DECIMAL(14,4)		NULL
			, AvgSig_S							DECIMAL(14,4)		NULL
		) ON [PRIMARY]
	ELSE
		PRINT 'DBA.PD_WaitStats is already added'
	GO
	
	
PRINT 'End of adding schema and table for ' + DB_NAME() + ' database for AMS_PD' + CONVERT(VARCHAR, GETDATE(), 109)
	PRINT '---------------------------------------------------------------------------------------------------------------------------------'		


--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/views/ --
--

--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/functions/ --
--

--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/monitoring/storedprocedures/ --
--
print 'processing storedprocedures/PD_Job.sql'; 
--
GO
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
--
--		Purpose		:	Create AMS_PD job
--		Author		:	Uday K. Sangepu for NCR on December 5, 2012 
--
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

--
--	Start of script:	PD_Job.sql
--

SET NOCOUNT ON

BEGIN TRY

	BEGIN TRANSACTION Add_AMS_PD_Job

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	I)	Create Job: AMS_PD
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		DECLARE @JobID		UNIQUEIDENTIFIER
				, @ERR 		INT
				, @DBNAME	SYSNAME
				, @JOBNAME  SYSNAME

		-- Get the actual database name into a variable of SYSNAME datatype
		SELECT @DBNAME = DB_NAME() 
		SELECT @JOBNAME = N'AMS_PD_' + @DBNAME
		--print 'JOBNAME: ' + @JOBNAME
		
		--Get jobstep name to verify if it is exists for each jobstep
        DECLARE @StepName Varchar(50)
        Select @StepName = step_name from msdb.dbo.sysjobsteps where job_id = @JobID and database_name = @DBNAME  		

		
		--	EXECUTE msdb.dbo.sp_delete_job @job_name = N'AMS_PD'
		If not exists(select * from msdb.dbo.sysjobs WHERE job_id = @jobId and name  = @JOBNAME)	
	Begin
		EXECUTE msdb.dbo.sp_add_job 
				  @job_name					=	@JOBNAME
				, @enabled					=	1
				, @description				=	N'Monitor and Gather performance diagnostic metrics for the database server'
				, @owner_login_name			=	N'sa'
				, @notify_level_eventlog	=	2
				, @job_id					=	@JobID OUTPUT

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_job failed for AMS_PD'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END

		SELECT @JobID [AMS_PD JobID]
	End	

		
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	II)	Create Job steps
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

		--
		--	Step 1: Start AMS_PD Job
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)	
	 Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	1
				, @step_name				=	N'Start AMS_PD Job' 
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Start AMS_PD Job
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													DECLARE   @JobStartTime	DATETIME = GETDATE()
													PRINT ''Performance Diagnostics Job Start: '' + CONVERT(VARCHAR, @JobStartTime, 109)		--	With Milli Seconds
													PRINT ''------------------------------------------------------------------------------------------------------''
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 1: Start AMS_PD Job'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
    End
		--
		--	Step 2: WaitStats
		--
       If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	2
				, @step_name				=	N'WaitStats'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather Wait Stats 
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													;WITH	Waits 
													AS
													(
														SELECT wait_type										AS [Wait_Type]
															, wait_time_ms / 1000.0 							AS WaitS
															, (wait_time_ms - signal_wait_time_ms) / 1000.0 	AS ResourceS
															, signal_wait_time_ms / 1000.0 						AS SignalS
															, waiting_tasks_count 								AS WaitCount
															, 100.0 * wait_time_ms / SUM(wait_time_ms) OVER () 	AS Percentage
															, ROW_NUMBER() OVER ( ORDER BY wait_time_ms DESC) 	AS [RowNum]
														FROM   sys.dm_os_wait_stats
														WHERE  wait_type NOT IN (	''CLR_SEMAPHORE'',				''LAZYWRITER_SLEEP'',				''RESOURCE_QUEUE'',						''SLEEP_TASK'',				''SLEEP_SYSTEMTASK''
																					, ''SQLTRACE_BUFFER_FLUSH'',		''WAITFOR'',						''LOGMGR_QUEUE'',							''CHECKPOINT_QUEUE'',			''REQUEST_FOR_DEADLOCK_SEARCH''
																					, ''XE_TIMER_EVENT'',				''BROKER_TO_FLUSH'',				''BROKER_TASK_STOP'',						''CLR_MANUAL_EVENT'',			''CLR_AUTO_EVENT''
																					, ''DISPATCHER_QUEUE_SEMAPHORE'', ''FT_IFTS_SCHEDULER_IDLE_WAIT'',	''XE_DISPATCHER_WAIT'',					''XE_DISPATCHER_JOIN'',		''BROKER_EVENTHANDLER''
																					, ''TRACEWRITE'',					''FT_IFTSHC_MUTEX'',				''SQLTRACE_INCREMENTAL_FLUSH_SLEEP'',		''BROKER_RECEIVE_WAITFOR'',	''ONDEMAND_TASK_QUEUE''
																					, ''DBMIRROR_EVENTS_QUEUE'',		''DBMIRRORING_CMD'',				''BROKER_TRANSMITTER'',					''SQLTRACE_WAIT_ENTRIES'',	''SLEEP_BPOOL_FLUSH''
																					, ''SQLTRACE_LOCK''
																				)	--	These are filtered out as these are usually benign
													)
													INSERT INTO DBA.PD_WaitStats(WaitType, Wait_S, Resource_S, Signal_S, WaitCount, Percentage, AvgWait_S, AvgRes_S, AvgSig_S)
													SELECT    TOP 10
															  W1.wait_type 												AS WaitType
															, CAST (W1.WaitS AS DECIMAL (14, 2)) 						AS Wait_S
															, CAST (W1.ResourceS AS DECIMAL (14, 2)) 					AS Resource_S
															, CAST (W1.SignalS AS DECIMAL (14, 2)) 						AS Signal_S
															, W1.WaitCount 												AS WaitCount
															, CAST (W1.Percentage AS DECIMAL (4, 2)) 					AS Percentage
															, CAST ((W1.WaitS / W1.WaitCount) AS DECIMAL (14, 4)) 		AS AvgWait_S
															, CAST ((W1.ResourceS / W1.WaitCount) AS DECIMAL (14, 4)) 	AS AvgRes_S
															, CAST ((W1.SignalS / W1.WaitCount) AS DECIMAL (14, 4)) 	AS AvgSig_S
													FROM Waits AS W1
													INNER JOIN Waits AS W2
														ON W2.RowNum <= W1.RowNum
													GROUP BY  W1.RowNum
															, W1.wait_type
															, W1.WaitS
															, W1.ResourceS
															, W1.SignalS
															, W1.WaitCount
															, W1.Percentage
													HAVING   SUM(W2.Percentage) - W1.Percentage < 95; -- percentage threshold
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 2: WaitStats'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End										

		--
		--	Step 3: Top_N_Queries
		--
        If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	3
				, @step_name				=	N'Top_N_Queries'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather queries that take the most resources
													--				i)		Total CPU usage
													--				ii)		Average CPU usage
													--				iii)	Total Logial IO
													--				iv)		Average Logical IO
													--
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													--
													--	i)	Total CPU usage	
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT    TOP 10 
															  ''Top Total CPU Time''																	AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													--		, qp.query_plan																			AS	[Query_Plan]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY qs.total_worker_time DESC; 


													--
													--	ii)	Top Average CPU Time
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT    TOP 10 
															  ''Top Average CPU Time''																AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													--		, qp.query_plan																			AS	[Query_Plan]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Average_CPU_Used_in_S] DESC; -- CPU time

													--
													--	iii)	Total Logical IO
													--
													INSERT INTO DBA.PD_TopQueries (Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT	TOP 10 
															''Top Total Logical IO''																	AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Total_Logical_Reads] DESC; 


													--
													--	iv)	Average Logical IO
													--
													INSERT INTO DBA.PD_TopQueries 	(Top_Category, Query, Execution_Count, Average_CPU_Used_in_S, Total_Logical_Reads, Average_logical_reads, Last_Logical_Reads, Total_Logical_Writes, Last_Logical_Writes, Total_Worker_Time, Last_Worker_Time, Total_elapsed_time_in_S, Last_elapsed_time_in_S, Last_Execution_Time)
													SELECT	TOP 10 
															''Top Average Logical IO''																AS	[Top_Category]
															, SUBSTRING(qt.TEXT, (qs.statement_start_offset / 2) + 1, 
																				((CASE qs.statement_end_offset 
																						WHEN -1 THEN DATALENGTH(qt.TEXT) 
																						ELSE qs.statement_end_offset 
																					END - qs.statement_start_offset) / 2) + 1
																		)																			AS	[Query]
															, qs.execution_count																	AS	[Execution_Count]
															, CAST((qs.total_worker_time * 1.0) / (qs.execution_count * 1000000) AS NUMERIC(10,2))	AS	[Average_CPU_Used_in_S]
															, qs.total_logical_reads																AS	[Total_Logical_Reads]
															, CONVERT(BIGINT, total_logical_reads/execution_count)									AS	[Average_logical_reads]
															, qs.last_logical_reads																	AS	[Last_Logical_Reads]
															, qs.total_logical_writes																AS	[Total_Logical_Writes]
															, qs.last_logical_writes																AS	[Last_Logical_Writes]
															, CONVERT(BIGINT, qs.total_worker_time)													AS	[Total_Worker_Time]
															, CONVERT(BIGINT, qs.last_worker_time)													AS	[Last_Worker_Time]
															, CONVERT(INT, qs.total_elapsed_time / 1000000)											AS	[total_elapsed_time_in_S]
															, CONVERT(INT, qs.last_elapsed_time / 1000000)											AS	[last_elapsed_time_in_S]
															, CONVERT(INT, qs.last_execution_time)													AS	[Last_Execution_Time]
													FROM sys.dm_exec_query_stats AS qs 
													CROSS APPLY sys.dm_exec_sql_text (qs.sql_handle) AS qt 
													CROSS APPLY sys.dm_exec_query_plan (qs.plan_handle) AS qp
													ORDER BY [Average_logical_reads] DESC; 
												'

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 3: Top_N_Queries'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
     End
												
		--
		--	Step 4: Index Stats
		--
        If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	4
				, @step_name				=	N'Index_Stats'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather necessary stats on indexes 
													--					i)		Missing Indexes
													--					ii)		Index UsageUsage
													--					iii)	Do All FK have indexes on them (from Dave Levy) 
													--					iv)		Index Stats (internal & external fragmentation, allocation_unit_type, etc)

													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


													--
													--	i)	Missing Indexes
													--
														INSERT INTO DBA.PD_Missing_Indexes(Category, Total_Cost, Average_User_Impact, Table_Name, Equality_Usage, InEquality_Usage, Include_Columns, Unique_Compiles, User_Scans, User_Seeks)
														SELECT  TOP 25
																  ''Missing Indexes''		AS [Category]
																, ROUND(avg_total_user_cost * avg_user_impact * (user_seeks + user_scans),0) AS [Total Cost]
																, avg_user_impact		AS [Average_User_Impact]
																, statement				AS [Table_Name]
																, equality_columns		AS [Equality_Usage]
																, inequality_columns	AS [Inequality_Usage]
																, included_columns		AS [Include_Cloumns]
																, s.unique_compiles		AS [Unique_Compiles]
																, s.user_scans			AS [User_Scans]
																, s.user_seeks			AS [User_Seeks]
														FROM sys.dm_db_missing_index_groups g 
														INNER JOIN sys.dm_db_missing_index_group_stats s 
															ON s.group_handle = g.index_group_handle 
														INNER JOIN sys.dm_db_missing_index_details d 
															ON d.index_handle = g.index_handle
														ORDER BY [Total Cost] DESC;

													--
													--	ii)	Index Usage
													--

														INSERT INTO DBA.PD_Index_Usage(Category, Table_Name, Index_Name, User_Seeks, User_Scans, User_Lookups, User_Updates, Last_User_Scan, Last_User_Seek)
														SELECT     ''Index Usage''
																, OBJECT_NAME(S.[OBJECT_ID])
																, I.[NAME]
																, USER_SEEKS
																, USER_SCANS
																, USER_LOOKUPS
																, USER_UPDATES
																, last_user_scan
																, last_system_seek
														FROM SYS.DM_DB_INDEX_USAGE_STATS AS S
														INNER JOIN SYS.INDEXES AS I
															ON I.[OBJECT_ID] = S.[OBJECT_ID]
															AND I.INDEX_ID = S.INDEX_ID
														WHERE   OBJECTPROPERTY(S.[OBJECT_ID],''IsUserTable'') = 1 
														AND S.database_id = DB_ID()
														And OBJECT_NAME(S.[OBJECT_ID]) not like ''%PD_%''


													--
													--	iii)	Do All FK have indexes on them (from Dave Levy) 
													--	

														INSERT INTO DBA.PD_FKs_With_NoIndexes (Foreign_Key_Name, Relationship, Parent_Table_Index_State, Referenced_Table_Index_State)
														SELECT		OBJECT_NAME(fk.object_id) AS [foreign_key_name],
																	QUOTENAME(SCHEMA_NAME(pt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.parent_object_id)) + '' -> '' + QUOTENAME(SCHEMA_NAME(rt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.referenced_object_id)) AS [relationship],
																	CASE 
																			WHEN COUNT(pic.column_id) < COUNT(DISTINCT fkc.constraint_column_id) 
																				THEN ''No Covering Index on '' + QUOTENAME(SCHEMA_NAME(pt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.parent_object_id)) 
																			ELSE ''Covered'' 
																	END AS parent_table_index_state,
																	CASE	
																			WHEN COUNT(ric.column_id) < COUNT(DISTINCT fkc.constraint_column_id) 
																				THEN ''No Covering Index on '' + QUOTENAME(SCHEMA_NAME(rt.schema_id)) + ''.'' + QUOTENAME(OBJECT_NAME(fk.referenced_object_id)) 
																			ELSE ''Covered'' 
																	END AS referenced_table_index_state
														FROM		sys.foreign_keys fk
														INNER JOIN sys.foreign_key_columns fkc
															ON fk.object_id = fkc.constraint_object_id
														INNER JOIN sys.tables pt
															ON fkc.parent_object_id = pt.object_id
														INNER JOIN sys.tables rt
															ON fkc.referenced_object_id = rt.object_id
														LEFT OUTER JOIN sys.indexes pix
															ON fkc.parent_object_id = pix.object_id
															AND pix.is_disabled = 0
															AND pix.is_hypothetical = 0
														LEFT OUTER JOIN sys.index_columns pic
															ON fkc.parent_column_id = pic.column_id
															AND pix.object_id = pic.object_id
															AND pix.index_id = pic.index_id
															AND pic.index_column_id = fkc.constraint_column_id
														LEFT OUTER JOIN sys.indexes rix
															ON fkc.referenced_object_id = rix.object_id
															AND rix.is_disabled = 0
															AND rix.is_hypothetical = 0
														LEFT OUTER JOIN sys.index_columns ric
															ON fkc.referenced_column_id = ric.column_id
															AND rix.object_id = ric.object_id
															AND rix.index_id = ric.index_id
															AND ric.index_column_id = fkc.constraint_column_id
														GROUP BY	fk.object_id,
																	fk.parent_object_id,
																	pt.schema_id,
																	fk.referenced_object_id,
																	rt.schema_id


													--
													--	iv)		Index Stats (internal & external fragmentation, allocation_unit_type, etc)
													--

														--
														--	Metrics to Measure the progress
														--
														--	Variables
														DECLARE   @IndexStats_Sql 	NVARCHAR(MAX) =	''''
																, @SqlLength		INT

														--	Generate SQL statement to run sys.dm_db_index_physical_stats query on all the indexes			
														SELECT @IndexStats_Sql  = @IndexStats_Sql + ''SELECT '''''' + schema_name(O.schema_id) + '''''' AS [Schema_Name], '''''' + OBJECT_NAME(O.object_id) + '''''' AS [Table_Name], '''''' + I.name + '''''' AS [Index_Name], database_id, object_id, index_id, partition_number, index_type_desc, alloc_unit_type_desc, index_depth, index_level, CONVERT(NUMERIC(10,2), avg_fragmentation_in_percent), fragment_count, CONVERT(NUMERIC(10,2), avg_fragment_size_in_pages), page_count, CONVERT(NUMERIC(10,2), avg_page_space_used_in_percent) FROM sys.dm_db_index_physical_stats('' + CONVERT(VARCHAR, DB_ID()) + '', '' + CONVERT(VARCHAR, O.object_id) + '','' + CONVERT(VARCHAR, I.index_id) + '', NULL, DEFAULT) UNION ALL ''
														FROM sys.indexes AS I
														INNER JOIN sys.objects AS O 
															ON O.object_id = I.object_id
														WHERE I.index_id > 0
														ORDER BY OBJECT_NAME(O.object_id)

														--	Remove ''UNION ALL'' at the end
														SELECT @SqlLength = LEN(@IndexStats_Sql)
														SELECT @IndexStats_Sql = SUBSTRING(@IndexStats_Sql, 1, @SqlLength-9)
														
														--	INSERT  result set into DBADB table
														INSERT INTO DBA.PD_IndexPhysicalStats ([Schema_Name], [Table_Name], [Index_Name], [Database_ID], [Object_ID], [Index_ID], Partition_Number, Index_Type_Desc, Alloc_Unit_Type_Desc, Index_Depth, Index_Level, Avg_fragmentation_in_percent, Fragment_count, Avg_fragment_size_in_pages, Page_count, Avg_page_space_used_in_percent) 
														EXEC sp_ExecuteSql @stmt = @IndexStats_Sql 
												'


		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 4: Index Stats'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End											
		--
		--	Step 5: Activity Monitor
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	5
				, @step_name				=	N'Activity_Monitor'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'

													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Take a snapshot of Activity Monitor 
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_ActivityMonitor
													(		 
														  Session_ID 				
														, User_Process 				
														, Login_Name				
														, Database_Name				
														, Task_State 				
														, Command 					
														, Application_Name				
														, Wait_Time_in_ms 			
														, Wait_Type 				
														, Wait_Resource 			
														, Blocked_By 				
														, Head_Blocker 				
														, Total_CPU_ms 				
														, Total_Physical_IO_in_MB	
														, Memory_USE_KB 			
														, Open_Transactions 		
														, Login_Time 				
														, Last_Request_Start_Time 	
														, Host_Name 				
														, Net_Address					
														, Execution_Context_ID 			
														, Request_ID 					
													)
													SELECT 
														  Session_ID 				=	s.session_id
														, User_Process 				=	CONVERT(CHAR(1), s.is_user_process)
														, Login_Name				=	s.login_name
														, Database_Name				=	ISNULL(DB_NAME(p.dbid), N'''')
														, Task_State 				=	ISNULL(t.task_state, N'''')
														, Command 					=	ISNULL(r.command, N'''')
														, Application_Name 			=	ISNULL(s.program_name, N'''')
														, Wait_Time_in_ms 			=	ISNULL(w.wait_duration_ms, 0)
														, Wait_Type 				=	ISNULL(w.wait_type, N'''')
														, Wait_Resource 			=	ISNULL(w.resource_description, N'''')
														, Blocked_By 				=	ISNULL(CONVERT (VARCHAR, w.blocking_session_id), '''')
														, Head_Blocker 				=	CASE
																							-- session has an active request, is blocked, but is blocking others or session is idle but has an open tran and is blocking others
																							WHEN r2.session_id IS NOT NULL AND (r.blocking_session_id = 0 OR r.session_id IS NULL) THEN ''1''
																							-- session is either not blocking someone, or is blocking someone but is blocked by another party
																							ELSE ''''
																						END
														, Total_CPU_ms 				= s.cpu_time
														, Total_Physical_IO_in_MB	= (s.reads + s.writes) * 8 / 1024
														, Memory_USE_KB 			= s.memory_usage * 8192 / 1024
														, Open_Transactions 		= ISNULL(r.open_transaction_count,0)
														, Login_Time 				= s.login_time
														, Last_Request_Start_Time 	= s.last_request_start_time
														, Host_Name 				= ISNULL(s.host_name, N'''')
														, Net_Address				= ISNULL(c.client_net_address, N'''')
														, Execution_Context_ID 		= ISNULL(t.exec_context_id, 0)
														, Request_ID 				= ISNULL(r.request_id, 0)
													--   [Workload Group] 			= ISNULL(g.name, N'''')
													FROM sys.dm_exec_sessions s 
													LEFT OUTER JOIN sys.dm_exec_connections c 
														ON (s.session_id = c.session_id)
													LEFT OUTER JOIN sys.dm_exec_requests r 
														ON (s.session_id = r.session_id)
													LEFT OUTER JOIN sys.dm_os_tasks t 
														ON (r.session_id = t.session_id AND r.request_id = t.request_id)
													LEFT OUTER JOIN (
																		-- In some cases (e.g. parallel queries, also waiting for a worker), one thread can be flagged as
																		-- waiting for several different threads.  This will cause that thread to show up in multiple rows
																		-- in our grid, which we don''t want.  Use ROW_NUMBER to select the longest wait for each thread,
																		-- and use it as representative of the other wait relationships this thread is involved in.
																		SELECT *, ROW_NUMBER() OVER (PARTITION BY waiting_task_address ORDER BY wait_duration_ms DESC) AS row_num
																		FROM sys.dm_os_waiting_tasks
																	) AS w 
														ON (t.task_address = w.waiting_task_address) 
														AND w.row_num = 1
													LEFT OUTER JOIN sys.dm_exec_requests r2 
														ON (s.session_id = r2.blocking_session_id)
													--LEFT OUTER JOIN sys.dm_resource_governor_workload_groups g ON (g.group_id = s.group_id)	--TAKE THIS dmv OUT TO WORK IN 2005
													LEFT OUTER JOIN sys.sysprocesses p 
														ON (s.session_id = p.spid)
													ORDER BY s.session_id;
				
				'			
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 6: Activity Monitor'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End

		--
		--	Step 6: Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin	
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	6
				, @step_name				=	N'Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	List Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages
													--	Author	:	Faizan Khundmiri for AMS (NCR) on March 5, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_TableStats(Table_Name, Index_Name, Index_Type, RowCounts, TotalSpaceKB, Is_Primary_Key)
													SELECT    so.name																			AS [Table_Name]
															, si.name																			AS [Index_Name]
															, CASE	WHEN si.is_primary_key = 0 and si.type = 0 THEN ''HEAP''
																	WHEN si.is_primary_key = 1 and si.type = 2 THEN ''PrimaryKey_NonClustered''
																	WHEN si.is_primary_key = 0 and si.type = 2 THEN ''Non-Clustered''
																	ELSE ''Clustered''	
															  END																				AS	[Index_Type]
															, p.Rows																			AS	[RowCounts]
															, SUM(a.total_pages) * 8															AS	[TotalSpaceKB]
															, si.is_primary_key																	AS	[Is_Primary_Key]
													FROM sys.indexes si  
													INNER JOIN sys.objects so 
														ON	si.[object_id] = so.[object_id] 
													INNER JOIN sys.partitions AS p 
														ON	si.Object_id = p.object_id AND si.Index_id = p.index_id
													INNER JOIN sys.Allocation_units AS a
														ON   p.partition_id = a.container_id
													WHERE so.type = ''U''    --Only get indexes for User Created Tables 
													GROUP BY so.name , si.name , si.type_desc , p.Rows , si.is_primary_key , si.type
													ORDER BY so.name
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 6: Table Stats - RowCounts,Heap,PKWithNoClustered,totalpages'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 7: Check Last Update Statistics
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
      Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	7
				, @step_name				=	N'Check Last Update Statistics'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	List Last Update Statistics
													--	Author	:	Faizan Khundmiri for AMS (NCR) on March 5, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													INSERT INTO DBA.PD_UpdateStatistics(Table_Name, Statistic, [Statistic Type], [Stats Last Updated], ModifiedRows,No_Recompute)
													SELECT    sch.name + ''.'' + so.name													AS [Table_Name]
															, ss.name																		AS [Statistic]
															, CASE
																WHEN ss.auto_Created = 0 AND ss.user_created = 0 THEN ''Index Statistic'' 
																WHEN ss.auto_created = 0 AND ss.user_created = 1 THEN ''User Created'' 
																WHEN ss.auto_created = 1 AND ss.user_created = 0 THEN ''Auto Created'' 
																END																			AS [Statistic Type] 
															, STATS_DATE(i.[id], i.indid) 													AS [Stats Last Updated]
															, i.rowmodctr																	AS [ModifiedRows]
															, ss.No_Recompute																AS [No_Recompute]
													FROM sys.stats ss 
													JOIN sys.objects so 
														ON	ss.object_id = so.object_id
													JOIN sysindexes i
													     ON so.object_id = i.id
													JOIN sys.schemas sch
															ON   so.schema_id = sch.schema_id
													--OUTER APPLY sys.dm_db_stats_properties(so.object_id, ss.stats_id) AS sp										   
													WHERE so.TYPE = ''U''          
													ORDER BY STATS_DATE(i.[id], i.indid) DESC;
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 7: Check Last Update Statistics'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 8: Check Sql Hardware Information
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	8
				, @step_name				=	N'Check Sql Hardware Information'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	3
				, @on_success_step_id		=	0
				, @on_fail_action			=	3
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Gather Hardware information of the Sql Server machine
													--	Author	:	Uday K. Sangepu on March 6, 2013
													--
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													WITH ServerHardware ([Sql and OS Version], [NoF Physical CPUs], [NoF Logical CPUs], [Physical Mem in GB], [Available Physical Mem in GB], [Total Page File Size in GB], [System Memory State], [Is it a VM], [SqlServer Instance Start Time]) AS 
													(
														--	Memory
														SELECT	  
																  NULL																	AS [Sql and OS Version]
																, NULL																	AS [NoF Physical CPUs]
																, NULL																	AS [NoF Logical CPUs]
																, CONVERT(NUMERIC(5,2), total_physical_memory_kb/(1024*1024.0))			AS [Physical Mem in GB]
																, CONVERT(NUMERIC(5,2), available_physical_memory_kb/(1024*1024.0))		AS [Available Physical Mem in GB]
																, CONVERT(NUMERIC(5,2), total_page_file_kb/(1024*1024.0))				AS [Total Page File Size in GB]
																, CONVERT(VARCHAR(20), system_memory_state_desc)						AS [System Memory State]
																, NULL																	AS [Is it a VM]
																, NULL																	AS [SqlServer Instance Start Time]
														FROM sys.dm_os_sys_memory
														UNION 
														--	CPU
														SELECT	  
																  CONVERT(VARCHAR(200), @@VERSION)										AS [Sql and OS Version]
																, cpu_count/hyperthread_ratio											AS [NoF Physical CPUs]
																, cpu_count																AS [NoF Logical CPUs]
																, NULL																	AS [Physical Mem in GB]
																, NULL																	AS [Available Physical Mem in GB]
																, NULL																	AS [Total Page File Size in GB]
																, NULL																	AS [System Memory State]
																, CONVERT(VARCHAR(10), virtual_machine_type_desc)						AS [Is it a VM]
																, sqlserver_start_time													AS [SqlServer Instance Start Time]
														FROM sys.dm_os_sys_info
													)
													--	SELECT * FROM ServerHardware
													INSERT INTO DBA.PD_ServerHardware (	[Sql and OS Version]
																					, [NoF Physical CPUs]
																					, [NoF Logical CPUs]
																					, [Physical Mem in GB]
																					, [Available Physical Mem in GB]
																					, [Total Page File Size in GB]
																					, [System Memory State]
																					, [Is it a VM]
																					, [SqlServer Instance Start Time]
																					)
													SELECT    MAX([Sql and OS Version])					AS [Sql and OS Version]
															, MAX([NoF Physical CPUs])					AS [NoF Physical CPUs]
															, MAX([NoF Logical CPUs])					AS [NoF Logical CPUs]
															, MAX([Physical Mem in GB])					AS [Physical Mem in GB]
															, MAX([Available Physical Mem in GB])		AS [Available Physical Mem in GB]
															, MAX([Total Page File Size in GB])			AS [Total Page File Size in GB]
															, MAX([System Memory State])				AS [System Memory State]
															, MAX([Is it a VM])							AS [Is it a VM]
															, MAX([SqlServer Instance Start Time])		AS [SqlServer Instance Start Time]
													FROM ServerHardware
												'

												
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 9: Check Sql Hardware Information'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End	
		
		--
		--	Step 9: Purge
		--
		If not exists(select * from msdb.dbo.sysjobsteps WHERE job_id = @jobId and step_name =@StepName and database_name = @DBNAME)
     Begin
		EXECUTE msdb.dbo.sp_add_jobstep
				  @job_id					=	@JobID
				, @step_id					=	9
				, @step_name				=	N'Purge'
				, @subsystem				=	'TSQL'
				, @on_success_action		=	1
				, @on_success_step_id		=	0
				, @on_fail_action			=	2
				, @on_fail_step_id			=	0
				, @database_name			=	@DBNAME
				, @flags					=	6
				, @command					=	N'
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
													--
													--	Purpose	:	Purge data collected above periodically			Retention										
													--			i)		DBA.PD_WaitStats							6 months
													--			ii)		DBA.PD_TopQueries							6 months
													--			iii)	DBA.PD_Missing_Indexes						6 months
													--			iv)		DBA.PD_Index_Usage							6 months
													--			v)		DBA.PD_FKs_With_NoIndexes					6 months
													--			vi)		DBA.PD_IndexPhysicalStats					6 months
													--			vii)	DBA.PD_ActivityMonitor						6 months
													--			viii)	DBA.PD_Duplicate_Indexes					6 months
													--          ix)     DBA.PD_TableStats 						    6 months
													--			x)      DBA.PD_UpdateStatistics 					6 months
													--			xi)     DBA.PD_ServerHardware						6 months
													--			xii)	DBA.PD_PerfCounters							6 months        
													--	Author	:	Uday K. Sangepu for AMS (NCR) on December 13, 2012
													--				On March 5th, 2013 Faizan Added DBA.PD_TableStats, DBA.PD_UpdateStatistics, DBA.PD_PerfCounters
													--				On March 6th 2013 Uday K. Sangepu added DBA.PD_ServerHardware
													-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

													--
													--	Purge data older than retention period (6 months)
													--
									
														
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_WaitStats 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_TopQueries 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_Missing_Indexes 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_Index_Usage 			WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_FKs_With_NoIndexes 	WHERE Created_On < DATEADD(MM, -7, GETDATE())


														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_IndexPhysicalStats 	WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_ActivityMonitor 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_TableStats 			WHERE Created_On < DATEADD(MM, -7, GETDATE())
														
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_UpdateStatistics 	WHERE Created_On < DATEADD(MM, -7, GETDATE())
														
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -1, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%5 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -2, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%4 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -3, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%3 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On BETWEEN CONVERT(SMALLDATETIME, DATEADD(MM, -6, GETDATE())) AND CONVERT(SMALLDATETIME, DATEADD(MM, -4, GETDATE())) AND CONVERT(INT, DATEPART(D, Created_On))%2 = 0
														DELETE FROM DBA.PD_ServerHardware 		WHERE Created_On < DATEADD(MM, -7, GETDATE())

														'			
		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobstep failed for Step 11: Purge'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
	End

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	III)	Create Schedule
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		DECLARE @ScheduleID	INT

		EXECUTE msdb.dbo.sp_add_schedule
				  @schedule_name			=	'Daily_At_10PM'
				, @enabled					=	1
				, @freq_type				=	4
				, @freq_interval			=	1
				, @freq_subday_type			=	0
				, @freq_subday_interval		=	0
				, @active_start_date		=	20130101
				, @active_end_date			=	99991231
				, @active_start_time		=	220000
				, @active_end_time			=	235959
				, @schedule_id				=	@ScheduleID OUTPUT

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_schedule failed for Daily_At_10PM'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
			
		SELECT @ScheduleID AS [Job Schedule]		
		
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	IV)	Create Schedule
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		EXECUTE msdb.dbo.sp_attach_schedule
				  @job_id					=	@JobID
				, @schedule_id				=	@ScheduleID

		SELECT @ERR = @@ERROR
		
		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_attach_schedule failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END


		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	V)	Modify Job
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		
		EXECUTE msdb.dbo.sp_update_job 
				  @job_id					=	@JobID
				, @start_step_id			=	1
		
		SELECT @ERR = @@ERROR

		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_update_job failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END

		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
		--	VI)	Add Job To Server
		-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
				
		EXECUTE msdb.dbo.sp_add_jobserver
				  @job_id					=	@JobID
				, @server_name				=	N'(LOCAL)'


		SELECT @ERR = @@ERROR

		IF (@ERR <> 0) 
		BEGIN 
			PRINT 'msdb.dbo.sp_add_jobserver failed'
			ROLLBACK TRANSACTION Add_AMS_PD_Job
			RETURN
		END
				
		COMMIT TRANSACTION Add_AMS_PD_Job	
END TRY

BEGIN CATCH
    DECLARE @ErrMsg NVARCHAR(max)
    DECLARE @ErrProc NVARCHAR(max)
    DECLARE @ErrLine INTEGER
	SELECT 
	        @ErrProc = ERROR_PROCEDURE(),
	        @ErrLine = ERROR_LINE(),
			@ErrMsg = ERROR_MESSAGE();

	--RAISERROR (N'%s(%d) %s', 18, 1, @ErrProc, @ErrLine, @ErrMsg)
	
	ROLLBACK TRANSACTION Add_AMS_PD_Job

END CATCH

GO

--
--	End of script:	PD_Job.sql
--



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixWH/tables/ --
--
print 'processing tables/Copient_Logix.User.sql'; 
--
GO
-- $Id: Copient_Logix.User.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  User [Copient_Logix]    Script Date: 12/27/2010 15:20:47 ******/
IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = N'Copient_Logix')
CREATE USER [Copient_Logix] FOR LOGIN [Copient_Logix] WITH DEFAULT_SCHEMA=[dbo]
GO


print 'processing tables/Copient_Logix_uspRole.sql'; 
--
GO
-- $Id: Copient_Logix_uspRole.sql 33257 2011-06-30 13:33:10Z rob $
-- Build Version: 7.3.1.138972

/****** Object:  Schema [Copient_Logix_uspRole]    Script Date: 12/27/2010 15:04:02 ******/
-- This was accidentally made to create a schema instead of a role, so drop the schema if it exists and make the role
IF EXISTS (SELECT 1 FROM sys.schemas WHERE name = N'Copient_Logix_uspRole')
    DROP SCHEMA [Copient_Logix_uspRole] 
GO

IF NOT EXISTS ( SELECT 1 FROM [sys].[database_principals] where name = 'Copient_Logix_uspRole' and type = 'R'  )
  CREATE ROLE [Copient_Logix_uspRole] AUTHORIZATION [dbo]
GO

IF EXISTS (SELECT 1 FROM sys.database_principals WHERE name = N'Copient_Logix')
    exec sp_addrolemember 'Copient_Logix_uspRole', 'Copient_Logix'
GO





print 'processing tables/dbo.ActiveDeployedOffersTableType.Type.sql'; 
--
GO
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (select * from sys.table_types where name='ActiveDeployedOffersTableType') BEGIN
CREATE TYPE [dbo].[ActiveDeployedOffersTableType] AS TABLE(
	[OfferID] [bigint] NULL,
	[ExtOfferID] [nvarchar](20) NULL,
	[CMOADeployStatus] [int] NULL,
	[StatusFlag] [int] NULL,
	[Name] [nvarchar](200) NULL,
	[EngineID] [int] NULL,
	[Description] [nvarchar](255) NULL,
	[ProdStartDate] [datetime] NULL,
	[ProdEndDate] [datetime] NULL,
	[InboundCRMEngineID] [int] NULL,
	[ECTName] [nvarchar](100) NULL
)
END
GO
GRANT EXECUTE ON TYPE::[dbo].[ActiveDeployedOffersTableType] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing tables/dbo.CouponErrors.Table.sql'; 
--
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CouponErrors]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[CouponErrors](
	
	[PKID] [int] NOT NULL IDENTITY,
    [Barcode] [nvarchar](14) NOT NULL,
    [Description] [nvarchar](255) NULL,
	[ErrorCode] [bigint] NULL,
    [ErrorDate] [datetime] NOT NULL, 
	[LocationID][bigint] NULL,
    [TransNum] [nvarchar](128) NULL
    

    CONSTRAINT [PKID] PRIMARY KEY CLUSTERED
(
    [PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

-- AL-1349 Change LocationID to LocationCode to hold nvarchar instead of bigint
IF COL_LENGTH(N'[dbo].[CouponErrors]','LocationCode') IS NULL
BEGIN
 EXEC sp_rename '[dbo].[CouponErrors].[LocationID]', 'LocationCode', 'COLUMN';
 ALTER TABLE [dbo].[CouponErrors] ALTER COLUMN [LocationCode] [nvarchar](20);
END
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[CouponErrors]') and name='TransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='CouponErrors' and COLUMN_NAME='TransNum' and 
DATA_TYPE='varchar' and CHARACTER_MAXIMUM_LENGTH<128)) BEGIN
  alter table CouponErrors alter column [TransNum] [nvarchar](128);
END
GO

print 'processing tables/dbo.CurrentPartition.Table.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

-- This table existed at one point and has since been retired. DO NOT REUSE IT.
-- It won't be removed by this file because it was retired earlier than 5.11.1.
-- As of the date this file was created, there were no references to CurrentPartition
-- outside of database scripts to remove the table for various clients.

print 'processing tables/dbo.HealthErrors.Table.sql'; 
--
GO
-- $Id: dbo.HealthErrors.Table.sql 87218 2015-02-19 09:01:40Z kg250111 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HealthErrors]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HealthErrors]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HealthErrors](
	[ErrorID] [int] NOT NULL,
	[ServerTypeID] [int] NOT NULL,
	[ErrorDescription] [nvarchar](200) NULL,
	[ErrorCode] [nvarchar](6) NULL,
	[Severity] [int] NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_HealthErrors] PRIMARY KEY CLUSTERED 
(
	[ErrorID] ASC,
	[ServerTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 1  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (1, 1, N'Survey data not received', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 1  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (1, 2, N'Last heard error', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 2  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (2, 2, N'Incentive last heard error', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 3  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (3, 2, N'Transaction last heard error', N'', 1, 6362)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 4  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (4, 2, N'TransDownload last heard error', N'', 1, 6363)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 5  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (5, 2, N'Sanity Check failed', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 11  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (11, 1, N'CPU load average too high', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 13  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (13, 1, N'CPE not running', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 18  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (18, 1, N'register_argc_argv not enabled for PHP cli', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 20  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (20, 1, N'Server is an acting primary and the socket is not connected', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 21  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (21, 1, N'PHP version not matching for PHP cli', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 25  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (25, 1, N'Unrecognized copient.conf config file', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 30  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (30, 1, N'Server is an acting primary and the socket is not connected', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 31  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (31, 1, N'Copient code version not correct', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 32  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (32, 1, N'Copient code build not correct', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 33  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (33, 1, N'Unexpected value for TCP/IP integration protocol build', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 34  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (34, 1, N'Unexpected value for TCP/IP integration protocol version', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 35  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (35, 1, N'Unrecognized conf/copient.conf config file', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 45  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (45, 1, N'Unrecognized conf/centralserverIP config file', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 46  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (46, 1, N'Unrecognized conf/centralserverPath config file', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 49  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (49, 1, N'Unrecognized conf/curl.conf config file', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 51  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (51, 1, N'Unrecognized conf/www.conf config file', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 55  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (55, 1, N'Copient communications cache folder is filling up', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 59  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (59, 1, N'Copient log folder is filling up', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 128  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (128, 1, N'Bad owner UID for conf/copient.conf config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 129  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (129, 1, N'Bad owner GUID for conf/copient.conf config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 130  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (130, 1, N'Bad permissions for conf/copient.conf config file', N'', 1, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 131  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (131, 1, N'Bad owner UID for conf/centralserverIP config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 132  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (132, 1, N'Bad owner GUID for conf/centralserverIP config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 134  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (134, 1, N'Bad owner UID for conf/centralserverPath config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 135  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (135, 1, N'Bad owner GUID for conf/centralserverPath config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 137  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (137, 1, N'Bad owner UID for conf/curl.conf config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 138  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (138, 1, N'Bad owner GUID for conf/curl.conf config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 140  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (140, 1, N'Bad owner UID for conf/www.conf config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 141  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (141, 1, N'Bad owner GUID for conf/www.conf config file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 144  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (144, 1, N'Unrecognized bin/autoIPL file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 145  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (145, 1, N'Bad owner UID for bin/autoIPL file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 146  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (146, 1, N'Bad owner GUID for bin/autoIPL file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 149  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (149, 1, N'Unrecognized bin/serial file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 150  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (150, 1, N'Bad owner UID for bin/serial file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 151  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (151, 1, N'Bad owner GUID for bin/serial file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 154  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (154, 1, N'Unrecognized bin/getGlobal file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 155  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (155, 1, N'Bad owner UID for bin/getGlobal file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 156  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (156, 1, N'Bad owner GUID for bin/getGlobal file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 159  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (159, 1, N'Unrecognized bin/staggerJobs file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 160  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (160, 1, N'Bad owner UID for bin/staggerJobs file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 161  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (161, 1, N'Bad owner GUID for bin/staggerJobs file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 164  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (164, 1, N'Unrecognized bin/tidy file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 165  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (165, 1, N'Bad owner UID for bin/tidy file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 166  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (166, 1, N'Bad owner GUID for bin/tidy file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 169  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (169, 1, N'Unrecognized bin/vacNuke file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 170  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (170, 1, N'Bad owner UID for bin/vacNuke file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 171  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (171, 1, N'Bad owner GUID for bin/vacNuke file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 174  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (174, 1, N'Unrecognized www/ClearDisplay.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 175  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (175, 1, N'Bad owner UID for www/ClearDisplay.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 176  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (176, 1, N'Bad owner GUID for www/ClearDisplay.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 177  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (177, 1, N'Bad permissions for www/ClearDisplay.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 179  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (179, 1, N'Unrecognized www/deliverables.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 180  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (180, 1, N'Bad owner UID for www/deliverables.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 181  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (181, 1, N'Bad owner GUID for www/deliverables.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 182  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (182, 1, N'Bad permissions for www/deliverables.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 184  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (184, 1, N'Unrecognized www/fuel.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 185  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (185, 1, N'Bad owner UID for www/fuel.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 186  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (186, 1, N'Bad owner GUID for www/fuel.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 187  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (187, 1, N'Bad permissions for www/fuel.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 189  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (189, 1, N'Unrecognized www/ipLogView.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 190  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (190, 1, N'Bad owner UID for www/ipLogView.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 191  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (191, 1, N'Bad owner GUID for www/ipLogView.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 192  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (192, 1, N'Bad permissions for www/ipLogView.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 194  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (194, 1, N'Unrecognized www/lanetype.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 195  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (195, 1, N'Bad owner UID for www/lanetype.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 196  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (196, 1, N'Bad owner GUID for www/lanetype.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 197  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (197, 1, N'Bad permissions for www/lanetype.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 199  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (199, 1, N'Unrecognized www/lsconfig.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 200  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (200, 1, N'Bad owner UID for www/lsconfig.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 201  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (201, 1, N'Bad owner GUID for www/lsconfig.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 202  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (202, 1, N'Bad permissions for www/lsconfig.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 204  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (204, 1, N'Unrecognized www/onscreenad.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 205  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (205, 1, N'Bad owner UID for www/onscreenad.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 206  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (206, 1, N'Bad owner GUID for www/onscreenad.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 207  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (207, 1, N'Bad permissions for www/onscreenad.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 209  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (209, 1, N'Unrecognized www/phaseA.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 210  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (210, 1, N'Bad owner UID for www/phaseA.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 211  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (211, 1, N'Bad owner GUID for www/phaseA.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 212  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (212, 1, N'Bad permissions for www/phaseA.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 214  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (214, 1, N'Unrecognized www/PromoDebug.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 215  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (215, 1, N'Bad owner UID for www/PromoDebug.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 216  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (216, 1, N'Bad owner GUID for www/PromoDebug.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 217  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (217, 1, N'Bad permissions for www/PromoDebug.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 219  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (219, 1, N'Unrecognized www/scan.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 220  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (220, 1, N'Bad owner UID for www/scan.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 221  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (221, 1, N'Bad owner GUID for www/scan.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 222  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (222, 1, N'Bad permissions for www/scan.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 224  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (224, 1, N'Unrecognized www/viewpromos.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 225  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (225, 1, N'Bad owner UID for www/viewpromos.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 226  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (226, 1, N'Bad owner GUID for www/viewpromos.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 227  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (227, 1, N'Bad permissions for www/viewpromos.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 229  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (229, 1, N'Unrecognized www/watchdog.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 230  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (230, 1, N'Bad owner UID for www/watchdog.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 231  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (231, 1, N'Bad owner GUID for www/watchdog.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 232  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (232, 1, N'Bad permissions for www/watchdog.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 234  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (234, 1, N'Unrecognized www/ybDisplay.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 235  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (235, 1, N'Bad owner UID for www/ybDisplay.php  file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 236  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (236, 1, N'Bad owner GUID for www/ybDisplay.php  file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 237  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (237, 1, N'Bad permissions for www/ybDisplay.php  file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 239  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (239, 1, N'Unrecognized www/yellowbox-xp.exe file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 240  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (240, 1, N'Bad owner UID for www/yellowbox-xp.exe file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 241  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (241, 1, N'Bad owner GUID for www/yellowbox-xp.exe file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 242  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (242, 1, N'Bad permissions for www/yellowbox-xp.exe file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 244  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (244, 1, N'Unrecognized apps/com/communications.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 245  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (245, 1, N'Bad owner UID for apps/com/communications.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 246  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (246, 1, N'Bad owner GUID for apps/com/communications.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 247  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (247, 1, N'Bad permissions for apps/com/communications.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 249  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (249, 1, N'Unrecognized apps/com/fetchData file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 250  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (250, 1, N'Bad owner UID for apps/com/fetchData file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 251  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (251, 1, N'Bad owner GUID for apps/com/fetchData file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 254  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (254, 1, N'Unrecognized apps/com/getAlternateIDInfo file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 255  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (255, 1, N'Bad owner UID for apps/com/getAlternateIDInfo file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 256  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (256, 1, N'Bad owner GUID for apps/com/getAlternateIDInfo file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 259  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (259, 1, N'Unrecognized apps/com/getCardholderInfo file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 260  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (260, 1, N'Bad owner UID for apps/com/getCardholderInfo file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 261  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (261, 1, N'Bad owner GUID for apps/com/getCardholderInfo file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 264  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (264, 1, N'Unrecognized apps/com/incentiveFetch file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 265  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (265, 1, N'Bad owner UID for apps/com/incentiveFetch file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 266  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (266, 1, N'Bad owner GUID for apps/com/incentiveFetch file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 269  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (269, 1, N'Unrecognized apps/com/massInsert file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 270  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (270, 1, N'Bad owner UID for apps/com/massInsert file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 271  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (271, 1, N'Bad owner GUID for apps/com/massInsert file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 274  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (274, 1, N'Unrecognized apps/com/moveData file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 275  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (275, 1, N'Bad owner UID for apps/com/moveData file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 276  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (276, 1, N'Bad owner GUID for apps/com/moveData file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 279  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (279, 1, N'Unrecognized apps/com/moveDataResponse file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 280  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (280, 1, N'Bad owner UID for apps/com/moveDataResponse file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 281  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (281, 1, N'Bad owner GUID for apps/com/moveDataResponse file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 284  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (284, 1, N'Unrecognized apps/com/offerValidation.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 285  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (285, 1, N'Bad owner UID for apps/com/offerValidation.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 286  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (286, 1, N'Bad owner GUID for apps/com/offerValidation.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 289  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (289, 1, N'Unrecognized apps/com/PhoneHome.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 290  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (290, 1, N'Bad owner UID for apps/com/PhoneHome.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 291  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (291, 1, N'Bad owner GUID for apps/com/PhoneHome.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 292  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (292, 1, N'Bad permissions for apps/com/PhoneHome.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 294  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (294, 1, N'Unrecognized apps/com/reportingUpload.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 295  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (295, 1, N'Bad owner UID for apps/com/reportingUpload.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 296  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (296, 1, N'Bad owner GUID for apps/com/reportingUpload.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 299  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (299, 1, N'Unrecognized apps/com/sanityCheck.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 300  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (300, 1, N'Bad owner UID for apps/com/sanityCheck.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 301  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (301, 1, N'Bad owner GUID for apps/com/sanityCheck.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 304  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (304, 1, N'Unrecognized apps/com/SanityTables.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 305  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (305, 1, N'Bad owner UID for apps/com/SanityTables.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 306  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (306, 1, N'Bad owner GUID for apps/com/SanityTables.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 307  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (307, 1, N'Bad permissions for apps/com/SanityTables.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 309  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (309, 1, N'Unrecognized apps/com/signal.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 310  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (310, 1, N'Bad owner UID for apps/com/signal.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 311  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (311, 1, N'Bad owner GUID for apps/com/signal.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 312  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (312, 1, N'Bad permissions for apps/com/signal.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 314  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (314, 1, N'Unrecognized apps/com/transDownload file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 315  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (315, 1, N'Bad owner UID for apps/com/transDownload file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 316  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (316, 1, N'Bad owner GUID for apps/com/transDownload file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 319  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (319, 1, N'Unrecognized apps/com/transUpload file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 320  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (320, 1, N'Bad owner UID for apps/com/transUpload file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 321  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (321, 1, N'Bad owner GUID for apps/com/transUpload file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 324  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (324, 1, N'Unrecognized apps/common/ConfigFunctions.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 325  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (325, 1, N'Bad owner UID for apps/common/ConfigFunctions.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 326  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (326, 1, N'Bad owner GUID for apps/common/ConfigFunctions.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 327  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (327, 1, N'Bad permissions for apps/common/ConfigFunctions.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 329  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (329, 1, N'Unrecognized apps/common/logging.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 330  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (330, 1, N'Bad owner UID for apps/common/logging.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 331  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (331, 1, N'Bad owner GUID for apps/common/logging.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 332  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (332, 1, N'Bad permissions for apps/common/logging.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 334  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (334, 1, N'Unrecognized apps/ipconnect/fetchOffline.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 335  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (335, 1, N'Bad owner UID for apps/ipconnect/fetchOffline.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 336  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (336, 1, N'Bad owner GUID for apps/ipconnect/fetchOffline.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 339  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (339, 1, N'Unrecognized apps/ipconnect/IntegrationSocket.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 340  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (340, 1, N'Bad owner UID for apps/ipconnect/IntegrationSocket.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 341  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (341, 1, N'Bad owner GUID for apps/ipconnect/IntegrationSocket.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 342  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (342, 1, N'Bad permissions for apps/ipconnect/IntegrationSocket.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 344  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (344, 1, N'Unrecognized apps/ipconnect/interface.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 345  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (345, 1, N'Bad owner UID for apps/ipconnect/interface.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 346  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (346, 1, N'Bad owner GUID for apps/ipconnect/interface.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 349  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (349, 1, N'Unrecognized apps/ipconnect/ipconnect.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 350  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (350, 1, N'Bad owner UID for apps/ipconnect/ipconnect.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 351  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (351, 1, N'Bad owner GUID for apps/ipconnect/ipconnect.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 354  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (354, 1, N'Unrecognized apps/ipconnect/iplogging.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 355  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (355, 1, N'Bad owner UID for apps/ipconnect/iplogging.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 356  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (356, 1, N'Bad owner GUID for apps/ipconnect/iplogging.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 357  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (357, 1, N'Bad permissions for apps/ipconnect/iplogging.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 359  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (359, 1, N'Unrecognized apps/ipconnect/msg995 file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 360  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (360, 1, N'Bad owner UID for apps/ipconnect/msg995 file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 361  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (361, 1, N'Bad owner GUID for apps/ipconnect/msg995 file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 364  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (364, 1, N'Unrecognized apps/ipconnect/offline.php file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 365  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (365, 1, N'Bad owner UID for apps/ipconnect/offline.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 366  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (366, 1, N'Bad owner GUID for apps/ipconnect/offline.php file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 369  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (369, 1, N'Unrecognized apps/promoengine/cardfilters.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 370  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (370, 1, N'Bad owner UID for apps/promoengine/cardfilters.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 371  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (371, 1, N'Bad owner GUID for apps/promoengine/cardfilters.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 372  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (372, 1, N'Bad permissions for apps/promoengine/cardfilters.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 374  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (374, 1, N'Unrecognized apps/promoengine/common.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 375  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (375, 1, N'Bad owner UID for apps/promoengine/common.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 376  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (376, 1, N'Bad owner GUID for apps/promoengine/common.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 377  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (377, 1, N'Bad permissions for apps/promoengine/common.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 379  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (379, 1, N'Unrecognized apps/promoengine/discounting.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 380  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (380, 1, N'Bad owner UID for apps/promoengine/discounting.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 381  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (381, 1, N'Bad owner GUID for apps/promoengine/discounting.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 382  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (382, 1, N'Bad permissions for apps/promoengine/discounting.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 384  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (384, 1, N'Unrecognized apps/promoengine/DisplayRoutines.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 385  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (385, 1, N'Bad owner UID for apps/promoengine/DisplayRoutines.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 386  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (386, 1, N'Bad owner GUID for apps/promoengine/DisplayRoutines.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 387  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (387, 1, N'Bad permissions for apps/promoengine/DisplayRoutines.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 389  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (389, 1, N'Unrecognized apps/promoengine/EOS.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 390  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (390, 1, N'Bad owner UID for apps/promoengine/EOS.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 391  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (391, 1, N'Bad owner GUID for apps/promoengine/EOS.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 392  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (392, 1, N'Bad permissions for apps/promoengine/EOS.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 394  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (394, 1, N'Unrecognized apps/promoengine/interface.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 395  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (395, 1, N'Bad owner UID for apps/promoengine/interface.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 396  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (396, 1, N'Bad owner GUID for apps/promoengine/interface.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 397  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (397, 1, N'Bad permissions for apps/promoengine/interface.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 399  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (399, 1, N'Unrecognized apps/promoengine/kiosk.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 400  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (400, 1, N'Bad owner UID for apps/promoengine/kiosk.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 401  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (401, 1, N'Bad owner GUID for apps/promoengine/kiosk.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 402  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (402, 1, N'Bad permissions for apps/promoengine/kiosk.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 404  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (404, 1, N'Unrecognized apps/promoengine/MessageID.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 405  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (405, 1, N'Bad owner UID for apps/promoengine/MessageID.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 406  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (406, 1, N'Bad owner GUID for apps/promoengine/MessageID.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 407  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (407, 1, N'Bad permissions for apps/promoengine/MessageID.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 409  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (409, 1, N'Unrecognized apps/promoengine/printing.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 410  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (410, 1, N'Bad owner UID for apps/promoengine/printing.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 411  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (411, 1, N'Bad owner GUID for apps/promoengine/printing.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 412  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (412, 1, N'Bad permissions for apps/promoengine/printing.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 414  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (414, 1, N'Unrecognized apps/promoengine/PromoDebugRoutines.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 415  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (415, 1, N'Bad owner UID for apps/promoengine/PromoDebugRoutines.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 416  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (416, 1, N'Bad owner GUID for apps/promoengine/PromoDebugRoutines.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 417  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (417, 1, N'Bad permissions for apps/promoengine/PromoDebugRoutines.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 419  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (419, 1, N'Unrecognized apps/promoengine/promoengine.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 420  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (420, 1, N'Bad owner UID for apps/promoengine/promoengine.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 421  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (421, 1, N'Bad owner GUID for apps/promoengine/promoengine.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 422  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (422, 1, N'Bad permissions for apps/promoengine/promoengine.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 424  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (424, 1, N'Unrecognized apps/promoengine/svexternalid.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 425  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (425, 1, N'Bad owner UID for apps/promoengine/svexternalid.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 426  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (426, 1, N'Bad owner GUID for apps/promoengine/svexternalid.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 427  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (427, 1, N'Bad permissions for apps/promoengine/svexternalid.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 429  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (429, 1, N'Unrecognized apps/promoengine/void.inc file md5sum', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 430  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (430, 1, N'Bad owner UID for apps/promoengine/void.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 431  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (431, 1, N'Bad owner GUID for apps/promoengine/void.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 432  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (432, 1, N'Bad permissions for apps/promoengine/void.inc file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 434  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (434, 1, N'Bad owner UID for logs/ipLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 435  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (435, 1, N'Bad owner GUID for logs/ipLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 438  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (438, 1, N'Bad owner UID for logs/comLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 439  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (439, 1, N'Bad owner GUID for logs/comLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 442  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (442, 1, N'Bad owner UID for logs/scanLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 443  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (443, 1, N'Bad owner GUID for logs/scanLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 446  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (446, 1, N'Bad owner UID for logs/yellowboxSync file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 447  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (447, 1, N'Bad owner GUID for logs/yellowboxSync file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 450  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (450, 1, N'Bad owner UID for logs/surveyLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 451  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (451, 1, N'Bad owner GUID for logs/surveyLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 452  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (452, 1, N'Bad permissions for logs/surveyLog file', N'', 10, NULL)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 454  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (454, 1, N'ssh daemon not found in process list on server', N'', 1, NULL)
GO
IF NOT EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 455  )
    INSERT [dbo].[HealthErrors] ([ErrorID], [ServerTypeID], [ErrorDescription], [ErrorCode], [Severity], [PhraseID]) VALUES (455, 1, N'Failover Error', N'', 1, NULL)
GO
IF EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 3  )
    UPDATE [dbo].[HealthErrors] SET [PhraseID] = 6362 WHERE  [ErrorID] = 3
GO

IF EXISTS ( SELECT TOP 1 * FROM HealthErrors WHERE  [ErrorID] = 4  )
    UPDATE [dbo].[HealthErrors] SET [PhraseID] = 6363 WHERE  [ErrorID] = 4
GO

print 'processing tables/dbo.HealthResolutionLanguages.sql'; 
--
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HealthResolutionLanguages]') AND type in (N'U'))
BEGIN

CREATE TABLE [dbo].[HealthResolutionLanguages](
	[PKID] [int] IDENTITY(1,1) NOT NULL,
	[ResolutionID] [int] NOT NULL,	
	[Title] [nvarchar](100)NULL,
	[Text] [ntext] NULL,
	[LanguageID] [int] NOT NULL
 CONSTRAINT [PK_HealthResolutionLanguages] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

END
GO
SET ANSI_PADDING OFF
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[HealthResolutionLanguages]') and name='Text')
  ALTER TABLE [HealthResolutionLanguages] ALTER COLUMN [Text] NVARCHAR(MAX)
GO




print 'processing tables/dbo.HealthResolutions.Table.sql'; 
--
GO
-- $Id: dbo.HealthResolutions.Table.sql 120540 2018-02-13 17:39:18Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HealthResolutions]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HealthResolutions]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HealthResolutions](
	[ResolutionID] [int] IDENTITY(1,1) NOT NULL,
	[ErrorID] [int] NOT NULL,
	[ServerTypeID] [int] NOT NULL,
	[AdminUserID] [int] NULL,
	[CreatedDate] [datetime] NULL,
	[LastUpdate] [datetime] NULL,
	[EntryOrder] [int] NULL,
	[Title] [nvarchar](100) NULL,
	[ResolutionText] [ntext] NULL,
	[Deleted] [bit] NOT NULL,
 CONSTRAINT [PK_HealthResolutions] PRIMARY KEY CLUSTERED 
(
	[ResolutionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[HealthResolutions]') AND name = N'IX_HealthResolution_ErrorID')
CREATE NONCLUSTERED INDEX [IX_HealthResolution_ErrorID] ON [dbo].[HealthResolutions] 
(
	[ErrorID] ASC,
	[ServerTypeID] ASC,
	[Deleted] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_HealthResolutions_Deleted]') AND parent_object_id = OBJECT_ID(N'[dbo].[HealthResolutions]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_HealthResolutions_Deleted]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[HealthResolutions] ADD  CONSTRAINT [DF_HealthResolutions_Deleted]  DEFAULT ((0)) FOR [Deleted]
END


End
GO

SET IDENTITY_INSERT [dbo].[HealthResolutions] ON

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 1  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (1, 1, 2, 26, GETDATE(), GETDATE(), 1, N'Indicative of overall communications problems', N'This error should not appear in isolation, so check the server for other communications errors and attempt to resolve them.  If this goes on for more than ten days, an IPL will be required, and the server may need to be repaired or replaced.', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 2  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (2, 2, 2, 26, GETDATE(), GETDATE(), 1, N'Check local server cron jobs', N'Login to the local server and check the cron jobs for the user running the copient processes.  If they are missing incentiveFetch, or, more likely, empty, running staggerJobs (located in the bin directory in the copient directory) should restore them.  Before restoration, however, ensure that a socket connection is present, since a server automatically shuts off cron jobs during failover to prevent bad data from being sent.', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 3  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (3, 3, 2, 26, GETDATE(), GETDATE(), 1, N'Check logs and socket connection', N'First, check the transUpload log on the central server to see if any errors were generated.  If that does not reveal any solutions, check the yellowboxSync log and the cron jobs on the local server.  If the cron jobs are not populated, check for a socket connection to determine whether any transactions are being sent to the server.', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 4  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (4, 4, 2, 26, GETDATE(), GETDATE(), 1, N'Check logs and crons', N'Check the transDownload log on the central server for errors, and if none appear, check the yellowboxSync log and the cron jobs on the local server.  Before repopulating the cron jobs, ensure the socket is connected and the store is not in failover.', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 5  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (5, 5, 2, 26, GETDATE(), GETDATE(), 1, N'Ensure all offer files are downloaded', N'If offer files are waiting to be downloaded, sanity check will fail.  If offer files have been waiting for more than a few hours, check the incentiveFetch log and the yellowboxSync log on the local server.  If no offer files are waiting and sanity checks consistently fails, check CPEOfferAgent to ensure it is generating up to date offer files.  If CPEOfferAgent is running correctly and no offer files are waiting, an IPL may be necessary.', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 6  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (6, 11, 1, 26, GETDATE(), GETDATE(), 1, N'Clarification needed', N'Is this about the php cli not matching, or the 15 minute load average?', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 7  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (7, 20, 1, 26, GETDATE(), GETDATE(), 1, N'Check failover status', N'Check for a failover server serving this location.  Check the location page and see when the last communications were (absence of a socket connection will shutdown communications.)  If no failover server is present and the socket is still not connected, intervention on the POS side may be required (restarting background application, reconnecting terminals, etc.)', 0)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthResolutions WHERE  [ResolutionID] = 8  )
    INSERT [dbo].[HealthResolutions] ([ResolutionID], [ErrorID], [ServerTypeID], [AdminUserID], [CreatedDate], [LastUpdate], [EntryOrder], [Title], [ResolutionText], [Deleted]) VALUES (8, 25, 1, 26, GETDATE(), GETDATE(), 1, N'Compare to other in install package/enterprise', N'Compare the copient.conf file with the one provided in the installation package for that server, as well as other servers that should have the same configuration deployed throughout the enterprise.  Determine whether the configuration change is necessary/valid, and rollback if it is not.', 0)
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[HealthResolutions]') and name='ResolutionText')
  ALTER TABLE [HealthResolutions] ALTER COLUMN [ResolutionText] NVARCHAR(MAX)
GO

SET IDENTITY_INSERT [dbo].[HealthResolutions] OFF



print 'processing tables/dbo.HealthSections.Table.sql'; 
--
GO
-- $Id: dbo.HealthSections.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HealthSections]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HealthSections]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HealthSections](
	[SectionID] [int] NOT NULL,
	[SectionName] [nvarchar](50) NULL,
	[SectionCode] [nvarchar](6) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_HealthSections_1] PRIMARY KEY CLUSTERED 
(
	[SectionID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthSections WHERE  [SectionID] = 1  )
    INSERT [dbo].[HealthSections] ([SectionID], [SectionName], [SectionCode], [PhraseID]) VALUES (1, N'Survey_meta', N'SURV', 3225)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthSections WHERE  [SectionID] = 2  )
    INSERT [dbo].[HealthSections] ([SectionID], [SectionName], [SectionCode], [PhraseID]) VALUES (2, N'System', N'SYS', 349)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthSections WHERE  [SectionID] = 3  )
    INSERT [dbo].[HealthSections] ([SectionID], [SectionName], [SectionCode], [PhraseID]) VALUES (3, N'Copient', N'COP', 1124)
GO


print 'processing tables/dbo.HealthServerTypes.Table.sql'; 
--
GO
-- $Id: dbo.HealthServerTypes.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HealthServerTypes]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HealthServerTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HealthServerTypes](
	[ServerTypeID] [int] NOT NULL,
	[ServerDescription] [nvarchar](50) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_HealthServerTypes] PRIMARY KEY CLUSTERED 
(
	[ServerTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthServerTypes WHERE  [ServerTypeID] = 1  )
    INSERT [dbo].[HealthServerTypes] ([ServerTypeID], [ServerDescription], [PhraseID]) VALUES (1, N'Local Server', 607)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthServerTypes WHERE  [ServerTypeID] = 2  )
    INSERT [dbo].[HealthServerTypes] ([ServerTypeID], [ServerDescription], [PhraseID]) VALUES (2, N'Central Server', 608)
GO


print 'processing tables/dbo.HealthTags.Table.sql'; 
--
GO
-- $Id: dbo.HealthTags.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[HealthTags]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[HealthTags]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[HealthTags](
	[TagID] [int] NOT NULL,
	[ServerTypeID] [int] NOT NULL,
	[TagName] [nvarchar](50) NULL,
	[TagCode] [nvarchar](6) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_HealthTags] PRIMARY KEY CLUSTERED 
(
	[TagID] ASC,
	[ServerTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 1  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (1, 1, N'vitals', N'VIT', 3219)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 1  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (1, 2, N'communications', N'COMM', 2899)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 2  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (2, 1, N'mod_php', N'MODPHP', 3220)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 3  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (3, 1, N'php', N'PHP', 3221)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 4  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (4, 1, N'server', N'SERV', 585)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 5  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (5, 1, N'socket', N'SOCK', 3222)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 6  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (6, 1, N'cpeversion', N'CPEV', 3223)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 7  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (7, 1, N'file', N'FILE', 525)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM HealthTags WHERE  [TagID] = 9  )
    INSERT [dbo].[HealthTags] ([TagID], [ServerTypeID], [TagName], [TagCode], [PhraseID]) VALUES (9, 1, N'diskfree', N'DISK', 3224)
GO


print 'processing tables/dbo.ImpressionBuffer.Table.sql'; 
--
GO
-- $Id: dbo.ImpressionBuffer.Table.sql 32565 2011-06-16 17:39:21Z randy $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[ImpressionBuffer]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ImpressionBuffer]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[ImpressionBuffer](
	[OfferID] [bigint] NOT NULL,
	[ReportingDate] [datetime] NULL,
	[NumImpressions] [bigint] NULL,
	[StatusFlag] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'ImpressionBuffer' AND column_name = 'POSTimeStamp')
Begin
    ALTER TABLE [dbo].[ImpressionBuffer] ADD [POSTimeStamp] [datetime] 
End
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ImpressionBuffer]') AND name = N'IX_ImpressionBuffer_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_ImpressionBuffer_StatusFlag] ON [dbo].[ImpressionBuffer] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ImpressionBuffer]') AND name = N'IX_ImpressionBuffer_POSTimeStamp')
CREATE NONCLUSTERED INDEX [IX_ImpressionBuffer_POSTimeStamp] ON [dbo].[ImpressionBuffer] 
(
	[POSTimeStamp] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO



print 'processing tables/dbo.LMGImportTemp.Table.sql'; 
--
GO
-- $Id: dbo.LMGImportTemp.Table.sql 114830 2017-07-25 03:27:38Z kb250202 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LMGImportTemp]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LMGImportTemp](
	[InsertedDate] [datetime] NOT NULL,
	[ClientLocationCode] [nvarchar](20) NOT NULL,
	[BoxID] [int] NOT NULL,
	[TransactionNumber] [int] NOT NULL,
	[PrimaryExtID] [nvarchar](400) NULL,
	[OfferID] [bigint] NULL,
	[ROID] [bigint] NULL,
	[IssuanceDate] [datetime] NOT NULL,
	[DeliverableType] [int] NOT NULL,
	[Void] [int] NOT NULL,
	[RewardQty] [int] NULL,
	[ProgramID] [bigint] NULL,
	[ChargebackVendorID] [int] NULL,
	[CashierNum] [varchar](30) NULL,
	[ChargebackDept] [nvarchar](20) NULL,
	[ExtCRMInterface] [nvarchar](100) NULL,
	[SourceTypeID] [int] NULL,
	[PromoEngine] [nvarchar](255) NULL,
	[LocationID] [int] NULL,
	[ClientOfferID] [nvarchar](40) NULL,
	[RewardValue] [decimal](12, 3) NULL,
	[UniqueID] [varchar](15) NULL,
	[Expiration] [datetime] NULL,
	[Gross] [decimal](12, 3) NULL,
	[Net] [decimal](12, 3) NULL,
	[ExceedManualThreshold] [bit] NULL,
	[LogixTransNum] [char](36) NULL,
	[VendorCouponCode] [nvarchar](20) NULL,
	[ManufacturerCoupon] [int] NULL,
	[ProcessFlag] [tinyint] NOT NULL,
	[ActionTypeID] [tinyint] NULL,
	[AirmileMemberID] [nvarchar](50) NULL,
    [CardTypeID] [nvarchar](50) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTemp]') and name='PrimaryExtID')
BEGIN
  alter table LMGImportTemp alter column PrimaryExtID nvarchar(400)
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]') AND name = N'IX_LMGImportTemp_InsertedDate')
CREATE CLUSTERED INDEX [IX_LMGImportTemp_InsertedDate] ON [dbo].[LMGImportTemp] 
(
	[InsertedDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LMGImportTemp_InsertedDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LMGImportTemp_InsertedDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[LMGImportTemp] ADD  CONSTRAINT [DF_LMGImportTemp_InsertedDate]  DEFAULT (getdate()) FOR [InsertedDate]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LMGImportTemp_ProcessFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[LMGImportTemp]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LMGImportTemp_ProcessFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[LMGImportTemp] ADD  CONSTRAINT [DF_LMGImportTemp_ProcessFlag]  DEFAULT ((0)) FOR [ProcessFlag]
END


End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTemp' AND column_name = 'AirmileMemberID')
Begin
  ALTER TABLE [dbo].[LMGImportTemp] ADD [AirmileMemberID] NVARCHAR(50)  NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'LMGImportTemp' AND column_name = 'CardTypeID')
Begin
  ALTER TABLE [dbo].[LMGImportTemp] ADD [CardTypeID] NVARCHAR(50)  NULL
End
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LMGImportTemp' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[LMGImportTemp] ALTER COLUMN [LogixTransNum] char(36) NULL;

END
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[LMGImportTemp]') and name='TransactionNumber')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='LMGImportTemp' and COLUMN_NAME='TransactionNumber' and 
DATA_TYPE='int')) BEGIN
  alter table LMGImportTemp alter column [TransactionNumber] [nvarchar](128);
END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='LMGImportTemp' AND COLUMN_NAME = 'KeyRotationFlag')
BEGIN
ALTER TABLE [dbo].[LMGImportTemp] ADD KeyRotationFlag bit NULL
END
GO 



print 'processing tables/dbo.LS_HealthAlerts.Table.sql'; 
--
GO
-- $Id: dbo.LS_HealthAlerts.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LS_HealthAlerts]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LS_HealthAlerts]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LS_HealthAlerts](
	[LocalServerID] [int] NOT NULL,
	[ErrorID] [int] NOT NULL,
	[AdminUserID] [int] NOT NULL,
	[HealthSeverityID] [int] NULL,
	[ErrorText] [nvarchar](200) NULL,
	[LastAlertTime] [datetime] NOT NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[LS_HealthAlerts]') AND name = N'IX_LS_HealthAlerts_Key')
CREATE UNIQUE NONCLUSTERED INDEX [IX_LS_HealthAlerts_Key] ON [dbo].[LS_HealthAlerts] 
(
	[LocalServerID] ASC,
	[ErrorID] ASC,
	[AdminUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.LS_HealthErrors.Table.sql'; 
--
GO
-- $Id: dbo.LS_HealthErrors.Table.sql 38481 2011-10-10 19:50:43Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LS_HealthErrors]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LS_HealthErrors]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LS_HealthErrors](
	[LocalServerID]         [int]               NOT NULL,
	[RunID]                 [int]               NOT NULL,
	[ErrorID]               [int]               NOT NULL,
	[SectionID]             [int]               NOT NULL,
	[TagID]                 [int]               NOT NULL,
	[HealthSeverityID]      [int]               NULL,
	[ErrorText]             [nvarchar](1000)    NULL,
	[StatusFlag]            [tinyint]           NOT NULL,

    CONSTRAINT [PK_LS_HealthErrors] PRIMARY KEY CLUSTERED 
    (
	    [LocalServerID] ASC,
	    [RunID] ASC,
	    [ErrorID] ASC
    )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

) ON [PRIMARY]
END
GO


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_LS_HealthErrors_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[LS_HealthErrors]'))
Begin
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_LS_HealthErrors_StatusFlag]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[LS_HealthErrors] ADD  CONSTRAINT [DF_LS_HealthErrors_StatusFlag]  DEFAULT ((0)) FOR [StatusFlag]
    END
End
GO


print 'processing tables/dbo.LS_HealthHistory.Table.sql'; 
--
GO
-- $Id: dbo.LS_HealthHistory.Table.sql 38481 2011-10-10 19:50:43Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LS_HealthHistory]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LS_HealthHistory]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LS_HealthHistory](
	[LocalServerID]     [int]       NOT NULL,
	[RunID]             [int]       NOT NULL,
	[RunDate]           [datetime]  NULL,
	[HealthStatusID]    [int]       NULL,
	[Sev1]              [int]       NULL,
	[Sev10]             [int]       NULL,
	[HealthSeverityID]  [int]       NULL,
 CONSTRAINT [PK_LS_HealthHistory] PRIMARY KEY CLUSTERED 
(
	[LocalServerID] ASC,
	[RunID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


print 'processing tables/dbo.LS_HealthSeverityTypes.Table.sql'; 
--
GO
-- $Id: dbo.LS_HealthSeverityTypes.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LS_HealthSeverityTypes]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LS_HealthSeverityTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LS_HealthSeverityTypes](
	[HealthSeverityID] [int] NOT NULL,
	[Description] [nvarchar](50) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_LS_HealthSeverityTypes] PRIMARY KEY CLUSTERED 
(
	[HealthSeverityID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM LS_HealthSeverityTypes WHERE  [HealthSeverityID] = 0  )
    INSERT [dbo].[LS_HealthSeverityTypes] ([HealthSeverityID], [Description], [PhraseID]) VALUES (0, N'None', 232)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM LS_HealthSeverityTypes WHERE  [HealthSeverityID] = 1  )
    INSERT [dbo].[LS_HealthSeverityTypes] ([HealthSeverityID], [Description], [PhraseID]) VALUES (1, N'High', 163)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM LS_HealthSeverityTypes WHERE  [HealthSeverityID] = 5  )
    INSERT [dbo].[LS_HealthSeverityTypes] ([HealthSeverityID], [Description], [PhraseID]) VALUES (5, N'Medium', 164)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM LS_HealthSeverityTypes WHERE  [HealthSeverityID] = 10  )
    INSERT [dbo].[LS_HealthSeverityTypes] ([HealthSeverityID], [Description], [PhraseID]) VALUES (10, N'Low', 165)
GO


print 'processing tables/dbo.LS_HealthStatusTypes.Table.sql'; 
--
GO
-- $Id: dbo.LS_HealthStatusTypes.Table.sql 29121 2011-04-05 23:40:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[LS_HealthStatusTypes]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LS_HealthStatusTypes]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[LS_HealthStatusTypes](
	[HealthStatusID] [int] NOT NULL,
	[Description] [nvarchar](50) NULL,
	[PhraseID] [int] NULL,
 CONSTRAINT [PK_LS_HealthStatusTypes] PRIMARY KEY CLUSTERED 
(
	[HealthStatusID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM LS_HealthStatusTypes WHERE  [HealthStatusID] = 0  )
    INSERT [dbo].[LS_HealthStatusTypes] ([HealthStatusID], [Description], [PhraseID]) VALUES (0, N'Bad', 3201)
GO

IF NOT EXISTS ( SELECT TOP 1 * FROM LS_HealthStatusTypes WHERE  [HealthStatusID] = 1  )
    INSERT [dbo].[LS_HealthStatusTypes] ([HealthStatusID], [Description], [PhraseID]) VALUES (1, N'Healthy', 3202)
GO


print 'processing tables/dbo.OfferDTTableType.Type.sql'; 
--
GO
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO

IF NOT EXISTS (select * from sys.table_types where name='OfferDTTableType') BEGIN
CREATE TYPE [dbo].[OfferDTTableType] AS TABLE(
	[OfferID] [bigint] NOT NULL
)
END
GO

GRANT EXECUTE ON TYPE::[dbo].[OfferDTTableType] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing tables/dbo.OfferHourlyRedemptionData.Table.sql'; 
--
GO
-- $Id: dbo.OfferHourlyRedemptionData.Table.sql 57534 2013-08-05 $
-- Build Version: 7.3.1.138972

/****** Object:  Table [dbo].[OfferHourlyRedemptionData]    Script Date: 08/05/2013 16:10:15 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OfferHourlyRedemptionData]') AND type in (N'U'))
BEGIN

CREATE TABLE [dbo].[OfferHourlyRedemptionData](
	[OfferId] [bigint] NOT NULL,
	[TimeInterval] [datetime] NOT NULL,
	[RedemCount] [int] NULL,
	[AlertSentOn] [datetime] NULL,
 CONSTRAINT [PK_OfferHourlyRedemptionData] PRIMARY KEY CLUSTERED 
(
	[OfferId] ASC,
	[TimeInterval] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO


print 'processing tables/dbo.OfferReporting.Table.sql'; 
--
GO
-- $Id: dbo.OfferReporting.Table.sql 97984 2016-03-01 16:38:09Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[OfferReporting]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OfferReporting]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[OfferReporting](
	[OfferID] [bigint] NOT NULL,
	[NumImpressions] [bigint] NULL,
	[NumRedemptions] [bigint] NULL,
	[NumTransactions] [bigint] NOT NULL default (0),
	[AmountRedeemed] [decimal](12, 3) NULL,
	[ReportingDate] [datetime] NULL,
	[StatusFlag] [int] NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OfferReporting]') AND name = N'IX_OfferReporting_OfferID')
CREATE NONCLUSTERED INDEX [IX_OfferReporting_OfferID] ON [dbo].[OfferReporting] 
(
	[OfferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OfferReporting]') AND name = N'IX_OfferReporting_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_OfferReporting_StatusFlag] ON [dbo].[OfferReporting] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OfferReporting]') AND name = N'IX_OfferReporting_Unique')
CREATE UNIQUE NONCLUSTERED INDEX [IX_OfferReporting_Unique] ON [dbo].[OfferReporting] 
(
	[OfferID] ASC,
	[ReportingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferReporting_OfferID]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferReporting]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferReporting_OfferID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[OfferReporting] ADD  CONSTRAINT [DF_OfferReporting_OfferID]  DEFAULT ((0)) FOR [OfferID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferReporting_NumImpressinos]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferReporting]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferReporting_NumImpressinos]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[OfferReporting] ADD  CONSTRAINT [DF_OfferReporting_NumImpressinos]  DEFAULT ((0)) FOR [NumImpressions]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferReporting_NumRedemptions]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferReporting]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferReporting_NumRedemptions]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[OfferReporting] ADD  CONSTRAINT [DF_OfferReporting_NumRedemptions]  DEFAULT ((0)) FOR [NumRedemptions]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferReporting_AmountRedemed]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferReporting]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferReporting_AmountRedemed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[OfferReporting] ADD  CONSTRAINT [DF_OfferReporting_AmountRedemed]  DEFAULT ((0)) FOR [AmountRedeemed]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferReporting_StatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferReporting]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferReporting_StatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[OfferReporting] ADD  CONSTRAINT [DF_OfferReporting_StatusFlag]  DEFAULT ((0)) FOR [StatusFlag]
END


End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OfferReporting' AND column_name = 'POSTimeStamp')
Begin
    ALTER TABLE [dbo].[OfferReporting] ADD [POSTimeStamp] [datetime] NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'OfferReporting' AND column_name = 'NumTransactions')
Begin
    ALTER TABLE [dbo].[OfferReporting] ADD [NumTransactions] [bigint] NOT NULL default (0)
End
GO


print 'processing tables/dbo.OfferReportingTransactions.Table.sql'; 
--
GO
-- $Id: dbo.OfferReportingTransactions.Table.sql 1 2016-02-10 17:39:21Z db123627 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[OfferReportingTransactions]    Script Date: 12/27/2010 15:20:47 ******/
-- Track the transactions that have already been counted in the OfferReporting transactions column
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[OfferReportingTransactions]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[OfferReportingTransactions](
	[OfferID] [bigint] NOT NULL,
	[LogixTransNum] [nvarchar] (36) NOT NULL,
	[LastUpdate] [datetime] NULL,
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OfferReportingTransactions]') AND name = N'IX_OfferReportingTransactions_OfferID')
CREATE NONCLUSTERED INDEX [IX_OfferReportingTransactions_OfferID] ON [dbo].[OfferReportingTransactions] 
(
	[OfferID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OfferReportingTransactions]') AND name = N'IX_OfferReportingTransactions_LogixTransNum')
CREATE NONCLUSTERED INDEX [IX_OfferReportingTransactions_LogixTransNum] ON [dbo].[OfferReportingTransactions] 
(
	[LogixTransNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[OfferReportingTransactions]') AND name = N'IX_OfferReportingTransactions_Unique')
CREATE UNIQUE NONCLUSTERED INDEX [IX_OfferReportingTransactions_Unique] ON [dbo].[OfferReportingTransactions] 
(
	[OfferID] ASC,
	[LogixTransNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = ON, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_OfferReportingTransactions_OfferID]') AND parent_object_id = OBJECT_ID(N'[dbo].[OfferReportingTransactions]'))
BEGIN
   IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_OfferReportingTransactions_OfferID]') AND type = 'D')
   BEGIN
      ALTER TABLE [dbo].[OfferReportingTransactions] ADD  CONSTRAINT [DF_OfferReportingTransactions_OfferID]  DEFAULT ((0)) FOR [OfferID]
   END
END
GO



print 'processing tables/dbo.PartitionFilegroups.Table.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF NOT EXISTS ( SELECT 1 FROM sys.objects WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') )
BEGIN
	CREATE TABLE PartitionFilegroups (
		[TableID] int NOT NULL,
		[DataSpaceID] bigint NOT NULL
	);
END
GO

-- Index removal

-- Column changes

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='TableID' AND [is_nullable]=0 )
BEGIN
	ALTER TABLE [dbo].[PartitionFilegroups] ALTER COLUMN [TableID] [int] NOT NULL
END
GO

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='DataSpaceID' AND [is_nullable]=0 )
BEGIN
	IF EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='IX_PartitionFilegroups_TableID_DataSpaceID' )
	BEGIN
		DROP INDEX [IX_PartitionFilegroups_TableID_DataSpaceID] ON [dbo].[PartitionFilegroups];
	END
	ALTER TABLE [dbo].[PartitionFilegroups] ALTER COLUMN [DataSpaceID] [bigint] NOT NULL;
END
GO

-- Indexes

IF NOT EXISTS ( SELECT 1 FROM sys.key_constraints WHERE parent_object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='PK_PartitionFilegroups' )
BEGIN
	ALTER TABLE [dbo].[PartitionFilegroups] ADD CONSTRAINT [PK_PartitionFilegroups] PRIMARY KEY CLUSTERED (TableID ASC, DataSpaceID ASC)
END
GO

IF NOT EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionFilegroups]') AND [name]='IX_PartitionFilegroups_TableID_DataSpaceID' )
BEGIN
    CREATE UNIQUE NONCLUSTERED INDEX [IX_PartitionFilegroups_TableID_DataSpaceID] ON [dbo].[PartitionFilegroups] (DataSpaceID)
END
GO

print 'processing tables/dbo.PartitionedTables.Table.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF NOT EXISTS ( SELECT 1 FROM sys.objects WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') )
BEGIN
	CREATE TABLE PartitionedTables (
		[ID] int IDENTITY(1, 1) NOT NULL,
		[TableName] nvarchar(255) NOT NULL,
		[PartitionWidth] int NOT NULL,
		[HeadRoom] int NOT NULL
	);
END

-- Column changes

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='TableName' AND [is_nullable]=0 )
BEGIN
	IF EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='IX_PartitionedTables_TableName')
	BEGIN
		DROP INDEX [IX_PartitionedTables_TableName] ON [dbo].[PartitionedTables]
	END
	ALTER TABLE [dbo].[PartitionedTables] ALTER COLUMN [TableName] [nvarchar](255) NOT NULL
END

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='PartitionWidth' AND [is_nullable]=0 )
BEGIN
	ALTER TABLE [dbo].[PartitionedTables] ALTER COLUMN [PartitionWidth] [int] NOT NULL
END

IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='HeadRoom' AND [is_nullable]=0 )
BEGIN
	ALTER TABLE [dbo].[PartitionedTables] ALTER COLUMN [HeadRoom] [int] NOT NULL
END


-- Indexes

IF NOT EXISTS ( SELECT 1 FROM sys.key_constraints WHERE parent_object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='PK_PartitionedTables' )
BEGIN
	ALTER TABLE [dbo].[PartitionedTables] ADD CONSTRAINT [PK_PartitionedTables] PRIMARY KEY CLUSTERED (ID)
END

IF NOT EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[PartitionedTables]') AND [name]='IX_PartitionedTables_TableName')
BEGIN
	-- Enforce uniqueness
	CREATE UNIQUE INDEX [IX_PartitionedTables_TableName] ON [dbo].[PartitionedTables] (TableName)
END


print 'processing tables/dbo.PromoMoveInsertQueue.Table.sql'; 
--
GO
-- $Id: dbo.PromoMoveInsertQueue.Table.sql 31588 2011-05-25 19:46:29Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[PromoMoveInsertQueue]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PromoMoveInsertQueue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PromoMoveInsertQueue](
	[PKID] [bigint] IDENTITY(1,1) NOT NULL,
	[FileName] [nvarchar](255) NOT NULL,
	[UploadTime] [datetime] NULL,
	[StatusFlag] [int] NULL,
	[EngineID] [int] NOT NULL,
	[FileType] [int] NOT NULL,
	[FileVersion] [int] NULL,
 CONSTRAINT [PK_PromoMoveInsertQueue] PRIMARY KEY CLUSTERED 
(
	[PKID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PromoMoveInsertQueue]') AND name = N'IX_PromoMove_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_PromoMove_StatusFlag] ON [dbo].[PromoMoveInsertQueue] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO



IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PromoMoveInsertQueue_EngineID]') AND parent_object_id = OBJECT_ID(N'[dbo].[PromoMoveInsertQueue]'))
Begin

    IF EXISTS ( 
        SELECT 1 FROM sys.default_constraints WHERE OBJECT_NAME(parent_object_id) = 'PromoMoveInsertQueue' AND COL_NAME( parent_object_id, parent_column_id ) = 'EngineID' AND is_system_named = 1 
    )
    BEGIN
        DECLARE @CurrentConstraintName sysname;
        SELECT top 1 @CurrentConstraintName = name FROM sys.default_constraints 
        WHERE OBJECT_NAME(parent_object_id) = 'PromoMoveInsertQueue' AND COL_NAME( parent_object_id, parent_column_id ) = 'EngineID' AND is_system_named = 1 
        
        --  Rename system named constraint to standard naming convention
        exec sp_rename @CurrentConstraintName, N'DF_PromoMoveInsertQueue_EngineID', N'OBJECT';
    END

    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PromoMoveInsertQueue_EngineID]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[PromoMoveInsertQueue] ADD  CONSTRAINT [DF_PromoMoveInsertQueue_EngineID]  DEFAULT ((0)) FOR [EngineID]
    END
End
GO


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_PromoMoveInsertQueue_FileType]') AND parent_object_id = OBJECT_ID(N'[dbo].[PromoMoveInsertQueue]'))
Begin

    IF EXISTS ( 
        SELECT 1 FROM sys.default_constraints WHERE OBJECT_NAME(parent_object_id) = 'PromoMoveInsertQueue' AND COL_NAME( parent_object_id, parent_column_id ) = 'FileType' AND is_system_named = 1 
    )
    BEGIN
        DECLARE @CurrentConstraintName sysname;
        SELECT top 1 @CurrentConstraintName = name FROM sys.default_constraints 
        WHERE OBJECT_NAME(parent_object_id) = 'PromoMoveInsertQueue' AND COL_NAME( parent_object_id, parent_column_id ) = 'FileType' AND is_system_named = 1 
        
        --  Rename system named constraint to standard naming convention
        exec sp_rename @CurrentConstraintName, N'DF_PromoMoveInsertQueue_FileType', N'OBJECT';
    END

    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_PromoMoveInsertQueue_FileType]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[PromoMoveInsertQueue] ADD  CONSTRAINT [DF_PromoMoveInsertQueue_FileType]  DEFAULT ((1)) FOR [FileType]
    END

End
GO


print 'processing tables/dbo.RedemptionBuffer.Table.sql'; 
--
GO
-- $Id: dbo.RedemptionBuffer.Table.sql 27378 2011-02-23 17:56:18Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[RedemptionBuffer]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RedemptionBuffer]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[RedemptionBuffer](
	[OfferID] [bigint] NOT NULL,
	[ReportingDate] [datetime] NULL,
	[NumRedemptions] [bigint] NULL,
	[AmountRedeemed] [decimal](12, 3) NULL,
	[StatusFlag] [int] NULL
) ON [PRIMARY]
END
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[RedemptionBuffer]') AND name = N'IX_RedemptionBuffer_StatusFlag')
CREATE NONCLUSTERED INDEX [IX_RedemptionBuffer_StatusFlag] ON [dbo].[RedemptionBuffer] 
(
	[StatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO


print 'processing tables/dbo.ThirdPartyTransHist.Table.sql'; 
--
GO
/****** Object:  Table [dbo].[ThirdPartyTransHist]    Script Date: 01/06/2014 12:59:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransHist]') AND type in (N'U'))
BEGIN

CREATE TABLE [dbo].[ThirdPartyTransHist](
	[LogixTransNum] [varchar](36) NULL,
	[CustomerPrimaryExtID] [nvarchar](400) NULL,
	[CustomerTypeID] [int] NULL,
	[ExtLocationCode] [nvarchar](20) NULL,
	[TransDate] [datetime] NULL,
	[TerminalNum] [nvarchar](4) NULL,
	[POSTransNum] [nvarchar](6) NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[HHID] [nvarchar](400) NULL,
	[Replayed] [int] NOT NULL,
	[POSTimeStamp] [datetime] NULL,
	[PartitionNumber] [int] NULL,
	[TransTotal] [decimal](11, 3) NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]

END
GO


IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransHistory_CustomerTypeID]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransHist]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransHistory_CustomerTypeID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransHist] ADD  CONSTRAINT [DF_ThirdPartyTransHistory_CustomerTypeID]  DEFAULT ((0)) FOR [CustomerTypeID]
END

End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransHist_Replayed]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransHist]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransHist_Replayed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransHist] ADD  CONSTRAINT [DF_ThirdPartyTransHist_Replayed]  DEFAULT ((0)) FOR [Replayed]
END

End
GO


-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ThirdPartyTransHist' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH < 200)
BEGIN

ALTER TABLE [dbo].[ThirdPartyTransHist] ALTER COLUMN [LogixTransNum] varchar(200) NULL;

END
GO
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransHist]') and name='POSTransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='ThirdPartyTransHist' and COLUMN_NAME='POSTransNum' and 
DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH<128)) BEGIN
  alter table ThirdPartyTransHist alter column [POSTransNum] [nvarchar](128);
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransHist]') and name='CustomerPrimaryExtID')
BEGIN
  alter table ThirdPartyTransHist alter column CustomerPrimaryExtID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransHist]') and name='PresentedCustomerID')
BEGIN
  alter table ThirdPartyTransHist alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransHist]') and name='HHID')
BEGIN
  alter table ThirdPartyTransHist alter column HHID nvarchar(400)
END
GO



print 'processing tables/dbo.ThirdPartyTransRedemption.Table.sql'; 
--
GO
/****** Object:  Table [dbo].[ThirdPartyTransRedemption]    Script Date: 01/06/2014 13:11:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]') AND type in (N'U'))
BEGIN

CREATE TABLE [dbo].[ThirdPartyTransRedemption](
	[OfferID] [bigint] NULL,
	[ExtLocationCode] [nvarchar](20) NULL,
	[CustomerPrimaryExtID] [nvarchar](400) NULL,
	[RedemptionCount] [int] NULL,
	[RedemptionAmount] [decimal](12, 3) NULL,
	[TransDate] [datetime] NOT NULL,
	[TerminalNum] [nvarchar](4) NULL,
	[TransNum] [nvarchar](12) NULL,
	[RptStatusFlag] [int] NULL,
	[LogixTransNum] [char](36) NOT NULL,
	[CustomerTypeID] [int] NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[HHID] [nvarchar](400) NULL,
	[Replayed] [int] NOT NULL,
	[SVAmount] [decimal](12, 3) NULL,
	[SVProgramID] [int] NULL,
	[PointsAmount] [bigint] NULL,
	[PointsProgramID] [int] NULL,
	[POSTimeStamp] [datetime] NULL,
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_ThirdPartyTransRedemption] PRIMARY KEY CLUSTERED 
(
	[TransDate] ASC,
	[ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransRedemption_RptStatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransRedemption_RptStatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] ADD  CONSTRAINT [DF_ThirdPartyTransRedemption_RptStatusFlag]  DEFAULT ((0)) FOR [RptStatusFlag]
END

End
GO
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]') and name='LogixTransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='ThirdPartyTransRedemption' and COLUMN_NAME='LogixTransNum' and 
DATA_TYPE='char' and CHARACTER_MAXIMUM_LENGTH<200)) BEGIN
IF  EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransHistory_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransHistory_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] DROP Constraint DF_ThirdPartyTransHistory_LogixTransNum
  ALTER TABLE ThirdPartyTransRedemption ALTER COLUMN [LogixTransNum] [nvarchar](200);
  END
  END
END
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransHistory_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransHistory_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] ADD  CONSTRAINT [DF_ThirdPartyTransHistory_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END

End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransRedemption_CustomerTypeID]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransRedemption_CustomerTypeID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] ADD  CONSTRAINT [DF_ThirdPartyTransRedemption_CustomerTypeID]  DEFAULT ((0)) FOR [CustomerTypeID]
END

End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransRedemption_Replayed]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransRedemption_Replayed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] ADD  CONSTRAINT [DF_ThirdPartyTransRedemption_Replayed]  DEFAULT ((0)) FOR [Replayed]
END

End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransRedemption_SVProgramID]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransRedemption_SVProgramID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] ADD  CONSTRAINT [DF_ThirdPartyTransRedemption_SVProgramID]  DEFAULT ((0)) FOR [SVProgramID]
END

End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransRedemption_PointsAmount]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransRedemption_PointsAmount]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] ADD  CONSTRAINT [DF_ThirdPartyTransRedemption_PointsAmount]  DEFAULT ((0)) FOR [PointsAmount]
END

End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_ThirdPartyTransRedemption_PointsProgramID]') AND parent_object_id = OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_ThirdPartyTransRedemption_PointsProgramID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[ThirdPartyTransRedemption] ADD  CONSTRAINT [DF_ThirdPartyTransRedemption_PointsProgramID]  DEFAULT ((0)) FOR [PointsProgramID]
END

End
GO

IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]') and name='TransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='ThirdPartyTransRedemption' and COLUMN_NAME='TransNum' and 
DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH<128)) BEGIN
  alter table ThirdPartyTransRedemption alter column [TransNum] [nvarchar](128);
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]') and name='CustomerPrimaryExtID')
BEGIN
  alter table ThirdPartyTransRedemption alter column CustomerPrimaryExtID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]') and name='PresentedCustomerID')
BEGIN
  alter table ThirdPartyTransRedemption alter column PresentedCustomerID nvarchar(400)
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[ThirdPartyTransRedemption]') and name='HHID')
BEGIN
  alter table ThirdPartyTransRedemption alter column HHID nvarchar(400)
END
GO

print 'processing tables/dbo.TrackableCouponsHistory.Table.sql'; 
--
GO
-- $Id: dbo.TrackableCouponsHistory.Table.sql 79260 2014-05-31 09:41:10Z mv250132 $
-- Build Version: 7.3.1.138972
 
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
 
-- Table usage: Stores trackable coupons history including earning, redemption, and expiration.
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsHistory]') AND Type IN (N'U')) 
BEGIN
  CREATE TABLE [dbo].[TrackableCouponsHistory] (
    [PKID] [bigint] IDENTITY(1,1) NOT NULL,     -- The auto-incrementing primary key for this table
    [CouponCode] [varchar] (150) NOT NULL,      -- FK link to LogixXS.TrackableCoupons.CouponCode
    [Type] [tinyint] NOT NULL CONSTRAINT [DF_TrackableCouponsHistory_Type] DEFAULT (0),                           -- Type of coupon use (1 = scan, 2 = redemption, 3 = unlock)
    [TransStatus] [tinyint] NULL,               -- FK to LogixXS.TrackableCouponsStatus - coupon status after transaction
    [CouponsUsed] [tinyint] NOT NULL CONSTRAINT [DF_TrackableCouponsHistory_CouponsUsed] DEFAULT (0),             -- Number of times this coupon has been redeemed in the transaction
    [CustomerPK] [bigint] NULL,                 -- FK to the LogixXS.Customers table - the Customer ID associated with this transaction
    [LocationID] [bigint] NULL,                 -- FK links to LocalServers.LocalServerID - the ID of the server that modified the record
    [LogixTransNum] [varchar](36) NULL,         -- CPE/UE unique transaction number
    [CreationDate] [datetime] NOT NULL CONSTRAINT [DF_TrackableCouponsHistory_CreationDate] DEFAULT (GETDATE()),  -- The date/time this record was created
    CONSTRAINT [PK_TrackableCouponsHistory] PRIMARY KEY CLUSTERED ([PKID] ASC) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
  ) ON [PRIMARY];
END
GO
 
--FK10162013 - Adding Non-Clustered Index on [CouponCode]
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsHistory]') AND name = N'IX_TrackableCouponsHistory_CouponCode')
CREATE NONCLUSTERED INDEX [IX_TrackableCouponsHistory_CouponCode] ON [dbo].[TrackableCouponsHistory] 
(
	[CouponCode] ASC
)
INCLUDE ( [Type],
[TransStatus],
[CouponsUsed],
[CustomerPK],
[LocationID],
[LogixTransNum],
[CreationDate]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
 
--FK10162013 - Adding Non-Clustered Index on [CustomerPK]
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsHistory]') AND name = N'IX_TrackableCouponsHistory_CustomerPK')
CREATE NONCLUSTERED INDEX [IX_TrackableCouponsHistory_CustomerPK] ON [dbo].[TrackableCouponsHistory] 
(
 [CustomerPK] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
 
--FK10162013 - Adding Non-Clustered Index on [LocationID]
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsHistory]') AND name = N'IX_TrackableCouponsHistory_LocationID')
CREATE NONCLUSTERED INDEX [IX_TrackableCouponsHistory_LocationID] ON [dbo].[TrackableCouponsHistory] 
(
 [LocationID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
 
--FK10162013 - Adding Non-Clustered Index on [CreationDate]
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TrackableCouponsHistory]') AND name = N'IX_TrackableCouponsHistory_CreationDate')
CREATE NONCLUSTERED INDEX [IX_TrackableCouponsHistory_CreationDate] ON [dbo].[TrackableCouponsHistory] 
(
 [CreationDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TrackableCouponsHistory' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[TrackableCouponsHistory] ALTER COLUMN [LogixTransNum] varchar(36) NULL;

END
GO

print 'processing tables/dbo.TransHist.Table.sql'; 
--
GO
-- $Id: dbo.TransHist.Table.sql 138972 2019-06-25 09:09:38Z pk250358 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[TransHist]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[TransHist](
	[LogixTransNum] [varchar](36) NULL,
	[CustomerPrimaryExtID] [nvarchar](400) NULL,
	[CustomerTypeID] [int] NULL,
	[ExtLocationCode] [nvarchar](20) NULL,
	[TransDate] [datetime] NOT NULL,
	[TerminalNum] [nvarchar](4) NULL,
	[POSTransNum] [nvarchar](12) NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[HHID] [nvarchar](400) NULL,
	[Replayed] [int] NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING ON
GO

-- Index and constraint removal

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_TransDate')
	DROP INDEX [IX_TransHist_TransDate] ON [dbo].[TransHist] 
GO

-- Column removal

-- Column alteration

-- jfuhs 20120615: This could potentially fail if there are NULL TransDates in the table
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransHist' AND column_name = 'TransDate' AND IS_NULLABLE='NO' )
BEGIN
	ALTER TABLE [dbo].[TransHist] ALTER COLUMN [TransDate] datetime NOT NULL
END
GO

--Column alteration
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransHist' AND column_name = 'TerminalNum' AND IS_NULLABLE='YES')
BEGIN
	ALTER TABLE [dbo].[TransHist] 
		ALTER COLUMN [TerminalNum] [nvarchar](12) NULL 
END
GO

-- Column addition

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransHist' AND column_name = 'POSTimeStamp')
Begin
    ALTER TABLE [dbo].[TransHist] ADD [POSTimeStamp] [datetime] 
End
GO

-- This column is a special case. It may alternatively exist at ordinal 8.
-- Special code exists in TransHistoryMovementAgent to account for this.
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransHist' AND column_name = 'PartitionNumber')
Begin
    ALTER TABLE [dbo].[TransHist] ADD [PartitionNumber] [int]
End
GO
--------------------------------
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransHist' AND column_name = 'TransTotal')
Begin
    ALTER TABLE [dbo].[TransHist] ADD [TransTotal] [decimal](11,3) NULL 
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransHist' AND column_name = 'ID')
BEGIN
	ALTER TABLE [dbo].[TransHist] ADD [ID] [bigint] IDENTITY(1,1) NOT NULL
END
GO

-- Index and constraint addition
--  start index checks, rename, and builds

IF NOT EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[TransHist]') AND name = N'PK_TransHist' )
BEGIN
	ALTER TABLE [dbo].[TransHist] ADD CONSTRAINT [PK_TransHist] PRIMARY KEY CLUSTERED ( [TransDate] ASC, [ID] ASC )
END
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerPrimaryExtID')
--BEGIN
--   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_CustomerPrimaryExtID')
--   BEGIN
--      exec sp_rename 'dbo.TransHist.IX_TransHistory_CustomerPrimaryExtID', 'IX_TransHist_CustomerPrimaryExtID', 'INDEX'
--   END
--END
--GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerPrimaryExtID')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_CustomerPrimaryExtID')
   BEGIN
      DROP INDEX IX_TransHistory_CustomerPrimaryExtID ON dbo.TransHist
   END
END
GO
 
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerPrimaryExtID')
--CREATE NONCLUSTERED INDEX [IX_TransHist_CustomerPrimaryExtID] ON [dbo].[TransHist] 
--(
--	[CustomerPrimaryExtID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

--------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerTypeID')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_CustomerTypeID')
   BEGIN
      exec sp_rename 'dbo.TransHist.IX_TransHistory_CustomerTypeID', 'IX_TransHist_CustomerTypeID', 'INDEX'
   END
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerTypeID')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_CustomerTypeID')
   BEGIN
      DROP INDEX IX_TransHistory_CustomerTypeID ON dbo.TransHist
   END
END
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerTypeID')
--CREATE NONCLUSTERED INDEX [IX_TransHist_CustomerTypeID] ON [dbo].[TransHist] 
--(
	--[CustomerTypeID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

--Dropping index based on customer's index usage report - 03152013
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerTypeID')
BEGIN
   DROP INDEX IX_TransHist_CustomerTypeID ON dbo.TransHist  
END
GO  
--------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_ExtLocationCode')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_ExtLocationCode')
   BEGIN
      exec sp_rename 'dbo.TransHist.IX_TransHistory_ExtLocationCode', 'IX_TransHist_ExtLocationCode', 'INDEX'
   END
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_ExtLocationCode')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_ExtLocationCode')
   BEGIN
      DROP INDEX IX_TransHistory_ExtLocationCode ON dbo.TransHist
   END
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_ExtLocationCode')
CREATE NONCLUSTERED INDEX [IX_TransHist_ExtLocationCode] ON [dbo].[TransHist] 
(
	[ExtLocationCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
--------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_LogixTransNum')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_LogixTransNum')
   BEGIN
      exec sp_rename 'dbo.TransHist.IX_TransHistory_LogixTransNum', 'IX_TransHist_LogixTransNum', 'INDEX'
   END
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_LogixTransNum')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_LogixTransNum')
   BEGIN
      DROP INDEX IX_TransHistory_LogixTransNum ON dbo.TransHist
   END
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_LogixTransNum')
CREATE NONCLUSTERED INDEX [IX_TransHist_LogixTransNum] ON [dbo].[TransHist] 
(
	[LogixTransNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
--------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_POSTransNum')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_POSTransNum')
   BEGIN
      exec sp_rename 'dbo.TransHist.IX_TransHistory_POSTransNum', 'IX_TransHist_POSTransNum', 'INDEX'
   END
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_POSTransNum')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_POSTransNum')
   BEGIN
      DROP INDEX IX_TransHistory_POSTransNum ON dbo.TransHist
   END
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_POSTransNum')
CREATE NONCLUSTERED INDEX [IX_TransHist_POSTransNum] ON [dbo].[TransHist] 
(
	[POSTransNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
--------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_TerminalNum')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_TerminalNum')
   BEGIN
      exec sp_rename 'dbo.TransHist.IX_TransHistory_TerminalNum', 'IX_TransHist_TerminalNum', 'INDEX'
   END
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_TerminalNum')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_TerminalNum')
   BEGIN
      DROP INDEX IX_TransHistory_TerminalNum ON dbo.TransHist
   END
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_TerminalNum')
CREATE NONCLUSTERED INDEX [IX_TransHist_TerminalNum] ON [dbo].[TransHist] 
(
	[TerminalNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
--------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_TransDate')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_TransDate')
   BEGIN
      exec sp_rename 'dbo.TransHist.IX_TransHistory_TransDate', 'IX_TransHist_TransDate', 'INDEX'
   END
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_TransDate')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_TransDate')
   BEGIN
      DROP INDEX IX_TransHistory_TransDate ON dbo.TransHist
   END
END
GO

-- jfuhs: 20120615: Retired TransDate index.
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_TransDate')
--CREATE NONCLUSTERED INDEX [IX_TransHist_TransDate] ON [dbo].[TransHist] 
--(
--	[TransDate] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--------------------------------------------------------------
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_POSTimeStamp')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_POSTimeStamp')
   BEGIN
      exec sp_rename 'dbo.TransHist.IX_TransHistory_POSTimeStamp', 'IX_TransHist_POSTimeStamp', 'INDEX'
   END
END
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_POSTimeStamp')
BEGIN
   IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHistory_POSTimeStamp')
   BEGIN
      DROP INDEX IX_TransHistory_POSTimeStamp ON dbo.TransHist
   END
END
GO

--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_POSTimeStamp')
--CREATE NONCLUSTERED INDEX [IX_TransHist_POSTimeStamp] ON [dbo].[TransHist] 
--(
	--[POSTimeStamp] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

--Dropping Index based on customer's index usage report - 03152013
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_POSTimeStamp')
BEGIN
  DROP INDEX IX_TransHist_POSTimeStamp ON dbo.TransHist
END
GO
--------------------------------------------------------------
--  end index checks, rename, and builds
--
SET ANSI_PADDING OFF
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransHistory_CustomerTypeID]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransHist]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransHistory_CustomerTypeID]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[TransHist] ADD  CONSTRAINT [DF_TransHistory_CustomerTypeID]  DEFAULT ((0)) FOR [CustomerTypeID]
  END
End
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransHist_Replayed]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransHist]'))
Begin
  IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransHist_Replayed]') AND type = 'D')
  BEGIN
    ALTER TABLE [dbo].[TransHist] ADD  CONSTRAINT [DF_TransHist_Replayed]  DEFAULT ((0)) FOR [Replayed]
  END
END
GO



--RT 5038: increase transaction length to 12 characters
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='POSTransNum')) and 
  (exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='TransHist' and COLUMN_NAME='POSTransNum' and 
  DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH<=128)) BEGIN
    alter table TransHist alter column [POSTransNum] [nvarchar](128);
END
GO


IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='CustomerPrimaryExtID')
Begin
  alter table TransHist alter column CustomerPrimaryExtID nvarchar(400)
End
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='PresentedCustomerID')
Begin
  alter table TransHist add PresentedCustomerID nvarchar(400) NULL
End
Else IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='PresentedCustomerID')
Begin
  alter table TransHist alter column PresentedCustomerID nvarchar(400)
End
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='PresentedCardTypeID')
Begin
  alter table TransHist add PresentedCardTypeID int NULL
End
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='HHID')
Begin
  alter table TransHist add HHID nvarchar(400) NULL
End
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='HHID')
Begin
  alter table TransHist alter column HHID nvarchar(400)
End
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHist]') and name='Replayed')
Begin
  alter table TransHist add Replayed int NULL
End
GO


-- 10182013: Adding Index on HHID column to Improve the Household ID Performance
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_Tranhist_HHID') 
CREATE NONCLUSTERED INDEX [IX_Tranhist_HHID] ON [dbo].[TransHist] ( [HHID] ASC
)
INCLUDE ( [LogixTransNum],
[CustomerPrimaryExtID],
[CustomerTypeID],
[ExtLocationCode],
[TerminalNum],
[POSTransNum],
[PresentedCustomerID],
[PresentedCardTypeID],
[Replayed],
[TransTotal],
[POSTimeStamp]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY] 

GO

--10182013: Dropping an Index on CustomerPrimaryExtID and Adding a Covering Index on it to Improve HouseholdID Performance
--IF EXISTS(SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerPrimaryExtID')
--DROP INDEX [IX_TransHist_CustomerPrimaryExtID] ON [dbo].[TransHist] 
--GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHist]') AND name = N'IX_TransHist_CustomerPrimaryExtID')
CREATE NONCLUSTERED INDEX [IX_TransHist_CustomerPrimaryExtID] ON [dbo].[TransHist] (  [CustomerPrimaryExtID] ASC
)
INCLUDE ( [LogixTransNum],
[CustomerTypeID],
[ExtLocationCode],
[TerminalNum],
[POSTransNum],
[PresentedCustomerID],
[PresentedCardTypeID],
[HHID],
[Replayed],
[POSTimeStamp],
[TransTotal]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TransHist' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

ALTER TABLE [dbo].[TransHist] ALTER COLUMN [LogixTransNum] varchar(36) NULL;

END
GO

print 'processing tables/dbo.TransHistory_Old.Table.sql'; 
--
GO
-- $Id: dbo.TransHistory_Old.Table.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[TransHistory_Old]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO



IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[TransHistory_Old](
	[OfferID] [bigint] NULL,
	[ExtLocationCode] [nvarchar](20) NULL,
	[CustomerPrimaryExtID] [nvarchar](400) NULL,
	[RedemptionCount] [int] NULL,
	[RedemptionAmount] [decimal](12, 3) NULL,
	[TransDate] [datetime] NULL,
	[TerminalNum] [nvarchar](4) NULL,
	[TransNum] [nvarchar](12) NULL,
	[RptStatusFlag] [int] NULL,
	[LogixTransNum] [char](36) NOT NULL,  -- see note below
	[CustomerTypeID] [int] NULL           -- see note below   
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]') AND name = N'IX_TransHistory_Old_CustomerPrimaryExtID')
CREATE NONCLUSTERED INDEX [IX_TransHistory_Old_CustomerPrimaryExtID] ON [dbo].[TransHistory_Old] 
(
	[CustomerPrimaryExtID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHistory_Old]') and name='LogixTransNum')  -- if the LogixTransNum column exists (and it need not); see note below
BEGIN

    IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]') AND name = N'IX_TransHistory_Old_LogixTransNum')
        CREATE NONCLUSTERED INDEX [IX_TransHistory_Old_LogixTransNum] ON [dbo].[TransHistory_Old] 
        (
	        [LogixTransNum] ASC
        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

END
GO


IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]') AND name = N'IX_TransHistory_Old_RptStatusFlag')
CREATE NONCLUSTERED INDEX [IX_TransHistory_Old_RptStatusFlag] ON [dbo].[TransHistory_Old] 
(
	[RptStatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO

IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransHistory_Old_RptStatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]'))
Begin
    IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransHistory_Old_RptStatusFlag]') AND type = 'D')
    BEGIN
        ALTER TABLE [dbo].[TransHistory_Old] ADD  CONSTRAINT [DF_TransHistory_Old_RptStatusFlag]  DEFAULT ((0)) FOR [RptStatusFlag]
    END
End
GO

--
-- LogixTransNum and CustomerTypeID might not actually exist for copies of the Transhistory_old table 
-- that were created by renaming Transhistory to transhistory_old at v5.6.1.0. It seems they were never
-- added to the table. Copies of the table created post 5.6.1.0 will have them, as the base table definition 
-- was changed to include them. 
--
-- They are never used. 
--
-- Transhistory_old is unioned with TransRedemption in the TransredemptionView, but these two columns are 
-- ignored in the select statement, their values hard-set to 0.
--

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHistory_Old]') and name='LogixTransNum')  -- if the LogixTransNum column exists (and it need not)
BEGIN

    IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransHistory_Old_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]'))
    Begin
        IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransHistory_Old_LogixTransNum]') AND type = 'D')
        BEGIN
            ALTER TABLE [dbo].[TransHistory_Old] ADD  CONSTRAINT [DF_TransHistory_Old_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
        END
    End
END
GO


IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHistory_Old]') and name='CustomerTypeID') -- if the customertypeid column exists (and it need not)
BEGIN

    IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransHistory_Old_CustomerTypeID]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]'))
    Begin
        IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransHistory_Old_CustomerTypeID]') AND type = 'D')
        BEGIN
            ALTER TABLE [dbo].[TransHistory_Old] ADD  CONSTRAINT [DF_TransHistory_Old_CustomerTypeID]  DEFAULT ((0)) FOR [CustomerTypeID]
        END
    End

END
GO
--RT 5038: increase transaction length to 12 characters
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHistory_Old]') and name='TransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='TransHistory_Old' and COLUMN_NAME='TransNum' and 
DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH<12)) BEGIN
  alter table TransHistory_Old alter column [TransNum] [nvarchar](12);
END
GO

IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHistory_Old]') and name='CustomerPrimaryExtID')
Begin
  alter table TransHistory_Old alter column CustomerPrimaryExtID nvarchar(400)
END
Go


-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TransHistory_Old' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransHistory_Old]') AND name = N'IX_TransHistory_Old_LogixTransNum')
DROP INDEX [IX_TransHistory_Old_LogixTransNum] ON [dbo].[TransHistory_Old] WITH ( ONLINE = OFF )

ALTER TABLE [dbo].[TransHistory_Old] ALTER COLUMN [LogixTransNum] char(36) NOT NULL;



CREATE NONCLUSTERED INDEX [IX_TransHistory_Old_LogixTransNum] ON [dbo].[TransHistory_Old] 
(
	[LogixTransNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

END
GO

-- [AL-7881] Modifying TransNum length to 128
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransHistory_Old]') and name='TransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='TransHistory_Old' and COLUMN_NAME='TransNum' and 
DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH<128)) BEGIN
  alter table TransHistory_Old alter column [TransNum] [nvarchar](128);
END
GO


print 'processing tables/dbo.TransRedemption.Table.sql'; 
--
GO
-- $Id: dbo.TransRedemption.Table.sql 113767 2017-06-21 08:40:46Z ss251194 $
-- Build Version: 7.3.1.138972
/****** Object:  Table [dbo].[TransRedemption]    Script Date: 12/27/2010 15:20:47 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[TransRedemption](
	[OfferID] [bigint] NULL,
	[ExtLocationCode] [nvarchar](20) NULL,
	[CustomerPrimaryExtID] [nvarchar](400) NULL,
	[RedemptionCount] [int] NULL,
	[RedemptionAmount] [decimal](12, 3) NULL,
	[TransDate] [datetime] NOT NULL,
	[TerminalNum] [nvarchar](4) NULL,
	[TransNum] [nvarchar](12) NULL,
	[RptStatusFlag] [int] NULL,
	[LogixTransNum] [char](36) NOT NULL,
	[CustomerTypeID] [int] NULL,
	[PresentedCustomerID] [nvarchar](400) NULL,
	[PresentedCardTypeID] [int] NULL,
	[HHID] [nvarchar](400) NULL,
	[Replayed] [int] NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO

-- Index deletions.
-- This index has been replaced by the primary key.
IF EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_TransDate' )
BEGIN
	DROP INDEX [IX_TransRedemption_TransDate] ON [dbo].[TransRedemption]
END
GO


-- Column changes

--RT 5038: increase transaction length to 12 characters
IF (EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='TransNum')) and 
(exists(select * from INFORMATION_SCHEMA.COLUMNS where table_name='TransRedemption' and COLUMN_NAME='TransNum' and 
DATA_TYPE='nvarchar' and CHARACTER_MAXIMUM_LENGTH<128)) BEGIN
  alter table TransRedemption alter column [TransNum] [nvarchar](128);
END
GO

--Column alteration
IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'TerminalNum' AND IS_NULLABLE='YES')
BEGIN

	ALTER TABLE [dbo].[TransRedemption] 
		ALTER COLUMN [TerminalNum] [nvarchar](12) NULL 
END		
GO


-- Column additions

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'SVAmount')
Begin
    ALTER TABLE [dbo].[TransRedemption] ADD [SVAmount] [decimal](12,3) NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'SVProgramID')
Begin
    ALTER TABLE [dbo].[TransRedemption] ADD [SVProgramID] [INT] NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'PointsAmount')
Begin
    ALTER TABLE [dbo].[TransRedemption] ADD [PointsAmount] [BIGINT] NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'PointsProgramID')
Begin
    ALTER TABLE [dbo].[TransRedemption] ADD [PointsProgramID] [INT] NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'POSTimeStamp')
Begin
    ALTER TABLE [dbo].[TransRedemption] ADD [POSTimeStamp] [datetime] NULL
End
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'ID')
BEGIN
	ALTER TABLE [dbo].[TransRedemption] ADD [ID] bigint IDENTITY(1,1) NOT NULL
END
GO

-- jfuhs 20120126: This could potentially fail if there are NULL columns in the table
IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.columns WHERE table_name = 'TransRedemption' AND column_name = 'TransDate' AND IS_NULLABLE='NO' )
BEGIN
	ALTER TABLE [dbo].[TransRedemption] ALTER COLUMN [TransDate] datetime NOT NULL
END
GO

-- Index creation

IF NOT EXISTS ( SELECT 1 FROM sys.indexes WHERE object_id=OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'PK_TransRedemption' )
BEGIN
	ALTER TABLE [dbo].[TransRedemption] ADD CONSTRAINT [PK_TransRedemption] PRIMARY KEY CLUSTERED ( [TransDate] ASC, [ID] ASC )
END
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_CustomerPrimaryExtID')
CREATE NONCLUSTERED INDEX [IX_TransRedemption_CustomerPrimaryExtID] ON [dbo].[TransRedemption] 
(
	[CustomerPrimaryExtID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_HHID')
CREATE NONCLUSTERED INDEX [IX_TransRedemption_HHID] ON [dbo].[TransRedemption] 
(
	[HHID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_LogixTransNum')
CREATE NONCLUSTERED INDEX [IX_TransRedemption_LogixTransNum] ON [dbo].[TransRedemption] 
(
	[LogixTransNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_RptStatusFlag')
CREATE NONCLUSTERED INDEX [IX_TransRedemption_RptStatusFlag] ON [dbo].[TransRedemption] 
(
	[RptStatusFlag] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
-- jfuhs 20120126: This index is now defunct. Use PK_TransRedemption instead.
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_TransDate')
--CREATE NONCLUSTERED INDEX [IX_TransRedemption_TransDate] ON [dbo].[TransRedemption] 
--(
--	[TransDate] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO

-- jfuhs 20120126: The following two indexes are now defunct. They never get used and they take up resources.
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_SVProgramID')
--CREATE NONCLUSTERED INDEX [IX_TransRedemption_SVProgramID] ON [dbo].[TransRedemption] 
--(
--	[SVProgramID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
--IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_PointsProgramID')
--CREATE NONCLUSTERED INDEX [IX_TransRedemption_PointsProgramID] ON [dbo].[TransRedemption] 
--(
--	[PointsProgramID] ASC
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
--GO
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_POSTimeStamp')
CREATE NONCLUSTERED INDEX [IX_TransRedemption_POSTimeStamp] ON [dbo].[TransRedemption] 
(
	[POSTimeStamp] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_RptStatusFlag]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_RptStatusFlag]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_RptStatusFlag]  DEFAULT ((0)) FOR [RptStatusFlag]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_LogixTransNum]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_LogixTransNum]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_LogixTransNum]  DEFAULT ((0)) FOR [LogixTransNum]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_CustomerTypeID]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_CustomerTypeID]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_CustomerTypeID]  DEFAULT ((0)) FOR [CustomerTypeID]
END


End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_Replayed]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_Replayed]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_Replayed]  DEFAULT ((0)) FOR [Replayed]
END

End
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_SVAmount]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_SVAmount]') AND type = 'D')
	BEGIN
		ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_SVAmount]  DEFAULT ((0)) FOR [SVAmount]
	END
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_SVProgramID]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_SVProgramID') AND type = 'D')
	BEGIN
		ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_SVProgramID]  DEFAULT ((0)) FOR [SVProgramID]
	END
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_PointsAmount]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_PointsAmount]') AND type = 'D')
	BEGIN
		ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_PointsAmount]  DEFAULT ((0)) FOR [PointsAmount]
	END
END
GO
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_TransRedemption_PointsProgramID]') AND parent_object_id = OBJECT_ID(N'[dbo].[TransRedemption]'))
Begin
	IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_TransRedemption_PointsProgramID]') AND type = 'D')
	BEGIN
		ALTER TABLE [dbo].[TransRedemption] ADD  CONSTRAINT [DF_TransRedemption_PointsProgramID]  DEFAULT ((0)) FOR [PointsProgramID]
	END
END
GO
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='CustomerPrimaryExtID')
Begin
  alter table TransRedemption alter column CustomerPrimaryExtID nvarchar(400)
End
GO

IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='PresentedCustomerID')
Begin
	alter table TransRedemption add PresentedCustomerID nvarchar(400) Null
End
Else IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='PresentedCustomerID')
Begin
 alter table TransRedemption alter column PresentedCustomerID nvarchar(400)
End
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='PresentedCardTypeID')
Begin
  alter table TransRedemption add PresentedCardTypeID int NULL
End
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='HHID')
Begin
  alter table TransRedemption add HHID nvarchar(400) NULL
End
IF EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='HHID')
Begin
  alter table TransRedemption alter column HHID nvarchar(400)
End
GO
IF NOT EXISTS (select * from sys.columns where object_id=OBJECT_ID(N'[dbo].[TransRedemption]') and name='Replayed')
Begin
  alter table TransRedemption add Replayed int NULL
End
GO

-- [AL-7048] Modifying LogixTransNum length to 36
IF EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TransRedemption' AND  COLUMN_NAME = 'LogixTransNum' AND CHARACTER_MAXIMUM_LENGTH = 30)
BEGIN

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_LogixTransNum')
DROP INDEX [IX_TransRedemption_LogixTransNum] ON [dbo].[TransRedemption] WITH ( ONLINE = OFF )

ALTER TABLE [dbo].[TransRedemption] ALTER COLUMN [LogixTransNum] char(36) NOT NULL;

CREATE NONCLUSTERED INDEX [IX_TransRedemption_LogixTransNum] ON [dbo].[TransRedemption] 
(
	[LogixTransNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

END
GO

--Create Index for TransRedemption ExtLocationCode
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemption]') AND name = N'IX_TransRedemption_ExtLocationCode')
CREATE NONCLUSTERED INDEX [IX_TransRedemption_ExtLocationCode] ON [dbo].[TransRedemption] 
(
	[ExtLocationCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixWH/views/ --
--
print 'processing views/dbo.TransHistory.View.sql'; 
--
GO
-- $Id: dbo.TransHistory.View.sql 33259 2011-06-30 13:44:33Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  View [dbo].[TransHistory]    Script Date: 12/27/2010 16:06:04 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[TransHistory]'))
DROP VIEW [dbo].[TransHistory]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[TransHistory]
AS
  SELECT LogixTransNum, CustomerPrimaryExtID, CustomerTypeID, ExtLocationCode, TransDate,
         TerminalNum, POSTransNum, PresentedCustomerID, PresentedCardTypeID, HHID, Replayed
  FROM TransHist WITH (NoLock)


GO


print 'processing views/dbo.TransRedemptionView.View.sql'; 
--
GO
-- $Id: dbo.TransRedemptionView.View.sql 34300 2011-07-20 14:13:49Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  View [dbo].[TransRedemptionView]    Script Date: 12/27/2010 16:06:04 ******/
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[TransRedemptionView]'))
DROP VIEW [dbo].[TransRedemptionView]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[TransRedemptionView]
AS
  select OfferID, ExtLocationCode, CustomerPrimaryExtID, RedemptionCount, RedemptionAmount, TransDate, TerminalNum, TransNum, RptStatusFlag, LogixTransNum, CustomerTypeID, PresentedCustomerID, PresentedCardTypeID, HHID, Replayed,
  SVAmount, SVProgramID, PointsAmount, PointsProgramID, POSTimeStamp
    from TransRedemption with (NoLock)
  union all
  select OfferID, ExtLocationCode, CustomerPrimaryExtID, RedemptionCount, RedemptionAmount, TransDate, TerminalNum, TransNum, RptStatusFlag, '0' as LogixTransNum, 0 as CustomerTypeID, NULL as PresentedCustomerID, NULL as PresentedCardTypeID, NULL as HHID, 0 as Replayed,
  0 as SVAmount, 0 as SVProgramID, 0 as PointsAmount, 0 as PointsProgramID, NULL as POSTimeStamp
    from TransHistory_Old with (NoLock)
  where CustomerPrimaryExtID is not null;


GO



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixWH/functions/ --
--
print 'processing functions/dbo.VerifyCAMCard.UserDefinedFunction.sql'; 
--
GO
-- $Id: dbo.VerifyCAMCard.UserDefinedFunction.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  UserDefinedFunction [dbo].[VerifyCAMCard]    Script Date: 12/27/2010 16:13:22 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VerifyCAMCard]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[VerifyCAMCard]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[VerifyCAMCard]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[VerifyCAMCard](@CCNumberOri as varchar(20))
  RETURNS bit AS 
  BEGIN
  -- (D1*6)+(D2*5)+(D3*4)+(D4*3)+(D5*8)+(D6*7)+(D7*6)+(D8*5)+(D9*4)+(D10*3) 
  -- Divide the digit total by 11 (using a 5 digit quotient and 2 digit remainder) 
  -- If the remainder is less than 2, the check digit equals 0 
  -- If the remainder is 2 or greater, the check digit equals 11 minus the remainder. 
  -- If Check Digit = D11 verification passed 
  declare @Return bit;
  declare @CCNumber as char(11)
  set @CCNumber = RIGHT(REPLACE(@CCNumberOri,'' '', ''''),11);
  if (IsNull(@CCNumber,'''')='''' or (IsNumeric(@CCNumber)=0) or LEN(@CCNumber) < 11) set @Return = 0;
  if @Return=0 return @Return;  --- exit if invalid at this point

  declare @Result int;
  declare @Remainder tinyint;
  declare @CheckDigit tinyint;
  set @Result = (CAST(LEFT(@CCNumber,1) as int)*6) + 
                (CAST(SUBSTRING(@CCNumber,2,1) as int)*5) + (CAST(SUBSTRING(@CCNumber,3,1) as int)*4) + (CAST(SUBSTRING(@CCNumber,4,1)  as int)*3) + 
                (CAST(SUBSTRING(@CCNumber,5,1) as int)*8) + (CAST(SUBSTRING(@CCNumber,6,1) as int)*7) + (CAST(SUBSTRING(@CCNumber,7,1)  as int)*6) + 
                (CAST(SUBSTRING(@CCNumber,8,1) as int)*5) + (CAST(SUBSTRING(@CCNumber,9,1) as int)*4) + (CAST(SUBSTRING(@CCNumber,10,1) as int)*3);

  set @Remainder = @Result%11;
  if @Remainder <2 set @CheckDigit = 0;
  else set @CheckDigit = 11 - @Remainder;

  if @CheckDigit = CAST(RIGHT(@CCNumber,1) as int) set @Return=1;
  else set @Return=0;

  return @Return;
  END
' 
END
GO
GRANT EXECUTE ON [dbo].[VerifyCAMCard] TO [Copient_Logix_uspRole] AS [dbo]
GO



--
-- F:\ci-build\workspace\logix_7.3.1\Logix\tags\7.3.1/Source/sql_scripts/LogixWH/storedprocedures/ --
--
print 'processing storedprocedures/dbo.pa_GetNonTriggeredOffers.StoredProcedure.sql'; 
--
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNonTriggeredOffers]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetNonTriggeredOffers]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetNonTriggeredOffers]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_GetNonTriggeredOffers] @Offers AS dbo.ActiveDeployedOffersTableType ReadOnly  
AS    
  BEGIN  

 --Find all Offers which are triggered or not 
 select O.OfferID,ExtOfferID,Name,[Description],ECTName,ProdStartDate,ProdEndDate from @Offers O
left outer join TransRedemption T on O.OfferID = T.OfferID
where T.OfferID is null
END
'
END
GO
GRANT EXECUTE ON [dbo].[pa_GetNonTriggeredOffers] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pa_GetReports.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_GetFolderItems.StoredProcedure.sql 50636 2012-06-18 16:10:33Z as250339 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_GetFolderItems]    Script Date: 12/27/2010 15:13:11 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_GetReports]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_GetReports]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[pa_GetReports] (@OffersT OfferDTTableType READONLY, @WhereClause Varchar(4000),@RecordLimit INT=0)
  
AS
BEGIN
SET NOCOUNT ON; 
Declare @sql as nvarchar(4000)

IF @RecordLimit > 0  
Set @sql= 'select top ' + CAST(@RecordLimit AS varchar) + '  a.OfferId, NumImpressions, NumRedemptions, NumTransactions, AmountRedeemed, ReportingDate from OfferReporting a with (nolock) INNER JOIN @dtOffers b ON a.OfferID=b.OfferID ' + @WhereClause  ;
ELSE  
Set @sql= 'select a.OfferId, NumImpressions, NumRedemptions, NumTransactions, AmountRedeemed, ReportingDate from OfferReporting a with (nolock) INNER JOIN @dtOffers b ON a.OfferID=b.OfferID ' + @WhereClause  ;

execute sp_executesql @sql,N'@dtOffers OfferDTTableType READONLY',@dtOffers = @OffersT

END
GO
GRANT EXECUTE ON [dbo].[pa_GetReports] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pa_ImpressionBuffer_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_ImpressionBuffer_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_ImpressionBuffer_Insert]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ImpressionBuffer_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ImpressionBuffer_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ImpressionBuffer_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_ImpressionBuffer_Insert] @OfferID bigint, @ReportingDate datetime, @Impressions bigint
AS 
  set nocount on;
  begin
    Insert into [dbo].[ImpressionBuffer] with (RowLock) (OfferId, ReportingDate, NumImpressions, StatusFlag) 
      values (@OfferID, @ReportingDate, @Impressions, 0);
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_ImpressionBuffer_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_LMGRejection_Import_WH.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_LMGRejection_Import_WH.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_LMGRejection_Import_WH]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LMGRejection_Import_WH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_LMGRejection_Import_WH]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_LMGRejection_Import_WH]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_LMGRejection_Import_WH] @RunAgain int Output  
AS   
  set nocount on;  
  declare @StartTime datetime;  
  declare @NumRows as bigint;

  set @RunAgain=1;  
  set @StartTime=getdate();  
  
  -- run for up to 5 minutes  
  WHILE @RunAgain=1 and @StartTime>dateadd(mi, -5, getdate()) BEGIN  
    BEGIN TRY 
      BEGIN TRANSACTION T1

      --set rowcount 3600;
      update TOP (3600) LMGImportTemp set ProcessFlag=1 where ProcessFlag=0;    
      set @NumRows=@@RowCount;
      --set rowcount 0;
      IF (@NumRows=0) BEGIN -- if no record left to process, set @RunAgain to 0.  
        set @RunAgain=0;   
      END  
      ELSE BEGIN -- otherwise, insert into TransRedemption  

        insert into TransRedemption with (RowLock) (OfferID, ExtLocationCode, CustomerPrimaryExtID, RedemptionCount, RedemptionAmount, TransDate, TerminalNum, TransNum, LogixTransNum, CustomerTypeID)
          select isnull(OfferID, 0) as OfferID, ClientLocationCode as ExtLocationCode, PrimaryExtID as CustomerPrimaryExtID, CASE WHEN ActionTypeID=1 THEN (1) ELSE case when ActionTypeID=2 then (-1) end END as RedemptionCount, 0.000 as RedemptionAmount, IssuanceDate as TransDate, BoxID as TerminalNum, TransactionNumber as TransNum, LogixTransNum,
          CASE WHEN isnull(CardTypeID,2) > 2 THEN (0) ELSE (isnull(CardTypeID,2)) END as CustomerTypeID
          from LMGImportTemp with (NoLock) where ProcessFlag=1;

      END  
      update LMGImportTemp set ProcessFlag=2 where ProcessFlag=1;   

      COMMIT TRANSACTION  T1;
    END TRY
    BEGIN CATCH
      set @RunAgain=0;
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRANSACTION T1;        
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  END -- while  
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_LMGRejection_Import_WH] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_PromoMoveQueue_Insert.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_PromoMoveQueue_Insert]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_PromoMoveQueue_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_PromoMoveQueue_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[pa_PromoMoveQueue_Insert] @FileName nvarchar(255), @EngineID integer, @FileType integer, @FileVersion int=1
as   
    -- $Id: dbo.pa_PromoMoveQueue_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
    -- Build Version: 7.3.1.138972
    set nocount on;  
    Insert into [dbo].[PromoMoveInsertQueue] with (RowLock) (FileName, UploadTime, StatusFlag, EngineID, FileType, FileVersion) 
        values (@FileName, getDate(), 0, @EngineID, @FileType, @FileVersion);  

GO

GRANT EXECUTE ON [dbo].[pa_PromoMoveQueue_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_LS_HealthErrors.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_Purge_LS_HealthErrors]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_LS_HealthErrors]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_Purge_LS_HealthErrors]
GO

CREATE PROCEDURE [dbo].[pa_Purge_LS_HealthErrors] @ProcessOrphansFlag int OUTPUT
AS

    -- $Id: dbo.pa_Purge_LS_HealthErrors.StoredProcedure.sql 38571 2011-10-12 18:33:02Z th185078 $
    -- Build Version: 7.3.1.138972

    -- This procedure removes LS_HealthErrors records that LocalServerID and RunID not in LS_HealthHistory
    -- called by LogixWH.dbo.pa_Purge_LS_HealthHistory
    
SET NOCOUNT ON

CREATE TABLE #tempkeys 
    ( 
        [LocalServerID] int, 
        [RunID] int
    )
    
INSERT INTO #tempkeys
SELECT TOP 1800 LocalServerID, RunID 
FROM LS_HealthErrors HE WITH (NOLOCK)
WHERE NOT EXISTS ( 
   SELECT 1 
   FROM LS_HealthHistory HH with (NoLock) 
   WHERE HE.LocalServerID = HH.LocalServerID and HE.RunID = HH.RunID );

IF @@ROWCOUNT > 0
BEGIN
   DELETE FROM LS_HealthErrors with (RowLock) 
   FROM LS_HealthErrors HE 
      INNER JOIN #tempkeys t on t.LocalServerID = HE.LocalServerID and t.RunID = HE.RunID
END
ELSE
BEGIN
   SET @ProcessOrphansFlag = 0
END

DROP TABLE #tempkeys    
GO

GRANT EXECUTE ON [dbo].[pa_Purge_LS_HealthErrors] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_LS_HealthHistory.StoredProcedure.sql'; 
--
GO

/****** Object:  StoredProcedure [dbo].[pa_Purge_LS_HealthHistory]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_LS_HealthHistory]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pa_Purge_LS_HealthHistory]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[pa_Purge_LS_HealthHistory] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS

    -- $Id: dbo.pa_Purge_LS_HealthHistory.StoredProcedure.sql 48364 2012-05-02 19:20:48Z nicole $
    -- Build Version: 7.3.1.138972
/*
This procedure removes all the LS_HealthHistory records and associated LS_HealthError records
that have a RunDate older than the DeleteDate provided (invoked by DBPurgeAgent)

Modified to also delete orphan LS_HealthError rows if main processing finishes before aspx time out occurs
*/

SET @NumDeleted = 0;
SET @RunAgain = 1;
SET NOCOUNT ON;

CREATE TABLE #tempkeys 
    ( 
        idcol int identity,
        [LocalServerID] int, 
        [RunID] int
    )


DECLARE @ProcessOrphansFlag int
SET @ProcessOrphansFlag = 1

INSERT INTO #tempkeys
    SELECT TOP 1800 LocalServerID, RunID 
    FROM LS_HealthHistory with (NoLock) 
    WHERE RunDate < @DeleteDate; 



DECLARE @LocalServerID int
DECLARE @RunID int 
DECLARE @idcol int

SELECT @idcol = min(idcol) FROM #tempkeys

WHILE @idcol IS NOT NULL
BEGIN
	SELECT @LocalServerID = LocalServerID, @RunID = RunID
	FROM #tempkeys
	WHERE idcol = @idcol

	BEGIN TRANSACTION T1_pa_Purge_LS_HealthHistory
	
	BEGIN TRY	
	   DELETE FROM LS_HealthErrors with (RowLock) WHERE LocalServerID = @LocalServerID AND RunID = @RunID	   
	   DELETE FROM LS_HealthHistory with (RowLock) WHERE LocalServerID = @LocalServerID AND RunID = @RunID	   
	   SET @NumDeleted = @NumDeleted + @@ROWCOUNT	   
	END TRY
	
	BEGIN CATCH
	IF XACT_STATE() = -1
	BEGIN
	   ROLLBACK TRANSACTION T1_pa_Purge_LS_HealthHistory
	END
	END CATCH
	
	IF XACT_STATE() = 1 
	BEGIN
		COMMIT TRANSACTION T1_pa_Purge_LS_HealthHistory
	END
	
	SELECT @idcol = min(idcol) FROM #tempkeys where idcol > @idcol
END

IF @NumDeleted <> 1800 
BEGIN
	SET @RunAgain = 0;
END

--
--  If we have completed the parent-child deletes, we will see if we have any orphan rows to process
--
IF @RunAgain = 0
WHILE @ProcessOrphansFlag = 1
BEGIN
	EXEC dbo.pa_Purge_LS_HealthErrors @ProcessOrphansFlag OUTPUT
END

DROP TABLE #tempkeys

GO


GRANT EXECUTE ON [dbo].[pa_Purge_LS_HealthHistory] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_TrackableCouponsHistory_by_Date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_TrackableCouponsHistory_by_Date.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_TrackableCouponsHistory_by_Date]    Script Date: 10/30/2013 16:10:45 ******/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_TrackableCouponsHistory_by_Date]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_TrackableCouponsHistory_by_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_Purge_TrackableCouponsHistory_by_Date]
  @DeleteDate       DATETIME, 
  @NumDeleted       INT OUTPUT, 
  @RunAgain         INT OUTPUT      
AS 
BEGIN
  -- This stored procedure deletes all TrackableCouponsHistory records that are older than DeleteDate provided
  -- invoked by DBPurgeAgent

  SET NOCOUNT ON;
  SET @RunAgain = 1;
  --SET ROWCOUNT 1800;  -- only delete 1800 records at a time

  DELETE TOP (1800) FROM 
    TrackableCouponsHistory WITH (ROWLOCK)
  WHERE 
    CreationDate <= @DeleteDate;

  SET @NumDeleted = @@RowCount;

  -- Stop processing when there are no rows left
  IF @NumDeleted = 0
	  SET @RunAgain = 0;

  --SET ROWCOUNT 0;

END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_TrackableCouponsHistory_by_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_TransHistory_by_Date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_TransHistory_by_Date.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_TransHistory_by_Date]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_TransHistory_by_Date]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_TransHistory_by_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_TransHistory_by_Date]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_Purge_TransHistory_by_Date] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
AS
  -- this procedure deletes all the TransHistory records that have a TransUpdate less than or equal to the DeleteDate provided
  -- invoked by DBPurgeAgent
  set nocount on
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  Delete TOP (1800) from TransHist with (RowLock) where TransDate<=@DeleteDate;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_TransHistory_by_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_Purge_TransRedemption_by_Date.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_Purge_TransRedemption_by_Date.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_Purge_TransRedemption_by_Date]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_Purge_TransRedemption_by_Date]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_Purge_TransRedemption_by_Date]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure  [dbo].[pa_Purge_TransRedemption_by_Date] @DeleteDate DateTime, @NumDeleted int OUTPUT, @RunAgain int OUTPUT 
as
BEGIN
  -- this procedure deletes all the TransRedemption records that have a TransUpdate less than or equal to the DeleteDate provided
  -- invoked by DBPurgeAgent
  set nocount on
  set @RunAgain=1;
  
  DECLARE @IsPartitioned bit
  exec [dbo].[pc_IsPartitioned] 'TransRedemption', @IsPartitioned OUTPUT
  -- If using partitioning
  IF @IsPartitioned = 1
  BEGIN
	SET @RunAgain = 0
	-- The partitioning version doesn't provide good compatibility with this option.
	-- It takes time to count up the records.
	SET @NumDeleted = 0
	
	DECLARE @HistoryWidth int
	DECLARE @Now datetime
	select @Now=getdate()
	SELECT @HistoryWidth=DATEDIFF(d, @DeleteDate, @Now)
	Declare @CountBeforeDeletion int
	Declare @CountAfterDeletion int
	Set @CountBeforeDeletion = (select COUNT(*) from TransRedemption)
	
	exec [dbo].[pc_PartitionMaintenance] 'TransRedemption', @HistoryWidth 
	
	Set @CountAfterDeletion = (select COUNT(*) from TransRedemption)
	
	set @NumDeleted=@CountBeforeDeletion-@CountAfterDeletion; 
	
	RETURN
  END
  
  -- No partitioning
  
  --set rowcount 1800;  -- only delete 1800 records at a time
  
  Delete TOP (1800) from TransRedemption with (RowLock) where TransDate<=@DeleteDate;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
END
GO
GRANT EXECUTE ON [dbo].[pa_Purge_TransRedemption_by_Date] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_RedemptionBuffer_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_RedemptionBuffer_Insert.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_RedemptionBuffer_Insert]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_RedemptionBuffer_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_RedemptionBuffer_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_RedemptionBuffer_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_RedemptionBuffer_Insert] @OfferID bigint, @ReportingDate datetime, @Redemptions bigint, @AmtRedeemed decimal(12,3)
AS 
  set nocount on;
  begin
    Insert into [dbo].[RedemptionBuffer] with (RowLock) (OfferId, ReportingDate, NumRedemptions, AmountRedeemed, StatusFlag)
      values (@OfferId, @ReportingDate, @Redemptions, @AmtRedeemed, 0);
  end
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_RedemptionBuffer_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ReportingAgent_Move_ImpressionBuffer.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_ReportingAgent_Move_ImpressionBuffer]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ReportingAgent_Move_ImpressionBuffer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ReportingAgent_Move_ImpressionBuffer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_ReportingAgent_Move_ImpressionBuffer] @RunAgain bit OUTPUT
AS 
    -- $Id: dbo.pa_ReportingAgent_Move_ImpressionBuffer.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  set nocount on;
  Declare @NumMarked bigint;
  declare @StartTime datetime;
  set @RunAgain=1;
  set @StartTime=getdate();

  -- See if there are any rows marked for processing left behind from a previously 
  -- failed run.  If so, unmark them so we don't snowball
  select @NumMarked=count(*) from ImpressionBuffer with (NoLock) where StatusFlag=1;
  if @NumMarked>100 begin
    Update ImpressionBuffer with (RowLock) set StatusFlag=0 where StatusFlag=1;
  end

  CREATE TABLE #ImpTemp ([OfferID] bigint NULL, [ReportingDate] datetime NULL, [NumImpressions] bigint NULL, [POSTimeStamp] datetime NULL);

  -- run for up to 2 minutes
  while @RunAgain=1 and @StartTime>dateadd(mi, -2, getdate()) begin
    -- Mark a set of rows to work with
    --set rowcount 7000; 
    Update TOP (7000) ImpressionBuffer with (RowLock) set StatusFlag=1; 
    --set rowcount 0;

    -- copy the marked rows to our temp table
    Insert into #ImpTemp (OfferID, ReportingDate, NumImpressions, POSTimeStamp) select OfferID, ReportingDate, NumImpressions, POSTimeStamp from ImpressionBuffer with (NoLock) where StatusFlag=1;
    if (@@ROWCOUNT=7000) begin
      set @RunAgain=1;
    end
    else begin
      set @RunAgain=0;
    end

    BEGIN TRY		
      BEGIN TRAN T1
        -- Update any pre-existint OfferReporting rows with data in the temp table    
        Update OfferReporting with (RowLock) set OfferReporting.NumImpressions=OfferReporting.NumImpressions+(select sum(IB2.NumImpressions) from #ImpTemp as IB2 with (NoLock) where IB2.OfferID=IB.OfferID and IB2.ReportingDate=IB.ReportingDate)
          from OfferReporting Inner Join #ImpTemp as IB with (NoLock) on OfferReporting.OfferID=IB.OfferID and OfferReporting.ReportingDate=IB.ReportingDate;
        -- Insert any necessary new rows for non-existant Offer/Date combinations
        Insert into OfferReporting with (RowLock) (OfferID, NumImpressions, NumRedemptions, AmountRedeemed, ReportingDate, StatusFlag, POSTimeStamp)
          select IB.OfferID, sum(IB.NumImpressions), 0, 0, IB.ReportingDate, 0, IB.POSTimeStamp
          from #ImpTemp as IB with (NoLock) Left Join OfferReporting as OffR with (NoLock) on OffR.OfferID=IB.OfferID and OffR.ReportingDate=IB.ReportingDate
          where OffR.OfferID is NULL and OffR.ReportingDate is Null
          group by IB.OfferID, IB.ReportingDate, IB.POSTimeStamp
  
        Delete from ImpressionBuffer with (RowLock) where StatusFlag=1;
        Truncate Table #ImpTemp;

      COMMIT TRAN T1;
    END TRY
    BEGIN CATCH
      IF @@TRANCOUNT > 0 BEGIN
        ROLLBACK TRAN T1;
      END
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  end -- while
  drop table #ImpTemp;

GO
GRANT EXECUTE ON [dbo].[pa_ReportingAgent_Move_ImpressionBuffer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ReportingAgent_Move_RedemptionBuffer.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pa_ReportingAgent_Move_RedemptionBuffer]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ReportingAgent_Move_RedemptionBuffer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ReportingAgent_Move_RedemptionBuffer]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pa_ReportingAgent_Move_RedemptionBuffer] 
AS 
    -- $Id: dbo.pa_ReportingAgent_Move_RedemptionBuffer.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
    -- Build Version: 7.3.1.138972

  set nocount on;
  Declare @NumRows bigint;
  Declare @MaxLoops int;
  Declare @NumMarked bigint;
  set @MaxLoops=20; -- prevent the stored procedure from running for too long
  set @NumRows=1800;
  While @NumRows>1000 and @MaxLoops>0 begin
    select @NumMarked=count(*) from RedemptionBuffer with (NoLock) where StatusFlag=1;
    if @NumMarked<100 begin
      --set rowcount 1800; 
      Update TOP (1800) RedemptionBuffer with (RowLock) set StatusFlag=1; 
      --set rowcount 0;
    end
    Update OfferReporting with (RowLock) set OfferReporting.NumRedemptions=OfferReporting.NumRedemptions+(select sum(RB2.NumRedemptions) from RedemptionBuffer as RB2 with (NoLock) where RB2.OfferID=RB.OfferID and RB2.ReportingDate=RB.ReportingDate and RB2.StatusFlag=1), 
                                             OfferReporting.AmountRedeemed=OfferReporting.AmountRedeemed+(select sum(RB2.AmountRedeemed) from RedemptionBuffer as RB2 with (NoLock) where RB2.OfferID=RB.OfferID and RB2.ReportingDate=RB.ReportingDate and RB2.StatusFlag=1) 
      from OfferReporting Inner Join RedemptionBuffer as RB with (NoLock) on OfferReporting.OfferID=RB.OfferID and OfferReporting.ReportingDate=RB.ReportingDate
      where RB.StatusFlag=1;
    Insert into OfferReporting with (RowLock) (OfferID, NumImpressions, NumRedemptions, AmountRedeemed, ReportingDate, StatusFlag)
      select RB.OfferID, 0, sum(RB.NumRedemptions), sum(RB.AmountRedeemed), RB.ReportingDate, 0
      from RedemptionBuffer as RB with (NoLock) Left Join OfferReporting as OffR with (NoLock) on OffR.OfferID=RB.OfferID and OffR.ReportingDate=RB.ReportingDate
      where OffR.OfferID is NULL and OffR.ReportingDate is Null and RB.StatusFlag=1
      group by RB.OfferID, RB.ReportingDate
    Delete from RedemptionBuffer with (RowLock) where StatusFlag=1;
    select @NumRows=count(*) from RedemptionBuffer;
    set @MaxLoops=@MaxLoops-1;
  end

GO
GRANT EXECUTE ON [dbo].[pa_ReportingAgent_Move_RedemptionBuffer] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_ReportingAgent_Sum_TransRedemption.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_ReportingAgent_Sum_TransRedemption]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_ReportingAgent_Sum_TransRedemption]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pa_ReportingAgent_Sum_TransRedemption]
AS 
    -- $Id: dbo.pa_ReportingAgent_Sum_TransRedemption.StoredProcedure.sql 103480 2016-08-15 22:06:57Z db123627 $
    -- Build Version: 7.3.1.138972

  set nocount on;
  Declare @NumRows bigint;
  Declare @RunAgain int; 
  Declare @LoopCounter int;
  set @RunAgain=1;
  set @LoopCounter=0;
 
  CREATE TABLE #RptTemp ([OfferID] bigint NULL, [RedemptionCount] int NULL,  [RedemptionAmount] decimal(12,3) NULL, [TransDate] datetime NULL, [LogixTransNum] nvarchar(36));

  while @RunAgain=1 and @LoopCounter<10 begin
      BEGIN TRY    
        BEGIN TRAN T1
        set @LoopCounter=@LoopCounter+1;
        set @RunAgain=0;
        -- copy rows over to the temporary table so we have some data to work with
        -- Don't separate rows from the same transaction, work on a few extra if needed 
        Update top (500) TransRedemption with (RowLock) set RptStatusFlag=1 where RptStatusFlag=0; 
        Insert into #RptTemp (OfferID, RedemptionCount, RedemptionAmount, TransDate, LogixTransNum)
          select OfferID, RedemptionCount, RedemptionAmount, convert(varchar, TransDate, 101), LogixTransNum from TransRedemption with (NoLock, index(IX_TransRedemption_RptStatusFlag)) where rptstatusflag=1
        if @@ROWCOUNT>=500 begin
          set @RunAgain=1;
        end

        -- update existing OfferReporting rows
        update OfferReporting set OfferReporting.NumRedemptions=OfferReporting.NumRedemptions+(select sum(RT2.RedemptionCount) from #RptTemp as RT2 with (NoLock) where RT2.OfferID=RT.OfferID and RT2.TransDate=RT.TransDate), 
                                  OfferReporting.AmountRedeemed=OfferReporting.AmountRedeemed+(select sum(RT2.RedemptionAmount) from #RptTemp as RT2 with (NoLock) where RT2.OfferID=RT.OfferID and RT2.TransDate=RT.TransDate),
                                  OfferReporting.NumTransactions=OfferReporting.NumTransactions+(select COUNT(distinct RT2.LogixTransNum) from #RptTemp as RT2 with (NoLock) left join OfferReportingTransactions as ORT with (NoLock) on RT2.OfferID=ORT.OfferID and RT2.LogixTransNum=ORT.LogixTransNum where RT2.OfferID=RT.OfferID and RT2.TransDate=RT.TransDate and ORT.OfferID is null) 
          from OfferReporting with (NoLock, index(IX_OfferReporting_Unique)) Inner Join #RptTemp as RT with (NoLock) on OfferReporting.OfferID=RT.OfferID and OfferReporting.ReportingDate=RT.TransDate;

        -- create and populate any necessary new OfferReporting rows
        Insert into OfferReporting with (RowLock) (OfferID, NumImpressions, NumRedemptions, NumTransactions, AmountRedeemed, ReportingDate, StatusFlag)
          select RT.OfferID, 0, sum(RT.RedemptionCount), COUNT(distinct RT.LogixTransNum), sum(RT.RedemptionAmount), RT.TransDate, 0
          from #RptTemp as RT with (NoLock) Left Join OfferReporting as OffR with (NoLock) on OffR.OfferID=RT.OfferID and OffR.ReportingDate=RT.TransDate 
          where OffR.OfferID is NULL and OffR.ReportingDate is Null
          group by RT.OfferID, RT.TransDate 

        -- Keep track of what transaction/OfferID pairs have already been counted in the transaction total
        Insert into OfferReportingTransactions with (RowLock) (OfferID, LogixTransNum, LastUpdate)
           select distinct RT.OfferID, RT.LogixTransNum, GETDATE() as LastUpdate
           from #RptTemp as RT with (NoLock) Left Join OfferReportingTransactions as ORT with (NoLock) on RT.OfferID=ORT.OfferID and RT.LogixTransNum=ORT.LogixTransNum
           where ORT.OfferID is NULL
           
        -- Now that we have generated summary data rid of TransRedemption rows where the customer ID is '0'.  
        -- These are generated by an AnyCustomer offer and no card being presented in the transaction.
        Delete from TransRedemption with (RowLock) where RptStatusFlag=1 and CustomerPrimaryExtID='0';

        -- Flag the remaining records in the set to indicate that processing is complete
        Update TransRedemption with (RowLock) set RptStatusFlag=2 where RptStatusFlag=1;

        Truncate Table #RptTemp

        COMMIT TRAN T1;
      END TRY
      BEGIN CATCH
          set @RunAgain=0;
          IF @@TRANCOUNT > 0 BEGIN
      ROLLBACK TRAN T1;
          END
          DECLARE @ErrorMessage NVARCHAR(4000);
          DECLARE @ErrorSeverity INT;
          DECLARE @ErrorState INT;

          SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
          RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
      END CATCH
  end  
  drop table #RptTemp;
GO

GRANT EXECUTE ON [dbo].[pa_ReportingAgent_Sum_TransRedemption] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_StoreHealth_ErrorDuration.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_StoreHealth_ErrorDuration.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_StoreHealth_ErrorDuration]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_StoreHealth_ErrorDuration]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_StoreHealth_ErrorDuration]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_StoreHealth_ErrorDuration]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_StoreHealth_ErrorDuration] @LocalServerID int, @ErrorID int, @MinutesInError int OUTPUT
AS
BEGIN
	SET NOCOUNT ON;
	declare @lastCleanRunID int;
	declare @firstErrRunID int;

	set @lastCleanRunID = 0;
        set @firstErrRunID = 0;
	set @MinutesInError = 0;

 	-- find the last run id that didn''t have this error ID
        select @lastCleanRunID = ISNULL(Max(HH.RunID),0) from LS_HealthHistory as HH with (NoLock)
        left join LS_HealthErrors as HE with (NoLock) on HE.RunID = HH.RunID and HE.LocalServerID=HH.LocalServerID and HE.LocalServerID=@LocalServerID and HE.ErrorID=@ErrorID
        where HH.LocalServerID = @LocalServerID and HE.RunID is null
	

	-- find the first run after the last clean run to have this error
	select @firstErrRunID = Min(HE.RunID) from LS_HealthErrors HE with (NoLock)
	where HE.LocalServerID = @LocalServerID and HE.ErrorID = @ErrorID
	and HE.RunID > @lastCleanRunID;


	-- find the minutes since the first report of an error
	select @MinutesInError = DATEDIFF(minute,HH.RunDate, getdate())
        from ls_healthHistory HH with (NoLock)
	where HH.LocalServerID = @LocalServerID and HH.RunID = @firstErrRunID;

END

' 
END
GO
GRANT EXECUTE ON [dbo].[pa_StoreHealth_ErrorDuration] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pa_WDog_MarkHealthErrors.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pa_WDog_MarkHealthErrors.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pa_WDog_MarkHealthErrors]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_WDog_MarkHealthErrors]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pa_WDog_MarkHealthErrors]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pa_WDog_MarkHealthErrors]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pa_WDog_MarkHealthErrors] @OldStatus int, @NewStatus int, @RunAgain int OUTPUT 
AS
  set nocount on
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time

  update TOP (1800) LS_HealthErrors with (RowLock) set StatusFlag = @NewStatus where StatusFlag = @OldStatus;

  if @@RowCount=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pa_WDog_MarkHealthErrors] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_CloneTableSchema.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_CloneTableSchema]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_CloneTableSchema]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- pc_CloneTableSchema
--
-- Note that every partitioned unique index _MUST_ contain the partitioned column 
-- as the first column of the index.
CREATE PROCEDURE [dbo].[pc_CloneTableSchema]
    @SourceSchema nvarchar(255),
    @SourceTable nvarchar(255),
    @DestinationSchema nvarchar(255),
    @DestinationTable nvarchar(255),
    @TargetLocation nvarchar(255) = NULL
AS
BEGIN
    /*
        Clones an existing table to another table (without data)
        Optionally drops and re-creates target table
        Copies:
            * Structure
            * Clustered index
            * Primary key
            * Indexes (including ASC/DESC, included columns, filters)
            * Constraints (and unique constraints)
            * Default constraints

        DOES NOT copy:
            * Triggers
            * File groups
            * Probably a lot of other things

        Note: Assumes that you name (unique) constraints with the table name in it (in order to not duplicate constraint names)
    */
    SET NOCOUNT ON;

	IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = @SourceSchema AND TABLE_NAME = @SourceTable )
	BEGIN
	    RAISERROR('pc_CloneTableSchema: No such source table [%s].[%s]', 18, 1, @SourceSchema, @SourceTable)
	    RETURN
	END

    -- Never destroy an existing table.
    IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = @DestinationSchema AND TABLE_NAME = @DestinationTable)
    BEGIN
		RAISERROR('pc_CloneTableSchema: Target table [%s].[%s] already exists, aborting', 18, 1, @DestinationSchema, @DestinationTable);
		RETURN;
    END


	declare @SourceTableObjectID bigint
	SET @SourceTableObjectID = OBJECT_ID(N'[' + @SourceSchema + '].[' + @SourceTable + ']')


    -- Check for computed columns
	IF EXISTS (SELECT 1 FROM sys.columns col WHERE col.object_id=@SourceTableObjectID AND col.is_computed<>0)
	BEGIN
	    RAISERROR('pc_CloneTableSchema: Source table [%s].[%s] contains computed columns. These are not yet supported.', 18, 1, @SourceSchema, @SourceTable)
	    RETURN
	END
	
	-- Check for foreign keys
	IF EXISTS ( SELECT 1 FROM sys.foreign_key_columns WHERE parent_object_id=@SourceTableObjectID )
	BEGIN
		RAISERROR('pc_CloneTableSchema: Source table [%s].[%s] contains foreign keys which are not yet supported.', 18, 1, @SourceSchema, @SourceTable)
		RETURN
	END

	-- The following types are currently unsupported:
    --   datetimeoffset
    --   datetime2
    --   time
	DECLARE @UnsupportedTypes AS Table ( [name] nvarchar(64) )
	INSERT INTO @UnsupportedTypes VALUES ('datetimeoffset')
	INSERT INTO @UnsupportedTypes VALUES ('datetime2')
	INSERT INTO @UnsupportedTypes VALUES ('time')

    IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.COLUMNS col INNER JOIN @UnsupportedTypes ut ON col.DATA_TYPE=ut.[name] WHERE TABLE_SCHEMA=@SourceSchema AND TABLE_NAME=@SourceTable)
    BEGIN
	    Declare @ErrMsg nvarchar(max)
		SET @ErrMsg = ''
	    SELECT @ErrMsg = @ErrMsg + [name] + ', ' FROM @UnsupportedTypes
	    SET @ErrMsg = LEFT(@ErrMsg, LEN(@ErrMsg) - 1)
	    RAISERROR('pc_CloneTableSchema: Source table [%s].[%s] contains one of the following unsupported types: %s', 18, 1, @SourceSchema, @SourceTable, @ErrMsg)
	    RETURN
    END


    BEGIN TRAN T_CLONE_TABLE_SCHEMA

	BEGIN TRY
	
		-- Copy the table structure
		DECLARE @TableCreation nvarchar(max)
		SET @TableCreation = 'CREATE TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ( '
		SELECT @TableCreation = @TableCreation + 
			'[' + isc.COLUMN_NAME + '] [' + isc.DATA_TYPE + ']' + 
			CASE WHEN isc.CHARACTER_MAXIMUM_LENGTH IS NULL THEN '' ELSE '(' + CAST(isc.CHARACTER_MAXIMUM_LENGTH as nvarchar(32)) + ')' END + ' ' + 
			CASE WHEN isc.NUMERIC_PRECISION IS NOT NULL AND (isc.DATA_TYPE='decimal' OR isc.DATA_TYPE='numeric') THEN '(' + CAST(isc.NUMERIC_PRECISION as nvarchar(32)) + ', ' + CAST(isc.NUMERIC_SCALE as nvarchar(32)) + ')' ELSE '' END + ' ' + 
			CASE isc.IS_NULLABLE WHEN 'YES' THEN 'NULL' ELSE 'NOT NULL' END + ' ' + 
			CASE col.is_identity WHEN 1 THEN 'IDENTITY(' + cast(idc.seed_value AS nvarchar(max)) + ', ' + cast(idc.increment_value AS nvarchar(max)) + ')' ELSE '' END + ','
			FROM INFORMATION_SCHEMA.COLUMNS isc
			INNER JOIN sys.columns col ON col.name=isc.COLUMN_NAME AND col.object_id=@SourceTableObjectID
			LEFT OUTER JOIN sys.identity_columns idc ON col.column_id=idc.column_id AND col.object_id=idc.object_id
			WHERE TABLE_SCHEMA=@SourceSchema AND TABLE_NAME=@SourceTable 
			ORDER BY ORDINAL_POSITION
		SET @TableCreation = LEFT(@TableCreation, LEN(@TableCreation) - 1)
		SET @TableCreation = @TableCreation + ' ) '
		
		IF @TargetLocation IS NOT NULL
		BEGIN
			SET @TableCreation = @TableCreation + ' ON ' + @TargetLocation
		END
		print 'Creating table: ''' + @DestinationSchema + '.' + @DestinationTable + ''''
		print 'SQL: ' + @TableCreation
		exec(@TableCreation)


		-- Create clustered index
		DECLARE @CIName nvarchar(max), @CIUnique bit, @CIPK bit, @CIID int
		SELECT TOP 1 @CIID=index_id, @CIName=REPLACE(name, '_' + @SourceTable, '_' + @DestinationTable), 
			@CIUnique=is_unique, @CIPK=is_primary_key FROM sys.indexes 
			WHERE object_id=@SourceTableObjectID AND [type]=1
		IF @CIPK IS NULL SET @CIPK=0
		IF NOT @CIName IS NULL 
		BEGIN
			DECLARE @CIColumns nvarchar(MAX)
			SET @CIColumns = ''

			SELECT @CIColumns = @CIColumns + '[' + col.name + '] ' + CASE (icol.is_descending_key) WHEN 1 THEN 'DESC' ELSE 'ASC' END + ','
				FROM sys.index_columns icol 
				INNER JOIN sys.columns col ON col.object_id = icol.object_id AND col.column_id = icol.column_id
				WHERE icol.object_id=@SourceTableObjectID AND icol.index_id=@CIID
				ORDER BY icol.key_ordinal
			SET @CIColumns = LEFT(@CIColumns, LEN(@CIColumns) - 1)

			DECLARE @TYPESTR nvarchar(max)
			SET @TYPESTR='INDEX'
			if @CIPK = 1 SET @TYPESTR='PRIMARY KEY'
			print 'Create CLUSTERED ' + @TYPESTR + ' ''' + @CIName + ''''
			
			IF @CIPK = 1
			BEGIN
				-- This is unique by default.
				exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD  CONSTRAINT [' + @CIName + '] PRIMARY KEY CLUSTERED (' + @CIColumns + ')');
			END
			ELSE
			BEGIN
				DECLARE @UniqueStr nvarchar(max)
				IF @CIUnique=1 SET @UniqueStr='UNIQUE' ELSE SET @UniqueStr=''
				exec('CREATE ' + @UniqueStr + ' CLUSTERED INDEX [' + @CIName + '] ON [' + @DestinationSchema + '].[' + @DestinationTable + '] (' + @CIColumns + ')')
			END
		END



		DECLARE @PKName nvarchar(max), @PKID int
		SELECT TOP 1 @PKID=index_id, @PKName=REPLACE(name, '_' + @SourceTable, '_' + @DestinationTable) 
			FROM sys.indexes 
			WHERE object_id=@SourceTableObjectID AND [type]<>1 and is_primary_key=1

		-- Create primary key
		IF NOT @PKName IS NULL
		BEGIN
			DECLARE @PKColumns nvarchar(MAX)
			SET @PKColumns = ''

			SELECT @PKColumns = @PKColumns + '[' + col.name + '] ' + CASE (icol.is_descending_key) WHEN 1 THEN 'DESC' ELSE 'ASC' END + ','
				FROM sys.index_columns icol 
				INNER JOIN sys.columns col ON col.object_id = icol.object_id AND col.column_id = icol.column_id
				WHERE icol.object_id=@SourceTableObjectID AND icol.index_id=@PKID
				ORDER BY icol.key_ordinal
			SET @PKColumns = LEFT(@PKColumns, LEN(@PKColumns) - 1)
			print 'Create NONCLUSTERED PRIMARY KEY: ''' + @PKName + ''''
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD  CONSTRAINT [' + @PKName + '] PRIMARY KEY NONCLUSTERED (' + @PKColumns + ')');
		END

		--create other indexes
		DECLARE @IndexId int, @IndexName nvarchar(255), @IsUnique bit, @IsUniqueConstraint bit

		DECLARE indexcursor CURSOR FOR
		SELECT index_id, REPLACE(name, '_' + @SourceTable + '_', '_' + @DestinationTable + '_'), is_unique, is_unique_constraint
			FROM sys.indexes WHERE is_primary_key=0 AND [type] = 2 AND object_id = object_id('[' + @SourceSchema + '].[' + @SourceTable + ']')
		OPEN indexcursor;
		FETCH NEXT FROM indexcursor INTO @IndexId, @IndexName, @IsUnique, @IsUniqueConstraint;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @Unique nvarchar(255)
			SET @Unique = CASE WHEN @IsUnique = 1 THEN ' UNIQUE ' ELSE '' END

			DECLARE @KeyColumns nvarchar(max), @IncludedColumns nvarchar(max)
			SET @KeyColumns = ''
			SET @IncludedColumns = ''

			select @KeyColumns = @KeyColumns + '[' + c.name + '] ' + CASE WHEN is_descending_key = 1 THEN 'DESC' ELSE 'ASC' END + ',' from sys.index_columns ic
			inner join sys.columns c ON c.object_id = ic.object_id and c.column_id = ic.column_id
			where index_id = @IndexId and ic.object_id = object_id('[' + @SourceSchema + '].[' + @SourceTable + ']') and key_ordinal > 0
			order by index_column_id

			select @IncludedColumns = @IncludedColumns + '[' + c.name + '],' from sys.index_columns ic
			inner join sys.columns c ON c.object_id = ic.object_id and c.column_id = ic.column_id
			where index_id = @IndexId and ic.object_id = object_id('[' + @SourceSchema + '].[' + @SourceTable + ']') and key_ordinal = 0
			order by index_column_id

			IF LEN(@KeyColumns) > 0
				SET @KeyColumns = LEFT(@KeyColumns, LEN(@KeyColumns) - 1)

			IF LEN(@IncludedColumns) > 0
			BEGIN
				SET @IncludedColumns = ' INCLUDE (' + LEFT(@IncludedColumns, LEN(@IncludedColumns) - 1) + ')'
			END

			--IF @FilterDefinition IS NULL
			--	SET @FilterDefinition = ''
			--ELSE
			--	SET @FilterDefinition = 'WHERE ' + @FilterDefinition + ' '

			print 'Creating index: ''' + @IndexName + '''' 
			IF @IsUniqueConstraint = 0
				exec('CREATE ' + @Unique + ' NONCLUSTERED INDEX [' + @IndexName + '] ON [' + @DestinationSchema + '].[' + @DestinationTable + '] (' + @KeyColumns + ')' + @IncludedColumns);
			ELSE
			BEGIN
				SET @IndexName = REPLACE(@IndexName, @SourceTable, @DestinationTable)
				exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD  CONSTRAINT [' + @IndexName + '] UNIQUE NONCLUSTERED (' + @KeyColumns + ')');
			END

			FETCH NEXT FROM indexcursor INTO @IndexId, @IndexName, @IsUnique, @IsUniqueConstraint;
		END;
		CLOSE indexcursor;
		DEALLOCATE indexcursor;

		--create constraints
		DECLARE @ConstraintName nvarchar(max), @CheckClause nvarchar(max)
		DECLARE constraintcursor CURSOR FOR
			SELECT REPLACE(c.CONSTRAINT_NAME, '_' + @SourceTable + '_', '_' + @DestinationTable + '_' ), CHECK_CLAUSE from INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE t
			INNER JOIN INFORMATION_SCHEMA.CHECK_CONSTRAINTS c ON c.CONSTRAINT_SCHEMA = TABLE_SCHEMA AND c.CONSTRAINT_NAME = t.CONSTRAINT_NAME
			 WHERE TABLE_SCHEMA = @SourceSchema AND TABLE_NAME = @SourceTable
		OPEN constraintcursor;
		FETCH NEXT FROM constraintcursor INTO @ConstraintName, @CheckClause;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			print 'Creating constraint: ''' + @ConstraintName + ''''
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] WITH CHECK ADD  CONSTRAINT [' + @ConstraintName + '] CHECK ' + @CheckClause)
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] CHECK CONSTRAINT [' + @ConstraintName + ']')
			FETCH NEXT FROM constraintcursor INTO @ConstraintName, @CheckClause;
		END;
		CLOSE constraintcursor;
		DEALLOCATE constraintcursor;

		-- print 'Creating default constraints'
		DECLARE @DFName nvarchar(max), @Default nvarchar(max), @DefColumn nvarchar(max)
		DECLARE DFcursor CURSOR FOR
			SELECT REPLACE(dfc.name, '_' + @SourceTable + '_', '_' + @DestinationTable + '_' ), dfc.[definition], col.name 
				FROM sys.default_constraints dfc INNER JOIN sys.columns col ON dfc.parent_column_id = col.column_id AND dfc.parent_object_id = col.object_id
				WHERE parent_object_id = @SourceTableObjectID
		OPEN DFcursor
		FETCH NEXT FROM DFcursor INTO @DFName, @Default, @DefColumn
		WHILE @@FETCH_STATUS = 0
		BEGIN
			print 'Creating default constraint: ''' + @DFName + ''''
			exec('ALTER TABLE [' + @DestinationSchema + '].[' + @DestinationTable + '] ADD CONSTRAINT ' + @DFName + ' DEFAULT ' + @Default + ' FOR ' + @DefColumn)
			FETCH NEXT FROM DFcursor INTO @DFName, @Default, @DefColumn
		END
		CLOSE DFcursor
		DEALLOCATE DFcursor

		COMMIT TRAN T_CLONE_TABLE_SCHEMA

	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage nvarchar(max), @ErrorSeverity nvarchar(max), @ErrorState nvarchar(max)
		SELECT @ErrorMessage=ERROR_MESSAGE(), @ErrorSeverity=ERROR_SEVERITY(), @ErrorState=ERROR_STATE()
		BEGIN TRY
			-- If we fail to rollback, the database will eventually do the right thing.
			ROLLBACK TRAN T_CLONE_TABLE_SCHEMA
		END TRY
		BEGIN CATCH END CATCH
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
	END CATCH

END
GO


-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_CloneTableSchema] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_IsPartitioned.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_IsPartitioned.StoredProcedure.sql 42769 2012-01-26 20:47:17Z josh $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_IsPartitioned]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_IsPartitioned]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_IsPartitioned]
    @TableName nvarchar(255),
	@IsPartitioned bit output
AS
BEGIN
	IF EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@TableName )
	BEGIN
		SET @IsPartitioned = 1
		RETURN
	END
	SET @IsPartitioned = 0
END
GO

GRANT EXECUTE ON [dbo].[pc_IsPartitioned] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_PartitionMaintenance.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_PartitionMaintenance]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_PartitionMaintenance]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_PartitionMaintenance]
    @TableName nvarchar(255),
    @HistoryWidth int
WITH EXECUTE AS OWNER
AS
BEGIN
	IF NOT EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@TableName )
	BEGIN
		RAISERROR('pc_PartitionMaintenance: Table ''%s'' is not partitioned or is not being tracked', 18, 1, @TableName);
		RETURN
	END
	
	declare @Now datetime
	select @Now=getdate()
	
	DECLARE @NewLine nvarchar(2)
	DECLARE @TailErrorMessage nvarchar(255)
	DECLARE @HeadErrorMessage nvarchar(255)
	SET @TailErrorMessage = ''
	SET @HeadErrorMessage = ''
	SET @NewLine = CHAR(10)
	
	-- Handle the tail first to free up space if possible.
	BEGIN TRY
		print 'Rotate tail'
		exec [dbo].[pc_RotateTailPartition] @TableName, @Now, @HistoryWidth
	END TRY
	BEGIN CATCH
		-- Remember the error so that we can throw it later.
		SELECT @TailErrorMessage=ERROR_MESSAGE()		
	END CATCH

	-- Handle the head second.
	BEGIN TRY
		print 'Rotate head'
		exec [dbo].[pc_RotateHeadPartition] @TableName, @Now
	END TRY
	BEGIN CATCH
		SELECT @HeadErrorMessage=ERROR_MESSAGE()
		-- Remember the error so that we can throw it later.
	END CATCH

	IF @HeadErrorMessage <> '' OR @TailErrorMessage <> ''
	BEGIN
		RAISERROR('Errors encountered while performing partition maintenance on ''%s''%s    Head Rotation Error: %s%s    Tail Rotation Error: %s', 18, 1, @TableName, @NewLine, @HeadErrorMessage, @NewLine, @TailErrorMessage)
		RETURN
	END
	
END

GRANT EXECUTE ON [dbo].[pc_PartitionMaintenance] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_PartitionTable.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_PartitionTable]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_PartitionTable]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- pc_PartitionTable
-- Partition a table by date.
--
-- @TableName - Name of the table to partition
-- @PartitionColumn - Column on which to partition the table.
-- @PartitionWidth is a value measured in days. This indicates
--   the size of the partition.
-- @HeadRoom is the number of future partitions to try to 
--   maintain ahead of the current partition.
-- @TailRoom is the number of past partitions to initialize
--   the new table with.
-- #param_Locations - Temporary table of the form 
--   ( id int, path nvarchar(255) )
--   Take ownership.
--
-- Yields:
--   One new file for each entry in #param_Locations
--   One new filegroup for each entry in #param_Locations
--   One new entry in PartitionedTables
--   One new entry in PartitionFilegroups for each entry in #param_Locations
--   Table with original data with the name <@TableName>_PTOld
--   New partition function with the name <@TableName>__Function
--   New partition scheme with the name <@TableName>__Scheme
--   Partitioned table on <@TableName>__Scheme with @HeadRoom + @TailRoom + 2 partitions named <@TableName>
CREATE PROCEDURE [dbo].[pc_PartitionTable]
    @TableName nvarchar(255),
    @PartitionColumn nvarchar(255),
    @PartitionWidth int,
    @HeadRoom int = 2, 
    @TailRoom int = 0
AS
BEGIN
	DECLARE @ErrMsg nvarchar(max), @ErrSev int, @ErrSt int

	BEGIN TRY
	
	IF NOT EXISTS ( SELECT 1 FROM sys.tables WHERE object_id=OBJECT_ID(N'[dbo].[' + @TableName + ']') )
	BEGIN
		RAISERROR('Table ''%s'' does not exist', 18, 1, @TableName)
		RETURN
	END

    IF @PartitionWidth <= 0
    BEGIN
		RAISERROR('PartitionWidth must be greater than 0 days', 18, 1)
		RETURN
    END

	IF @HeadRoom < 0
	BEGIN
		RAISERROR('HeadRoom must be an integer in the range [0, *)', 18, 1)
		RETURN
	END
	
	IF @TailRoom < 0
	BEGIN
		RAISERROR('TailRoom must be an integer in the range [0, *)', 18, 1)
		RETURN
	END

	DECLARE @OldDataExt nvarchar(63)
	SET @OldDataExt = '_PTOld'
	
	IF EXISTS ( SELECT 1 FROM sys.tables WHERE object_id=OBJECT_ID(N'[dbo].[' + @TableName + @OldDataExt) )
	BEGIN
		RAISERROR('Table ''%s%s'' already exists. This script requires that table to be empty', 18, 1, @TableName, @OldDataExt)
		RETURN
	END

	-- Check that partition column is in the table.
	IF NOT EXISTS ( SELECT 1 FROM sys.columns WHERE object_id=OBJECT_ID(N'[dbo].[' + @TableName + ']') AND name=@PartitionColumn )
	BEGIN
		RAISERROR('PartitionColumn ''%s'' does not exist in table ''%s''. Cannot continue with the partition', 18, 1, @PartitionColumn, @TableName)
		RETURN
	END

    -- Check that the param_Locations table exists in the tempDB.
	IF NOT EXISTS ( SELECT 1 FROM tempdb.sys.objects WHERE object_id=OBJECT_ID(N'tempdb..#param_Locations') )
	BEGIN
		RAISERROR('Required parameter table ''#param_Locations'' does not exist', 18, 1)
		RETURN
	END

	
	-- Make sure that some minimum number of filegroups is provided.
	
	DECLARE @LocationCount int, @RequiredLocationCount int
	SET @RequiredLocationCount = @HeadRoom + @TailRoom + 2
	SELECT @LocationCount=COUNT(1) FROM #param_Locations
	IF @LocationCount < @RequiredLocationCount
	BEGIN
		RAISERROR('With the provided parameters (HeadRoom: %d; TailRoom: %d), at least %d filegroups are required. Only %d were provided.', 18, 1, @HeadRoom, @TailRoom, @RequiredLocationCount, @LocationCount)
		RETURN
	END

    -- @todo: Check for unique indexes on the source table. This may cause problems when partitioning.
    --   They currently cause the process to fail, so it's not a terrible problem not to explicitly check.


	IF EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@TableName )
	BEGIN
		RAISERROR('Table ''%s'' has already been partitioned', 18, 1, @TableName)
		RETURN
	END

    declare @DatabaseName nvarchar(255)
    select @DatabaseName=DB_NAME()

	declare @FG_Prefix nvarchar(255)
	SET @FG_Prefix = @DatabaseName + '__' + @TableName + '__'

	IF EXISTS ( SELECT 1 FROM sys.filegroups WHERE LEFT(name, LEN(@FG_Prefix))=@FG_Prefix )
	BEGIN
		RAISERROR('Table ''%s'' has already been partitioned or filegroups exist that will prevent successful partitioning (of the form ''%s*'')', 18, 1, @TableName, @FG_Prefix)
		RETURN
	END

	declare @CreatedFilegroups AS TABLE ( [name] nvarchar(255), [fg_created] [bit], [file_created] [bit] )

	BEGIN TRY
	
		-- Force path to have trailing slash
		declare myiter CURSOR FOR SELECT [id], [path] + '\' from #param_Locations
		--' 

		declare @id int, @path nvarchar(max)

		OPEN myiter
		FETCH NEXT FROM myiter INTO @id, @path
		IF @@FETCH_STATUS<>0
		BEGIN
			-- This was already checked for, but this is just in case something weird happens.
			RAISERROR('No partitions/filegroups defined', 18, 1)
			RETURN
		END
		WHILE @@FETCH_STATUS=0
		BEGIN
			--print 'Row: ' + cast(@id as nvarchar(10)) + ', ' + @path

			DECLARE @FGName nvarchar(max)
			SET @FGName = @FG_Prefix + CAST(@id AS nvarchar(10))
			DECLARE @FileLogicalName nvarchar(max)
			SET @FileLogicalName = @FG_Prefix + CAST(@id AS NVARCHAR(10))
			DECLARE @FilePhysicalName nvarchar(max)
			SET @FilePhysicalName = @path + @FG_Prefix + CAST(@id AS NVARCHAR(3)) + '.ndf'
			
			INSERT INTO @CreatedFilegroups VALUES ( @FGName, 0, 0 )

			-- Transactions cannot be used around database modifications, so there is a window here where 
			-- the filegroup/file creation may succeed, but we don't get around to marking that it needs
			-- to be cleaned up. Even worse, if the process goes down in the middle of this process,
			-- there's no easy way to recover.
			DECLARE @SQL nvarchar(max)
			SET @SQL = 'ALTER DATABASE [' + @DatabaseName + '] ADD FILEGROUP ' + @FGName + ';'
			print 'Create FILEGROUP: ' + @FGName
			EXEC (@SQL)

			UPDATE @CreatedFilegroups SET [fg_created]=1 WHERE [name]=@FGName
			
			SET @SQL = 'ALTER DATABASE [' + @DatabaseName + '] ADD FILE (NAME = N''' + @FileLogicalName + ''', FILENAME = N''' + @FilePhysicalName + ''', SIZE = 5MB, FILEGROWTH = 5MB) TO FILEGROUP [' + @FGName + '];'
			print 'Create FILE: ' + @FilePhysicalName
			EXEC (@SQL)

			UPDATE @CreatedFilegroups SET [file_created]=1 WHERE [name]=@FGName
			
			FETCH NEXT FROM myiter into @id, @path
		END
		CLOSE myiter
		DEALLOCATE myiter

	END TRY
	BEGIN CATCH
		-- Grab error message, severity, and state
		SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrSt=ERROR_STATE()

		DECLARE @SQL1 nvarchar(max)
		DECLARE @SubErrMsg nvarchar(max)		
		DECLARE @fg_name nvarchar(255), @fg_created bit, @file_created bit

		-- Clean up all created filegroups
		DECLARE cleanupIter CURSOR FOR SELECT [name], [fg_created], [file_created] from @CreatedFilegroups
		OPEN cleanupIter
		FETCH NEXT FROM cleanupIter INTO @fg_name, @fg_created, @file_created
		WHILE @@FETCH_STATUS=0
		BEGIN

			-- Remove the file and filegroup if they were created by _THIS_PROCESS_. 
			IF @file_created=1
			BEGIN
				SET @SQL1 = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILE ' + @fg_name + ';'
				BEGIN TRY
					EXEC(@SQL1)
				END TRY
				BEGIN CATCH
					SELECT @SubErrMsg=ERROR_MESSAGE()
					print 'Failed to clean up the FILE: ' + @SubErrMsg
				END CATCH
			END

			IF @fg_created=1
			BEGIN
				SET @SQL1 = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILEGROUP ' + @fg_name + ';'
				BEGIN TRY
					EXEC(@SQL1)
				END TRY
				BEGIN CATCH
					SELECT @ErrMsg=ERROR_MESSAGE()
					print 'Failed to clean up the FILEGROUP: ' + @ErrMsg
				END CATCH
			END

			FETCH NEXT FROM cleanupIter INTO @fg_name, @fg_created, @file_created
		END
		CLOSE cleanupIter
		DEALLOCATE cleanupIter
		RAISERROR(@ErrMsg, @ErrSev, @ErrSt)
		RETURN
	END CATCH
	
	END TRY
	BEGIN CATCH
		-- Grab error message, severity, and state
		SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrSt=ERROR_STATE()
		
		-- The interface for this procedure indicates that we take ownership of param_Locations. 
		-- Therefore, we should clean up.
		BEGIN TRY
			DROP TABLE #param_Locations
		END TRY BEGIN CATCH END CATCH
		RAISERROR(@ErrMsg, @ErrSev, @ErrSt)
		RETURN
	END CATCH
	
	-- Don't need this anymore.
	DROP TABLE #param_Locations

	BEGIN TRAN T1
    BEGIN TRY

		INSERT INTO [dbo].[PartitionedTables] (TableName, PartitionWidth, HeadRoom) VALUES ( @TableName, @PartitionWidth, @HeadRoom )
		DECLARE @TableID int
		SELECT @TableID=ID FROM [dbo].[PartitionedTables] WHERE TableName=@TableName
		
		--SELECT * FROM @CreatedFilegroups
		
		INSERT INTO [dbo].[PartitionFilegroups] (TableID, DataSpaceID) 
		    SELECT @TableID, sfg.data_space_id FROM @CreatedFilegroups cfg INNER JOIN sys.filegroups sfg ON cfg.name=sfg.name

		declare @CreatePartitionFunction nvarchar(max)
		declare @CreatePartitionScheme nvarchar(max)

		declare @FunctionName nvarchar(255)
		declare @SchemeName nvarchar(255)
		set @FunctionName = @TableName + '__Function'
		set @SchemeName = @TableName + '__Scheme'



		DECLARE @Now datetime
		DECLARE @TmpName as nvarchar(max)
	    DECLARE @PartIndex int

		SET @Now = GETDATE()	    
	    SET @PartIndex = -@TailRoom
	    
		DECLARE myiter CURSOR FOR SELECT TOP (@RequiredLocationCount) [name] FROM sys.filegroups WHERE LEFT([name], LEN(@FG_Prefix))=@FG_Prefix
		OPEN myiter
		FETCH NEXT FROM myiter INTO @TmpName

		-- Get Partition Scheme kicked off so that the commas are correct.
		SET @CreatePartitionFunction = 'CREATE PARTITION FUNCTION ' + @FunctionName + ' (datetime) AS RANGE LEFT FOR VALUES ( '
	    SET @CreatePartitionScheme = 'CREATE PARTITION SCHEME ' + @SchemeName + ' AS PARTITION ' + @FunctionName + ' TO (' + @TmpName

		FETCH NEXT FROM myiter INTO @TmpName
		
		-- Get Partition Function kicked off so that the commas are correct.
		SET @CreatePartitionFunction = @CreatePartitionFunction + '''' + CAST( DATEADD(d, @PartitionWidth * @PartIndex, @Now) as nvarchar(63)) + ''''
		SET @PartIndex = @PartIndex + 1
		SET @CreatePartitionScheme = @CreatePartitionScheme + ', ' + @TmpName

		FETCH NEXT FROM myiter INTO @TmpName
		WHILE @@FETCH_STATUS=0
		BEGIN
			SET @CreatePartitionFunction = @CreatePartitionFunction + ', ''' + CAST( DATEADD(d, @PartitionWidth * @PartIndex, @Now) as nvarchar(63)) + ''''
			SET @CreatePartitionScheme = @CreatePartitionScheme + ', ' + @TmpName
			SET @PartIndex = @PartIndex + 1
			FETCH NEXT FROM myiter into @TmpName
		END
		CLOSE myiter
		DEALLOCATE myiter

		SET @CreatePartitionFunction = @CreatePartitionFunction + ');';
		SET @CreatePartitionScheme = @CreatePartitionScheme + ' );'

		print 'Create PARTITION FUNCTION: ' + @CreatePartitionFunction
		EXEC (@CreatePartitionFunction)
		print 'Create PARTITION SCHEME: ' + @CreatePartitionScheme
		EXEC (@CreatePartitionScheme)


		declare @OldName nvarchar(max)
		declare @NewName nvarchar(max)
		SET @OldName = @TableName
		SET @NewName = @TableName + @OldDataExt
		EXEC [dbo].[pc_RenameTable] @OldName, @NewName

		declare @SourceTableParam nvarchar(max)
		SET @SourceTableParam = @TableName + @OldDataExt
		declare @PartitionParam nvarchar(max)
		SET @PartitionParam = @SchemeName + '(' + @PartitionColumn + ')'

		-- Create the table on the new partition schema.
		EXEC [dbo].[pc_CloneTableSchema] 'dbo', @SourceTableParam, 'dbo', @TableName, @PartitionParam

		COMMIT TRAN T1

    END TRY
    BEGIN CATCH
		ROLLBACK TRAN T1
		DECLARE @ErrorMessage nvarchar(max), @ErrorSeverity nvarchar(max), @ErrorState nvarchar(max)
		SELECT @ErrorMessage=ERROR_MESSAGE(), @ErrorSeverity=ERROR_SEVERITY(), @ErrorState=ERROR_STATE()
		
		-- Clean up the filegroups		
		declare myiter CURSOR FOR SELECT name from @CreatedFilegroups
		OPEN myiter
		FETCH NEXT FROM myiter INTO @fg_name
		WHILE @@FETCH_STATUS=0
		BEGIN
			DECLARE @mySQL nvarchar(max)
			SET @mySQL = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILE ' + @fg_name + ';'
			EXEC (@mySQL)

			SET @mySQL = 'ALTER DATABASE [' + @DatabaseName + '] REMOVE FILEGROUP ' + @fg_name + ';'
			EXEC (@mySQL)
		    
			FETCH NEXT FROM myiter into @fg_name
		END
		CLOSE myiter
		DEALLOCATE myiter

		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
		RETURN
    END CATCH

END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_PartitionTable] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pc_RenameTable.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_RenameTable]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_RenameTable]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_RenameTable]
    @OldTableName nvarchar(255),
    @NewTableName nvarchar(255)
AS
BEGIN

    IF NOT EXISTS ( SELECT 1 FROM sys.tables WHERE object_id=OBJECT_ID(N'[dbo].[' + @OldTableName + ']') )
    BEGIN
        RAISERROR('Table ''%s'' does not exist', 18, 1, @OldTableName)
        RETURN
    END

    -- Odd case, but we shouldn't fail on it.
    IF @OldTableName = @NewTableName
        RETURN

	IF EXISTS ( SELECT 1 FROM sys.objects WHERE object_id=OBJECT_ID(N'[dbo].[' + @NewTableName + ']'))
	BEGIN
		RAISERROR('Table ''%s'' already exists, cannot over-write it', 18, 1, @NewTableName)
		RETURN
	END

	DECLARE @OldName nvarchar(max), @NewName nvarchar(max)
	
	BEGIN TRAN T1
	
	BEGIN TRY

		-- Find all indexes for a table. Rename them.
		DECLARE indexcursor CURSOR FOR
		SELECT @OldTableName + '.' + name, REPLACE(name, '_' + @OldTableName, '_' + @NewTableName) 
			FROM sys.indexes WHERE object_id = object_id('[dbo].[' + @OldTableName + ']') AND name IS NOT NULL
		OPEN indexcursor;
		FETCH NEXT FROM indexcursor INTO @OldName, @NewName;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			exec sp_rename @OldName, @NewName, 'INDEX'
			FETCH NEXT FROM indexcursor INTO @OldName, @NewName
		END
		CLOSE indexcursor;
		DEALLOCATE indexcursor;
	    
		-- Find all check constraints for a table. Rename them.
		DECLARE cc_cursor CURSOR FOR
		SELECT name, REPLACE(name, '_' + @OldTableName, '_' + @NewTableName)
			FROM sys.check_constraints cc WHERE cc.parent_object_id=OBJECT_ID(N'[dbo].[' + @OldTableName + ']')
		OPEN cc_cursor;
		FETCH NEXT FROM cc_cursor INTO @OldName, @NewName
		WHILE @@FETCH_STATUS = 0
		BEGIN
			exec sp_rename @OldName, @NewName
			FETCH NEXT FROM cc_cursor INTO @OldName, @NewName
		END
		CLOSE cc_cursor;
		DEALLOCATE cc_cursor;
	    
		-- Find all default constraints for a table. Rename them.
		DECLARE dc_cursor CURSOR FOR
		SELECT name, REPLACE(name, '_' + @OldTableName, '_' + @NewTableName)
			FROM sys.default_constraints dc WHERE dc.parent_object_id=OBJECT_ID(N'[dbo].[' + @OldTableName + ']')
		OPEN dc_cursor;
		FETCH NEXT FROM dc_cursor INTO @OldName, @NewName
		WHILE @@FETCH_STATUS = 0
		BEGIN
			exec sp_rename @OldName, @NewName
			FETCH NEXT FROM dc_cursor INTO @OldName, @NewName
		END
	    CLOSE dc_cursor;
	    DEALLOCATE dc_cursor;

		exec sp_rename @OldTableName, @NewTableName
	
		COMMIT TRAN T1
	END TRY
	BEGIN CATCH
		ROLLBACK TRAN T1
		DECLARE @ErrorMessage nvarchar(max), @ErrorSeverity nvarchar(max), @ErrorState nvarchar(max)
		SELECT @ErrorMessage=ERROR_MESSAGE(), @ErrorSeverity=ERROR_SEVERITY(), @ErrorState=ERROR_STATE()
		RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState)
	END CATCH

END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_RenameTable] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_RotateHeadPartition.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_RotateHeadPartition]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_RotateHeadPartition]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_RotateHeadPartition]
    @PartitionedTable nvarchar(255),
	@ProcessTime datetime
AS
BEGIN
	IF NOT EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable )
	BEGIN
		RAISERROR('Table ''%s'' is not partitioned or is not being tracked', 18, 1, @PartitionedTable);
		RETURN
	END
	
	DECLARE @FunctionName nvarchar(255), @SchemeName nvarchar(255)
	SET @FunctionName = @PartitionedTable + '__Function'
	SET @SchemeName = @PartitionedTable + '__Scheme'
	
	
	-- Grab HeadRoom, PartitionWidth
	DECLARE @HeadRoom int, @PartitionWidth int
	SELECT @HeadRoom=HeadRoom, @PartitionWidth=PartitionWidth FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable

	DECLARE @LastDivider datetime
	
	-- Grab front range value given that we know the name of the table.
	SELECT TOP (1) @LastDivider=cast(rv.[value] as datetime)
	    FROM sys.partition_range_values rv
	    INNER JOIN sys.partition_functions pf ON rv.function_id=pf.function_id
		WHERE pf.[name]=@FunctionName
		ORDER BY rv.boundary_id DESC
	
	--print 'LastDivider: ' + CAST(@LastDivider as nvarchar(max))
	
	
	DECLARE @Idx int
	
	
	-- Check to make sure that we haven't busted a partition boundary.
	IF @LastDivider IS NULL OR @ProcessTime > DATEADD(d, @PartitionWidth, @LastDivider)
	BEGIN
		-- Somehow we managed not to rotate in a partition for a very long time.
		-- Go ahead and set now as the latest divider.
		-- Should probably throw some kind of an error.
		SET @Idx = 0
		SET @LastDivider = @ProcessTime
    END
	ELSE
	BEGIN
		SET @Idx = 1
	END

	--print 'Computed LastDivider: ' + CAST(@LastDivider as nvarchar(max))

	DECLARE @HeadRoomDate datetime	
	SET @HeadRoomDate = DATEADD(D, @HeadRoom*@PartitionWidth, @ProcessTime)
	--print 'HeadRoomDate: ' + CAST(@HeadRoomDate as nvarchar(max))
	

	WHILE DATEADD(d, @Idx*@PartitionWidth, @LastDivider) <= DATEADD(d, (@HeadRoom)*@PartitionWidth, @ProcessTime)
	BEGIN
		DECLARE @NewDivider datetime
		SELECT @NewDivider=DATEADD(d, @Idx*@PartitionWidth, @LastDivider)
		-- Rotate in a new filegroup
		-- Select an unused filegroup.
		DECLARE @FG_Name nvarchar(255)
		DECLARE @AvailableFGs TABLE ( name nvarchar(255) )
		INSERT INTO @AvailableFGs 
		    SELECT fg.[name] 
		    FROM [dbo].[PartitionFilegroups] pfg
			INNER JOIN [dbo].[PartitionedTables] ptb ON pfg.TableID=ptb.ID
			LEFT OUTER JOIN sys.destination_data_spaces dds ON pfg.DataSpaceID=dds.data_space_id
			INNER JOIN [sys].[filegroups] fg ON fg.data_space_id=pfg.DataSpaceID
			WHERE dds.data_space_id IS NULL
		-- If we've run out, there's a problem.
		IF NOT EXISTS (SELECT 1 FROM @AvailableFGs)
		BEGIN
			RAISERROR('pc_RotateHeadPartition: There are no more available filegroups for table ''%s''', 18, 1, @PartitionedTable)
			RETURN
		END
		SELECT TOP 1 @FG_Name=name FROM @AvailableFGs

		print 'Adding FG: ''' + @FG_Name + ''' at divider ' + cast(@NewDivider as nvarchar(max))
		BEGIN TRAN T1
		-- Update Scheme
		EXEC('ALTER PARTITION SCHEME [' + @SchemeName + '] NEXT USED [' + @FG_Name + ']')
		-- Update Function
		EXEC('ALTER PARTITION FUNCTION ' + @FunctionName + ' () SPLIT RANGE (''' + @NewDivider + ''')')
		COMMIT TRAN T1
		
		DELETE FROM @AvailableFGs
		
		SET @Idx = @Idx + 1
	END

END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_RotateHeadPartition] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_RotateTailPartition.StoredProcedure.sql'; 
--
GO
-- $Id: $
-- Build Version: 7.3.1.138972

IF EXISTS (select * from sys.objects where object_id = OBJECT_ID(N'[dbo].[pc_RotateTailPartition]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[pc_RotateTailPartition]
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- @PartitionedTable - Name of the table to process.
-- @ProcessTime - Time of processing. In most cases, should be GETDATE()
-- @HistoryWidth - Days to keep history.
CREATE PROCEDURE [dbo].[pc_RotateTailPartition]
    @PartitionedTable nvarchar(255),
    @ProcessTime datetime,
	@HistoryWidth int
AS
BEGIN
   	IF NOT EXISTS ( SELECT 1 FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable )
	BEGIN
		RAISERROR('pc_RotateTailPartition: Table ''%s'' is not partitioned or is not being tracked', 18, 1, @PartitionedTable);
		RETURN
	END
	
	IF @HistoryWidth <= 0
	BEGIN
		RAISERROR('pc_RotateTailPartition: HistoryWidth must be greater than zero', 18, 1)
		RETURN
	END
	
	DECLARE @FunctionName nvarchar(255), @SchemeName nvarchar(255)
	SET @FunctionName = @PartitionedTable + '__Function'
	SET @SchemeName = @PartitionedTable + '__Scheme'
	
	-- Grab HeadRoom, PartitionWidth
	DECLARE @HeadRoom int, @PartitionWidth int
	SELECT @HeadRoom=HeadRoom, @PartitionWidth=PartitionWidth FROM [dbo].[PartitionedTables] WHERE [TableName]=@PartitionedTable
	
	DECLARE @FirstDivider datetime
	
	-- Grab front range value given that we know the name of the table.
	SELECT TOP (1) @FirstDivider=cast(rv.[value] as datetime)
	    FROM sys.partition_range_values rv
	    INNER JOIN sys.partition_functions pf ON rv.function_id=pf.function_id
		WHERE pf.[name]=@FunctionName
		ORDER BY rv.boundary_id ASC

	DECLARE @DropDate datetime
	SELECT @DropDate=DATEADD(d, -@HistoryWidth, @ProcessTime)
		
	--print 'FirstDivider: ' + cast(@FirstDivider as nvarchar(255))
	--print 'DropDate: ' + cast(@FirstDivider as nvarchar(255))
	
	WHILE @FirstDivider <= @DropDate
	BEGIN
		print 'Removing tail partition at: ' + cast(@FirstDivider as nvarchar(255))

		-- Find the filegroup that the last partition is on.
		DECLARE @FirstDataSpaceName nvarchar(255)
		SELECT TOP 1 @FirstDataSpaceName=fg.[name]
			FROM sys.destination_data_spaces dds
			INNER JOIN sys.partition_schemes ps ON ps.data_space_id=dds.partition_scheme_id
			INNER JOIN sys.filegroups fg ON fg.data_space_id=dds.data_space_id
			WHERE ps.[name]=@SchemeName AND dds.destination_id = 1
		IF @@ROWCOUNT=0
		BEGIN
			RAISERROR('pc_RotateTailPartition: Error: Caught up to the head of the list. pc_RotateHeadPartition may not be working correctly', 18, 1)
			RETURN
		END

		DECLARE @TmpTable nvarchar(255)
		SELECT @TmpTable=@PartitionedTable + '_' + cast(YEAR(@FirstDivider) as nvarchar(10)) + cast(MONTH(@FirstDivider) as nvarchar(10)) + cast(DAY(@FirstDivider) as nvarchar(10))
		-- Clone the @PartitionedTable to a version of that table on the same filegroup.
		exec [dbo].[pc_CloneTableSchema] 'dbo', @PartitionedTable, 'dbo', @TmpTable, @FirstDataSpaceName
		-- ALTER TABLE SWITCH PARTITION X TO <NEW TABLE>
		BEGIN TRY
			EXEC('ALTER TABLE [dbo].[' + @PartitionedTable + '] SWITCH PARTITION 1 TO ' + @TmpTable)
			
			-- DROP NEW TABLE
			EXEC('DROP TABLE [dbo].[' + @TmpTable + ']')
		END TRY
		BEGIN CATCH
			DECLARE @ErrMsg nvarchar(max), @ErrSev int, @ErrState int
			SELECT @ErrMsg=ERROR_MESSAGE(), @ErrSev=ERROR_SEVERITY(), @ErrState=ERROR_STATE()
			IF EXISTS ( SELECT 1 FROM sys.tables WHERE name=@TmpTable)
			BEGIN
				EXEC('DROP TABLE [dbo].[' + @TmpTable + ']')
			END
			RAISERROR(@ErrMsg, @ErrSev, @ErrState)
		END CATCH

		-- Now merging the ranges will move no data.
		DECLARE @SQL nvarchar(max)
		SET @SQL='ALTER PARTITION FUNCTION ' + @FunctionName + ' () MERGE RANGE ( ''' + cast(@FirstDivider as nvarchar(255)) + ''')'
		EXEC( @SQL )
		SELECT TOP (1) @FirstDivider=cast(rv.[value] as datetime)
			FROM sys.partition_range_values rv
			INNER JOIN sys.partition_functions pf ON rv.function_id=pf.function_id
			WHERE pf.[name]=@FunctionName
			ORDER BY rv.boundary_id ASC
		IF @@ROWCOUNT=0
		BEGIN
			RAISERROR('pc_RotateTailPartition: Error: Caught up to the head of the list. pc_RotateHeadPartition may not be working correctly', 18, 2)
			RETURN
		END
	END
	
	-- Do some on-the-way-out error checking. This may not be a good place to do this, but make
	-- sure that there are enough partitions to accomodate the history.
	DECLARE @FG_Count int
	SELECT @FG_Count=COUNT(1) FROM [dbo].[PartitionFilegroups] pfg
		INNER JOIN [dbo].[PartitionedTables] pt ON pt.ID=pfg.TableID
		WHERE pt.TableName=@PartitionedTable
	
	IF @HistoryWidth > (@FG_Count - 1) * @PartitionWidth
	BEGIN
		RAISERROR('pc_RotateTailPartition: Warning: There may not be enough filegroups (%d) for table ''%s'' to safely accommodate %d days of history with a partition width of %d days', 18, 1, @FG_Count, @PartitionedTable, @HistoryWidth, @PartitionWidth)
		RETURN
	END
END
GO

-- Note: This stored procedure MUST NEVER be executable by Copient_Logix!
DENY EXECUTE ON [dbo].[pc_RotateTailPartition] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pc_Transaction_Select.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pc_Transaction_Select.StoredProcedure.sql  $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pc_Transaction_Select]    Script Date: 03/024/2015 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pc_Transaction_Select]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].pc_Transaction_Select
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pc_Transaction_Select] 
	@ExtLocationCode nvarchar(20), 
	@Max Integer,
	@SearchFilter nvarchar(1000) = '',
	@DateFilter nvarchar(1000) = '',
	@RedemptionFilter Integer = 1,
	@SortCol As nvarchar(20) = 'TH.LogixTransNum ',
	@SortDir As nvarchar(4) = ''
AS 
begin
  set nocount on;

	  If @RedemptionFilter = 1 
	  Begin
		exec('select top (' + @Max + ') TH.CustomerPrimaryExtID, Max(TH.TransDate) as TransactionDate, TH.ExtLocationCode, sum(TR.RedemptionAmount) as RedemptionAmount, sum(TR.RedemptionCount) as RedemptionCount,
			TH.TerminalNum, TH.LogixTransNum, POSTransNum as TransNum,  TH.CustomerTypeID, TH.PresentedCustomerID, TH.PresentedCardTypeID, TH.HHID, TH.Replayed, 
			0 AS TransContext, isnull(TransTotal,0) as TransTotal  
			from TransHist as TH with (NoLock) 
			Left Outer Join TransRedemptionView as TR with (NoLock) 
			on TH.LogixTransNum=TR.LogixTransNum 
			where TH.ExtLocationCode=''' + @ExtLocationCode + ''' ' + @SearchFilter +
			' group by TH.CustomerPrimaryExtID, TH.HHID, TH.CustomerTypeID, TH.PresentedCustomerID, TH.PresentedCardTypeID, TH.LogixTransNum, POSTransNum, TH.TerminalNum, TH.ExtLocationCode, 
			TH.Replayed, TransTotal ' + @DateFilter +
			' order by ' + @SortCol + ' ' + @SortDir + ';')
	  End
	  Else If @RedemptionFilter = 2
	  Begin
		exec('select top (' + @Max + ') TR.CustomerPrimaryExtID, Max(TH.TransDate) as TransactionDate, TR.ExtLocationCode, sum(TR.RedemptionAmount) as RedemptionAmount, sum(TR.RedemptionCount) as RedemptionCount,
			TR.TerminalNum, TH.LogixTransNum, TR.TransNum, count(*) as DetailRecords, TR.CustomerTypeID, TR.PresentedCustomerID, TR.PresentedCardTypeID, TR.HHID, TR.Replayed,
				0 AS TransContext, TH.TransTotal as TransTotal
			from TransRedemptionView as TR with (NoLock)  
			Left Outer Join TransHist as TH with (NoLock)
			on TH.LogixTransNum=TR.LogixTransNum 
			where TR.ExtLocationCode=''' + @ExtLocationCode + ''' ' + @SearchFilter +
			' group by TR.ExtLocationCode, TR.CustomerPrimaryExtID, TR.HHID, TR.CustomerTypeID, TR.PresentedCustomerID, TR.PresentedCardTypeID, TH.LogixTransNum, TR.TransNum, TR.TerminalNum, 
			TR.Replayed, TH.TransTotal ' + @DateFilter +
			' order by ' + @SortCol + ' ' + @SortDir + ';')
	  End
	  Else If @RedemptionFilter = 3
	  Begin
		exec('select top (' + @Max + ') TH.CustomerPrimaryExtID, Max(TH.TransDate) as TransactionDate, TH.ExtLocationCode, 0 as RedemptionAmount, 0 as RedemptionCount,
			TH.TerminalNum, TH.LogixTransNum, POSTransNum as TransNum,  TH.CustomerTypeID, TH.PresentedCustomerID, TH.PresentedCardTypeID, TH.HHID, TH.Replayed, 
			0 AS TransContext, isnull(TransTotal,0) as TransTotal  
			from TransHist as TH with (NoLock) 
			where TH.ExtLocationCode=''' + @ExtLocationCode + ''' ' + @SearchFilter +
			'and not exists 
            (select LogixTransNum from TransRedemptionView as TR where TH.LogixTransNum=TR.LogixTransNum) 
			group by TH.CustomerPrimaryExtID, TH.HHID, TH.CustomerTypeID, TH.PresentedCustomerID, TH.PresentedCardTypeID, TH.LogixTransNum, POSTransNum, TH.TerminalNum, TH.ExtLocationCode, 
			TH.Replayed, TransTotal ' + @DateFilter +
			' order by ' + @SortCol + ' ' + @SortDir + ';')
	  End  
  

END
GO
GRANT EXECUTE ON [dbo].pc_Transaction_Select TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_CouponError_Insert.StoredProcedure.sql'; 
--
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_CouponError_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_CouponError_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_CouponError_Insert]
  @Barcode nvarchar(14),
  @Description nvarchar(255),
  @ErrorCode bigint,
  @ErrorDate datetime,
  @LocationCode nvarchar(20),
  @TransNum nvarchar(128)
  
AS 


  SET NOCOUNT ON;
  
  insert into [dbo].[CouponErrors]
    ([Barcode]
    ,[Description]
    ,[ErrorCode]
    ,[ErrorDate]
    ,[LocationCode]
    ,[TransNum])

  values
    (@Barcode
    ,@Description
    ,@ErrorCode
    ,@ErrorDate
    ,@LocationCode
    ,@TransNum);


GO
GRANT EXECUTE ON [dbo].[pt_CouponError_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO



print 'processing storedprocedures/dbo.pt_Create_Partition_Truncation_Table.StoredProcedure.sql'; 
--
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Create_Partition_Truncation_Table]') AND type in (N'P', N'PC'))
BEGIN
   DROP PROCEDURE [dbo].[pt_Create_Partition_Truncation_Table]
END
GO

CREATE PROCEDURE [dbo].[pt_Create_Partition_Truncation_Table] @SchemaName NVARCHAR(20),@TabName NVARCHAR(100), @PartitionNo INT, @DaysInPartition INT, @Filegroup NVARCHAR(50)
AS
/* $Id: dbo.pt_Create_Partition_Truncation_Table.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $ */
SET NOCOUNT ON
DECLARE @SQL NVARCHAR(2000)
   
IF @TabName = 'TransHist'
BEGIN
   SET @SQL = 'IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'''+@SchemaName+'.'+@TabName+'_'
               +CONVERT(NVARCHAR(5),@PartitionNo)+''') AND type in (N''U'')) DROP TABLE '+@SchemaName+'.'+@TabName+'_'+CONVERT(NVARCHAR(5),@PartitionNo)
   EXEC (@SQL)
   
   SET @SQL = 'CREATE TABLE '+@SchemaName+'.'+@TabName+'_'+CONVERT(NVARCHAR(5),@PartitionNo)+ '(
   [LogixTransNum] [varchar](36) NULL,
   [CustomerPrimaryExtID] [nvarchar](400) NULL,
   [CustomerTypeID] [int] NULL,
   [ExtLocationCode] [nvarchar](20) NULL,
   [TransDate] [datetime] NULL,
   [TerminalNum] [nvarchar](4) NULL,
   [POSTransNum] [nvarchar](128) NULL,
   [PartitionNumber] AS DATEPART(DAYOFYEAR,TransDate)/' + CAST(@DaysInPartition AS NVARCHAR(3)) + ' + 1 PERSISTED, 
   [PresentedCustomerID] nvarchar(400) NULL,
   [PresentedCardTypeID] [int] NULL,
   [HHID] nvarchar(400) NULL,
   [Replayed] int NULL,
   [POSTimeStamp] datetime NULL
   [TransTotal] [decimal](11,3) NULL) ON [' + @Filegroup + ']'
   EXEC(@SQL)
END
ELSE IF @TabName = 'TransRedemption'
BEGIN
  SET @SQL = 'IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'''+@SchemaName+'.'+@TabName+'_'
             +CONVERT(NVARCHAR(5),@PartitionNo)+''') AND type in (N''U'')) DROP TABLE '+@SchemaName+'.'+@TabName+'_'+CONVERT(NVARCHAR(5),@PartitionNo)
  EXEC (@SQL)
  
  SET @SQL = 'CREATE TABLE '+@SchemaName+'.'+@TabName+'_'+CONVERT(NVARCHAR(5),@PartitionNo)+ '(
    [OfferID]                [bigint] NULL, 
    [ExtLocationCode]        [nvarchar] (20) NULL,
    [CustomerPrimaryExtID]   [nvarchar] (400) NULL, 
    [RedemptionCount]        [int] NULL, 
    [RedemptionAmount]       [decimal] (12,3) NULL, 
    [TransDate]              [datetime] NULL,
    [TerminalNum]            [nvarchar](4) NULL,
    [TransNum]               [nvarchar] (128) NULL,
    [RptStatusFlag]          [int] NULL,
    [LogixTransNum]          [char](36) NOT NULL,
    [CustomerTypeID]         [int] NULL,
    [PartitionNumber] AS DATEPART(DAYOFYEAR,TransDate)/' + CAST(@DaysInPartition AS NVARCHAR(3)) + ' + 1 PERSISTED) ON [' + @Filegroup + ']'
  EXEC (@SQL)
END
GO

GRANT EXECUTE ON [dbo].[pt_Create_Partition_Truncation_Table] TO [Copient_Logix_uspRole] AS [dbo]
GO




print 'processing storedprocedures/dbo.pt_Create_Partition_View.StoredProcedure.sql'; 
--
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Create_Partition_View]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_Create_Partition_View]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_Create_Partition_View] 
      @TabName NVARCHAR(100)
    , @FirstViewPartition INT
    , @LastViewPartition INT
AS
BEGIN
    /* $Id: dbo.pt_Create_Partition_View.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $ */


  DECLARE @SQL NVARCHAR(3000);
  DECLARE @SQL1 NVARCHAR(1000);
  
  IF @TabName = 'TransHist'
  BEGIN
    SET @SQL = 'IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N''[dbo].[TransHistory]'')) 
        DROP VIEW [dbo].[TransHistory];'
    EXEC (@SQL)

    SET @SQL = 'CREATE VIEW [dbo].[TransHistory] AS
      SELECT LogixTransNum, CustomerPrimaryExtID, CustomerTypeID, ExtLocationCode, TransDate, TerminalNum, POSTransNum
        , PresentedCustomerID , PresentedCardTypeID , HHID               
      FROM TransHist WITH (NoLock)
    ';
    
    IF @FirstViewPartition < @LastViewPartition 
        SET @SQL1 = 
            'WHERE $Partition.TransHistFunction(PartitionNumber) >= ' + CAST(@FirstViewPartition AS NVARCHAR(3)) 
                + ' AND $Partition.TransHistFunction(PartitionNumber) <= ' + CAST(@LastViewPartition AS NVARCHAR(3));
    ELSE
        SET @SQL1 = 
            'WHERE $Partition.TransHistFunction(PartitionNumber) >= ' + CAST(@FirstViewPartition AS NVARCHAR(3)) 
                + ' OR $Partition.TransHistFunction(PartitionNumber) <= ' + CAST(@LastViewPartition AS NVARCHAR(3));
    SET @SQL = @SQL + @SQL1
    --print @SQL
    EXEC (@SQL)
  END -- IF @TabName = 'TransHist'
END -- CREATE PROCEDURE
GO
GRANT EXECUTE ON [dbo].[pt_Create_Partition_View] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Drop_Table_Statistics.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_Drop_Table_Statistics.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_Drop_Table_Statistics]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Drop_Table_Statistics]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Drop_Table_Statistics]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Drop_Table_Statistics]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_Drop_Table_Statistics] @Table NVARCHAR(200)
AS
  DECLARE TableStats CURSOR FOR
  SELECT Name FROM sys.stats
  WHERE object_id = object_id(@Table) AND auto_created <> 0 
  DECLARE @StatName NVARCHAR(512)

  OPEN TableStats

  FETCH next FROM TableStats INTO @StatName

  WHILE @@FETCH_STATUS = 0
  BEGIN
    EXEC (''drop statistics ''+@Table+''.'' + @StatName)
    FETCH NEXT FROM TableStats INTO @StatName
  END

  CLOSE TableStats
  DEALLOCATE TableStats
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_Drop_Table_Statistics] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_InsertData_TransHistory.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_InsertData_TransHistory]    Script Date: 2/29/2012 13:38:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_InsertData_TransHistory]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_InsertData_TransHistory]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_InsertData_TransHistory]
  @LogixTransNum varchar(36),
  @CustomerPrimaryExtID nvarchar(400),
  @CustomerTypeID int,
  @ExtLocationCode nvarchar(20),
  @TransDate datetime,
  @TerminalNum nvarchar(4), 
  @POSTransNum nvarchar(128),
  @PresentedCustomerID nvarchar(400),
  @PresentedCardTypeID int,
  @HHID nvarchar(400),
  @Replayed int,
  @POSTimeStamp datetime,
  @TransTotal decimal(11,3)
AS 
    -- $Id: dbo.pt_InsertData_TransHistory.StoredProcedure.sql 39631 2011-11-04 21:41:07Z nathan $
    -- Build Version: 7.3.1.138972

	  SET NOCOUNT ON;
	Begin Try
	  Declare @LogixTransNumCount int;
	  Set @LogixTransNumCount = 0;
	  select @LogixTransNumCount=COUNT(LogixTransNum) from [dbo].[TransHist] where LogixTransNum=@LogixTransNum;
	  if @LogixTransNumCount > 0
	  Begin
		RaisError('LogixTransNum (%s) already exists in the TransHist table.', -- Message
				  18, --Severity
				  1, --State
				  @LogixTransNum
				  );
		Return;
	  End
	  insert into TransHist
		([LogixTransNum]
		,[CustomerPrimaryExtID]
		,[CustomerTypeID]
		,[ExtLocationCode]
		,[TransDate]
		,[TerminalNum]
		,[POSTransNum]
		,[PresentedCustomerID]
		,[PresentedCardTypeID]
		,[HHID]
		,[Replayed]
		,[POSTimeStamp]
		,[TransTotal])
	  values
		(@LogixTransNum
		,@CustomerPrimaryExtID
		,@CustomerTypeID
		,@ExtLocationCode
		,@TransDate
		,@TerminalNum
		,@POSTransNum
		,@PresentedCustomerID
		,@PresentedCardTypeID
		,@HHID
		,@Replayed
		,@POSTimeStamp
		,@TransTotal);
	End Try
	Begin Catch
		Declare @ErrorMessage nvarchar(4000);
		Declare @ErrorSeverity int;
		Declare @ErrorState int;
		
		Select 
			@ErrorMessage = ERROR_MESSAGE(),
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();
			
		RaisError(@ErrorMessage, --Message text
				  @ErrorSeverity, --Severity
				  @ErrorState --State
				  );
	End Catch;
GO
GRANT EXECUTE ON [dbo].[pt_InsertData_TransHistory] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_InsertData_TransRedemption.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_InsertData_TransRedemption]    Script Date: 2/29/2012 13:39:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_InsertData_TransRedemption]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_InsertData_TransRedemption]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_InsertData_TransRedemption]
  @OfferID bigint,
  @ExtLocationCode nvarchar(20),
  @CustomerPrimaryExtID nvarchar(400),
  @RedemptionCount int,
  @RedemptionAmount decimal(12,3),
  @TransDate datetime,
  @TerminalNum nvarchar(4),
  @TransNum nvarchar(128), 
  @LogixTransNum varchar(36),
  @CustomerTypeID int,
  @PresentedCustomerID nvarchar(400),
  @PresentedCardTypeID int,
  @HHID nvarchar(400),
  @Replayed int,
  @SVAmount decimal(12,3),
  @SVProgramID int,
  @PointsAmount bigint,
  @PointsProgramID int,
  @POSTimeStamp datetime
AS 
    -- $Id: dbo.pt_InsertData_TransRedemption.StoredProcedure.sql 39631 2011-11-04 21:41:07Z nathan $
    -- Build Version: 7.3.1.138972

	  SET NOCOUNT ON;
	Begin Try
	  Declare @LogixTransNumCount int;
	  Set @LogixTransNumCount = 0;
	  select @LogixTransNumCount=COUNT(LogixTransNum) from [dbo].[TransHist] where LogixTransNum=@LogixTransNum;
	  if @LogixTransNumCount = 0
	  Begin
		RaisError('LogixTransNum (%s) does not exist in the TransHist table.', -- Message
				  18, --Severity
				  1, --State
				  @LogixTransNum
				  );
		Return;
	  End
	  insert into TransRedemption
		([OfferID]
		,[ExtLocationCode]
		,[CustomerPrimaryExtID]
		,[RedemptionCount]
		,[RedemptionAmount]
		,[TransDate]
		,[TerminalNum]
	    ,[TransNum]
	    ,[LogixTransNum]
		,[CustomerTypeID]
		,[PresentedCustomerID]
		,[PresentedCardTypeID]
		,[HHID]
		,[Replayed]
		,[SVAmount]
		,[SVProgramID]
		,[PointsAmount]
		,[PointsProgramID]
		,[POSTimeStamp])
	  values
		(@OfferID
		,@ExtLocationCode
		,@CustomerPrimaryExtID
		,@RedemptionCount
		,@RedemptionAmount
		,@TransDate
		,@TerminalNum
		,@TransNum
		,@LogixTransNum
		,@CustomerTypeID
		,@PresentedCustomerID
		,@PresentedCardTypeID
		,@HHID
		,@Replayed
		,@SVAmount
		,@SVProgramID
		,@PointsAmount
		,@PointsProgramID
		,@POSTimeStamp);
	End Try
	Begin Catch
		Declare @ErrorMessage nvarchar(4000);
		Declare @ErrorSeverity int;
		Declare @ErrorState int;
		
		Select 
			@ErrorMessage = ERROR_MESSAGE(),
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();
			
		RaisError(@ErrorMessage, --Message text
				  @ErrorSeverity, --Severity
				  @ErrorState --State
				  );
	End Catch;
GO

GRANT EXECUTE ON [dbo].[pt_InsertData_TransRedemption] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_OfferReporting_Delete_by_OfferID.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_OfferReporting_Delete_by_OfferID.StoredProcedure.sql 120292 2018-02-07 05:14:46Z kn250067 $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_OfferReporting_Delete_by_OfferID]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_OfferReporting_Delete_by_OfferID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_OfferReporting_Delete_by_OfferID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_OfferReporting_Delete_by_OfferID]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[pt_OfferReporting_Delete_by_OfferID] @OfferID bigint, @NumDeleted int OUTPUT, @RunAgain int OUTPUT
AS 
  -- This procedure deletes all of the OfferReporting records for the specified OfferID
  set nocount on
  set @RunAgain=1;
  --set rowcount 1800;  -- only delete 1800 records at a time
  Delete TOP (1800) from OfferReporting with (RowLock) where OfferID=@OfferID;

  set @NumDeleted=@@RowCount;
  if @NumDeleted=0 begin  -- stop processing when there are no rows left
    set @RunAgain=0;
  end
  --set rowcount 0
' 
END
GO
GRANT EXECUTE ON [dbo].[pt_OfferReporting_Delete_by_OfferID] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_PartitionNumber_AtOrdinal8.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_PartitionNumber_AtOrdinal8.StoredProcedure.sql 34398 2011-07-21 21:54:43Z josh $
-- Build Version: 7.3.1.138972
/****** Object:  StoredProcedure [dbo].[pt_PartitionNumber_AtOrdinal8]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_PartitionNumber_AtOrdinal8]') AND type in (N'P', N'PC'))
    DROP PROCEDURE [dbo].[pt_PartitionNumber_AtOrdinal8]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[pt_PartitionNumber_AtOrdinal8] @Exists int OUTPUT
AS 
    SELECT TOP 1 @Exists=COUNT(*) 
        FROM information_schema.columns WITH(NoLock) 
        WHERE table_name = 'TransHist' 
        AND column_name = 'PartitionNumber' 
        AND ordinal_position = 8;
GO

GRANT EXECUTE ON [dbo].[pt_PartitionNumber_AtOrdinal8] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_ThirdPartyTransTable_Insert.StoredProcedure.sql'; 
--
GO


/****** Object:  StoredProcedure [dbo].[pt_ThirdPartyTransactions_Insert]    Script Date: 03/08/2012 15:13:13 ******/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_ThirdPartyTransTable_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_ThirdPartyTransTable_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_ThirdPartyTransTable_Insert]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'Create PROCEDURE [dbo].[pt_ThirdPartyTransTable_Insert]   @ExtCardID nvarchar(400),@CardType int,
																								@HHID nvarchar(400), @TransactionNumber nvarchar(128),                                                                                                
                                                                                                @SiteID nvarchar(20),@DiscountAmount decimal(12,3),
                                                                                                @postimestamp nvarchar(12), @POSDateTime datetime,
                                                                                                @TerminalNum nvarchar(12), @OfferID bigint,
                                                                                                @SVProgramID int, @SVProgramQuantity int    
AS    
   SET NOCOUNT ON;      
    
  Declare @LogixTransNum nvarchar(200)  
   
  --Generate LogixtransNum
  Set @LogixTransNum = @SiteID + @TransactionNumber + @postimestamp
  
      
  Insert Into ThirdPartyTransHist  with (RowLock) (LogixTransNum,CustomerPrimaryExtID,CustomerTypeID,ExtLocationCode,TransDate,TerminalNum,POSTransNum,PresentedCustomerID,PresentedCardTypeID,HHID,POSTimeStamp,TransTotal)
    values (@LogixTransNum, @ExtCardID, @CardType, @SiteID, @POSDateTime, @TerminalNum, @TransactionNumber, @ExtCardID, @CardType, @HHID, @POSDateTime, @DiscountAmount);    
    
  Insert Into ThirdPartyTransRedemption with (RowLock) (OfferID,ExtLocationCode,CustomerPrimaryExtID,RedemptionCount,RedemptionAmount,TransDate,TerminalNum,TransNum,RptStatusFlag,LogixTransNum,CustomerTypeID,PresentedCustomerID, PresentedCardTypeID, HHID, Replayed, SVAmount, SVProgramID, PointsAmount, PointsProgramID, POSTimeStamp)
  values (@OfferID, @SiteID, @ExtCardID, 1, @DiscountAmount, @POSDateTime, @TerminalNum, @TransactionNumber, 0, @LogixTransNum, @CardType, @ExtCardID, @CardType, @HHID, 0, @SVProgramQuantity, @SVProgramID, 0, 0, @POSDateTime)    

' 
END
GO
GRANT EXECUTE ON [dbo].[pt_ThirdPartyTransTable_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCouponHistory_ByCouponCode.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCouponHistory_ByCouponCode.sql 2013-10-21 $
-- Build Version: 7.3.1.138972
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCouponHistory_ByCouponCode]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_TrackableCouponHistory_ByCouponCode]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_TrackableCouponHistory_ByCouponCode] 
	@CouponCode		varchar(150) 
AS
BEGIN
	SELECT * FROM TrackableCouponsHistory WHERE CouponCode  = @CouponCode
	ORDER BY CreationDate DESC
	--- JG185197 - I removed CouponID column because it is not needed and because it is requires extra SELECT in TrackableCoupons table
END
GO
GRANT EXECUTE ON [dbo].[pt_TrackableCouponHistory_ByCouponCode] TO [Copient_Logix_uspRole] AS [dbo]
GO

print 'processing storedprocedures/dbo.pt_TrackableCouponsHistory_Insert.StoredProcedure.sql'; 
--
GO
-- $Id: dbo.pt_TrackableCouponsHistory_Insert.StoredProcedure.sql 79094 2014-05-28 18:40:03Z mv250132 $
-- Build Version: 7.3.1.138972

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TrackableCouponsHistory_Insert]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TrackableCouponsHistory_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TrackableCouponsHistory_Insert]
  @CouponCode         VARCHAR(150),
  @Type               TINYINT,
  @TransStatus        TINYINT,
  @CouponsUsed        TINYINT,
  @CustomerPK         BIGINT,
  @LocationID         BIGINT,
  @LogixTransNum      VARCHAR(36)       
AS 
  -- This stored procedure inserts trackable coupon transaction into TrackableCouponsHistory table.

  SET NOCOUNT ON;
 
  INSERT INTO 
    TrackableCouponsHistory
           (CouponCode
           ,Type
           ,TransStatus
           ,CouponsUsed
           ,CustomerPK
           ,LocationID
           ,LogixTransNum
           ,CreationDate)
  VALUES
           (@CouponCode
           ,@Type
           ,@TransStatus
           ,@CouponsUsed
           ,@CustomerPK
           ,@LocationID
           ,@LogixTransNum
           ,GETDATE())
GO

GRANT EXECUTE ON [dbo].[pt_TrackableCouponsHistory_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TransHistory_Insert.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_TransHistory_Insert]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TransHistory_Insert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TransHistory_Insert]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TransHistory_Insert]
  @LogixTransNum varchar(36),
  @CustomerPrimaryExtID nvarchar(400),
  @CustomerTypeID int,
  @ExtLocationCode nvarchar(20),
  @TransDate datetime,
  @TerminalNum nvarchar(4), 
  @POSTransNum nvarchar(128) 
AS 
    -- $Id: dbo.pt_TransHistory_Insert.StoredProcedure.sql 113767 2017-06-21 08:40:46Z ss251194 $
    -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;

  insert into TransHist
    ([LogixTransNum]
    ,[CustomerPrimaryExtID]
    ,[CustomerTypeID]
    ,[ExtLocationCode]
    ,[TransDate]
    ,[TerminalNum]
    ,[POSTransNum])
  values
    (@LogixTransNum
    ,@CustomerPrimaryExtID
    ,@CustomerTypeID
    ,@ExtLocationCode
    ,@TransDate
    ,@TerminalNum
    ,@POSTransNum);

GO
GRANT EXECUTE ON [dbo].[pt_TransHistory_Insert] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_TransHistory_Insert_Duplicate_Check.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_TransHistory_Insert_Duplicate_Check]    Script Date: 12/27/2010 16:10:45 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_TransHistory_Insert_Duplicate_Check]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_TransHistory_Insert_Duplicate_Check]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_TransHistory_Insert_Duplicate_Check]
  @LogixTransNum varchar(36),
  @CustomerPrimaryExtID nvarchar(400),
  @CustomerTypeID int,
  @ExtLocationCode nvarchar(20),
  @TransDate datetime,
  @TerminalNum nvarchar(4), 
  @POSTransNum nvarchar(128),
  @IsDuplicate bit output 
AS 
    -- $Id: dbo.pt_TransHistory_Insert_Duplicate_Check.StoredProcedure.sql 53801 2012-08-15 01:23:48Z mp250205 $
    -- Build Version: 7.3.1.138972

  SET NOCOUNT ON;
  
  select CustomerTypeID from TransHist with (NoLock) where LogixTransNum=@LogixTransNum;
  
  if @@ROWCOUNT > 0 begin
    set @IsDuplicate = 1;
  end else begin
    insert into TransHist
      ([LogixTransNum]
      ,[CustomerPrimaryExtID]
      ,[CustomerTypeID]
      ,[ExtLocationCode]
      ,[TransDate]
      ,[TerminalNum]
      ,[POSTransNum])
    values
      (@LogixTransNum
      ,@CustomerPrimaryExtID
      ,@CustomerTypeID
      ,@ExtLocationCode
      ,@TransDate
      ,@TerminalNum
      ,@POSTransNum);
    set @IsDuplicate = 0;
  end

GO
GRANT EXECUTE ON [dbo].[pt_TransHistory_Insert_Duplicate_Check] TO [Copient_Logix_uspRole] AS [dbo]
GO


print 'processing storedprocedures/dbo.pt_Truncate_Partition.StoredProcedure.sql'; 
--
GO
/****** Object:  StoredProcedure [dbo].[pt_Truncate_Partition]    Script Date: 11/09/2011 14:01:04 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Truncate_Partition]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[pt_Truncate_Partition]
GO

/****** Object:  StoredProcedure [dbo].[pt_Truncate_Partition]    Script Date: 11/09/2011 14:01:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[pt_Truncate_Partition] 
    @SchemaName         VARCHAR(20),
    @TabName            VARCHAR(100), 
    @PartitionNo        INT, 
    @DaysInPartition    INT, 
    @DaysToKeepHistory  INT, 
    @NumberOfPartitions INT
AS
BEGIN 


-- Build Version: 7.3.1.138972
-- $Id: dbo.pt_Truncate_Partition.StoredProcedure.sql 125872 2018-07-04 06:34:01Z kb250202 $ 

  SET NOCOUNT ON

  /* Step1- Start identify file group of partition to be truncated*/
  Declare @Filegroup nvarchar(50)
  SELECT @Filegroup=CASE WHEN fg.name IS NULL THEN ds.name ELSE fg.name END 
  FROM sys.dm_db_partition_stats p INNER JOIN sys.indexes i ON i.OBJECT_ID = p.OBJECT_ID AND i.index_id = p.index_id
  INNER JOIN sys.data_spaces ds ON ds.data_space_id = i.data_space_id LEFT OUTER JOIN sys.partition_schemes ps ON ps.data_space_id = i.data_space_id
  LEFT OUTER JOIN sys.destination_data_spaces dds ON dds.partition_scheme_id = ps.data_space_id AND dds.destination_id = p.partition_number 
  LEFT OUTER JOIN sys.filegroups fg ON fg.data_space_id = dds.data_space_id LEFT OUTER JOIN sys.partition_range_values prv_right ON prv_right.function_id = ps.function_id AND prv_right.boundary_id = p.partition_number
  LEFT OUTER JOIN sys.partition_range_values prv_left ON prv_left.function_id = ps.function_id AND prv_left.boundary_id = p.partition_number - 1
  WHERE OBJECTPROPERTY(p.OBJECT_ID, 'ISMSSHipped') = 0 AND p.index_id IN (0,1) AND OBJECT_NAME(p.OBJECT_ID)=@TabName AND p.partition_number=@PartitionNo 

  
  /* end identify file group of partition to be truncated*/

  /* Step-2 start create staging table*/
  DECLARE @PkIndex VARCHAR(200)
  DECLARE @CreateTab VARCHAR(8000)
  -- Modify the [pt_Create_Partition_Truncation_Table] stored procedure to add new partition tables.
  EXEC [dbo].[pt_Create_Partition_Truncation_Table] @SchemaName, @TabName, @PartitionNo, @DaysInPartition, @Filegroup
  /* End create staging table*/

  --STEP 2.5 
  -- Added functionality to the script of source partitioned table/ partition is compressed.
  /* Removed because Compression doesn't exist in 2005
  DECLARE @IsCompressed int
  DECLARE @CompressionType varchar(10)
  DECLARE @altStatement varchar(1000)
  SELECT @IsCompressed=data_compression,@CompressionType=data_compression_desc 
  FROM sys.PARTITIONS where object_id=OBJECT_ID(@SchemaName+'.'+@TabName) and partition_number=@PartitionNo and index_id=0

  If @IsCompressed=1
  BEGIN
  select @altStatement = 'ALTER TABLE '+@SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)+' REBUILD PARTITION = ALL WITH (DATA_COMPRESSION = '+@CompressionType+')'
  exec (@altStatement)
  END
  */

  /*Step3-start add PK */
  DECLARE @Pk_available INT
  DECLARE @CI_available INT
  DECLARE @I_available INT

  SET @Pk_available = 0
  SET @CI_available = 0
  SET @I_available = 0

  SELECT @Pk_available =(SELECT 1 FROM sys.objects a inner join sys.indexes b ON a.object_id=b.object_id 
    WHERE a.object_id =OBJECT_ID(@SchemaName+'.'+@TabName) and (b.is_primary_key=1 AND b.index_id=1))
  SELECT @CI_available =(SELECT 1 FROM sys.objects a inner join sys.indexes b ON a.object_id=b.object_id 
    WHERE a.object_id =OBJECT_ID(@SchemaName+'.'+@TabName) and (b.is_primary_key=0 AND b.index_id=1))
  SELECT @I_available =(SELECT COUNT(1) FROM sys.objects a inner join sys.indexes b ON a.object_id=b.object_id 
    WHERE a.object_id =OBJECT_ID(@SchemaName+'.'+@TabName) AND b.index_id>1)

  IF @Pk_available is null
    SET @Pk_available=0;

  IF @CI_available is null
    SET @CI_available=0;
    
  ------

  IF (@Pk_available='1' or @CI_available='1')
  BEGIN
    DECLARE @TAB_ID1 int
    SELECT @TAB_ID1= OBJECT_ID(@SchemaName+'.'+@TabName) 
    DECLARE @pkInfo table (SCHEMANAME VARCHAR(20),table_name varchar(100), pk_name varchar(100),columnName varchar(100), asckey char(1),IsUnique char(1))
    INSERT INTO @pkInfo 
    (SCHEMANAME, table_name,pk_name,columnName,asckey,IsUnique)
    SELECT SCHEMANAME=@SchemaName, B.NAME TABLE_NAME, PK_NAME=(SELECT a.name PK_NAME FROM sys.indexes a 
    WHERE A.OBJECT_ID=B.OBJECT_ID AND A.index_id=1),
    COLUMN_NAME=(SELECT name FROM sys.columns E WHERE E.OBJECT_ID=B.object_id AND E.column_id=D.column_id),
    D.is_descending_key, C.is_unique
    FROM SYS.OBJECTS B INNER JOIN sys.INDEXES C ON B.object_id=C.object_id INNER JOIN sys.index_columns D ON B.object_id=D.object_id 
    WHERE B.TYPE='U' AND (C.index_id=1) AND B.object_id=@TAB_ID1

    DECLARE @alterstatement VARCHAR(8000) 
    DECLARE @Pkname VARCHAR(100),@columns VARCHAR(4000)

    SELECT @Pkname=pk_name FROM @pkInfo

    DECLARE @ALLcolumns TABLE (idcol1 INT IDENTITY,colname VARCHAR(100))
    INSERT INTO @ALLcolumns (colname)SELECT columnName FROM @pkInfo
    DECLARE @cnt INT
    DECLARE @clncnt INT
    SELECT @cnt=1
    SELECT @clncnt=COUNT(*) FROM @ALLcolumns
    DECLARE @cols VARCHAR(400)
    SELECT @cols=''
    WHILE @clncnt>=@cnt
    BEGIN
      SELECT @cols=@cols+','+ colname FROM @ALLcolumns WHERE idcol1=@cnt
      SELECT @cnt=@cnt+1
    END 
    SELECT @columns=SUBSTRING(@cols,2,len(@cols))
  END 

  IF @Pk_available='1'
  SELECT @alterstatement='ALTER TABLE '+@SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)+ 
    ' ADD CONSTRAINT '+@Pkname+CONVERT(varchar(5),@PartitionNo)+' PRIMARY KEY CLUSTERED ('+@columns+')'
  /*end add PK */

  /*Step4- Start Move table to File group of Partition Table */
  IF (@Pk_available='1' )
  BEGIN
   SELECT @alterstatement ='ALTER TABLE '+@SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)+ 
    ' DROP CONSTRAINT '+@Pkname+CONVERT(varchar(5),@PartitionNo)+' WITH (MOVE TO ['+@filegroup+'])'
   EXEC (@alterstatement)
  END

  /* Removed because of issues with no primary key.  Add back if there is a primary key.
  IF (@Pk_available<>'1' )
  BEGIN
   SELECT @alterstatement ='ALTER TABLE '+@SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)+ 
    ' DROP CONSTRAINT PK_'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo) +' WITH (MOVE TO ['+@filegroup+'])'
   EXEC (@alterstatement)
  END */

  /*Step5- Create clustered index of staging table if it is there on source partitioned table to make the schema equal */
  IF (@CI_available='1' ) 
  BEGIN
   DECLARE @IsUnique char(1) 
   SELECT @IsUnique= IsUnique from @pkInfo
   IF @CI_available='1' AND @IsUnique='1'
   SELECT @alterstatement='CREATE UNIQUE CLUSTERED INDEX '+@Pkname+CONVERT(varchar(5),@PartitionNo)+' ON '+ @SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)+ ' ( '+@columns+')'
   IF @CI_available='1' AND @IsUnique='0' 
   SELECT @alterstatement='CREATE CLUSTERED INDEX '+@Pkname+CONVERT(varchar(5),@PartitionNo)+' ON '+ @SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)+ ' ( '+@columns+')'

   EXEC (@alterstatement)
  END

  -- Creates NON CLUSTERED Indexes
  IF @I_available > 1
  BEGIN
    -- Remove any statistics that belong to the table before creating the NON CLUSTERED Indexes
    EXEC [dbo].[pt_Drop_Table_Statistics] @TabName
    
    DECLARE 
        @i         INT
      , @FieldName NVARCHAR(26)
      , @IndexName NVARCHAR(50)
    
    SET @i = 1
    
    WHILE @i <= @I_available
    BEGIN
      SELECT
        @FieldName = c.name, @IndexName = i.name
      FROM sys.sysobjects AS o INNER JOIN
                         sys.syscolumns AS c ON o.id = c.id INNER JOIN
                         sys.sysindexes AS i ON o.id = i.id INNER JOIN
                         sys.syscolumns AS c1 ON i.keycnt = c1.colid AND o.id = c1.id
      WHERE o.status >= 0 AND c.name = index_col (o.name,i.indid, c1.colid) 
        AND (i.status  & 0x60) <> 0x60 AND OBJECT_NAME(o.id)=@TabName  AND i.indid = @i+1

      SELECT @alterstatement = 
        'IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'''+@SCHEMANAME+'.'+@TabName+''') AND name = N'''+@IndexName 
            +''') CREATE NONCLUSTERED INDEX ['+@IndexName+'] ON '+@SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)+'(['+@FieldName+']) INCLUDE(PartitionNumber)'
      EXEC (@alterstatement)

      
      SET @i = @i + 1
    END
  END

  --Step6 - switch partition
  SELECT @alterstatement = 
    'alter table '+@SCHEMANAME+'.'+@TabName+' switch partition '+CONVERT(varchar(5),@PartitionNo)+' to '+@SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)
  EXEC (@alterstatement)

  --Step7 drop staging table 
  SELECT @alterstatement = 
    'drop table '+@SCHEMANAME+'.'+@TabName+'_'+CONVERT(varchar(5),@PartitionNo)
  EXEC (@alterstatement)
END

GO




print 'processing storedprocedures/dbo.pt_Validate_Partition_Table.StoredProcedure.sql'; 
--
GO

-- This procedure was created to check to see if a partition needs to be truncated.
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[pt_Validate_Partition_Table]') AND type in (N'P', N'PC'))
  DROP PROCEDURE [dbo].[pt_Validate_Partition_Table]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[pt_Validate_Partition_Table] @NumberOfPartitions INT, @DaysInPartition INT, @DaysToKeepHistory INT, @DaysToKeepPartition INT, @TableName NVARCHAR(50)
WITH EXECUTE AS OWNER
AS
BEGIN
    /* $Id: dbo.pt_Validate_Partition_Table.StoredProcedure.sql 32583 2011-06-16 20:22:15Z rob $ */


  DECLARE @TodaysPartition INT;
  DECLARE @TommorrowsPartition INT;
  DECLARE @FirstViewPartition INT;
  DECLARE @LastViewPartition INT;
  DECLARE @FirstTruncatePartition INT;
  DECLARE @LastTruncatePartition INT;

  SET @TodaysPartition = (DATEPART(DAYOFYEAR, GETDATE())/@DaysInPartition)+1;
  SET @TommorrowsPartition = (DATEPART(DAYOFYEAR, (GETDATE()+1))/@DaysInPartition)+1;
  
  IF @TodaysPartition <> @TommorrowsPartition
  BEGIN

    /* Calculate the first view partition; 
    The first truncate partition is one before the first view partition */

    SET @FirstViewPartition = ( DATEPART( DAYOFYEAR, ( GETDATE() - @DaysToKeepHistory ) ) / @DaysInPartition ) + 1; 
 
    IF @FirstViewPartition <= 0
      SET @FirstViewPartition = @NumberOfPartitions;

    SET @FirstTruncatePartition = @FirstViewPartition - 1;
 
    IF @FirstTruncatePartition <= 0
      SET @FirstTruncatePartition = @NumberOfPartitions;

    /* Calculate the last view partition (it was before TruncatedPartition); 
    The last truncate partition is the same as the last view partition */

    SET @LastViewPartition = (@DaysInPartition * (@TodaysPartition + 1)) - @DaysToKeepPartition;

    IF @LastViewPartition <= 0
      SET @LastViewPartition = (@DaysInPartition * @NumberOfPartitions) + @LastViewPartition;
    
    SET @LastViewPartition = @LastViewPartition / @DaysInPartition - 1;
    IF @LastViewPartition = 0
      SET @LastViewPartition = (@DaysInPartition * @NumberOfPartitions) / @DaysInPartition;

    SET @LastTruncatePartition = @LastViewPartition;
    
    /* Truncate the first and last partition only; Create view */

    BEGIN TRY
      EXEC [dbo].[pt_Truncate_Partition] 'dbo', @TableName, @FirstTruncatePartition, @DaysInPartition, @DaysToKeepHistory, @NumberOfPartitions;
      EXEC [dbo].[pt_Truncate_Partition] 'dbo', @TableName, @LastTruncatePartition, @DaysInPartition, @DaysToKeepHistory, @NumberOfPartitions;
      EXEC [dbo].[pt_Create_Partition_View] @TableName, @FirstViewPartition, @LastViewPartition;
    END TRY
    BEGIN CATCH
      DECLARE @ErrorMessage NVARCHAR(4000);
      DECLARE @ErrorSeverity INT;
      DECLARE @ErrorState INT;
      SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();
      RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
  END
END
GO
GRANT EXECUTE ON [dbo].[pt_Validate_Partition_Table] TO [Copient_Logix_uspRole] AS [dbo]
GO



-- BEGIN SCRIPT FOOTER ------------------------------------------------------

-- Add/Update the DBVersion function
IF OBJECT_ID ( N'dbo.DBVersion', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[DBVersion]
END
GO

CREATE FUNCTION [dbo].[DBVersion]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:45
    -- Build Version: 7.3.1.138972
    return '7.3.1.138972';
END
GO

GRANT EXECUTE ON [dbo].[DBVersion] TO [Copient_Logix_uspRole] AS [dbo]
GO


-- Add/Update the DBGenerated function
IF OBJECT_ID ( N'dbo.DBGenerated', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[DBGenerated]
END
GO

CREATE FUNCTION [dbo].[DBGenerated]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:45
    -- Build Version: 7.3.1.138972
    return '2019-08-19 11:58:45';
END
GO

GRANT EXECUTE ON [dbo].[DBGenerated] TO [Copient_Logix_uspRole] AS [dbo]
GO





-- Add/Update the LogixDBName function
IF OBJECT_ID ( N'dbo.LogixDBName', N'FN') IS NOT NULL
BEGIN
    DROP FUNCTION [dbo].[LogixDBName]
END
GO

CREATE FUNCTION [dbo].[LogixDBName]() RETURNS nvarchar(64) AS
BEGIN
    -- $Id: sqlcat_db2.pl 63227 2013-03-12 02:03:44Z jf185081 $
    -- Generated 2019-08-19 11:58:45
    -- Build Version: 7.3.1.138972
    return 'LogixWH';
END
GO

GRANT EXECUTE ON [dbo].[LogixDBName] TO [Copient_Logix_uspRole] AS [dbo]
GO


-- *********************************************
-- * GRANT EXECUTE USP and UDF SECTION         *
-- *********************************************
declare @CLRole as varchar(128)
set @CLRole = 'Copient_Logix_uspRole' --- Replace this with an appropriated role if different. Copient_Logix_uspRole is the recommended name for Logix.
IF EXISTS (select name from sys.database_principals where type='R' and name=@CLRole) BEGIN
  declare @uspudfName as varchar(128)
  declare uspCursor CURSOR FOR
    select name from sys.procedures where name not like 'sp[_]%'
    union select name from sys.objects where type='FN' and name not like 'fn_%'
    order by name FOR READ ONLY
  OPEN uspCursor
  FETCH uspCursor INTO @uspudfName
  WHILE @@FETCH_STATUS = 0 BEGIN
    EXECUTE('GRANT EXECUTE ON [' + @uspudfName + '] TO ' + @CLRole)
    FETCH uspCursor INTO @uspudfName
  END
  CLOSE uspCursor
  DEALLOCATE uspCursor
END
ELSE
    print 'Please create "@CLRole", or assign the right role in your system to @CLRole variable';
GO

print 'Completed LogixWH'
print DB_NAME() + ' DBVersion is now ' + [dbo].[DBVersion]()
print CURRENT_TIMESTAMP;


